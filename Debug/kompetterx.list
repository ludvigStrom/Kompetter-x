
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d60  08009d60  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d68  08009d68  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08009d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e2c  20000208  08009f78  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001034  08009f78  00021034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135e4  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e4  00000000  00000000  0003381c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00036b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221fa  00000000  00000000  00038b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015df8  00000000  00000000  0005ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde16  00000000  00000000  00070b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  0012e968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087b0 	.word	0x080087b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	080087b0 	.word	0x080087b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	220e      	movs	r2, #14
 800058e:	216c      	movs	r1, #108	; 0x6c
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f001 fca9 	bl	8001ee8 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21a      	sxth	r2, r3
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fec5 	bl	8001344 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f8fb 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f9f5 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c2:	f000 f961 	bl	8000888 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005c6:	f000 f98d 	bl	80008e4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80005ca:	f007 f811 	bl	80075f0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80005ce:	f000 f9b7 	bl	8000940 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 80005d2:	2104      	movs	r1, #4
 80005d4:	4867      	ldr	r0, [pc, #412]	; (8000774 <main+0x1c4>)
 80005d6:	f001 fa2a 	bl	8001a2e <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	; 0x32
 80005dc:	f000 ff24 	bl	8001428 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 80005e0:	f000 fa56 	bl	8000a90 <SSD1306_Init>

  HAL_Delay(50);
 80005e4:	2032      	movs	r0, #50	; 0x32
 80005e6:	f000 ff1f 	bl	8001428 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fbb9 	bl	8000d64 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	4960      	ldr	r1, [pc, #384]	; (8000778 <main+0x1c8>)
 80005f6:	4861      	ldr	r0, [pc, #388]	; (800077c <main+0x1cc>)
 80005f8:	f000 fc4a 	bl	8000e90 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 80005fc:	2114      	movs	r1, #20
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fbb0 	bl	8000d64 <SSD1306_GotoXY>
  SSD1306_Puts ("v.01", &Font_7x10, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	495e      	ldr	r1, [pc, #376]	; (8000780 <main+0x1d0>)
 8000608:	485e      	ldr	r0, [pc, #376]	; (8000784 <main+0x1d4>)
 800060a:	f000 fc41 	bl	8000e90 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800060e:	f000 fb03 	bl	8000c18 <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 8000612:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000616:	f000 ff07 	bl	8001428 <HAL_Delay>

  SSD1306_Clear();
 800061a:	f000 fc5e 	bl	8000eda <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 800061e:	2104      	movs	r1, #4
 8000620:	4854      	ldr	r0, [pc, #336]	; (8000774 <main+0x1c4>)
 8000622:	f001 fa04 	bl	8001a2e <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 8000626:	211e      	movs	r1, #30
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fb9b 	bl	8000d64 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	4953      	ldr	r1, [pc, #332]	; (8000780 <main+0x1d0>)
 8000632:	4855      	ldr	r0, [pc, #340]	; (8000788 <main+0x1d8>)
 8000634:	f000 fc2c 	bl	8000e90 <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 8000638:	2128      	movs	r1, #40	; 0x28
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fb92 	bl	8000d64 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	494d      	ldr	r1, [pc, #308]	; (8000778 <main+0x1c8>)
 8000644:	4851      	ldr	r0, [pc, #324]	; (800078c <main+0x1dc>)
 8000646:	f000 fc23 	bl	8000e90 <SSD1306_Puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 800064a:	4851      	ldr	r0, [pc, #324]	; (8000790 <main+0x1e0>)
 800064c:	f7ff ff92 	bl	8000574 <AS5600_ReadAngle>
 8000650:	4603      	mov	r3, r0
 8000652:	81fb      	strh	r3, [r7, #14]

	//Convert the angle to a string
	char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

    //Convert to a string with leading spaces
    sprintf(angle_str, "%4u", angle);
 8000654:	89fa      	ldrh	r2, [r7, #14]
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	494e      	ldr	r1, [pc, #312]	; (8000794 <main+0x1e4>)
 800065c:	4618      	mov	r0, r3
 800065e:	f007 fc31 	bl	8007ec4 <siprintf>

	// Display the angle on the OLED display
	SSD1306_GotoXY (0,0);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb7d 	bl	8000d64 <SSD1306_GotoXY>
	SSD1306_Puts("Angle: ", &Font_7x10, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	4944      	ldr	r1, [pc, #272]	; (8000780 <main+0x1d0>)
 800066e:	484a      	ldr	r0, [pc, #296]	; (8000798 <main+0x1e8>)
 8000670:	f000 fc0e 	bl	8000e90 <SSD1306_Puts>
	SSD1306_GotoXY (0, 12);
 8000674:	210c      	movs	r1, #12
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fb74 	bl	8000d64 <SSD1306_GotoXY>
	SSD1306_Puts(angle_str, &Font_11x18, 1);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2201      	movs	r2, #1
 8000682:	493d      	ldr	r1, [pc, #244]	; (8000778 <main+0x1c8>)
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fc03 	bl	8000e90 <SSD1306_Puts>

	//debounce scan:
	// Variables to store the state and time of the last key press
	char last_key_str[3] = "";
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x1ec>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	713b      	strb	r3, [r7, #4]
 8000690:	1d7b      	adds	r3, r7, #5
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
	uint32_t last_key_time = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
	uint8_t last_key_state = GPIO_PIN_RESET; // Assume no key was pressed initially
 800069a:	2300      	movs	r3, #0
 800069c:	76fb      	strb	r3, [r7, #27]

	for(int i = 0; i < NUM_ROWS; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e061      	b.n	8000768 <main+0x1b8>
	{
	    // Set the current row to high
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 80006a4:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <main+0x1f0>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ac:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <main+0x1f4>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f001 f9a0 	bl	80019fc <HAL_GPIO_WritePin>

	    for(int j = 0; j < NUM_COLS; j++)
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	e040      	b.n	8000744 <main+0x194>
	    {
	        // Check if the current column is high
	        uint8_t key_state = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]);
 80006c2:	4a39      	ldr	r2, [pc, #228]	; (80007a8 <main+0x1f8>)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ca:	4938      	ldr	r1, [pc, #224]	; (80007ac <main+0x1fc>)
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4610      	mov	r0, r2
 80006d6:	f001 f979 	bl	80019cc <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	737b      	strb	r3, [r7, #13]

	        // If a key is pressed and the key state has changed and the debounce delay has passed
	        if(key_state == GPIO_PIN_SET && key_state != last_key_state && HAL_GetTick() - last_key_time > DEBOUNCE_DELAY)
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d12a      	bne.n	800073a <main+0x18a>
 80006e4:	7b7a      	ldrb	r2, [r7, #13]
 80006e6:	7efb      	ldrb	r3, [r7, #27]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d026      	beq.n	800073a <main+0x18a>
 80006ec:	f000 fe90 	bl	8001410 <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006fa:	d91e      	bls.n	800073a <main+0x18a>
	        {
	            // Format the key string
	            char key_str[3];
	            sprintf(key_str, "%d%d", i+1, j+1);
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	4638      	mov	r0, r7
 8000706:	492a      	ldr	r1, [pc, #168]	; (80007b0 <main+0x200>)
 8000708:	f007 fbdc 	bl	8007ec4 <siprintf>

	            // Display the key on the OLED display
	            SSD1306_GotoXY(0, 40);
 800070c:	2128      	movs	r1, #40	; 0x28
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fb28 	bl	8000d64 <SSD1306_GotoXY>
	            SSD1306_Puts(key_str, &Font_11x18, 1);
 8000714:	463b      	mov	r3, r7
 8000716:	2201      	movs	r2, #1
 8000718:	4917      	ldr	r1, [pc, #92]	; (8000778 <main+0x1c8>)
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fbb8 	bl	8000e90 <SSD1306_Puts>

	            // Store the current state and time
	            strcpy(last_key_str, key_str);
 8000720:	463a      	mov	r2, r7
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f007 fbec 	bl	8007f04 <strcpy>
	            last_key_time = HAL_GetTick();
 800072c:	f000 fe70 	bl	8001410 <HAL_GetTick>
 8000730:	61f8      	str	r0, [r7, #28]

	            // Light up led:
	            HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000732:	2104      	movs	r1, #4
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <main+0x1c4>)
 8000736:	f001 f97a 	bl	8001a2e <HAL_GPIO_TogglePin>
	        }
	        last_key_state = key_state;
 800073a:	7b7b      	ldrb	r3, [r7, #13]
 800073c:	76fb      	strb	r3, [r7, #27]
	    for(int j = 0; j < NUM_COLS; j++)
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	3301      	adds	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b03      	cmp	r3, #3
 8000748:	ddbb      	ble.n	80006c2 <main+0x112>
	    }

	    // Set the current row back to low
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <main+0x1f0>)
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <main+0x1f4>)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	f001 f94d 	bl	80019fc <HAL_GPIO_WritePin>
	for(int i = 0; i < NUM_ROWS; i++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b03      	cmp	r3, #3
 800076c:	dd9a      	ble.n	80006a4 <main+0xf4>

	//HAL_Delay(10);
	//Debounce scan END

  	// Update the OLED display
	SSD1306_UpdateScreen();
 800076e:	f000 fa53 	bl	8000c18 <SSD1306_UpdateScreen>
  {
 8000772:	e76a      	b.n	800064a <main+0x9a>
 8000774:	40020000 	.word	0x40020000
 8000778:	20000008 	.word	0x20000008
 800077c:	080087c8 	.word	0x080087c8
 8000780:	20000000 	.word	0x20000000
 8000784:	080087d4 	.word	0x080087d4
 8000788:	080087dc 	.word	0x080087dc
 800078c:	080087e4 	.word	0x080087e4
 8000790:	20000278 	.word	0x20000278
 8000794:	080087ec 	.word	0x080087ec
 8000798:	080087f0 	.word	0x080087f0
 800079c:	08008800 	.word	0x08008800
 80007a0:	20000010 	.word	0x20000010
 80007a4:	20000020 	.word	0x20000020
 80007a8:	20000028 	.word	0x20000028
 80007ac:	20000038 	.word	0x20000038
 80007b0:	080087f8 	.word	0x080087f8

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f007 fb76 	bl	8007eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000828:	23a8      	movs	r3, #168	; 0xa8
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fb5b 	bl	8003ef4 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000844:	f000 f91e 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2105      	movs	r1, #5
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fdbc 	bl	80043e4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000872:	f000 f907 	bl	8000a84 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f001 f8cd 	bl	8001a64 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f8d8 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000224 	.word	0x20000224
 80008dc:	40005400 	.word	0x40005400
 80008e0:	00061a80 	.word	0x00061a80

080008e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_I2C2_Init+0x50>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_I2C2_Init+0x54>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_I2C2_Init+0x50>)
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_I2C2_Init+0x58>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_I2C2_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_I2C2_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_I2C2_Init+0x50>)
 8000902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000906:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_I2C2_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_I2C2_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_I2C2_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_I2C2_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_I2C2_Init+0x50>)
 8000922:	f001 f89f 	bl	8001a64 <HAL_I2C_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800092c:	f000 f8aa 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000278 	.word	0x20000278
 8000938:	40005800 	.word	0x40005800
 800093c:	000186a0 	.word	0x000186a0

08000940 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000946:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <MX_SPI2_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_SPI2_Init+0x64>)
 800094c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_SPI2_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_SPI2_Init+0x64>)
 800096c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000970:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_SPI2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_SPI2_Init+0x64>)
 800098c:	220a      	movs	r2, #10
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_SPI2_Init+0x64>)
 8000992:	f003 ff31 	bl	80047f8 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 f872 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200002cc 	.word	0x200002cc
 80009a8:	40003800 	.word	0x40003800

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a2b      	ldr	r2, [pc, #172]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xcc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_GPIO_Init+0xcc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000a32:	2200      	movs	r2, #0
 8000a34:	21f4      	movs	r1, #244	; 0xf4
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_GPIO_Init+0xd0>)
 8000a38:	f000 ffe0 	bl	80019fc <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_GPIO_Init+0xd4>)
 8000a50:	f000 fe20 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000a54:	23f4      	movs	r3, #244	; 0xf4
 8000a56:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0xd0>)
 8000a6c:	f000 fe12 	bl	8001694 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020800 	.word	0x40020800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a96:	f000 fa29 	bl	8000eec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2178      	movs	r1, #120	; 0x78
 8000aa2:	485b      	ldr	r0, [pc, #364]	; (8000c10 <SSD1306_Init+0x180>)
 8000aa4:	f001 fc46 	bl	8002334 <HAL_I2C_IsDeviceReady>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e0a9      	b.n	8000c06 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000ab2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ab6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ab8:	e002      	b.n	8000ac0 <SSD1306_Init+0x30>
		p--;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f9      	bne.n	8000aba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ac6:	22ae      	movs	r2, #174	; 0xae
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2078      	movs	r0, #120	; 0x78
 8000acc:	f000 fa8a 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2078      	movs	r0, #120	; 0x78
 8000ad6:	f000 fa85 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ada:	2210      	movs	r2, #16
 8000adc:	2100      	movs	r1, #0
 8000ade:	2078      	movs	r0, #120	; 0x78
 8000ae0:	f000 fa80 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ae4:	22b0      	movs	r2, #176	; 0xb0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f000 fa7b 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000aee:	22c8      	movs	r2, #200	; 0xc8
 8000af0:	2100      	movs	r1, #0
 8000af2:	2078      	movs	r0, #120	; 0x78
 8000af4:	f000 fa76 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2078      	movs	r0, #120	; 0x78
 8000afe:	f000 fa71 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b02:	2210      	movs	r2, #16
 8000b04:	2100      	movs	r1, #0
 8000b06:	2078      	movs	r0, #120	; 0x78
 8000b08:	f000 fa6c 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2078      	movs	r0, #120	; 0x78
 8000b12:	f000 fa67 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b16:	2281      	movs	r2, #129	; 0x81
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2078      	movs	r0, #120	; 0x78
 8000b1c:	f000 fa62 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	2100      	movs	r1, #0
 8000b24:	2078      	movs	r0, #120	; 0x78
 8000b26:	f000 fa5d 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b2a:	22a1      	movs	r2, #161	; 0xa1
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2078      	movs	r0, #120	; 0x78
 8000b30:	f000 fa58 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b34:	22a6      	movs	r2, #166	; 0xa6
 8000b36:	2100      	movs	r1, #0
 8000b38:	2078      	movs	r0, #120	; 0x78
 8000b3a:	f000 fa53 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000b3e:	22a8      	movs	r2, #168	; 0xa8
 8000b40:	2100      	movs	r1, #0
 8000b42:	2078      	movs	r0, #120	; 0x78
 8000b44:	f000 fa4e 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000b48:	223f      	movs	r2, #63	; 0x3f
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2078      	movs	r0, #120	; 0x78
 8000b4e:	f000 fa49 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b52:	22a4      	movs	r2, #164	; 0xa4
 8000b54:	2100      	movs	r1, #0
 8000b56:	2078      	movs	r0, #120	; 0x78
 8000b58:	f000 fa44 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b5c:	22d3      	movs	r2, #211	; 0xd3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2078      	movs	r0, #120	; 0x78
 8000b62:	f000 fa3f 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	; 0x78
 8000b6c:	f000 fa3a 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b70:	22d5      	movs	r2, #213	; 0xd5
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	; 0x78
 8000b76:	f000 fa35 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b7a:	22f0      	movs	r2, #240	; 0xf0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 fa30 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b84:	22d9      	movs	r2, #217	; 0xd9
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 fa2b 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b8e:	2222      	movs	r2, #34	; 0x22
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 fa26 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b98:	22da      	movs	r2, #218	; 0xda
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f000 fa21 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ba2:	2212      	movs	r2, #18
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 fa1c 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000bac:	22db      	movs	r2, #219	; 0xdb
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 fa17 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 fa12 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bc0:	228d      	movs	r2, #141	; 0x8d
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f000 fa0d 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000bca:	2214      	movs	r2, #20
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 fa08 	bl	8000fe4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000bd4:	22af      	movs	r2, #175	; 0xaf
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 fa03 	bl	8000fe4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000bde:	222e      	movs	r2, #46	; 0x2e
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 f9fe 	bl	8000fe4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f843 	bl	8000c74 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000bee:	f000 f813 	bl	8000c18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SSD1306_Init+0x184>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SSD1306_Init+0x184>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SSD1306_Init+0x184>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000224 	.word	0x20000224
 8000c14:	20000724 	.word	0x20000724

08000c18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e01d      	b.n	8000c60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	3b50      	subs	r3, #80	; 0x50
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2078      	movs	r0, #120	; 0x78
 8000c30:	f000 f9d8 	bl	8000fe4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2078      	movs	r0, #120	; 0x78
 8000c3a:	f000 f9d3 	bl	8000fe4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c3e:	2210      	movs	r2, #16
 8000c40:	2100      	movs	r1, #0
 8000c42:	2078      	movs	r0, #120	; 0x78
 8000c44:	f000 f9ce 	bl	8000fe4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <SSD1306_UpdateScreen+0x58>)
 8000c4e:	441a      	add	r2, r3
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f000 f95f 	bl	8000f18 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d9de      	bls.n	8000c24 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000324 	.word	0x20000324

08000c74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <SSD1306_Fill+0x14>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <SSD1306_Fill+0x16>
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <SSD1306_Fill+0x2c>)
 8000c92:	f007 f90f 	bl	8007eb4 <memset>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000324 	.word	0x20000324

08000ca4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	70fb      	strb	r3, [r7, #3]
	if (
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cba:	d848      	bhi.n	8000d4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	d845      	bhi.n	8000d4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <SSD1306_DrawPixel+0xb8>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11a      	bne.n	8000d14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cde:	88fa      	ldrh	r2, [r7, #6]
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	01db      	lsls	r3, r3, #7
 8000cea:	4413      	add	r3, r2
 8000cec:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <SSD1306_DrawPixel+0xbc>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b259      	sxtb	r1, r3
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2c9      	uxtb	r1, r1
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <SSD1306_DrawPixel+0xbc>)
 8000d10:	54d1      	strb	r1, [r2, r3]
 8000d12:	e01d      	b.n	8000d50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	4413      	add	r3, r2
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <SSD1306_DrawPixel+0xbc>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b259      	sxtb	r1, r3
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	4603      	mov	r3, r0
 8000d42:	01db      	lsls	r3, r3, #7
 8000d44:	4413      	add	r3, r2
 8000d46:	b2c9      	uxtb	r1, r1
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SSD1306_DrawPixel+0xbc>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
 8000d4c:	e000      	b.n	8000d50 <SSD1306_DrawPixel+0xac>
		return;
 8000d4e:	bf00      	nop
	}
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000724 	.word	0x20000724
 8000d60:	20000324 	.word	0x20000324

08000d64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SSD1306_GotoXY+0x28>)
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <SSD1306_GotoXY+0x28>)
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	8053      	strh	r3, [r2, #2]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20000724 	.word	0x20000724

08000d90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
	if (
 8000dac:	2b7f      	cmp	r3, #127	; 0x7f
 8000dae:	dc07      	bgt.n	8000dc0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000db2:	885b      	ldrh	r3, [r3, #2]
 8000db4:	461a      	mov	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dbc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dbe:	dd01      	ble.n	8000dc4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e05e      	b.n	8000e82 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e04b      	b.n	8000e62 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	3b20      	subs	r3, #32
 8000dd2:	6839      	ldr	r1, [r7, #0]
 8000dd4:	7849      	ldrb	r1, [r1, #1]
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	440b      	add	r3, r1
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e030      	b.n	8000e50 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d010      	beq.n	8000e20 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e0c:	885a      	ldrh	r2, [r3, #2]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	79ba      	ldrb	r2, [r7, #6]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff ff43 	bl	8000ca4 <SSD1306_DrawPixel>
 8000e1e:	e014      	b.n	8000e4a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b298      	uxth	r0, r3
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e2e:	885a      	ldrh	r2, [r3, #2]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b299      	uxth	r1, r3
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	f7ff ff2d 	bl	8000ca4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d3c8      	bcc.n	8000dee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	461a      	mov	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3ad      	bcc.n	8000dca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <SSD1306_Putc+0xfc>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000724 	.word	0x20000724

08000e90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e9e:	e012      	b.n	8000ec6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff71 	bl	8000d90 <SSD1306_Putc>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d002      	beq.n	8000ec0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	e008      	b.n	8000ed2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1e8      	bne.n	8000ea0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fec8 	bl	8000c74 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ee4:	f7ff fe98 	bl	8000c18 <SSD1306_UpdateScreen>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <ssd1306_I2C_Init+0x28>)
 8000ef4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ef6:	e002      	b.n	8000efe <ssd1306_I2C_Init+0x12>
		p--;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f9      	bne.n	8000ef8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	0003d090 	.word	0x0003d090

08000f18 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b0c7      	sub	sp, #284	; 0x11c
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	4604      	mov	r4, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f26:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f2a:	600a      	str	r2, [r1, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f32:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f36:	4622      	mov	r2, r4
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f3e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f42:	4602      	mov	r2, r0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f4e:	460a      	mov	r2, r1
 8000f50:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f5a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f5e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f6c:	e015      	b.n	8000f9a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f76:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f82:	3301      	adds	r3, #1
 8000f84:	7811      	ldrb	r1, [r2, #0]
 8000f86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f8a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f8e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f90:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f94:	3301      	adds	r3, #1
 8000f96:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fa8:	8812      	ldrh	r2, [r2, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d8df      	bhi.n	8000f6e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	200a      	movs	r0, #10
 8000fce:	9000      	str	r0, [sp, #0]
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000fd2:	f000 fe8b 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 8000fd6:	bf00      	nop
 8000fd8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	20000224 	.word	0x20000224

08000fe4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b299      	uxth	r1, r3
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	230a      	movs	r3, #10
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2302      	movs	r3, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <ssd1306_I2C_Write+0x38>)
 800100e:	f000 fe6d 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000224 	.word	0x20000224

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_MspInit+0x4c>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x4c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a32      	ldr	r2, [pc, #200]	; (8001158 <HAL_I2C_MspInit+0xe8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12c      	bne.n	80010ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_I2C_MspInit+0xec>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ae:	23c0      	movs	r3, #192	; 0xc0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010be:	2304      	movs	r3, #4
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <HAL_I2C_MspInit+0xf0>)
 80010ca:	f000 fae3 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ea:	e031      	b.n	8001150 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_I2C_MspInit+0xf4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12c      	bne.n	8001150 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_I2C_MspInit+0xec>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001124:	2304      	movs	r3, #4
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <HAL_I2C_MspInit+0xf0>)
 8001130:	f000 fab0 	bl	8001694 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_I2C_MspInit+0xec>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_I2C_MspInit+0xec>)
 800113e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_I2C_MspInit+0xec>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40005400 	.word	0x40005400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	40005800 	.word	0x40005800

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_SPI_MspInit+0x84>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12c      	bne.n	80011e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d4:	2305      	movs	r3, #5
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_SPI_MspInit+0x8c>)
 80011e0:	f000 fa58 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40003800 	.word	0x40003800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020400 	.word	0x40020400

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8d0 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <OTG_FS_IRQHandler+0x10>)
 8001252:	f001 fe34 	bl	8002ebe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000c08 	.word	0x20000c08

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f006 fde6 	bl	8007e60 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000072c 	.word	0x2000072c
 80012c8:	20001038 	.word	0x20001038

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
  ldr r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800130c:	4c0b      	ldr	r4, [pc, #44]	; (800133c <LoopFillZerobss+0x26>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131a:	f7ff ffd7 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f006 fda5 	bl	8007e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f945 	bl	80005b0 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001334:	08009d70 	.word	0x08009d70
  ldr r2, =_sbss
 8001338:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800133c:	20001034 	.word	0x20001034

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 f94f 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fe52 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f967 	bl	800167a <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f92f 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000040 	.word	0x20000040
 80013e0:	20000048 	.word	0x20000048
 80013e4:	20000044 	.word	0x20000044

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000048 	.word	0x20000048
 800140c:	20000730 	.word	0x20000730

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000730 	.word	0x20000730

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000048 	.word	0x20000048

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e16b      	b.n	8001988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 815a 	bne.w	8001982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d130      	bne.n	8001748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0201 	and.w	r2, r3, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d017      	beq.n	8001784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d123      	bne.n	80017d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80b4 	beq.w	8001982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a5f      	ldr	r2, [pc, #380]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <HAL_GPIO_Init+0x310>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_GPIO_Init+0x314>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02b      	beq.n	80018ba <HAL_GPIO_Init+0x226>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_GPIO_Init+0x318>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x222>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x31c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x21e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_GPIO_Init+0x320>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x21a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <HAL_GPIO_Init+0x324>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x216>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_GPIO_Init+0x328>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x212>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x32c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_GPIO_Init+0x330>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x20a>
 800189a:	2307      	movs	r3, #7
 800189c:	e00e      	b.n	80018bc <HAL_GPIO_Init+0x228>
 800189e:	2308      	movs	r3, #8
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018a2:	2306      	movs	r3, #6
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x310>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x334>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f ae90 	bls.w	80016b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e001      	b.n	80019ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	619a      	str	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a40:	887a      	ldrh	r2, [r7, #2]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	041a      	lsls	r2, r3, #16
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	400b      	ands	r3, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e12b      	b.n	8001cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff faf0 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac8:	f002 fe82 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a81      	ldr	r2, [pc, #516]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d807      	bhi.n	8001ae8 <HAL_I2C_Init+0x84>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a80      	ldr	r2, [pc, #512]	; (8001cdc <HAL_I2C_Init+0x278>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e006      	b.n	8001af6 <HAL_I2C_Init+0x92>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a7d      	ldr	r2, [pc, #500]	; (8001ce0 <HAL_I2C_Init+0x27c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0e7      	b.n	8001cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a78      	ldr	r2, [pc, #480]	; (8001ce4 <HAL_I2C_Init+0x280>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d802      	bhi.n	8001b38 <HAL_I2C_Init+0xd4>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3301      	adds	r3, #1
 8001b36:	e009      	b.n	8001b4c <HAL_I2C_Init+0xe8>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a69      	ldr	r2, [pc, #420]	; (8001ce8 <HAL_I2C_Init+0x284>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	495c      	ldr	r1, [pc, #368]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	d819      	bhi.n	8001ba0 <HAL_I2C_Init+0x13c>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e59      	subs	r1, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b80:	400b      	ands	r3, r1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00a      	beq.n	8001b9c <HAL_I2C_Init+0x138>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e59      	subs	r1, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	e051      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e04f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d111      	bne.n	8001bcc <HAL_I2C_Init+0x168>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e58      	subs	r0, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e012      	b.n	8001bf2 <HAL_I2C_Init+0x18e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e58      	subs	r0, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	0099      	lsls	r1, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Init+0x196>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e022      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_I2C_Init+0x1bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e58      	subs	r0, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	440b      	add	r3, r1
 8001c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1e:	e00f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	6809      	ldr	r1, [r1, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6911      	ldr	r1, [r2, #16]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	000186a0 	.word	0x000186a0
 8001cdc:	001e847f 	.word	0x001e847f
 8001ce0:	003d08ff 	.word	0x003d08ff
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	10624dd3 	.word	0x10624dd3

08001cec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	817b      	strh	r3, [r7, #10]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fb86 	bl	8001410 <HAL_GetTick>
 8001d04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	f040 80e0 	bne.w	8001ed4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2319      	movs	r3, #25
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4970      	ldr	r1, [pc, #448]	; (8001ee0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fda0 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e0d3      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_I2C_Master_Transmit+0x50>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d007      	beq.n	8001d62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2221      	movs	r2, #33	; 0x21
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	893a      	ldrh	r2, [r7, #8]
 8001d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da4:	8979      	ldrh	r1, [r7, #10]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fbf0 	bl	8002590 <I2C_MasterRequestWrite>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e08d      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dd0:	e066      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fe1a 	bl	8002a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d107      	bne.n	8001dfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06b      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d11b      	bne.n	8001e74 <HAL_I2C_Master_Transmit+0x188>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d017      	beq.n	8001e74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	6a39      	ldr	r1, [r7, #32]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fe0a 	bl	8002a92 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d107      	bne.n	8001e9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e01a      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d194      	bne.n	8001dd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	00100002 	.word	0x00100002
 8001ee4:	ffff0000 	.word	0xffff0000

08001ee8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	; 0x30
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	460b      	mov	r3, r1
 8001efc:	813b      	strh	r3, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7ff fa85 	bl	8001410 <HAL_GetTick>
 8001f06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	f040 8208 	bne.w	8002326 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	497b      	ldr	r1, [pc, #492]	; (800210c <HAL_I2C_Mem_Read+0x224>)
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fc9f 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e1fb      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2C_Mem_Read+0x56>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e1f4      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d007      	beq.n	8001f64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2222      	movs	r2, #34	; 0x22
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	; (8002110 <HAL_I2C_Mem_Read+0x228>)
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fa6:	88f8      	ldrh	r0, [r7, #6]
 8001fa8:	893a      	ldrh	r2, [r7, #8]
 8001faa:	8979      	ldrh	r1, [r7, #10]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fb6c 	bl	8002694 <I2C_RequestMemoryRead>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1b0      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d113      	bne.n	8001ff6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e184      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11b      	bne.n	8002036 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e164      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b02      	cmp	r3, #2
 800203c:	d11b      	bne.n	8002076 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	e144      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800208c:	e138      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b03      	cmp	r3, #3
 8002094:	f200 80f1 	bhi.w	800227a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b01      	cmp	r3, #1
 800209e:	d123      	bne.n	80020e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fd35 	bl	8002b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e139      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020e6:	e10b      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d14e      	bne.n	800218e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	2200      	movs	r2, #0
 80020f8:	4906      	ldr	r1, [pc, #24]	; (8002114 <HAL_I2C_Mem_Read+0x22c>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fbb2 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e10e      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
 800210a:	bf00      	nop
 800210c:	00100002 	.word	0x00100002
 8002110:	ffff0000 	.word	0xffff0000
 8002114:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800218c:	e0b8      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	2200      	movs	r2, #0
 8002196:	4966      	ldr	r1, [pc, #408]	; (8002330 <HAL_I2C_Mem_Read+0x448>)
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fb63 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0bf      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	2200      	movs	r2, #0
 80021f2:	494f      	ldr	r1, [pc, #316]	; (8002330 <HAL_I2C_Mem_Read+0x448>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fb35 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e091      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002278:	e042      	b.n	8002300 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fc48 	bl	8002b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e04c      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d118      	bne.n	8002300 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f aec2 	bne.w	800208e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00010004 	.word	0x00010004

08002334 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	460b      	mov	r3, r1
 8002342:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff f864 	bl	8001410 <HAL_GetTick>
 8002348:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b20      	cmp	r3, #32
 8002358:	f040 8111 	bne.w	800257e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2319      	movs	r3, #25
 8002362:	2201      	movs	r2, #1
 8002364:	4988      	ldr	r1, [pc, #544]	; (8002588 <HAL_I2C_IsDeviceReady+0x254>)
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa7c 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	e104      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_I2C_IsDeviceReady+0x50>
 8002380:	2302      	movs	r3, #2
 8002382:	e0fd      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d007      	beq.n	80023aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a70      	ldr	r2, [pc, #448]	; (800258c <HAL_I2C_IsDeviceReady+0x258>)
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fa3a 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002404:	d103      	bne.n	800240e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0b6      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002420:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fff5 	bl	8001410 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002456:	e025      	b.n	80024a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe ffda 	bl	8001410 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <HAL_I2C_IsDeviceReady+0x13a>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22a0      	movs	r2, #160	; 0xa0
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2ba0      	cmp	r3, #160	; 0xa0
 80024ae:	d005      	beq.n	80024bc <HAL_I2C_IsDeviceReady+0x188>
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_I2C_IsDeviceReady+0x188>
 80024b6:	7dbb      	ldrb	r3, [r7, #22]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0cd      	beq.n	8002458 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d129      	bne.n	8002526 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2319      	movs	r3, #25
 80024fe:	2201      	movs	r2, #1
 8002500:	4921      	ldr	r1, [pc, #132]	; (8002588 <HAL_I2C_IsDeviceReady+0x254>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f9ae 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e036      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e02c      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002534:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800253e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	490f      	ldr	r1, [pc, #60]	; (8002588 <HAL_I2C_IsDeviceReady+0x254>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f98a 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e012      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	3301      	adds	r3, #1
 800255e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	f4ff af32 	bcc.w	80023ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00100002 	.word	0x00100002
 800258c:	ffff0000 	.word	0xffff0000

08002590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d006      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d003      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b8:	d108      	bne.n	80025cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e00b      	b.n	80025e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d107      	bne.n	80025e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f937 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260a:	d103      	bne.n	8002614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e035      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002620:	d108      	bne.n	8002634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	e01b      	b.n	800266c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	11db      	asrs	r3, r3, #7
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0306 	and.w	r3, r3, #6
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f063 030f 	orn	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <I2C_MasterRequestWrite+0xfc>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f95d 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e010      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <I2C_MasterRequestWrite+0x100>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f94d 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	00010008 	.word	0x00010008
 8002690:	00010002 	.word	0x00010002

08002694 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f8c2 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d103      	bne.n	80026fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0aa      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	4952      	ldr	r1, [pc, #328]	; (8002860 <I2C_RequestMemoryRead+0x1cc>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f8fa 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e097      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f964 	bl	8002a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b04      	cmp	r3, #4
 8002754:	d107      	bne.n	8002766 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e076      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002770:	893b      	ldrh	r3, [r7, #8]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e021      	b.n	80027c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800277c:	893b      	ldrh	r3, [r7, #8]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b29b      	uxth	r3, r3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f93e 	bl	8002a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d107      	bne.n	80027b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e050      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f923 	bl	8002a10 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e035      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f82b 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d103      	bne.n	800282c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e013      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	4906      	ldr	r1, [pc, #24]	; (8002860 <I2C_RequestMemoryRead+0x1cc>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f863 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00010002 	.word	0x00010002

08002864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002874:	e025      	b.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d021      	beq.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287e:	f7fe fdc7 	bl	8001410 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e023      	b.n	800290a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	e00c      	b.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	429a      	cmp	r2, r3
 8002906:	d0b6      	beq.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002920:	e051      	b.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d123      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e046      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d021      	beq.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7fe fd45 	bl	8001410 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e020      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10c      	bne.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e00b      	b.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d18d      	bne.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1c:	e02d      	b.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8ce 	bl	8002bc0 <I2C_IsAcknowledgeFailed>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02d      	b.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d021      	beq.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe fceb 	bl	8001410 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e007      	b.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d1ca      	bne.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a9e:	e02d      	b.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f88d 	bl	8002bc0 <I2C_IsAcknowledgeFailed>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e02d      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d021      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab8:	f7fe fcaa 	bl	8001410 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d1ca      	bne.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b20:	e042      	b.n	8002ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d119      	bne.n	8002b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0210 	mvn.w	r2, #16
 8002b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e029      	b.n	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7fe fc54 	bl	8001410 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d1b5      	bne.n	8002b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d11b      	bne.n	8002c10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c20:	b08f      	sub	sp, #60	; 0x3c
 8002c22:	af0a      	add	r7, sp, #40	; 0x28
 8002c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e10f      	b.n	8002e50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f004 fe06 	bl	800785c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2203      	movs	r2, #3
 8002c54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 ff5f 	bl	8004b32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	687e      	ldr	r6, [r7, #4]
 8002c7c:	466d      	mov	r5, sp
 8002c7e:	f106 0410 	add.w	r4, r6, #16
 8002c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c92:	1d33      	adds	r3, r6, #4
 8002c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	f001 fe37 	bl	800490a <USB_CoreInit>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0d0      	b.n	8002e50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 ff4d 	bl	8004b54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e04a      	b.n	8002d56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	333d      	adds	r3, #61	; 0x3d
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	333c      	adds	r3, #60	; 0x3c
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	b298      	uxth	r0, r3
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3342      	adds	r3, #66	; 0x42
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	333f      	adds	r3, #63	; 0x3f
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3344      	adds	r3, #68	; 0x44
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3348      	adds	r3, #72	; 0x48
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3350      	adds	r3, #80	; 0x50
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	3301      	adds	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3af      	bcc.n	8002cc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e044      	b.n	8002df0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3b5      	bcc.n	8002d66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	687e      	ldr	r6, [r7, #4]
 8002e02:	466d      	mov	r5, sp
 8002e04:	f106 0410 	add.w	r4, r6, #16
 8002e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e18:	1d33      	adds	r3, r6, #4
 8002e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1c:	6838      	ldr	r0, [r7, #0]
 8002e1e:	f001 fee5 	bl	8004bec <USB_DevInit>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e00d      	b.n	8002e50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 ff61 	bl	8005d10 <USB_DevDisconnect>

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_PCD_Start+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e020      	b.n	8002eb6 <HAL_PCD_Start+0x5e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d109      	bne.n	8002e98 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d005      	beq.n	8002e98 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fe37 	bl	8004b10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 ff11 	bl	8005cce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b08d      	sub	sp, #52	; 0x34
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 ffcf 	bl	8005e78 <USB_GetMode>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 839d 	bne.w	800361c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 ff33 	bl	8005d52 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8393 	beq.w	800361a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 ff2a 	bl	8005d52 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d107      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f002 0202 	and.w	r2, r2, #2
 8002f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 ff18 	bl	8005d52 <USB_ReadInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d161      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	0c5b      	lsrs	r3, r3, #17
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d124      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d035      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6a38      	ldr	r0, [r7, #32]
 8002f88:	f002 fd4f 	bl	8005a2a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f98:	441a      	add	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002faa:	441a      	add	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	619a      	str	r2, [r3, #24]
 8002fb0:	e016      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	0c5b      	lsrs	r3, r3, #17
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d110      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6a38      	ldr	r0, [r7, #32]
 8002fca:	f002 fd2e 	bl	8005a2a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fda:	441a      	add	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0210 	orr.w	r2, r2, #16
 8002fee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 feac 	bl	8005d52 <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003000:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003004:	d16e      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 feb2 	bl	8005d78 <USB_ReadDevAllOutEpInterrupt>
 8003014:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003016:	e062      	b.n	80030de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d057      	beq.n	80030d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f002 fed7 	bl	8005de0 <USB_ReadDevOutEPInterrupt>
 8003032:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304a:	461a      	mov	r2, r3
 800304c:	2301      	movs	r3, #1
 800304e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fd98 	bl	8003b88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2308      	movs	r3, #8
 8003072:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fe92 	bl	8003da0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	2310      	movs	r3, #16
 8003096:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	2320      	movs	r3, #32
 80030b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d199      	bne.n	8003018 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fe32 	bl	8005d52 <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f8:	f040 80c0 	bne.w	800327c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f002 fe53 	bl	8005dac <USB_ReadDevAllInEpInterrupt>
 8003106:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800310c:	e0b2      	b.n	8003274 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a7 	beq.w	8003268 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fe79 	bl	8005e1c <USB_ReadDevInEPInterrupt>
 800312a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d057      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	2201      	movs	r2, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	69f9      	ldr	r1, [r7, #28]
 8003152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003156:	4013      	ands	r3, r2
 8003158:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d132      	bne.n	80031da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3348      	adds	r3, #72	; 0x48
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4403      	add	r3, r0
 8003194:	3344      	adds	r3, #68	; 0x44
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4419      	add	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	3348      	adds	r3, #72	; 0x48
 80031aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <HAL_PCD_IRQHandler+0x31c>
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3350      	adds	r3, #80	; 0x50
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d108      	bne.n	80031da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031d2:	461a      	mov	r2, r3
 80031d4:	2101      	movs	r1, #1
 80031d6:	f002 fe81 	bl	8005edc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f004 fbbc 	bl	800795e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	461a      	mov	r2, r3
 80031fe:	2308      	movs	r3, #8
 8003200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	2310      	movs	r3, #16
 800321c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003234:	461a      	mov	r2, r3
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	461a      	mov	r2, r3
 8003252:	2302      	movs	r3, #2
 8003254:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fc03 	bl	8003a6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	3301      	adds	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f af49 	bne.w	800310e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fd66 	bl	8005d52 <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800328c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003290:	d122      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032b8:	2100      	movs	r1, #0
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fe0e 	bl	8003edc <HAL_PCDEx_LPM_Callback>
 80032c0:	e002      	b.n	80032c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f004 fbc2 	bl	8007a4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f002 fd38 	bl	8005d52 <USB_ReadInterrupts>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ec:	d112      	bne.n	8003314 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f004 fb7e 	bl	8007a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003312:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fd1a 	bl	8005d52 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	f040 80c7 	bne.w	80034ba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2110      	movs	r1, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fdb4 	bl	8004eb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003350:	e056      	b.n	8003400 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335e:	461a      	mov	r2, r3
 8003360:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003364:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	440a      	add	r2, r1
 800337c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003384:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003396:	0151      	lsls	r1, r2, #5
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	440a      	add	r2, r1
 800339c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	0151      	lsls	r1, r2, #5
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	440a      	add	r2, r1
 80033d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	3301      	adds	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003406:	429a      	cmp	r2, r3
 8003408:	d3a3      	bcc.n	8003352 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003418:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800341c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003436:	f043 030b 	orr.w	r3, r3, #11
 800343a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f043 030b 	orr.w	r3, r3, #11
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	e015      	b.n	8003480 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003466:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800346a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347a:	f043 030b 	orr.w	r3, r3, #11
 800347e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003492:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a4:	461a      	mov	r2, r3
 80034a6:	f002 fd19 	bl	8005edc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 fc47 	bl	8005d52 <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d124      	bne.n	800351a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fcdd 	bl	8005e94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fd45 	bl	8004f6e <USB_GetDevSpeed>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681c      	ldr	r4, [r3, #0]
 80034f0:	f001 f962 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80034f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	4620      	mov	r0, r4
 8003500:	f001 fa64 	bl	80049cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f004 fa52 	bl	80079ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003518:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fc17 	bl	8005d52 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d10a      	bne.n	8003544 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f004 fa2f 	bl	8007992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f002 0208 	and.w	r2, r2, #8
 8003542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fc02 	bl	8005d52 <USB_ReadInterrupts>
 800354e:	4603      	mov	r3, r0
 8003550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003558:	d10f      	bne.n	800357a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f004 fa91 	bl	8007a8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f002 fbe7 	bl	8005d52 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358e:	d10f      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f004 fa64 	bl	8007a68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fbcc 	bl	8005d52 <USB_ReadInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d10a      	bne.n	80035dc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f004 fa72 	bl	8007ab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fbb6 	bl	8005d52 <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d115      	bne.n	800361c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f004 fa62 	bl	8007acc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	e000      	b.n	800361c <HAL_PCD_IRQHandler+0x75e>
      return;
 800361a:	bf00      	nop
    }
  }
}
 800361c:	3734      	adds	r7, #52	; 0x34
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}

08003622 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_PCD_SetAddress+0x1a>
 8003638:	2302      	movs	r3, #2
 800363a:	e013      	b.n	8003664 <HAL_PCD_SetAddress+0x42>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f002 fb14 	bl	8005c82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	70fb      	strb	r3, [r7, #3]
 800367e:	460b      	mov	r3, r1
 8003680:	803b      	strh	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800368a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da0f      	bge.n	80036b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3338      	adds	r3, #56	; 0x38
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
 80036b0:	e00f      	b.n	80036d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036de:	883a      	ldrh	r2, [r7, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	78ba      	ldrb	r2, [r7, #2]
 80036e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036fc:	78bb      	ldrb	r3, [r7, #2]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d102      	bne.n	8003708 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_PCD_EP_Open+0xaa>
 8003712:	2302      	movs	r3, #2
 8003714:	e00e      	b.n	8003734 <HAL_PCD_EP_Open+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fc47 	bl	8004fb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003732:	7afb      	ldrb	r3, [r7, #11]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da0f      	bge.n	8003770 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3338      	adds	r3, #56	; 0x38
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	705a      	strb	r2, [r3, #1]
 800376e:	e00f      	b.n	8003790 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_PCD_EP_Close+0x6e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e00e      	b.n	80037c8 <HAL_PCD_EP_Close+0x8c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fc85 	bl	80050c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	460b      	mov	r3, r1
 80037de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e0:	7afb      	ldrb	r3, [r7, #11]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	b2da      	uxtb	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800382c:	7afb      	ldrb	r3, [r7, #11]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	f001 ff60 	bl	8005708 <USB_EP0StartXfer>
 8003848:	e008      	b.n	800385c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	f001 fd12 	bl	8005280 <USB_EPStartXfer>
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	460b      	mov	r3, r1
 8003874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2201      	movs	r2, #1
 80038a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	f001 ff16 	bl	8005708 <USB_EP0StartXfer>
 80038dc:	e008      	b.n	80038f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	f001 fcc8 	bl	8005280 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d901      	bls.n	8003918 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e050      	b.n	80039ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391c:	2b00      	cmp	r3, #0
 800391e:	da0f      	bge.n	8003940 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3338      	adds	r3, #56	; 0x38
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	705a      	strb	r2, [r3, #1]
 800393e:	e00d      	b.n	800395c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	3304      	adds	r3, #4
 8003954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_PCD_EP_SetStall+0x82>
 8003978:	2302      	movs	r3, #2
 800397a:	e01e      	b.n	80039ba <HAL_PCD_EP_SetStall+0xc0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 f8a5 	bl	8005ada <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	b2d9      	uxtb	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039aa:	461a      	mov	r2, r3
 80039ac:	f002 fa96 	bl	8005edc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d901      	bls.n	80039e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e042      	b.n	8003a66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da0f      	bge.n	8003a08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	3338      	adds	r3, #56	; 0x38
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	705a      	strb	r2, [r3, #1]
 8003a06:	e00f      	b.n	8003a28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_EP_ClrStall+0x86>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_ClrStall+0xa4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 f8ad 	bl	8005bb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3338      	adds	r3, #56	; 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d901      	bls.n	8003aa6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06c      	b.n	8003b80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aca:	e02b      	b.n	8003b24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d902      	bls.n	8003ae8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3303      	adds	r3, #3
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68d9      	ldr	r1, [r3, #12]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4603      	mov	r3, r0
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f001 ff51 	bl	80059ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d809      	bhi.n	8003b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d203      	bcs.n	8003b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1be      	bne.n	8003acc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d811      	bhi.n	8003b7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2201      	movs	r2, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	333c      	adds	r3, #60	; 0x3c
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80a0 	bne.w	8003d00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f240 80dd 	bls.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80d7 	beq.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e0cb      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2320      	movs	r3, #32
 8003c10:	6093      	str	r3, [r2, #8]
 8003c12:	e0bc      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 80b7 	bne.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d90f      	bls.n	8003c48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	e0a2      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	0159      	lsls	r1, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	440b      	add	r3, r1
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4403      	add	r3, r0
 8003c7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4419      	add	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4403      	add	r3, r0
 8003cbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cea:	461a      	mov	r2, r3
 8003cec:	2101      	movs	r1, #1
 8003cee:	f002 f8f5 	bl	8005edc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f003 fe15 	bl	8007928 <HAL_PCD_DataOutStageCallback>
 8003cfe:	e046      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <PCD_EP_OutXfrComplete_int+0x214>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d124      	bne.n	8003d52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	e032      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2320      	movs	r3, #32
 8003d42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f003 fdec 	bl	8007928 <HAL_PCD_DataOutStageCallback>
 8003d50:	e01d      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d114      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f002 f8ad 	bl	8005edc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f003 fdcd 	bl	8007928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	4f54300a 	.word	0x4f54300a
 8003d9c:	4f54310a 	.word	0x4f54310a

08003da0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	333c      	adds	r3, #60	; 0x3c
 8003db8:	3304      	adds	r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90e      	bls.n	8003df4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f003 fd85 	bl	8007904 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d90c      	bls.n	8003e1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e14:	461a      	mov	r2, r3
 8003e16:	2101      	movs	r1, #1
 8003e18:	f002 f860 	bl	8005edc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	4f54300a 	.word	0x4f54300a

08003e2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e4a:	883b      	ldrh	r3, [r7, #0]
 8003e4c:	0419      	lsls	r1, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
 8003e58:	e028      	b.n	8003eac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	e00d      	b.n	8003e8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3340      	adds	r3, #64	; 0x40
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	3301      	adds	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3ec      	bcc.n	8003e6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e94:	883b      	ldrh	r3, [r7, #0]
 8003e96:	0418      	lsls	r0, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6819      	ldr	r1, [r3, #0]
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4302      	orrs	r2, r0
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e267      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d075      	beq.n	8003ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d00c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1e:	4b85      	ldr	r3, [pc, #532]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d112      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2a:	4b82      	ldr	r3, [pc, #520]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	4b7e      	ldr	r3, [pc, #504]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x108>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d157      	bne.n	8003ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e242      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x74>
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a75      	ldr	r2, [pc, #468]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x98>
 8003f72:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6f      	ldr	r2, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6c      	ldr	r2, [pc, #432]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f8c:	4b69      	ldr	r3, [pc, #420]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a68      	ldr	r2, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fa30 	bl	8001410 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd fa2c 	bl	8001410 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e207      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xc0>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fa1c 	bl	8001410 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fa18 	bl	8001410 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1f3      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0xe8>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x152>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1c7      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_OscConfig+0x244>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd f9d1 	bl	8001410 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004072:	f7fd f9cd 	bl	8001410 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1a8      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4925      	ldr	r1, [pc, #148]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_OscConfig+0x244>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd f9b0 	bl	8001410 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fd f9ac 	bl	8001410 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e187      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d036      	beq.n	800414c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_RCC_OscConfig+0x248>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd f990 	bl	8001410 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd f98c 	bl	8001410 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e167      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_OscConfig+0x240>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x200>
 8004112:	e01b      	b.n	800414c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_OscConfig+0x248>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fd f979 	bl	8001410 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	e00e      	b.n	8004140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004122:	f7fd f975 	bl	8001410 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d907      	bls.n	8004140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e150      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
 8004134:	40023800 	.word	0x40023800
 8004138:	42470000 	.word	0x42470000
 800413c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ea      	bne.n	8004122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8097 	beq.w	8004288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	4b7d      	ldr	r3, [pc, #500]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a7c      	ldr	r2, [pc, #496]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b7a      	ldr	r3, [pc, #488]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b77      	ldr	r3, [pc, #476]	; (8004368 <HAL_RCC_OscConfig+0x474>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b74      	ldr	r3, [pc, #464]	; (8004368 <HAL_RCC_OscConfig+0x474>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a73      	ldr	r2, [pc, #460]	; (8004368 <HAL_RCC_OscConfig+0x474>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f935 	bl	8001410 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd f931 	bl	8001410 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e10c      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <HAL_RCC_OscConfig+0x474>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x2ea>
 80041d0:	4b64      	ldr	r3, [pc, #400]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a63      	ldr	r2, [pc, #396]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	e01c      	b.n	8004218 <HAL_RCC_OscConfig+0x324>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x30c>
 80041e6:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a5e      	ldr	r2, [pc, #376]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
 80041f2:	4b5c      	ldr	r3, [pc, #368]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a5b      	ldr	r2, [pc, #364]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6713      	str	r3, [r2, #112]	; 0x70
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0x324>
 8004200:	4b58      	ldr	r3, [pc, #352]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	4b55      	ldr	r3, [pc, #340]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a54      	ldr	r2, [pc, #336]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd f8f6 	bl	8001410 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd f8f2 	bl	8001410 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0cb      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <HAL_RCC_OscConfig+0x334>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424c:	f7fd f8e0 	bl	8001410 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fd f8dc 	bl	8001410 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0b5      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ee      	bne.n	8004254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427c:	4b39      	ldr	r3, [pc, #228]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	4a38      	ldr	r2, [pc, #224]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004286:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80a1 	beq.w	80043d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b08      	cmp	r3, #8
 800429c:	d05c      	beq.n	8004358 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d141      	bne.n	800432a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_OscConfig+0x478>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd f8b0 	bl	8001410 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd f8ac 	bl	8001410 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e087      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	3b01      	subs	r3, #1
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	491b      	ldr	r1, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x478>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd f885 	bl	8001410 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fd f881 	bl	8001410 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e05c      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x416>
 8004328:	e054      	b.n	80043d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_OscConfig+0x478>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd f86e 	bl	8001410 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd f86a 	bl	8001410 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e045      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_OscConfig+0x470>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x444>
 8004356:	e03d      	b.n	80043d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e038      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000
 800436c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x4ec>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d028      	beq.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d121      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d11a      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a0:	4013      	ands	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d111      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	3b01      	subs	r3, #1
 80043ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800

080043e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0cc      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b68      	ldr	r3, [pc, #416]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d90c      	bls.n	8004420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b65      	ldr	r3, [pc, #404]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800445a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d044      	beq.n	8004504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d119      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e067      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4934      	ldr	r1, [pc, #208]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d4:	f7fc ff9c 	bl	8001410 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fc ff98 	bl	8001410 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e04f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d20c      	bcs.n	800452c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fefc 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023c00 	.word	0x40023c00
 80045a0:	40023800 	.word	0x40023800
 80045a4:	08009d14 	.word	0x08009d14
 80045a8:	20000040 	.word	0x20000040
 80045ac:	20000044 	.word	0x20000044

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b094      	sub	sp, #80	; 0x50
 80045b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	647b      	str	r3, [r7, #68]	; 0x44
 80045bc:	2300      	movs	r3, #0
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c0:	2300      	movs	r3, #0
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c8:	4b79      	ldr	r3, [pc, #484]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d00d      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x40>
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	f200 80e1 	bhi.w	800479c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x3a>
 80045e2:	e0db      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045e8:	e0db      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ee:	e0d8      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f0:	4b6f      	ldr	r3, [pc, #444]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	2200      	movs	r2, #0
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004610:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	f04f 0000 	mov.w	r0, #0
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	0159      	lsls	r1, r3, #5
 8004630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004634:	0150      	lsls	r0, r2, #5
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4621      	mov	r1, r4
 800463c:	1a51      	subs	r1, r2, r1
 800463e:	6139      	str	r1, [r7, #16]
 8004640:	4629      	mov	r1, r5
 8004642:	eb63 0301 	sbc.w	r3, r3, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004654:	4659      	mov	r1, fp
 8004656:	018b      	lsls	r3, r1, #6
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800465e:	4651      	mov	r1, sl
 8004660:	018a      	lsls	r2, r1, #6
 8004662:	4651      	mov	r1, sl
 8004664:	ebb2 0801 	subs.w	r8, r2, r1
 8004668:	4659      	mov	r1, fp
 800466a:	eb63 0901 	sbc.w	r9, r3, r1
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800467a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004682:	4690      	mov	r8, r2
 8004684:	4699      	mov	r9, r3
 8004686:	4623      	mov	r3, r4
 8004688:	eb18 0303 	adds.w	r3, r8, r3
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	462b      	mov	r3, r5
 8004690:	eb49 0303 	adc.w	r3, r9, r3
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046a2:	4629      	mov	r1, r5
 80046a4:	028b      	lsls	r3, r1, #10
 80046a6:	4621      	mov	r1, r4
 80046a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ac:	4621      	mov	r1, r4
 80046ae:	028a      	lsls	r2, r1, #10
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b6:	2200      	movs	r2, #0
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c0:	f7fb fdd6 	bl	8000270 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046cc:	e058      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	4611      	mov	r1, r2
 80046da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
 80046e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	f04f 0000 	mov.w	r0, #0
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	0159      	lsls	r1, r3, #5
 80046f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fa:	0150      	lsls	r0, r2, #5
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4641      	mov	r1, r8
 8004702:	ebb2 0a01 	subs.w	sl, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb63 0b01 	sbc.w	fp, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004718:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800471c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004720:	ebb2 040a 	subs.w	r4, r2, sl
 8004724:	eb63 050b 	sbc.w	r5, r3, fp
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	00eb      	lsls	r3, r5, #3
 8004732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004736:	00e2      	lsls	r2, r4, #3
 8004738:	4614      	mov	r4, r2
 800473a:	461d      	mov	r5, r3
 800473c:	4643      	mov	r3, r8
 800473e:	18e3      	adds	r3, r4, r3
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	464b      	mov	r3, r9
 8004744:	eb45 0303 	adc.w	r3, r5, r3
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004756:	4629      	mov	r1, r5
 8004758:	028b      	lsls	r3, r1, #10
 800475a:	4621      	mov	r1, r4
 800475c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004760:	4621      	mov	r1, r4
 8004762:	028a      	lsls	r2, r1, #10
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476a:	2200      	movs	r2, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	61fa      	str	r2, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	f7fb fd7c 	bl	8000270 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4613      	mov	r3, r2
 800477e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800479a:	e002      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800479e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3750      	adds	r7, #80	; 0x50
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	00f42400 	.word	0x00f42400

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000040 	.word	0x20000040

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08009d24 	.word	0x08009d24

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07b      	b.n	8004902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fc8c 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0104 	and.w	r1, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0210 	and.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800490a:	b084      	sub	sp, #16
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	f107 001c 	add.w	r0, r7, #28
 8004918:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2b01      	cmp	r3, #1
 8004920:	d122      	bne.n	8004968 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f001 fb1b 	bl	8005f98 <USB_CoreReset>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e01a      	b.n	800499e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f001 fb0f 	bl	8005f98 <USB_CoreReset>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
 8004990:	e005      	b.n	800499e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10b      	bne.n	80049bc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f043 0206 	orr.w	r2, r3, #6
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c8:	b004      	add	sp, #16
 80049ca:	4770      	bx	lr

080049cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d165      	bne.n	8004aac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a41      	ldr	r2, [pc, #260]	; (8004ae8 <USB_SetTurnaroundTime+0x11c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d906      	bls.n	80049f6 <USB_SetTurnaroundTime+0x2a>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a40      	ldr	r2, [pc, #256]	; (8004aec <USB_SetTurnaroundTime+0x120>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d202      	bcs.n	80049f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049f0:	230f      	movs	r3, #15
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e062      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a3c      	ldr	r2, [pc, #240]	; (8004aec <USB_SetTurnaroundTime+0x120>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d306      	bcc.n	8004a0c <USB_SetTurnaroundTime+0x40>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <USB_SetTurnaroundTime+0x124>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d202      	bcs.n	8004a0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a06:	230e      	movs	r3, #14
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e057      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a38      	ldr	r2, [pc, #224]	; (8004af0 <USB_SetTurnaroundTime+0x124>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d306      	bcc.n	8004a22 <USB_SetTurnaroundTime+0x56>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <USB_SetTurnaroundTime+0x128>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d202      	bcs.n	8004a22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a1c:	230d      	movs	r3, #13
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e04c      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a33      	ldr	r2, [pc, #204]	; (8004af4 <USB_SetTurnaroundTime+0x128>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d306      	bcc.n	8004a38 <USB_SetTurnaroundTime+0x6c>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <USB_SetTurnaroundTime+0x12c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d802      	bhi.n	8004a38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a32:	230c      	movs	r3, #12
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e041      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <USB_SetTurnaroundTime+0x12c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d906      	bls.n	8004a4e <USB_SetTurnaroundTime+0x82>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <USB_SetTurnaroundTime+0x130>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d802      	bhi.n	8004a4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a48:	230b      	movs	r3, #11
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e036      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <USB_SetTurnaroundTime+0x130>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d906      	bls.n	8004a64 <USB_SetTurnaroundTime+0x98>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <USB_SetTurnaroundTime+0x134>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d802      	bhi.n	8004a64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a5e:	230a      	movs	r3, #10
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e02b      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <USB_SetTurnaroundTime+0x134>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d906      	bls.n	8004a7a <USB_SetTurnaroundTime+0xae>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <USB_SetTurnaroundTime+0x138>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d202      	bcs.n	8004a7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a74:	2309      	movs	r3, #9
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e020      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <USB_SetTurnaroundTime+0x138>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d306      	bcc.n	8004a90 <USB_SetTurnaroundTime+0xc4>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <USB_SetTurnaroundTime+0x13c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d802      	bhi.n	8004a90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e015      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <USB_SetTurnaroundTime+0x13c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d906      	bls.n	8004aa6 <USB_SetTurnaroundTime+0xda>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <USB_SetTurnaroundTime+0x140>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d202      	bcs.n	8004aa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004aa0:	2307      	movs	r3, #7
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e00a      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e007      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e001      	b.n	8004abc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ab8:	2309      	movs	r3, #9
 8004aba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	00d8acbf 	.word	0x00d8acbf
 8004aec:	00e4e1c0 	.word	0x00e4e1c0
 8004af0:	00f42400 	.word	0x00f42400
 8004af4:	01067380 	.word	0x01067380
 8004af8:	011a499f 	.word	0x011a499f
 8004afc:	01312cff 	.word	0x01312cff
 8004b00:	014ca43f 	.word	0x014ca43f
 8004b04:	016e3600 	.word	0x016e3600
 8004b08:	01a6ab1f 	.word	0x01a6ab1f
 8004b0c:	01e84800 	.word	0x01e84800

08004b10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f043 0201 	orr.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d115      	bne.n	8004ba2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b82:	2001      	movs	r0, #1
 8004b84:	f7fc fc50 	bl	8001428 <HAL_Delay>
      ms++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 f972 	bl	8005e78 <USB_GetMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d01e      	beq.n	8004bd8 <USB_SetCurrentMode+0x84>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b31      	cmp	r3, #49	; 0x31
 8004b9e:	d9f0      	bls.n	8004b82 <USB_SetCurrentMode+0x2e>
 8004ba0:	e01a      	b.n	8004bd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d115      	bne.n	8004bd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7fc fc37 	bl	8001428 <HAL_Delay>
      ms++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 f959 	bl	8005e78 <USB_GetMode>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <USB_SetCurrentMode+0x84>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b31      	cmp	r3, #49	; 0x31
 8004bd0:	d9f0      	bls.n	8004bb4 <USB_SetCurrentMode+0x60>
 8004bd2:	e001      	b.n	8004bd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e005      	b.n	8004be4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b32      	cmp	r3, #50	; 0x32
 8004bdc:	d101      	bne.n	8004be2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bec:	b084      	sub	sp, #16
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	e009      	b.n	8004c20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3340      	adds	r3, #64	; 0x40
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0e      	cmp	r3, #14
 8004c24:	d9f2      	bls.n	8004c0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11c      	bne.n	8004c66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3a:	f043 0302 	orr.w	r3, r3, #2
 8004c3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
 8004c64:	e00b      	b.n	8004c7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	4619      	mov	r1, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	461a      	mov	r2, r3
 8004c9a:	680b      	ldr	r3, [r1, #0]
 8004c9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10c      	bne.n	8004cbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004caa:	2100      	movs	r1, #0
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f945 	bl	8004f3c <USB_SetDevSpeed>
 8004cb2:	e008      	b.n	8004cc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f940 	bl	8004f3c <USB_SetDevSpeed>
 8004cbc:	e003      	b.n	8004cc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f93b 	bl	8004f3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cc6:	2110      	movs	r1, #16
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8f3 	bl	8004eb4 <USB_FlushTxFifo>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f90f 	bl	8004efc <USB_FlushRxFifo>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	461a      	mov	r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e043      	b.n	8004d9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d28:	d118      	bne.n	8004d5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e013      	b.n	8004d6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e008      	b.n	8004d6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3301      	adds	r3, #1
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3b7      	bcc.n	8004d12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	e043      	b.n	8004e30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dbe:	d118      	bne.n	8004df2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e013      	b.n	8004e04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	461a      	mov	r2, r3
 8004dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e008      	b.n	8004e04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2300      	movs	r3, #0
 8004e02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3b7      	bcc.n	8004da8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f043 0210 	orr.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <USB_DevInit+0x2c4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f043 0208 	orr.w	r2, r3, #8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eac:	b004      	add	sp, #16
 8004eae:	4770      	bx	lr
 8004eb0:	803c3800 	.word	0x803c3800

08004eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	019b      	lsls	r3, r3, #6
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <USB_FlushTxFifo+0x44>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d0f1      	beq.n	8004ece <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <USB_FlushRxFifo+0x3c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e006      	b.n	8004f2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d0f1      	beq.n	8004f0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	00030d40 	.word	0x00030d40

08004f3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]
 8004f92:	e00a      	b.n	8004faa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d002      	beq.n	8004fa0 <USB_GetDevSpeed+0x32>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b06      	cmp	r3, #6
 8004f9e:	d102      	bne.n	8004fa6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	75fb      	strb	r3, [r7, #23]
 8004fa4:	e001      	b.n	8004faa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fa6:	230f      	movs	r3, #15
 8004fa8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d13a      	bne.n	800504a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d155      	bne.n	80050b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	78db      	ldrb	r3, [r3, #3]
 8005026:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005028:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	059b      	lsls	r3, r3, #22
 800502e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005030:	4313      	orrs	r3, r2
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e036      	b.n	80050b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005068:	4313      	orrs	r3, r2
 800506a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11a      	bne.n	80050b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	78db      	ldrb	r3, [r3, #3]
 800509c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800509e:	430b      	orrs	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d161      	bne.n	80051a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fa:	d11f      	bne.n	800513c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800511a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800513a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515c:	4013      	ands	r3, r2
 800515e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	b29b      	uxth	r3, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005180:	4013      	ands	r3, r2
 8005182:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	440b      	add	r3, r1
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	4619      	mov	r1, r3
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <USB_DeactivateEndpoint+0x1b0>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]
 80051a6:	e060      	b.n	800526a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051be:	d11f      	bne.n	8005200 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	2101      	movs	r1, #1
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	43db      	mvns	r3, r3
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005220:	4013      	ands	r3, r2
 8005222:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	43db      	mvns	r3, r3
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005244:	4013      	ands	r3, r2
 8005246:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	0159      	lsls	r1, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	440b      	add	r3, r1
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	4619      	mov	r1, r3
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <USB_DeactivateEndpoint+0x1b4>)
 8005266:	4013      	ands	r3, r2
 8005268:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	ec337800 	.word	0xec337800
 800527c:	eff37800 	.word	0xeff37800

08005280 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b01      	cmp	r3, #1
 800529e:	f040 815c 	bne.w	800555a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d132      	bne.n	8005310 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	0cdb      	lsrs	r3, r3, #19
 800530a:	04db      	lsls	r3, r3, #19
 800530c:	6113      	str	r3, [r2, #16]
 800530e:	e074      	b.n	80053fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532a:	0cdb      	lsrs	r3, r3, #19
 800532c:	04db      	lsls	r3, r3, #19
 800532e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800534e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6959      	ldr	r1, [r3, #20]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	440b      	add	r3, r1
 800536c:	1e59      	subs	r1, r3, #1
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	fbb1 f3f3 	udiv	r3, r1, r3
 8005376:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005378:	4b9d      	ldr	r3, [pc, #628]	; (80055f0 <USB_EPStartXfer+0x370>)
 800537a:	400b      	ands	r3, r1
 800537c:	69b9      	ldr	r1, [r7, #24]
 800537e:	0148      	lsls	r0, r1, #5
 8005380:	69f9      	ldr	r1, [r7, #28]
 8005382:	4401      	add	r1, r0
 8005384:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005388:	4313      	orrs	r3, r2
 800538a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a2:	69b9      	ldr	r1, [r7, #24]
 80053a4:	0148      	lsls	r0, r1, #5
 80053a6:	69f9      	ldr	r1, [r7, #28]
 80053a8:	4401      	add	r1, r0
 80053aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053ae:	4313      	orrs	r3, r2
 80053b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	78db      	ldrb	r3, [r3, #3]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d11f      	bne.n	80053fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80053d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d14b      	bne.n	8005498 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	461a      	mov	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d128      	bne.n	8005476 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d110      	bne.n	8005456 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	e00f      	b.n	8005476 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e12f      	b.n	80056f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	78db      	ldrb	r3, [r3, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d015      	beq.n	80054ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8117 	beq.w	80056f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e6:	4313      	orrs	r3, r2
 80054e8:	634b      	str	r3, [r1, #52]	; 0x34
 80054ea:	e105      	b.n	80056f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d110      	bne.n	800551e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e00f      	b.n	800553e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68d9      	ldr	r1, [r3, #12]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	b298      	uxth	r0, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4603      	mov	r3, r0
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa2b 	bl	80059ae <USB_WritePacket>
 8005558:	e0ce      	b.n	80056f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005574:	0cdb      	lsrs	r3, r3, #19
 8005576:	04db      	lsls	r3, r3, #19
 8005578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005594:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005598:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800559c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d126      	bne.n	80055f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	0148      	lsls	r0, r1, #5
 80055c0:	69f9      	ldr	r1, [r7, #28]
 80055c2:	4401      	add	r1, r0
 80055c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055c8:	4313      	orrs	r3, r2
 80055ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ea:	6113      	str	r3, [r2, #16]
 80055ec:	e036      	b.n	800565c <USB_EPStartXfer+0x3dc>
 80055ee:	bf00      	nop
 80055f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	8afb      	ldrh	r3, [r7, #22]
 800561a:	04d9      	lsls	r1, r3, #19
 800561c:	4b39      	ldr	r3, [pc, #228]	; (8005704 <USB_EPStartXfer+0x484>)
 800561e:	400b      	ands	r3, r1
 8005620:	69b9      	ldr	r1, [r7, #24]
 8005622:	0148      	lsls	r0, r1, #5
 8005624:	69f9      	ldr	r1, [r7, #28]
 8005626:	4401      	add	r1, r0
 8005628:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	8af9      	ldrh	r1, [r7, #22]
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564c:	69b9      	ldr	r1, [r7, #24]
 800564e:	0148      	lsls	r0, r1, #5
 8005650:	69f9      	ldr	r1, [r7, #28]
 8005652:	4401      	add	r1, r0
 8005654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005658:	4313      	orrs	r3, r2
 800565a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10d      	bne.n	800567e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	460a      	mov	r2, r1
 800567c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	78db      	ldrb	r3, [r3, #3]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d128      	bne.n	80056d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d110      	bne.n	80056b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00f      	b.n	80056d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	1ff80000 	.word	0x1ff80000

08005708 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 80cd 	bne.w	80058c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d132      	bne.n	8005798 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	0cdb      	lsrs	r3, r3, #19
 8005792:	04db      	lsls	r3, r3, #19
 8005794:	6113      	str	r3, [r2, #16]
 8005796:	e04e      	b.n	8005836 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	0cdb      	lsrs	r3, r3, #19
 80057b4:	04db      	lsls	r3, r3, #19
 80057b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800580e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	0148      	lsls	r0, r1, #5
 800582a:	6979      	ldr	r1, [r7, #20]
 800582c:	4401      	add	r1, r0
 800582e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005832:	4313      	orrs	r3, r2
 8005834:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d11e      	bne.n	800587a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e092      	b.n	80059a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005898:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07e      	beq.n	80059a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	6979      	ldr	r1, [r7, #20]
 80058ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058be:	4313      	orrs	r3, r2
 80058c0:	634b      	str	r3, [r1, #52]	; 0x34
 80058c2:	e06d      	b.n	80059a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058de:	0cdb      	lsrs	r3, r3, #19
 80058e0:	04db      	lsls	r3, r3, #19
 80058e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005902:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005906:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005936:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	0148      	lsls	r0, r1, #5
 8005952:	6979      	ldr	r1, [r7, #20]
 8005954:	4401      	add	r1, r0
 8005956:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800595a:	4313      	orrs	r3, r2
 800595c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10d      	bne.n	8005980 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	68d9      	ldr	r1, [r3, #12]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	460a      	mov	r2, r1
 800597e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b089      	sub	sp, #36	; 0x24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	4611      	mov	r1, r2
 80059ba:	461a      	mov	r2, r3
 80059bc:	460b      	mov	r3, r1
 80059be:	71fb      	strb	r3, [r7, #7]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d123      	bne.n	8005a1c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059d4:	88bb      	ldrh	r3, [r7, #4]
 80059d6:	3303      	adds	r3, #3
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e018      	b.n	8005a14 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	031a      	lsls	r2, r3, #12
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ee:	461a      	mov	r2, r3
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3e2      	bcc.n	80059e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3724      	adds	r7, #36	; 0x24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b08b      	sub	sp, #44	; 0x2c
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	e014      	b.n	8005a80 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	3301      	adds	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3e6      	bcc.n	8005a56 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a88:	8bfb      	ldrh	r3, [r7, #30]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01e      	beq.n	8005acc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f107 0310 	add.w	r3, r7, #16
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	701a      	strb	r2, [r3, #0]
      i++;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ac0:	8bfb      	ldrh	r3, [r7, #30]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ac6:	8bfb      	ldrh	r3, [r7, #30]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ea      	bne.n	8005aa2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	372c      	adds	r7, #44	; 0x2c
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d12c      	bne.n	8005b50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	db12      	blt.n	8005b2e <USB_EPSetStall+0x54>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00f      	beq.n	8005b2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e02b      	b.n	8005ba8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	db12      	blt.n	8005b88 <USB_EPSetStall+0xae>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00f      	beq.n	8005b88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ba6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d128      	bne.n	8005c24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	78db      	ldrb	r3, [r3, #3]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d003      	beq.n	8005c02 <USB_EPClearStall+0x4c>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d138      	bne.n	8005c74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e027      	b.n	8005c74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	78db      	ldrb	r3, [r3, #3]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d003      	beq.n	8005c54 <USB_EPClearStall+0x9e>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d10f      	bne.n	8005c74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ca4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfc:	f023 0302 	bic.w	r3, r3, #2
 8005d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4013      	ands	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	0c1b      	lsrs	r3, r3, #16
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	b29b      	uxth	r3, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4c:	01db      	lsls	r3, r3, #7
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4013      	ands	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0301 	and.w	r3, r3, #1
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005eb2:	f023 0307 	bic.w	r3, r3, #7
 8005eb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	333c      	adds	r3, #60	; 0x3c
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <USB_EP0_OutStart+0xb8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d90a      	bls.n	8005f16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f10:	d101      	bne.n	8005f16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e037      	b.n	8005f86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f44:	f043 0318 	orr.w	r3, r3, #24
 8005f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d10f      	bne.n	8005f84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	4f54300a 	.word	0x4f54300a

08005f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <USB_CoreReset+0x60>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e01a      	b.n	8005fea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	daf3      	bge.n	8005fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f043 0201 	orr.w	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <USB_CoreReset+0x60>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d0f1      	beq.n	8005fcc <USB_CoreReset+0x34>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006008:	2010      	movs	r0, #16
 800600a:	f001 fee5 	bl	8007dd8 <USBD_static_malloc>
 800600e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d105      	bne.n	8006022 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800601e:	2302      	movs	r3, #2
 8006020:	e01b      	b.n	800605a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7c1b      	ldrb	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2207      	movs	r2, #7
 8006036:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006038:	e002      	b.n	8006040 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	220a      	movs	r2, #10
 800603e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006040:	2304      	movs	r3, #4
 8006042:	2203      	movs	r2, #3
 8006044:	2181      	movs	r1, #129	; 0x81
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fdb5 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800606e:	2181      	movs	r1, #129	; 0x81
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fdc6 	bl	8007c02 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006092:	4618      	mov	r0, r3
 8006094:	f001 feae 	bl	8007df4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060bc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0e8      	b.n	80062a2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d046      	beq.n	800616a <USBD_HID_Setup+0xbe>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	f040 80d8 	bne.w	8006292 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	3b02      	subs	r3, #2
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d836      	bhi.n	800615a <USBD_HID_Setup+0xae>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBD_HID_Setup+0x48>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	0800614b 	.word	0x0800614b
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	0800615b 	.word	0x0800615b
 8006100:	0800615b 	.word	0x0800615b
 8006104:	0800615b 	.word	0x0800615b
 8006108:	0800615b 	.word	0x0800615b
 800610c:	0800615b 	.word	0x0800615b
 8006110:	0800615b 	.word	0x0800615b
 8006114:	08006139 	.word	0x08006139
 8006118:	0800611d 	.word	0x0800611d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]
          break;
 8006128:	e01e      	b.n	8006168 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f9fa 	bl	800752a <USBD_CtlSendData>
          break;
 8006136:	e017      	b.n	8006168 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b29b      	uxth	r3, r3
 8006140:	b2db      	uxtb	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	605a      	str	r2, [r3, #4]
          break;
 8006148:	e00e      	b.n	8006168 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3304      	adds	r3, #4
 800614e:	2201      	movs	r2, #1
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f9e9 	bl	800752a <USBD_CtlSendData>
          break;
 8006158:	e006      	b.n	8006168 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f973 	bl	8007448 <USBD_CtlError>
          ret = USBD_FAIL;
 8006162:	2303      	movs	r3, #3
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	bf00      	nop
      }
      break;
 8006168:	e09a      	b.n	80062a0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b0b      	cmp	r3, #11
 8006170:	f200 8086 	bhi.w	8006280 <USBD_HID_Setup+0x1d4>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <USBD_HID_Setup+0xd0>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061ad 	.word	0x080061ad
 8006180:	0800628f 	.word	0x0800628f
 8006184:	08006281 	.word	0x08006281
 8006188:	08006281 	.word	0x08006281
 800618c:	08006281 	.word	0x08006281
 8006190:	08006281 	.word	0x08006281
 8006194:	080061d7 	.word	0x080061d7
 8006198:	08006281 	.word	0x08006281
 800619c:	08006281 	.word	0x08006281
 80061a0:	08006281 	.word	0x08006281
 80061a4:	0800622f 	.word	0x0800622f
 80061a8:	08006259 	.word	0x08006259
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d107      	bne.n	80061c8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b8:	f107 030a 	add.w	r3, r7, #10
 80061bc:	2202      	movs	r2, #2
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f9b2 	bl	800752a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c6:	e063      	b.n	8006290 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f93c 	bl	8007448 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	75fb      	strb	r3, [r7, #23]
          break;
 80061d4:	e05c      	b.n	8006290 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	885b      	ldrh	r3, [r3, #2]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b22      	cmp	r3, #34	; 0x22
 80061e0:	d108      	bne.n	80061f4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	88db      	ldrh	r3, [r3, #6]
 80061e6:	2b4a      	cmp	r3, #74	; 0x4a
 80061e8:	bf28      	it	cs
 80061ea:	234a      	movcs	r3, #74	; 0x4a
 80061ec:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80061ee:	4b2f      	ldr	r3, [pc, #188]	; (80062ac <USBD_HID_Setup+0x200>)
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	e015      	b.n	8006220 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b21      	cmp	r3, #33	; 0x21
 80061fe:	d108      	bne.n	8006212 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <USBD_HID_Setup+0x204>)
 8006202:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	88db      	ldrh	r3, [r3, #6]
 8006208:	2b09      	cmp	r3, #9
 800620a:	bf28      	it	cs
 800620c:	2309      	movcs	r3, #9
 800620e:	82bb      	strh	r3, [r7, #20]
 8006210:	e006      	b.n	8006220 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f917 	bl	8007448 <USBD_CtlError>
            ret = USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	75fb      	strb	r3, [r7, #23]
            break;
 800621e:	e037      	b.n	8006290 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006220:	8abb      	ldrh	r3, [r7, #20]
 8006222:	461a      	mov	r2, r3
 8006224:	6939      	ldr	r1, [r7, #16]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 f97f 	bl	800752a <USBD_CtlSendData>
          break;
 800622c:	e030      	b.n	8006290 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d107      	bne.n	800624a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3308      	adds	r3, #8
 800623e:	2201      	movs	r2, #1
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 f971 	bl	800752a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006248:	e022      	b.n	8006290 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f8fb 	bl	8007448 <USBD_CtlError>
            ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
          break;
 8006256:	e01b      	b.n	8006290 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d106      	bne.n	8006272 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	885b      	ldrh	r3, [r3, #2]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006270:	e00e      	b.n	8006290 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f8e7 	bl	8007448 <USBD_CtlError>
            ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
          break;
 800627e:	e007      	b.n	8006290 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f8e0 	bl	8007448 <USBD_CtlError>
          ret = USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	75fb      	strb	r3, [r7, #23]
          break;
 800628c:	e000      	b.n	8006290 <USBD_HID_Setup+0x1e4>
          break;
 800628e:	bf00      	nop
      }
      break;
 8006290:	e006      	b.n	80062a0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f8d7 	bl	8007448 <USBD_CtlError>
      ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	bf00      	nop
  }

  return (uint8_t)ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000108 	.word	0x20000108
 80062b0:	200000f0 	.word	0x200000f0

080062b4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2222      	movs	r2, #34	; 0x22
 80062c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000084 	.word	0x20000084

080062d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2222      	movs	r2, #34	; 0x22
 80062e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80062e2:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	200000a8 	.word	0x200000a8

080062f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2222      	movs	r2, #34	; 0x22
 8006300:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006302:	4b03      	ldr	r3, [pc, #12]	; (8006310 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	200000cc 	.word	0x200000cc

08006314 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006326:	2200      	movs	r2, #0
 8006328:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220a      	movs	r2, #10
 8006344:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006346:	4b03      	ldr	r3, [pc, #12]	; (8006354 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	200000fc 	.word	0x200000fc

08006358 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e01f      	b.n	80063b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	79fa      	ldrb	r2, [r7, #7]
 80063a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fb9f 	bl	8007ae8 <USBD_LL_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e016      	b.n	80063fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f107 020e 	add.w	r2, r7, #14
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	4602      	mov	r2, r0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 fbb6 	bl	8007b80 <USBD_LL_Start>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006440:	2303      	movs	r3, #3
 8006442:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	4611      	mov	r1, r2
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	4611      	mov	r1, r2
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
  }

  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 ff90 	bl	80073d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d01a      	beq.n	800650e <USBD_LL_SetupStage+0x72>
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d822      	bhi.n	8006522 <USBD_LL_SetupStage+0x86>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <USBD_LL_SetupStage+0x4a>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d00a      	beq.n	80064fa <USBD_LL_SetupStage+0x5e>
 80064e4:	e01d      	b.n	8006522 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa62 	bl	80069b8 <USBD_StdDevReq>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e020      	b.n	800653c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fac6 	bl	8006a94 <USBD_StdItfReq>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e016      	b.n	800653c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb05 	bl	8006b26 <USBD_StdEPReq>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e00c      	b.n	800653c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800652c:	b2db      	uxtb	r3, r3
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fb85 	bl	8007c40 <USBD_LL_StallEP>
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
      break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	460b      	mov	r3, r1
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d138      	bne.n	80065cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006568:	2b03      	cmp	r3, #3
 800656a:	d14a      	bne.n	8006602 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	429a      	cmp	r2, r3
 8006576:	d913      	bls.n	80065a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	1ad2      	subs	r2, r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4293      	cmp	r3, r2
 8006590:	bf28      	it	cs
 8006592:	4613      	movcs	r3, r2
 8006594:	461a      	mov	r2, r3
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fff2 	bl	8007582 <USBD_CtlContinueRx>
 800659e:	e030      	b.n	8006602 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d10b      	bne.n	80065c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 ffed 	bl	80075a4 <USBD_CtlSendStatus>
 80065ca:	e01a      	b.n	8006602 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d114      	bne.n	8006602 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	7afa      	ldrb	r2, [r7, #11]
 80065ee:	4611      	mov	r1, r2
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	4798      	blx	r3
 80065f4:	4603      	mov	r3, r0
 80065f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	e000      	b.n	8006604 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	460b      	mov	r3, r1
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d16b      	bne.n	80066f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3314      	adds	r3, #20
 8006624:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800662c:	2b02      	cmp	r3, #2
 800662e:	d156      	bne.n	80066de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	429a      	cmp	r2, r3
 800663a:	d914      	bls.n	8006666 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	1ad2      	subs	r2, r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	461a      	mov	r2, r3
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 ff84 	bl	8007560 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006658:	2300      	movs	r3, #0
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f001 fb98 	bl	8007d94 <USBD_LL_PrepareReceive>
 8006664:	e03b      	b.n	80066de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	d11c      	bne.n	80066ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800667a:	429a      	cmp	r2, r3
 800667c:	d316      	bcc.n	80066ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d20f      	bcs.n	80066ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800668c:	2200      	movs	r2, #0
 800668e:	2100      	movs	r1, #0
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 ff65 	bl	8007560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800669e:	2300      	movs	r3, #0
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 fb75 	bl	8007d94 <USBD_LL_PrepareReceive>
 80066aa:	e018      	b.n	80066de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d10b      	bne.n	80066d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 fab4 	bl	8007c40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 ff76 	bl	80075ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d122      	bne.n	800672e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fe98 	bl	800641e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066f6:	e01a      	b.n	800672e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b03      	cmp	r3, #3
 8006702:	d114      	bne.n	800672e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	7afa      	ldrb	r2, [r7, #11]
 800671a:	4611      	mov	r1, r2
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	4798      	blx	r3
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	e000      	b.n	8006730 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	e02f      	b.n	80067cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6852      	ldr	r2, [r2, #4]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	4611      	mov	r1, r2
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 fa0a 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2240      	movs	r2, #64	; 0x40
 80067ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	2200      	movs	r2, #0
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 f9fc 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006802:	b2da      	uxtb	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b04      	cmp	r3, #4
 8006832:	d106      	bne.n	8006842 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	e012      	b.n	800688c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b03      	cmp	r3, #3
 8006870:	d10b      	bne.n	800688a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e014      	b.n	80068d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d10d      	bne.n	80068d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e014      	b.n	8006924 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b03      	cmp	r3, #3
 8006904:	d10d      	bne.n	8006922 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	4611      	mov	r1, r2
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	4611      	mov	r1, r2
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
  }

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800697a:	b480      	push	{r7}
 800697c:	b087      	sub	sp, #28
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3301      	adds	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006998:	8a3b      	ldrh	r3, [r7, #16]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	b21a      	sxth	r2, r3
 800699e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069a8:	89fb      	ldrh	r3, [r7, #14]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d005      	beq.n	80069de <USBD_StdDevReq+0x26>
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d853      	bhi.n	8006a7e <USBD_StdDevReq+0xc6>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <USBD_StdDevReq+0x3a>
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d14f      	bne.n	8006a7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
      break;
 80069f0:	e04a      	b.n	8006a88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	d83b      	bhi.n	8006a72 <USBD_StdDevReq+0xba>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <USBD_StdDevReq+0x48>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006a73 	.word	0x08006a73
 8006a0c:	08006a5f 	.word	0x08006a5f
 8006a10:	08006a73 	.word	0x08006a73
 8006a14:	08006a33 	.word	0x08006a33
 8006a18:	08006a29 	.word	0x08006a29
 8006a1c:	08006a73 	.word	0x08006a73
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a3d 	.word	0x08006a3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9de 	bl	8006dec <USBD_GetDescriptor>
          break;
 8006a30:	e024      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fb43 	bl	80070c0 <USBD_SetAddress>
          break;
 8006a3a:	e01f      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb82 	bl	8007148 <USBD_SetConfig>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
          break;
 8006a48:	e018      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc21 	bl	8007294 <USBD_GetConfig>
          break;
 8006a52:	e013      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc52 	bl	8007300 <USBD_GetStatus>
          break;
 8006a5c:	e00e      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc81 	bl	8007368 <USBD_SetFeature>
          break;
 8006a66:	e009      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fc90 	bl	8007390 <USBD_ClrFeature>
          break;
 8006a70:	e004      	b.n	8006a7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fce7 	bl	8007448 <USBD_CtlError>
          break;
 8006a7a:	bf00      	nop
      }
      break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fce1 	bl	8007448 <USBD_CtlError>
      break;
 8006a86:	bf00      	nop
  }

  return ret;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d005      	beq.n	8006aba <USBD_StdItfReq+0x26>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d82f      	bhi.n	8006b12 <USBD_StdItfReq+0x7e>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <USBD_StdItfReq+0x26>
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d12b      	bne.n	8006b12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d81d      	bhi.n	8006b04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	889b      	ldrh	r3, [r3, #4]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d813      	bhi.n	8006afa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	88db      	ldrh	r3, [r3, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d110      	bne.n	8006b0e <USBD_StdItfReq+0x7a>
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10d      	bne.n	8006b0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fd56 	bl	80075a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006af8:	e009      	b.n	8006b0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fca3 	bl	8007448 <USBD_CtlError>
          break;
 8006b02:	e004      	b.n	8006b0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fc9e 	bl	8007448 <USBD_CtlError>
          break;
 8006b0c:	e000      	b.n	8006b10 <USBD_StdItfReq+0x7c>
          break;
 8006b0e:	bf00      	nop
      }
      break;
 8006b10:	e004      	b.n	8006b1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc97 	bl	8007448 <USBD_CtlError>
      break;
 8006b1a:	bf00      	nop
  }

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	889b      	ldrh	r3, [r3, #4]
 8006b38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d007      	beq.n	8006b56 <USBD_StdEPReq+0x30>
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	f200 8145 	bhi.w	8006dd6 <USBD_StdEPReq+0x2b0>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <USBD_StdEPReq+0x44>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	f040 8140 	bne.w	8006dd6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	e13a      	b.n	8006de0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d007      	beq.n	8006b82 <USBD_StdEPReq+0x5c>
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	f300 8129 	bgt.w	8006dca <USBD_StdEPReq+0x2a4>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d07f      	beq.n	8006c7c <USBD_StdEPReq+0x156>
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d03c      	beq.n	8006bfa <USBD_StdEPReq+0xd4>
 8006b80:	e123      	b.n	8006dca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d002      	beq.n	8006b94 <USBD_StdEPReq+0x6e>
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d016      	beq.n	8006bc0 <USBD_StdEPReq+0x9a>
 8006b92:	e02c      	b.n	8006bee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <USBD_StdEPReq+0x90>
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d00a      	beq.n	8006bb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f84b 	bl	8007c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006baa:	2180      	movs	r1, #128	; 0x80
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f847 	bl	8007c40 <USBD_LL_StallEP>
 8006bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bb4:	e020      	b.n	8006bf8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc45 	bl	8007448 <USBD_CtlError>
              break;
 8006bbe:	e01b      	b.n	8006bf8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	885b      	ldrh	r3, [r3, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10e      	bne.n	8006be6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <USBD_StdEPReq+0xc0>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d008      	beq.n	8006be6 <USBD_StdEPReq+0xc0>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f82d 	bl	8007c40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fcdc 	bl	80075a4 <USBD_CtlSendStatus>

              break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc29 	bl	8007448 <USBD_CtlError>
              break;
 8006bf6:	bf00      	nop
          }
          break;
 8006bf8:	e0ec      	b.n	8006dd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d002      	beq.n	8006c0c <USBD_StdEPReq+0xe6>
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d016      	beq.n	8006c38 <USBD_StdEPReq+0x112>
 8006c0a:	e030      	b.n	8006c6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <USBD_StdEPReq+0x108>
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	d00a      	beq.n	8006c2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f80f 	bl	8007c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f80b 	bl	8007c40 <USBD_LL_StallEP>
 8006c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c2c:	e025      	b.n	8006c7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fc09 	bl	8007448 <USBD_CtlError>
              break;
 8006c36:	e020      	b.n	8006c7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11b      	bne.n	8006c78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f815 	bl	8007c7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fca5 	bl	80075a4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c6c:	e004      	b.n	8006c78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fbe9 	bl	8007448 <USBD_CtlError>
              break;
 8006c76:	e000      	b.n	8006c7a <USBD_StdEPReq+0x154>
              break;
 8006c78:	bf00      	nop
          }
          break;
 8006c7a:	e0ab      	b.n	8006dd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d002      	beq.n	8006c8e <USBD_StdEPReq+0x168>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d032      	beq.n	8006cf2 <USBD_StdEPReq+0x1cc>
 8006c8c:	e097      	b.n	8006dbe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <USBD_StdEPReq+0x17e>
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d004      	beq.n	8006ca4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fbd3 	bl	8007448 <USBD_CtlError>
                break;
 8006ca2:	e091      	b.n	8006dc8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da0b      	bge.n	8006cc4 <USBD_StdEPReq+0x19e>
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3310      	adds	r3, #16
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	e00b      	b.n	8006cdc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3304      	adds	r3, #4
 8006cdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fc1d 	bl	800752a <USBD_CtlSendData>
              break;
 8006cf0:	e06a      	b.n	8006dc8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da11      	bge.n	8006d1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d117      	bne.n	8006d44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb96 	bl	8007448 <USBD_CtlError>
                  break;
 8006d1c:	e054      	b.n	8006dc8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb83 	bl	8007448 <USBD_CtlError>
                  break;
 8006d42:	e041      	b.n	8006dc8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da0b      	bge.n	8006d64 <USBD_StdEPReq+0x23e>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	3310      	adds	r3, #16
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	3304      	adds	r3, #4
 8006d62:	e00b      	b.n	8006d7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <USBD_StdEPReq+0x264>
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d103      	bne.n	8006d92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e00e      	b.n	8006db0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ff90 	bl	8007cbc <USBD_LL_IsStallEP>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2202      	movs	r2, #2
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fbb7 	bl	800752a <USBD_CtlSendData>
              break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb41 	bl	8007448 <USBD_CtlError>
              break;
 8006dc6:	bf00      	nop
          }
          break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb3b 	bl	8007448 <USBD_CtlError>
          break;
 8006dd2:	bf00      	nop
      }
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb35 	bl	8007448 <USBD_CtlError>
      break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b06      	cmp	r3, #6
 8006e0e:	f200 8128 	bhi.w	8007062 <USBD_GetDescriptor+0x276>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_GetDescriptor+0x2c>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08007063 	.word	0x08007063
 8006e28:	08007063 	.word	0x08007063
 8006e2c:	08007003 	.word	0x08007003
 8006e30:	0800702f 	.word	0x0800702f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      break;
 8006e4a:	e112      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e6e:	e100      	b.n	8007072 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e0f2      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	f200 80ac 	bhi.w	8006ff0 <USBD_GetDescriptor+0x204>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <USBD_GetDescriptor+0xb4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f89 	.word	0x08006f89
 8006eb4:	08006fbd 	.word	0x08006fbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e091      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fab2 	bl	8007448 <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e089      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e077      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa98 	bl	8007448 <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e06f      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f42:	e05d      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa7e 	bl	8007448 <USBD_CtlError>
            err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
          break;
 8006f52:	e055      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f76:	e043      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa64 	bl	8007448 <USBD_CtlError>
            err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
          break;
 8006f86:	e03b      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006faa:	e029      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa4a 	bl	8007448 <USBD_CtlError>
            err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fba:	e021      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e00f      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa30 	bl	8007448 <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e007      	b.n	8007000 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa28 	bl	8007448 <USBD_CtlError>
          err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006ffe:	bf00      	nop
      }
      break;
 8007000:	e037      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800701c:	e029      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa11 	bl	8007448 <USBD_CtlError>
        err++;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3301      	adds	r3, #1
 800702a:	72fb      	strb	r3, [r7, #11]
      break;
 800702c:	e021      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10d      	bne.n	8007052 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	4610      	mov	r0, r2
 8007044:	4798      	blx	r3
 8007046:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	2207      	movs	r2, #7
 800704e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007050:	e00f      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9f7 	bl	8007448 <USBD_CtlError>
        err++;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	3301      	adds	r3, #1
 800705e:	72fb      	strb	r3, [r7, #11]
      break;
 8007060:	e007      	b.n	8007072 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f9ef 	bl	8007448 <USBD_CtlError>
      err++;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	3301      	adds	r3, #1
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	bf00      	nop
  }

  if (err != 0U)
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11e      	bne.n	80070b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	88db      	ldrh	r3, [r3, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007080:	893b      	ldrh	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88da      	ldrh	r2, [r3, #6]
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	4293      	cmp	r3, r2
 800708e:	bf28      	it	cs
 8007090:	4613      	movcs	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	461a      	mov	r2, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa44 	bl	800752a <USBD_CtlSendData>
 80070a2:	e009      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9ce 	bl	8007448 <USBD_CtlError>
 80070ac:	e004      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa78 	bl	80075a4 <USBD_CtlSendStatus>
 80070b4:	e000      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    return;
 80070b6:	bf00      	nop
  }
}
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d131      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d12d      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	2b7f      	cmp	r3, #127	; 0x7f
 80070e0:	d829      	bhi.n	8007136 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d104      	bne.n	8007104 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9a3 	bl	8007448 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	e01d      	b.n	8007140 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fdff 	bl	8007d14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa44 	bl	80075a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	e009      	b.n	8007140 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	e004      	b.n	8007140 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f985 	bl	8007448 <USBD_CtlError>
  }
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b4c      	ldr	r3, [pc, #304]	; (8007290 <USBD_SetConfig+0x148>)
 800715e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007160:	4b4b      	ldr	r3, [pc, #300]	; (8007290 <USBD_SetConfig+0x148>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d905      	bls.n	8007174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f96c 	bl	8007448 <USBD_CtlError>
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e088      	b.n	8007286 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d002      	beq.n	8007186 <USBD_SetConfig+0x3e>
 8007180:	2b03      	cmp	r3, #3
 8007182:	d025      	beq.n	80071d0 <USBD_SetConfig+0x88>
 8007184:	e071      	b.n	800726a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007186:	4b42      	ldr	r3, [pc, #264]	; (8007290 <USBD_SetConfig+0x148>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01c      	beq.n	80071c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800718e:	4b40      	ldr	r3, [pc, #256]	; (8007290 <USBD_SetConfig+0x148>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007198:	4b3d      	ldr	r3, [pc, #244]	; (8007290 <USBD_SetConfig+0x148>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff f948 	bl	8006434 <USBD_SetClassConfig>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f949 	bl	8007448 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071b6:	e065      	b.n	8007284 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9f3 	bl	80075a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2203      	movs	r2, #3
 80071c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071c6:	e05d      	b.n	8007284 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9eb 	bl	80075a4 <USBD_CtlSendStatus>
      break;
 80071ce:	e059      	b.n	8007284 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071d0:	4b2f      	ldr	r3, [pc, #188]	; (8007290 <USBD_SetConfig+0x148>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d112      	bne.n	80071fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071e0:	4b2b      	ldr	r3, [pc, #172]	; (8007290 <USBD_SetConfig+0x148>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ea:	4b29      	ldr	r3, [pc, #164]	; (8007290 <USBD_SetConfig+0x148>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff f93b 	bl	800646c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9d4 	bl	80075a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071fc:	e042      	b.n	8007284 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071fe:	4b24      	ldr	r3, [pc, #144]	; (8007290 <USBD_SetConfig+0x148>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d02a      	beq.n	8007262 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f929 	bl	800646c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800721a:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <USBD_SetConfig+0x148>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007224:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <USBD_SetConfig+0x148>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff f902 	bl	8006434 <USBD_SetClassConfig>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00f      	beq.n	800725a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f903 	bl	8007448 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f90e 	bl	800646c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007258:	e014      	b.n	8007284 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f9a2 	bl	80075a4 <USBD_CtlSendStatus>
      break;
 8007260:	e010      	b.n	8007284 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f99e 	bl	80075a4 <USBD_CtlSendStatus>
      break;
 8007268:	e00c      	b.n	8007284 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8eb 	bl	8007448 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <USBD_SetConfig+0x148>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff f8f7 	bl	800646c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800727e:	2303      	movs	r3, #3
 8007280:	73fb      	strb	r3, [r7, #15]
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000734 	.word	0x20000734

08007294 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d004      	beq.n	80072b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f8cd 	bl	8007448 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ae:	e023      	b.n	80072f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	dc02      	bgt.n	80072c2 <USBD_GetConfig+0x2e>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc03      	bgt.n	80072c8 <USBD_GetConfig+0x34>
 80072c0:	e015      	b.n	80072ee <USBD_GetConfig+0x5a>
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d00b      	beq.n	80072de <USBD_GetConfig+0x4a>
 80072c6:	e012      	b.n	80072ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3308      	adds	r3, #8
 80072d2:	2201      	movs	r2, #1
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f927 	bl	800752a <USBD_CtlSendData>
        break;
 80072dc:	e00c      	b.n	80072f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3304      	adds	r3, #4
 80072e2:	2201      	movs	r2, #1
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f91f 	bl	800752a <USBD_CtlSendData>
        break;
 80072ec:	e004      	b.n	80072f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8a9 	bl	8007448 <USBD_CtlError>
        break;
 80072f6:	bf00      	nop
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	b2db      	uxtb	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	2b02      	cmp	r3, #2
 8007316:	d81e      	bhi.n	8007356 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	88db      	ldrh	r3, [r3, #6]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d004      	beq.n	800732a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f890 	bl	8007448 <USBD_CtlError>
        break;
 8007328:	e01a      	b.n	8007360 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f043 0202 	orr.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	330c      	adds	r3, #12
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8eb 	bl	800752a <USBD_CtlSendData>
      break;
 8007354:	e004      	b.n	8007360 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f875 	bl	8007448 <USBD_CtlError>
      break;
 800735e:	bf00      	nop
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	885b      	ldrh	r3, [r3, #2]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d106      	bne.n	8007388 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f90e 	bl	80075a4 <USBD_CtlSendStatus>
  }
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d80b      	bhi.n	80073c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10c      	bne.n	80073ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8f3 	bl	80075a4 <USBD_CtlSendStatus>
      }
      break;
 80073be:	e004      	b.n	80073ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f840 	bl	8007448 <USBD_CtlError>
      break;
 80073c8:	e000      	b.n	80073cc <USBD_ClrFeature+0x3c>
      break;
 80073ca:	bf00      	nop
  }
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fabb 	bl	800697a <SWAPBYTE>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff faae 	bl	800697a <SWAPBYTE>
 800741e:	4603      	mov	r3, r0
 8007420:	461a      	mov	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff faa1 	bl	800697a <SWAPBYTE>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	80da      	strh	r2, [r3, #6]
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fbf3 	bl	8007c40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbef 	bl	8007c40 <USBD_LL_StallEP>
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d036      	beq.n	80074ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007484:	6938      	ldr	r0, [r7, #16]
 8007486:	f000 f836 	bl	80074f6 <USBD_GetLen>
 800748a:	4603      	mov	r3, r0
 800748c:	3301      	adds	r3, #1
 800748e:	b29b      	uxth	r3, r3
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	3301      	adds	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	4413      	add	r3, r2
 80074b0:	2203      	movs	r2, #3
 80074b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	3301      	adds	r3, #1
 80074b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074ba:	e013      	b.n	80074e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	3301      	adds	r3, #1
 80074cc:	613b      	str	r3, [r7, #16]
    idx++;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	3301      	adds	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	4413      	add	r3, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	3301      	adds	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e7      	bne.n	80074bc <USBD_GetString+0x52>
 80074ec:	e000      	b.n	80074f0 <USBD_GetString+0x86>
    return;
 80074ee:	bf00      	nop
  }
}
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007506:	e005      	b.n	8007514 <USBD_GetLen+0x1e>
  {
    len++;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	3301      	adds	r3, #1
 800750c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3301      	adds	r3, #1
 8007512:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f5      	bne.n	8007508 <USBD_GetLen+0x12>
  }

  return len;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2202      	movs	r2, #2
 800753a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fbfe 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fbed 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	2100      	movs	r1, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fbfd 	bl	8007d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075b4:	2300      	movs	r3, #0
 80075b6:	2200      	movs	r2, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbc9 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2205      	movs	r2, #5
 80075d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fbd7 	bl	8007d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075f4:	2200      	movs	r2, #0
 80075f6:	490e      	ldr	r1, [pc, #56]	; (8007630 <MX_USB_DEVICE_Init+0x40>)
 80075f8:	480e      	ldr	r0, [pc, #56]	; (8007634 <MX_USB_DEVICE_Init+0x44>)
 80075fa:	f7fe fead 	bl	8006358 <USBD_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007604:	f7f9 fa3e 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007608:	490b      	ldr	r1, [pc, #44]	; (8007638 <MX_USB_DEVICE_Init+0x48>)
 800760a:	480a      	ldr	r0, [pc, #40]	; (8007634 <MX_USB_DEVICE_Init+0x44>)
 800760c:	f7fe fed4 	bl	80063b8 <USBD_RegisterClass>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007616:	f7f9 fa35 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800761a:	4806      	ldr	r0, [pc, #24]	; (8007634 <MX_USB_DEVICE_Init+0x44>)
 800761c:	f7fe fef3 	bl	8006406 <USBD_Start>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007626:	f7f9 fa2d 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800762a:	bf00      	nop
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000154 	.word	0x20000154
 8007634:	20000738 	.word	0x20000738
 8007638:	2000004c 	.word	0x2000004c

0800763c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2212      	movs	r2, #18
 800764c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800764e:	4b03      	ldr	r3, [pc, #12]	; (800765c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000170 	.word	0x20000170

08007660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2204      	movs	r2, #4
 8007670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007672:	4b03      	ldr	r3, [pc, #12]	; (8007680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000184 	.word	0x20000184

08007684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800769a:	4808      	ldr	r0, [pc, #32]	; (80076bc <USBD_FS_ProductStrDescriptor+0x38>)
 800769c:	f7ff fee5 	bl	800746a <USBD_GetString>
 80076a0:	e004      	b.n	80076ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <USBD_FS_ProductStrDescriptor+0x38>)
 80076a8:	f7ff fedf 	bl	800746a <USBD_GetString>
  }
  return USBD_StrDesc;
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000a08 	.word	0x20000a08
 80076bc:	08008804 	.word	0x08008804

080076c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	4904      	ldr	r1, [pc, #16]	; (80076e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076d0:	4804      	ldr	r0, [pc, #16]	; (80076e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076d2:	f7ff feca 	bl	800746a <USBD_GetString>
  return USBD_StrDesc;
 80076d6:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20000a08 	.word	0x20000a08
 80076e4:	0800881c 	.word	0x0800881c

080076e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	221a      	movs	r2, #26
 80076f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076fa:	f000 f843 	bl	8007784 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076fe:	4b02      	ldr	r3, [pc, #8]	; (8007708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000188 	.word	0x20000188

0800770c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007722:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007724:	f7ff fea1 	bl	800746a <USBD_GetString>
 8007728:	e004      	b.n	8007734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4904      	ldr	r1, [pc, #16]	; (8007740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007730:	f7ff fe9b 	bl	800746a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000a08 	.word	0x20000a08
 8007744:	08008830 	.word	0x08008830

08007748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	4907      	ldr	r1, [pc, #28]	; (800777c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800775e:	4808      	ldr	r0, [pc, #32]	; (8007780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007760:	f7ff fe83 	bl	800746a <USBD_GetString>
 8007764:	e004      	b.n	8007770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4904      	ldr	r1, [pc, #16]	; (800777c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800776a:	4805      	ldr	r0, [pc, #20]	; (8007780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800776c:	f7ff fe7d 	bl	800746a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000a08 	.word	0x20000a08
 8007780:	0800883c 	.word	0x0800883c

08007784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <Get_SerialNum+0x44>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <Get_SerialNum+0x48>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <Get_SerialNum+0x4c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077aa:	2208      	movs	r2, #8
 80077ac:	4909      	ldr	r1, [pc, #36]	; (80077d4 <Get_SerialNum+0x50>)
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f814 	bl	80077dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077b4:	2204      	movs	r2, #4
 80077b6:	4908      	ldr	r1, [pc, #32]	; (80077d8 <Get_SerialNum+0x54>)
 80077b8:	68b8      	ldr	r0, [r7, #8]
 80077ba:	f000 f80f 	bl	80077dc <IntToUnicode>
  }
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	1fff7a10 	.word	0x1fff7a10
 80077cc:	1fff7a14 	.word	0x1fff7a14
 80077d0:	1fff7a18 	.word	0x1fff7a18
 80077d4:	2000018a 	.word	0x2000018a
 80077d8:	2000019a 	.word	0x2000019a

080077dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
 80077f2:	e027      	b.n	8007844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	0f1b      	lsrs	r3, r3, #28
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d80b      	bhi.n	8007814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0f1b      	lsrs	r3, r3, #28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	4619      	mov	r1, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	440b      	add	r3, r1
 800780c:	3230      	adds	r2, #48	; 0x30
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e00a      	b.n	800782a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	0f1b      	lsrs	r3, r3, #28
 8007818:	b2da      	uxtb	r2, r3
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4619      	mov	r1, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	440b      	add	r3, r1
 8007824:	3237      	adds	r2, #55	; 0x37
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	3301      	adds	r3, #1
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	3301      	adds	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
 8007844:	7dfa      	ldrb	r2, [r7, #23]
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	429a      	cmp	r2, r3
 800784a:	d3d3      	bcc.n	80077f4 <IntToUnicode+0x18>
  }
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	609a      	str	r2, [r3, #8]
 8007870:	60da      	str	r2, [r3, #12]
 8007872:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800787c:	d13a      	bne.n	80078f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	6313      	str	r3, [r2, #48]	; 0x30
 800788e:	4b1b      	ldr	r3, [pc, #108]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800789a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800789e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a0:	2302      	movs	r3, #2
 80078a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a8:	2303      	movs	r3, #3
 80078aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078ac:	230a      	movs	r3, #10
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	4619      	mov	r1, r3
 80078b6:	4812      	ldr	r0, [pc, #72]	; (8007900 <HAL_PCD_MspInit+0xa4>)
 80078b8:	f7f9 feec 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078bc:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	4a0e      	ldr	r2, [pc, #56]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 80078c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c6:	6353      	str	r3, [r2, #52]	; 0x34
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 80078ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 80078d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d6:	6453      	str	r3, [r2, #68]	; 0x44
 80078d8:	4b08      	ldr	r3, [pc, #32]	; (80078fc <HAL_PCD_MspInit+0xa0>)
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	2043      	movs	r0, #67	; 0x43
 80078ea:	f7f9 fe9c 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078ee:	2043      	movs	r0, #67	; 0x43
 80078f0:	f7f9 feb5 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078f4:	bf00      	nop
 80078f6:	3728      	adds	r7, #40	; 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40023800 	.word	0x40023800
 8007900:	40020000 	.word	0x40020000

08007904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007918:	4619      	mov	r1, r3
 800791a:	4610      	mov	r0, r2
 800791c:	f7fe fdbe 	bl	800649c <USBD_LL_SetupStage>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	4619      	mov	r1, r3
 8007952:	f7fe fdf8 	bl	8006546 <USBD_LL_DataOutStage>
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	3348      	adds	r3, #72	; 0x48
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	4619      	mov	r1, r3
 8007986:	f7fe fe41 	bl	800660c <USBD_LL_DataInStage>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe ff55 	bl	8006850 <USBD_LL_SOF>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
 80079c6:	e008      	b.n	80079da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d102      	bne.n	80079d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
 80079d4:	e001      	b.n	80079da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80079d6:	f7f9 f855 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079e0:	7bfa      	ldrb	r2, [r7, #15]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fef5 	bl	80067d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fea1 	bl	8006738 <USBD_LL_Reset>
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fef0 	bl	80067f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <HAL_PCD_SuspendCallback+0x48>)
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <HAL_PCD_SuspendCallback+0x48>)
 8007a3a:	f043 0306 	orr.w	r3, r3, #6
 8007a3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed00 	.word	0xe000ed00

08007a4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fee0 	bl	8006820 <USBD_LL_Resume>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe ff2e 	bl	80068e0 <USBD_LL_IsoOUTIncomplete>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fef6 	bl	8006894 <USBD_LL_IsoINIncomplete>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe ff34 	bl	800692c <USBD_LL_DevConnected>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe ff31 	bl	8006942 <USBD_LL_DevDisconnected>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d13c      	bne.n	8007b72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007af8:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <USBD_LL_Init+0x94>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1e      	ldr	r2, [pc, #120]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b10:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b12:	2204      	movs	r2, #4
 8007b14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b16:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b18:	2202      	movs	r2, #2
 8007b1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b22:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b24:	2202      	movs	r2, #2
 8007b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b28:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b48:	f7fb f869 	bl	8002c1e <HAL_PCD_Init>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b52:	f7f8 ff97 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b56:	2180      	movs	r1, #128	; 0x80
 8007b58:	4808      	ldr	r0, [pc, #32]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b5a:	f7fc f9ae 	bl	8003eba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b5e:	2240      	movs	r2, #64	; 0x40
 8007b60:	2100      	movs	r1, #0
 8007b62:	4806      	ldr	r0, [pc, #24]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b64:	f7fc f962 	bl	8003e2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4803      	ldr	r0, [pc, #12]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b6e:	f7fc f95d 	bl	8003e2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000c08 	.word	0x20000c08

08007b80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fb f95e 	bl	8002e58 <HAL_PCD_Start>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f930 	bl	8007e08 <USBD_Get_USB_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	70fb      	strb	r3, [r7, #3]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70bb      	strb	r3, [r7, #2]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007bde:	78bb      	ldrb	r3, [r7, #2]
 8007be0:	883a      	ldrh	r2, [r7, #0]
 8007be2:	78f9      	ldrb	r1, [r7, #3]
 8007be4:	f7fb fd42 	bl	800366c <HAL_PCD_EP_Open>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f90a 	bl	8007e08 <USBD_Get_USB_Status>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fb fd8b 	bl	800373c <HAL_PCD_EP_Close>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f8eb 	bl	8007e08 <USBD_Get_USB_Status>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fb fe4b 	bl	80038fa <HAL_PCD_EP_SetStall>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8cc 	bl	8007e08 <USBD_Get_USB_Status>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fb fe90 	bl	80039c2 <HAL_PCD_EP_ClrStall>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f8ad 	bl	8007e08 <USBD_Get_USB_Status>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da0b      	bge.n	8007cf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	333e      	adds	r3, #62	; 0x3e
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	e00b      	b.n	8007d08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d2e:	78fa      	ldrb	r2, [r7, #3]
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fb fc75 	bl	8003622 <HAL_PCD_SetAddress>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f862 	bl	8007e08 <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d70:	7af9      	ldrb	r1, [r7, #11]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f7fb fd76 	bl	8003866 <HAL_PCD_EP_Transmit>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f841 	bl	8007e08 <USBD_Get_USB_Status>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007db2:	7af9      	ldrb	r1, [r7, #11]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	f7fb fd0a 	bl	80037d0 <HAL_PCD_EP_Receive>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f820 	bl	8007e08 <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007de0:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_static_malloc+0x18>)
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20001010 	.word	0x20001010

08007df4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d817      	bhi.n	8007e4c <USBD_Get_USB_Status+0x44>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <USBD_Get_USB_Status+0x1c>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e35 	.word	0x08007e35
 8007e28:	08007e3b 	.word	0x08007e3b
 8007e2c:	08007e41 	.word	0x08007e41
 8007e30:	08007e47 	.word	0x08007e47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]
    break;
 8007e38:	e00b      	b.n	8007e52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3e:	e008      	b.n	8007e52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e40:	2301      	movs	r3, #1
 8007e42:	73fb      	strb	r3, [r7, #15]
    break;
 8007e44:	e005      	b.n	8007e52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	73fb      	strb	r3, [r7, #15]
    break;
 8007e4a:	e002      	b.n	8007e52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e50:	bf00      	nop
  }
  return usb_status;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <__errno>:
 8007e60:	4b01      	ldr	r3, [pc, #4]	; (8007e68 <__errno+0x8>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	200001a4 	.word	0x200001a4

08007e6c <__libc_init_array>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ea4 <__libc_init_array+0x38>)
 8007e70:	4c0d      	ldr	r4, [pc, #52]	; (8007ea8 <__libc_init_array+0x3c>)
 8007e72:	1b64      	subs	r4, r4, r5
 8007e74:	10a4      	asrs	r4, r4, #2
 8007e76:	2600      	movs	r6, #0
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d109      	bne.n	8007e90 <__libc_init_array+0x24>
 8007e7c:	4d0b      	ldr	r5, [pc, #44]	; (8007eac <__libc_init_array+0x40>)
 8007e7e:	4c0c      	ldr	r4, [pc, #48]	; (8007eb0 <__libc_init_array+0x44>)
 8007e80:	f000 fc96 	bl	80087b0 <_init>
 8007e84:	1b64      	subs	r4, r4, r5
 8007e86:	10a4      	asrs	r4, r4, #2
 8007e88:	2600      	movs	r6, #0
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	d105      	bne.n	8007e9a <__libc_init_array+0x2e>
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e94:	4798      	blx	r3
 8007e96:	3601      	adds	r6, #1
 8007e98:	e7ee      	b.n	8007e78 <__libc_init_array+0xc>
 8007e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9e:	4798      	blx	r3
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	e7f2      	b.n	8007e8a <__libc_init_array+0x1e>
 8007ea4:	08009d68 	.word	0x08009d68
 8007ea8:	08009d68 	.word	0x08009d68
 8007eac:	08009d68 	.word	0x08009d68
 8007eb0:	08009d6c 	.word	0x08009d6c

08007eb4 <memset>:
 8007eb4:	4402      	add	r2, r0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d100      	bne.n	8007ebe <memset+0xa>
 8007ebc:	4770      	bx	lr
 8007ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec2:	e7f9      	b.n	8007eb8 <memset+0x4>

08007ec4 <siprintf>:
 8007ec4:	b40e      	push	{r1, r2, r3}
 8007ec6:	b500      	push	{lr}
 8007ec8:	b09c      	sub	sp, #112	; 0x70
 8007eca:	ab1d      	add	r3, sp, #116	; 0x74
 8007ecc:	9002      	str	r0, [sp, #8]
 8007ece:	9006      	str	r0, [sp, #24]
 8007ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ed4:	4809      	ldr	r0, [pc, #36]	; (8007efc <siprintf+0x38>)
 8007ed6:	9107      	str	r1, [sp, #28]
 8007ed8:	9104      	str	r1, [sp, #16]
 8007eda:	4909      	ldr	r1, [pc, #36]	; (8007f00 <siprintf+0x3c>)
 8007edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee0:	9105      	str	r1, [sp, #20]
 8007ee2:	6800      	ldr	r0, [r0, #0]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	a902      	add	r1, sp, #8
 8007ee8:	f000 f870 	bl	8007fcc <_svfiprintf_r>
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	b01c      	add	sp, #112	; 0x70
 8007ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ef8:	b003      	add	sp, #12
 8007efa:	4770      	bx	lr
 8007efc:	200001a4 	.word	0x200001a4
 8007f00:	ffff0208 	.word	0xffff0208

08007f04 <strcpy>:
 8007f04:	4603      	mov	r3, r0
 8007f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1f9      	bne.n	8007f06 <strcpy+0x2>
 8007f12:	4770      	bx	lr

08007f14 <__ssputs_r>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	688e      	ldr	r6, [r1, #8]
 8007f1a:	429e      	cmp	r6, r3
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	4690      	mov	r8, r2
 8007f22:	461f      	mov	r7, r3
 8007f24:	d838      	bhi.n	8007f98 <__ssputs_r+0x84>
 8007f26:	898a      	ldrh	r2, [r1, #12]
 8007f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f2c:	d032      	beq.n	8007f94 <__ssputs_r+0x80>
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	6909      	ldr	r1, [r1, #16]
 8007f32:	eba5 0901 	sub.w	r9, r5, r1
 8007f36:	6965      	ldr	r5, [r4, #20]
 8007f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f40:	3301      	adds	r3, #1
 8007f42:	444b      	add	r3, r9
 8007f44:	106d      	asrs	r5, r5, #1
 8007f46:	429d      	cmp	r5, r3
 8007f48:	bf38      	it	cc
 8007f4a:	461d      	movcc	r5, r3
 8007f4c:	0553      	lsls	r3, r2, #21
 8007f4e:	d531      	bpl.n	8007fb4 <__ssputs_r+0xa0>
 8007f50:	4629      	mov	r1, r5
 8007f52:	f000 fb63 	bl	800861c <_malloc_r>
 8007f56:	4606      	mov	r6, r0
 8007f58:	b950      	cbnz	r0, 8007f70 <__ssputs_r+0x5c>
 8007f5a:	230c      	movs	r3, #12
 8007f5c:	f8ca 3000 	str.w	r3, [sl]
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f70:	6921      	ldr	r1, [r4, #16]
 8007f72:	464a      	mov	r2, r9
 8007f74:	f000 fabe 	bl	80084f4 <memcpy>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	6126      	str	r6, [r4, #16]
 8007f86:	6165      	str	r5, [r4, #20]
 8007f88:	444e      	add	r6, r9
 8007f8a:	eba5 0509 	sub.w	r5, r5, r9
 8007f8e:	6026      	str	r6, [r4, #0]
 8007f90:	60a5      	str	r5, [r4, #8]
 8007f92:	463e      	mov	r6, r7
 8007f94:	42be      	cmp	r6, r7
 8007f96:	d900      	bls.n	8007f9a <__ssputs_r+0x86>
 8007f98:	463e      	mov	r6, r7
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	f000 fab6 	bl	8008510 <memmove>
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	1b9b      	subs	r3, r3, r6
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	4433      	add	r3, r6
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e7db      	b.n	8007f6c <__ssputs_r+0x58>
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	f000 fba5 	bl	8008704 <_realloc_r>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1e1      	bne.n	8007f84 <__ssputs_r+0x70>
 8007fc0:	6921      	ldr	r1, [r4, #16]
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f000 fabe 	bl	8008544 <_free_r>
 8007fc8:	e7c7      	b.n	8007f5a <__ssputs_r+0x46>
	...

08007fcc <_svfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	4698      	mov	r8, r3
 8007fd2:	898b      	ldrh	r3, [r1, #12]
 8007fd4:	061b      	lsls	r3, r3, #24
 8007fd6:	b09d      	sub	sp, #116	; 0x74
 8007fd8:	4607      	mov	r7, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	4614      	mov	r4, r2
 8007fde:	d50e      	bpl.n	8007ffe <_svfiprintf_r+0x32>
 8007fe0:	690b      	ldr	r3, [r1, #16]
 8007fe2:	b963      	cbnz	r3, 8007ffe <_svfiprintf_r+0x32>
 8007fe4:	2140      	movs	r1, #64	; 0x40
 8007fe6:	f000 fb19 	bl	800861c <_malloc_r>
 8007fea:	6028      	str	r0, [r5, #0]
 8007fec:	6128      	str	r0, [r5, #16]
 8007fee:	b920      	cbnz	r0, 8007ffa <_svfiprintf_r+0x2e>
 8007ff0:	230c      	movs	r3, #12
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	e0d1      	b.n	800819e <_svfiprintf_r+0x1d2>
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	616b      	str	r3, [r5, #20]
 8007ffe:	2300      	movs	r3, #0
 8008000:	9309      	str	r3, [sp, #36]	; 0x24
 8008002:	2320      	movs	r3, #32
 8008004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008008:	f8cd 800c 	str.w	r8, [sp, #12]
 800800c:	2330      	movs	r3, #48	; 0x30
 800800e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081b8 <_svfiprintf_r+0x1ec>
 8008012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008016:	f04f 0901 	mov.w	r9, #1
 800801a:	4623      	mov	r3, r4
 800801c:	469a      	mov	sl, r3
 800801e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008022:	b10a      	cbz	r2, 8008028 <_svfiprintf_r+0x5c>
 8008024:	2a25      	cmp	r2, #37	; 0x25
 8008026:	d1f9      	bne.n	800801c <_svfiprintf_r+0x50>
 8008028:	ebba 0b04 	subs.w	fp, sl, r4
 800802c:	d00b      	beq.n	8008046 <_svfiprintf_r+0x7a>
 800802e:	465b      	mov	r3, fp
 8008030:	4622      	mov	r2, r4
 8008032:	4629      	mov	r1, r5
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ff6d 	bl	8007f14 <__ssputs_r>
 800803a:	3001      	adds	r0, #1
 800803c:	f000 80aa 	beq.w	8008194 <_svfiprintf_r+0x1c8>
 8008040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008042:	445a      	add	r2, fp
 8008044:	9209      	str	r2, [sp, #36]	; 0x24
 8008046:	f89a 3000 	ldrb.w	r3, [sl]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80a2 	beq.w	8008194 <_svfiprintf_r+0x1c8>
 8008050:	2300      	movs	r3, #0
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800805a:	f10a 0a01 	add.w	sl, sl, #1
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	9307      	str	r3, [sp, #28]
 8008062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008066:	931a      	str	r3, [sp, #104]	; 0x68
 8008068:	4654      	mov	r4, sl
 800806a:	2205      	movs	r2, #5
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	4851      	ldr	r0, [pc, #324]	; (80081b8 <_svfiprintf_r+0x1ec>)
 8008072:	f7f8 f8ad 	bl	80001d0 <memchr>
 8008076:	9a04      	ldr	r2, [sp, #16]
 8008078:	b9d8      	cbnz	r0, 80080b2 <_svfiprintf_r+0xe6>
 800807a:	06d0      	lsls	r0, r2, #27
 800807c:	bf44      	itt	mi
 800807e:	2320      	movmi	r3, #32
 8008080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008084:	0711      	lsls	r1, r2, #28
 8008086:	bf44      	itt	mi
 8008088:	232b      	movmi	r3, #43	; 0x2b
 800808a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808e:	f89a 3000 	ldrb.w	r3, [sl]
 8008092:	2b2a      	cmp	r3, #42	; 0x2a
 8008094:	d015      	beq.n	80080c2 <_svfiprintf_r+0xf6>
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	4654      	mov	r4, sl
 800809a:	2000      	movs	r0, #0
 800809c:	f04f 0c0a 	mov.w	ip, #10
 80080a0:	4621      	mov	r1, r4
 80080a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a6:	3b30      	subs	r3, #48	; 0x30
 80080a8:	2b09      	cmp	r3, #9
 80080aa:	d94e      	bls.n	800814a <_svfiprintf_r+0x17e>
 80080ac:	b1b0      	cbz	r0, 80080dc <_svfiprintf_r+0x110>
 80080ae:	9207      	str	r2, [sp, #28]
 80080b0:	e014      	b.n	80080dc <_svfiprintf_r+0x110>
 80080b2:	eba0 0308 	sub.w	r3, r0, r8
 80080b6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ba:	4313      	orrs	r3, r2
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	46a2      	mov	sl, r4
 80080c0:	e7d2      	b.n	8008068 <_svfiprintf_r+0x9c>
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	1d19      	adds	r1, r3, #4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bfbb      	ittet	lt
 80080ce:	425b      	neglt	r3, r3
 80080d0:	f042 0202 	orrlt.w	r2, r2, #2
 80080d4:	9307      	strge	r3, [sp, #28]
 80080d6:	9307      	strlt	r3, [sp, #28]
 80080d8:	bfb8      	it	lt
 80080da:	9204      	strlt	r2, [sp, #16]
 80080dc:	7823      	ldrb	r3, [r4, #0]
 80080de:	2b2e      	cmp	r3, #46	; 0x2e
 80080e0:	d10c      	bne.n	80080fc <_svfiprintf_r+0x130>
 80080e2:	7863      	ldrb	r3, [r4, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d135      	bne.n	8008154 <_svfiprintf_r+0x188>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfb8      	it	lt
 80080f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f8:	3402      	adds	r4, #2
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081c8 <_svfiprintf_r+0x1fc>
 8008100:	7821      	ldrb	r1, [r4, #0]
 8008102:	2203      	movs	r2, #3
 8008104:	4650      	mov	r0, sl
 8008106:	f7f8 f863 	bl	80001d0 <memchr>
 800810a:	b140      	cbz	r0, 800811e <_svfiprintf_r+0x152>
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	eba0 000a 	sub.w	r0, r0, sl
 8008112:	fa03 f000 	lsl.w	r0, r3, r0
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	4303      	orrs	r3, r0
 800811a:	3401      	adds	r4, #1
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008122:	4826      	ldr	r0, [pc, #152]	; (80081bc <_svfiprintf_r+0x1f0>)
 8008124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008128:	2206      	movs	r2, #6
 800812a:	f7f8 f851 	bl	80001d0 <memchr>
 800812e:	2800      	cmp	r0, #0
 8008130:	d038      	beq.n	80081a4 <_svfiprintf_r+0x1d8>
 8008132:	4b23      	ldr	r3, [pc, #140]	; (80081c0 <_svfiprintf_r+0x1f4>)
 8008134:	bb1b      	cbnz	r3, 800817e <_svfiprintf_r+0x1b2>
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	3307      	adds	r3, #7
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	3308      	adds	r3, #8
 8008140:	9303      	str	r3, [sp, #12]
 8008142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008144:	4433      	add	r3, r6
 8008146:	9309      	str	r3, [sp, #36]	; 0x24
 8008148:	e767      	b.n	800801a <_svfiprintf_r+0x4e>
 800814a:	fb0c 3202 	mla	r2, ip, r2, r3
 800814e:	460c      	mov	r4, r1
 8008150:	2001      	movs	r0, #1
 8008152:	e7a5      	b.n	80080a0 <_svfiprintf_r+0xd4>
 8008154:	2300      	movs	r3, #0
 8008156:	3401      	adds	r4, #1
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	4619      	mov	r1, r3
 800815c:	f04f 0c0a 	mov.w	ip, #10
 8008160:	4620      	mov	r0, r4
 8008162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008166:	3a30      	subs	r2, #48	; 0x30
 8008168:	2a09      	cmp	r2, #9
 800816a:	d903      	bls.n	8008174 <_svfiprintf_r+0x1a8>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0c5      	beq.n	80080fc <_svfiprintf_r+0x130>
 8008170:	9105      	str	r1, [sp, #20]
 8008172:	e7c3      	b.n	80080fc <_svfiprintf_r+0x130>
 8008174:	fb0c 2101 	mla	r1, ip, r1, r2
 8008178:	4604      	mov	r4, r0
 800817a:	2301      	movs	r3, #1
 800817c:	e7f0      	b.n	8008160 <_svfiprintf_r+0x194>
 800817e:	ab03      	add	r3, sp, #12
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	462a      	mov	r2, r5
 8008184:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <_svfiprintf_r+0x1f8>)
 8008186:	a904      	add	r1, sp, #16
 8008188:	4638      	mov	r0, r7
 800818a:	f3af 8000 	nop.w
 800818e:	1c42      	adds	r2, r0, #1
 8008190:	4606      	mov	r6, r0
 8008192:	d1d6      	bne.n	8008142 <_svfiprintf_r+0x176>
 8008194:	89ab      	ldrh	r3, [r5, #12]
 8008196:	065b      	lsls	r3, r3, #25
 8008198:	f53f af2c 	bmi.w	8007ff4 <_svfiprintf_r+0x28>
 800819c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800819e:	b01d      	add	sp, #116	; 0x74
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	ab03      	add	r3, sp, #12
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <_svfiprintf_r+0x1f8>)
 80081ac:	a904      	add	r1, sp, #16
 80081ae:	4638      	mov	r0, r7
 80081b0:	f000 f87a 	bl	80082a8 <_printf_i>
 80081b4:	e7eb      	b.n	800818e <_svfiprintf_r+0x1c2>
 80081b6:	bf00      	nop
 80081b8:	08009d2c 	.word	0x08009d2c
 80081bc:	08009d36 	.word	0x08009d36
 80081c0:	00000000 	.word	0x00000000
 80081c4:	08007f15 	.word	0x08007f15
 80081c8:	08009d32 	.word	0x08009d32

080081cc <_printf_common>:
 80081cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d0:	4616      	mov	r6, r2
 80081d2:	4699      	mov	r9, r3
 80081d4:	688a      	ldr	r2, [r1, #8]
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081dc:	4293      	cmp	r3, r2
 80081de:	bfb8      	it	lt
 80081e0:	4613      	movlt	r3, r2
 80081e2:	6033      	str	r3, [r6, #0]
 80081e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081e8:	4607      	mov	r7, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	b10a      	cbz	r2, 80081f2 <_printf_common+0x26>
 80081ee:	3301      	adds	r3, #1
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	0699      	lsls	r1, r3, #26
 80081f6:	bf42      	ittt	mi
 80081f8:	6833      	ldrmi	r3, [r6, #0]
 80081fa:	3302      	addmi	r3, #2
 80081fc:	6033      	strmi	r3, [r6, #0]
 80081fe:	6825      	ldr	r5, [r4, #0]
 8008200:	f015 0506 	ands.w	r5, r5, #6
 8008204:	d106      	bne.n	8008214 <_printf_common+0x48>
 8008206:	f104 0a19 	add.w	sl, r4, #25
 800820a:	68e3      	ldr	r3, [r4, #12]
 800820c:	6832      	ldr	r2, [r6, #0]
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	42ab      	cmp	r3, r5
 8008212:	dc26      	bgt.n	8008262 <_printf_common+0x96>
 8008214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008218:	1e13      	subs	r3, r2, #0
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	bf18      	it	ne
 800821e:	2301      	movne	r3, #1
 8008220:	0692      	lsls	r2, r2, #26
 8008222:	d42b      	bmi.n	800827c <_printf_common+0xb0>
 8008224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008228:	4649      	mov	r1, r9
 800822a:	4638      	mov	r0, r7
 800822c:	47c0      	blx	r8
 800822e:	3001      	adds	r0, #1
 8008230:	d01e      	beq.n	8008270 <_printf_common+0xa4>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	68e5      	ldr	r5, [r4, #12]
 8008236:	6832      	ldr	r2, [r6, #0]
 8008238:	f003 0306 	and.w	r3, r3, #6
 800823c:	2b04      	cmp	r3, #4
 800823e:	bf08      	it	eq
 8008240:	1aad      	subeq	r5, r5, r2
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	6922      	ldr	r2, [r4, #16]
 8008246:	bf0c      	ite	eq
 8008248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800824c:	2500      	movne	r5, #0
 800824e:	4293      	cmp	r3, r2
 8008250:	bfc4      	itt	gt
 8008252:	1a9b      	subgt	r3, r3, r2
 8008254:	18ed      	addgt	r5, r5, r3
 8008256:	2600      	movs	r6, #0
 8008258:	341a      	adds	r4, #26
 800825a:	42b5      	cmp	r5, r6
 800825c:	d11a      	bne.n	8008294 <_printf_common+0xc8>
 800825e:	2000      	movs	r0, #0
 8008260:	e008      	b.n	8008274 <_printf_common+0xa8>
 8008262:	2301      	movs	r3, #1
 8008264:	4652      	mov	r2, sl
 8008266:	4649      	mov	r1, r9
 8008268:	4638      	mov	r0, r7
 800826a:	47c0      	blx	r8
 800826c:	3001      	adds	r0, #1
 800826e:	d103      	bne.n	8008278 <_printf_common+0xac>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	3501      	adds	r5, #1
 800827a:	e7c6      	b.n	800820a <_printf_common+0x3e>
 800827c:	18e1      	adds	r1, r4, r3
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	2030      	movs	r0, #48	; 0x30
 8008282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008286:	4422      	add	r2, r4
 8008288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800828c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008290:	3302      	adds	r3, #2
 8008292:	e7c7      	b.n	8008224 <_printf_common+0x58>
 8008294:	2301      	movs	r3, #1
 8008296:	4622      	mov	r2, r4
 8008298:	4649      	mov	r1, r9
 800829a:	4638      	mov	r0, r7
 800829c:	47c0      	blx	r8
 800829e:	3001      	adds	r0, #1
 80082a0:	d0e6      	beq.n	8008270 <_printf_common+0xa4>
 80082a2:	3601      	adds	r6, #1
 80082a4:	e7d9      	b.n	800825a <_printf_common+0x8e>
	...

080082a8 <_printf_i>:
 80082a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	7e0f      	ldrb	r7, [r1, #24]
 80082ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082b0:	2f78      	cmp	r7, #120	; 0x78
 80082b2:	4691      	mov	r9, r2
 80082b4:	4680      	mov	r8, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	469a      	mov	sl, r3
 80082ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082be:	d807      	bhi.n	80082d0 <_printf_i+0x28>
 80082c0:	2f62      	cmp	r7, #98	; 0x62
 80082c2:	d80a      	bhi.n	80082da <_printf_i+0x32>
 80082c4:	2f00      	cmp	r7, #0
 80082c6:	f000 80d8 	beq.w	800847a <_printf_i+0x1d2>
 80082ca:	2f58      	cmp	r7, #88	; 0x58
 80082cc:	f000 80a3 	beq.w	8008416 <_printf_i+0x16e>
 80082d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082d8:	e03a      	b.n	8008350 <_printf_i+0xa8>
 80082da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082de:	2b15      	cmp	r3, #21
 80082e0:	d8f6      	bhi.n	80082d0 <_printf_i+0x28>
 80082e2:	a101      	add	r1, pc, #4	; (adr r1, 80082e8 <_printf_i+0x40>)
 80082e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e8:	08008341 	.word	0x08008341
 80082ec:	08008355 	.word	0x08008355
 80082f0:	080082d1 	.word	0x080082d1
 80082f4:	080082d1 	.word	0x080082d1
 80082f8:	080082d1 	.word	0x080082d1
 80082fc:	080082d1 	.word	0x080082d1
 8008300:	08008355 	.word	0x08008355
 8008304:	080082d1 	.word	0x080082d1
 8008308:	080082d1 	.word	0x080082d1
 800830c:	080082d1 	.word	0x080082d1
 8008310:	080082d1 	.word	0x080082d1
 8008314:	08008461 	.word	0x08008461
 8008318:	08008385 	.word	0x08008385
 800831c:	08008443 	.word	0x08008443
 8008320:	080082d1 	.word	0x080082d1
 8008324:	080082d1 	.word	0x080082d1
 8008328:	08008483 	.word	0x08008483
 800832c:	080082d1 	.word	0x080082d1
 8008330:	08008385 	.word	0x08008385
 8008334:	080082d1 	.word	0x080082d1
 8008338:	080082d1 	.word	0x080082d1
 800833c:	0800844b 	.word	0x0800844b
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	1d1a      	adds	r2, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800834c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008350:	2301      	movs	r3, #1
 8008352:	e0a3      	b.n	800849c <_printf_i+0x1f4>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	6829      	ldr	r1, [r5, #0]
 8008358:	0606      	lsls	r6, r0, #24
 800835a:	f101 0304 	add.w	r3, r1, #4
 800835e:	d50a      	bpl.n	8008376 <_printf_i+0xce>
 8008360:	680e      	ldr	r6, [r1, #0]
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	2e00      	cmp	r6, #0
 8008366:	da03      	bge.n	8008370 <_printf_i+0xc8>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	4276      	negs	r6, r6
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008370:	485e      	ldr	r0, [pc, #376]	; (80084ec <_printf_i+0x244>)
 8008372:	230a      	movs	r3, #10
 8008374:	e019      	b.n	80083aa <_printf_i+0x102>
 8008376:	680e      	ldr	r6, [r1, #0]
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800837e:	bf18      	it	ne
 8008380:	b236      	sxthne	r6, r6
 8008382:	e7ef      	b.n	8008364 <_printf_i+0xbc>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	6820      	ldr	r0, [r4, #0]
 8008388:	1d19      	adds	r1, r3, #4
 800838a:	6029      	str	r1, [r5, #0]
 800838c:	0601      	lsls	r1, r0, #24
 800838e:	d501      	bpl.n	8008394 <_printf_i+0xec>
 8008390:	681e      	ldr	r6, [r3, #0]
 8008392:	e002      	b.n	800839a <_printf_i+0xf2>
 8008394:	0646      	lsls	r6, r0, #25
 8008396:	d5fb      	bpl.n	8008390 <_printf_i+0xe8>
 8008398:	881e      	ldrh	r6, [r3, #0]
 800839a:	4854      	ldr	r0, [pc, #336]	; (80084ec <_printf_i+0x244>)
 800839c:	2f6f      	cmp	r7, #111	; 0x6f
 800839e:	bf0c      	ite	eq
 80083a0:	2308      	moveq	r3, #8
 80083a2:	230a      	movne	r3, #10
 80083a4:	2100      	movs	r1, #0
 80083a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083aa:	6865      	ldr	r5, [r4, #4]
 80083ac:	60a5      	str	r5, [r4, #8]
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	bfa2      	ittt	ge
 80083b2:	6821      	ldrge	r1, [r4, #0]
 80083b4:	f021 0104 	bicge.w	r1, r1, #4
 80083b8:	6021      	strge	r1, [r4, #0]
 80083ba:	b90e      	cbnz	r6, 80083c0 <_printf_i+0x118>
 80083bc:	2d00      	cmp	r5, #0
 80083be:	d04d      	beq.n	800845c <_printf_i+0x1b4>
 80083c0:	4615      	mov	r5, r2
 80083c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80083c6:	fb03 6711 	mls	r7, r3, r1, r6
 80083ca:	5dc7      	ldrb	r7, [r0, r7]
 80083cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083d0:	4637      	mov	r7, r6
 80083d2:	42bb      	cmp	r3, r7
 80083d4:	460e      	mov	r6, r1
 80083d6:	d9f4      	bls.n	80083c2 <_printf_i+0x11a>
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d10b      	bne.n	80083f4 <_printf_i+0x14c>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	07de      	lsls	r6, r3, #31
 80083e0:	d508      	bpl.n	80083f4 <_printf_i+0x14c>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	6861      	ldr	r1, [r4, #4]
 80083e6:	4299      	cmp	r1, r3
 80083e8:	bfde      	ittt	le
 80083ea:	2330      	movle	r3, #48	; 0x30
 80083ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083f4:	1b52      	subs	r2, r2, r5
 80083f6:	6122      	str	r2, [r4, #16]
 80083f8:	f8cd a000 	str.w	sl, [sp]
 80083fc:	464b      	mov	r3, r9
 80083fe:	aa03      	add	r2, sp, #12
 8008400:	4621      	mov	r1, r4
 8008402:	4640      	mov	r0, r8
 8008404:	f7ff fee2 	bl	80081cc <_printf_common>
 8008408:	3001      	adds	r0, #1
 800840a:	d14c      	bne.n	80084a6 <_printf_i+0x1fe>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	b004      	add	sp, #16
 8008412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008416:	4835      	ldr	r0, [pc, #212]	; (80084ec <_printf_i+0x244>)
 8008418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800841c:	6829      	ldr	r1, [r5, #0]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f851 6b04 	ldr.w	r6, [r1], #4
 8008424:	6029      	str	r1, [r5, #0]
 8008426:	061d      	lsls	r5, r3, #24
 8008428:	d514      	bpl.n	8008454 <_printf_i+0x1ac>
 800842a:	07df      	lsls	r7, r3, #31
 800842c:	bf44      	itt	mi
 800842e:	f043 0320 	orrmi.w	r3, r3, #32
 8008432:	6023      	strmi	r3, [r4, #0]
 8008434:	b91e      	cbnz	r6, 800843e <_printf_i+0x196>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	f023 0320 	bic.w	r3, r3, #32
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	2310      	movs	r3, #16
 8008440:	e7b0      	b.n	80083a4 <_printf_i+0xfc>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	f043 0320 	orr.w	r3, r3, #32
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	2378      	movs	r3, #120	; 0x78
 800844c:	4828      	ldr	r0, [pc, #160]	; (80084f0 <_printf_i+0x248>)
 800844e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008452:	e7e3      	b.n	800841c <_printf_i+0x174>
 8008454:	0659      	lsls	r1, r3, #25
 8008456:	bf48      	it	mi
 8008458:	b2b6      	uxthmi	r6, r6
 800845a:	e7e6      	b.n	800842a <_printf_i+0x182>
 800845c:	4615      	mov	r5, r2
 800845e:	e7bb      	b.n	80083d8 <_printf_i+0x130>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	6826      	ldr	r6, [r4, #0]
 8008464:	6961      	ldr	r1, [r4, #20]
 8008466:	1d18      	adds	r0, r3, #4
 8008468:	6028      	str	r0, [r5, #0]
 800846a:	0635      	lsls	r5, r6, #24
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	d501      	bpl.n	8008474 <_printf_i+0x1cc>
 8008470:	6019      	str	r1, [r3, #0]
 8008472:	e002      	b.n	800847a <_printf_i+0x1d2>
 8008474:	0670      	lsls	r0, r6, #25
 8008476:	d5fb      	bpl.n	8008470 <_printf_i+0x1c8>
 8008478:	8019      	strh	r1, [r3, #0]
 800847a:	2300      	movs	r3, #0
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	4615      	mov	r5, r2
 8008480:	e7ba      	b.n	80083f8 <_printf_i+0x150>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	1d1a      	adds	r2, r3, #4
 8008486:	602a      	str	r2, [r5, #0]
 8008488:	681d      	ldr	r5, [r3, #0]
 800848a:	6862      	ldr	r2, [r4, #4]
 800848c:	2100      	movs	r1, #0
 800848e:	4628      	mov	r0, r5
 8008490:	f7f7 fe9e 	bl	80001d0 <memchr>
 8008494:	b108      	cbz	r0, 800849a <_printf_i+0x1f2>
 8008496:	1b40      	subs	r0, r0, r5
 8008498:	6060      	str	r0, [r4, #4]
 800849a:	6863      	ldr	r3, [r4, #4]
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	2300      	movs	r3, #0
 80084a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a4:	e7a8      	b.n	80083f8 <_printf_i+0x150>
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	462a      	mov	r2, r5
 80084aa:	4649      	mov	r1, r9
 80084ac:	4640      	mov	r0, r8
 80084ae:	47d0      	blx	sl
 80084b0:	3001      	adds	r0, #1
 80084b2:	d0ab      	beq.n	800840c <_printf_i+0x164>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	079b      	lsls	r3, r3, #30
 80084b8:	d413      	bmi.n	80084e2 <_printf_i+0x23a>
 80084ba:	68e0      	ldr	r0, [r4, #12]
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	4298      	cmp	r0, r3
 80084c0:	bfb8      	it	lt
 80084c2:	4618      	movlt	r0, r3
 80084c4:	e7a4      	b.n	8008410 <_printf_i+0x168>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4632      	mov	r2, r6
 80084ca:	4649      	mov	r1, r9
 80084cc:	4640      	mov	r0, r8
 80084ce:	47d0      	blx	sl
 80084d0:	3001      	adds	r0, #1
 80084d2:	d09b      	beq.n	800840c <_printf_i+0x164>
 80084d4:	3501      	adds	r5, #1
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	9903      	ldr	r1, [sp, #12]
 80084da:	1a5b      	subs	r3, r3, r1
 80084dc:	42ab      	cmp	r3, r5
 80084de:	dcf2      	bgt.n	80084c6 <_printf_i+0x21e>
 80084e0:	e7eb      	b.n	80084ba <_printf_i+0x212>
 80084e2:	2500      	movs	r5, #0
 80084e4:	f104 0619 	add.w	r6, r4, #25
 80084e8:	e7f5      	b.n	80084d6 <_printf_i+0x22e>
 80084ea:	bf00      	nop
 80084ec:	08009d3d 	.word	0x08009d3d
 80084f0:	08009d4e 	.word	0x08009d4e

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <memmove>:
 8008510:	4288      	cmp	r0, r1
 8008512:	b510      	push	{r4, lr}
 8008514:	eb01 0402 	add.w	r4, r1, r2
 8008518:	d902      	bls.n	8008520 <memmove+0x10>
 800851a:	4284      	cmp	r4, r0
 800851c:	4623      	mov	r3, r4
 800851e:	d807      	bhi.n	8008530 <memmove+0x20>
 8008520:	1e43      	subs	r3, r0, #1
 8008522:	42a1      	cmp	r1, r4
 8008524:	d008      	beq.n	8008538 <memmove+0x28>
 8008526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800852e:	e7f8      	b.n	8008522 <memmove+0x12>
 8008530:	4402      	add	r2, r0
 8008532:	4601      	mov	r1, r0
 8008534:	428a      	cmp	r2, r1
 8008536:	d100      	bne.n	800853a <memmove+0x2a>
 8008538:	bd10      	pop	{r4, pc}
 800853a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800853e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008542:	e7f7      	b.n	8008534 <memmove+0x24>

08008544 <_free_r>:
 8008544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008546:	2900      	cmp	r1, #0
 8008548:	d044      	beq.n	80085d4 <_free_r+0x90>
 800854a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854e:	9001      	str	r0, [sp, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f1a1 0404 	sub.w	r4, r1, #4
 8008556:	bfb8      	it	lt
 8008558:	18e4      	addlt	r4, r4, r3
 800855a:	f000 f913 	bl	8008784 <__malloc_lock>
 800855e:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <_free_r+0x94>)
 8008560:	9801      	ldr	r0, [sp, #4]
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b933      	cbnz	r3, 8008574 <_free_r+0x30>
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	b003      	add	sp, #12
 800856c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008570:	f000 b90e 	b.w	8008790 <__malloc_unlock>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d908      	bls.n	800858a <_free_r+0x46>
 8008578:	6825      	ldr	r5, [r4, #0]
 800857a:	1961      	adds	r1, r4, r5
 800857c:	428b      	cmp	r3, r1
 800857e:	bf01      	itttt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	1949      	addeq	r1, r1, r5
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	e7ed      	b.n	8008566 <_free_r+0x22>
 800858a:	461a      	mov	r2, r3
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b10b      	cbz	r3, 8008594 <_free_r+0x50>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d9fa      	bls.n	800858a <_free_r+0x46>
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	1855      	adds	r5, r2, r1
 8008598:	42a5      	cmp	r5, r4
 800859a:	d10b      	bne.n	80085b4 <_free_r+0x70>
 800859c:	6824      	ldr	r4, [r4, #0]
 800859e:	4421      	add	r1, r4
 80085a0:	1854      	adds	r4, r2, r1
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	d1e0      	bne.n	800856a <_free_r+0x26>
 80085a8:	681c      	ldr	r4, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	4421      	add	r1, r4
 80085b0:	6011      	str	r1, [r2, #0]
 80085b2:	e7da      	b.n	800856a <_free_r+0x26>
 80085b4:	d902      	bls.n	80085bc <_free_r+0x78>
 80085b6:	230c      	movs	r3, #12
 80085b8:	6003      	str	r3, [r0, #0]
 80085ba:	e7d6      	b.n	800856a <_free_r+0x26>
 80085bc:	6825      	ldr	r5, [r4, #0]
 80085be:	1961      	adds	r1, r4, r5
 80085c0:	428b      	cmp	r3, r1
 80085c2:	bf04      	itt	eq
 80085c4:	6819      	ldreq	r1, [r3, #0]
 80085c6:	685b      	ldreq	r3, [r3, #4]
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	bf04      	itt	eq
 80085cc:	1949      	addeq	r1, r1, r5
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	6054      	str	r4, [r2, #4]
 80085d2:	e7ca      	b.n	800856a <_free_r+0x26>
 80085d4:	b003      	add	sp, #12
 80085d6:	bd30      	pop	{r4, r5, pc}
 80085d8:	20001024 	.word	0x20001024

080085dc <sbrk_aligned>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4e0e      	ldr	r6, [pc, #56]	; (8008618 <sbrk_aligned+0x3c>)
 80085e0:	460c      	mov	r4, r1
 80085e2:	6831      	ldr	r1, [r6, #0]
 80085e4:	4605      	mov	r5, r0
 80085e6:	b911      	cbnz	r1, 80085ee <sbrk_aligned+0x12>
 80085e8:	f000 f8bc 	bl	8008764 <_sbrk_r>
 80085ec:	6030      	str	r0, [r6, #0]
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 f8b7 	bl	8008764 <_sbrk_r>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d00a      	beq.n	8008610 <sbrk_aligned+0x34>
 80085fa:	1cc4      	adds	r4, r0, #3
 80085fc:	f024 0403 	bic.w	r4, r4, #3
 8008600:	42a0      	cmp	r0, r4
 8008602:	d007      	beq.n	8008614 <sbrk_aligned+0x38>
 8008604:	1a21      	subs	r1, r4, r0
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f8ac 	bl	8008764 <_sbrk_r>
 800860c:	3001      	adds	r0, #1
 800860e:	d101      	bne.n	8008614 <sbrk_aligned+0x38>
 8008610:	f04f 34ff 	mov.w	r4, #4294967295
 8008614:	4620      	mov	r0, r4
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	20001028 	.word	0x20001028

0800861c <_malloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	1ccd      	adds	r5, r1, #3
 8008622:	f025 0503 	bic.w	r5, r5, #3
 8008626:	3508      	adds	r5, #8
 8008628:	2d0c      	cmp	r5, #12
 800862a:	bf38      	it	cc
 800862c:	250c      	movcc	r5, #12
 800862e:	2d00      	cmp	r5, #0
 8008630:	4607      	mov	r7, r0
 8008632:	db01      	blt.n	8008638 <_malloc_r+0x1c>
 8008634:	42a9      	cmp	r1, r5
 8008636:	d905      	bls.n	8008644 <_malloc_r+0x28>
 8008638:	230c      	movs	r3, #12
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	2600      	movs	r6, #0
 800863e:	4630      	mov	r0, r6
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	4e2e      	ldr	r6, [pc, #184]	; (8008700 <_malloc_r+0xe4>)
 8008646:	f000 f89d 	bl	8008784 <__malloc_lock>
 800864a:	6833      	ldr	r3, [r6, #0]
 800864c:	461c      	mov	r4, r3
 800864e:	bb34      	cbnz	r4, 800869e <_malloc_r+0x82>
 8008650:	4629      	mov	r1, r5
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ffc2 	bl	80085dc <sbrk_aligned>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	4604      	mov	r4, r0
 800865c:	d14d      	bne.n	80086fa <_malloc_r+0xde>
 800865e:	6834      	ldr	r4, [r6, #0]
 8008660:	4626      	mov	r6, r4
 8008662:	2e00      	cmp	r6, #0
 8008664:	d140      	bne.n	80086e8 <_malloc_r+0xcc>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	4631      	mov	r1, r6
 800866a:	4638      	mov	r0, r7
 800866c:	eb04 0803 	add.w	r8, r4, r3
 8008670:	f000 f878 	bl	8008764 <_sbrk_r>
 8008674:	4580      	cmp	r8, r0
 8008676:	d13a      	bne.n	80086ee <_malloc_r+0xd2>
 8008678:	6821      	ldr	r1, [r4, #0]
 800867a:	3503      	adds	r5, #3
 800867c:	1a6d      	subs	r5, r5, r1
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	4629      	mov	r1, r5
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff ffa5 	bl	80085dc <sbrk_aligned>
 8008692:	3001      	adds	r0, #1
 8008694:	d02b      	beq.n	80086ee <_malloc_r+0xd2>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	442b      	add	r3, r5
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e00e      	b.n	80086bc <_malloc_r+0xa0>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	1b52      	subs	r2, r2, r5
 80086a2:	d41e      	bmi.n	80086e2 <_malloc_r+0xc6>
 80086a4:	2a0b      	cmp	r2, #11
 80086a6:	d916      	bls.n	80086d6 <_malloc_r+0xba>
 80086a8:	1961      	adds	r1, r4, r5
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	6025      	str	r5, [r4, #0]
 80086ae:	bf18      	it	ne
 80086b0:	6059      	strne	r1, [r3, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	bf08      	it	eq
 80086b6:	6031      	streq	r1, [r6, #0]
 80086b8:	5162      	str	r2, [r4, r5]
 80086ba:	604b      	str	r3, [r1, #4]
 80086bc:	4638      	mov	r0, r7
 80086be:	f104 060b 	add.w	r6, r4, #11
 80086c2:	f000 f865 	bl	8008790 <__malloc_unlock>
 80086c6:	f026 0607 	bic.w	r6, r6, #7
 80086ca:	1d23      	adds	r3, r4, #4
 80086cc:	1af2      	subs	r2, r6, r3
 80086ce:	d0b6      	beq.n	800863e <_malloc_r+0x22>
 80086d0:	1b9b      	subs	r3, r3, r6
 80086d2:	50a3      	str	r3, [r4, r2]
 80086d4:	e7b3      	b.n	800863e <_malloc_r+0x22>
 80086d6:	6862      	ldr	r2, [r4, #4]
 80086d8:	42a3      	cmp	r3, r4
 80086da:	bf0c      	ite	eq
 80086dc:	6032      	streq	r2, [r6, #0]
 80086de:	605a      	strne	r2, [r3, #4]
 80086e0:	e7ec      	b.n	80086bc <_malloc_r+0xa0>
 80086e2:	4623      	mov	r3, r4
 80086e4:	6864      	ldr	r4, [r4, #4]
 80086e6:	e7b2      	b.n	800864e <_malloc_r+0x32>
 80086e8:	4634      	mov	r4, r6
 80086ea:	6876      	ldr	r6, [r6, #4]
 80086ec:	e7b9      	b.n	8008662 <_malloc_r+0x46>
 80086ee:	230c      	movs	r3, #12
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	4638      	mov	r0, r7
 80086f4:	f000 f84c 	bl	8008790 <__malloc_unlock>
 80086f8:	e7a1      	b.n	800863e <_malloc_r+0x22>
 80086fa:	6025      	str	r5, [r4, #0]
 80086fc:	e7de      	b.n	80086bc <_malloc_r+0xa0>
 80086fe:	bf00      	nop
 8008700:	20001024 	.word	0x20001024

08008704 <_realloc_r>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	4680      	mov	r8, r0
 800870a:	4614      	mov	r4, r2
 800870c:	460e      	mov	r6, r1
 800870e:	b921      	cbnz	r1, 800871a <_realloc_r+0x16>
 8008710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008714:	4611      	mov	r1, r2
 8008716:	f7ff bf81 	b.w	800861c <_malloc_r>
 800871a:	b92a      	cbnz	r2, 8008728 <_realloc_r+0x24>
 800871c:	f7ff ff12 	bl	8008544 <_free_r>
 8008720:	4625      	mov	r5, r4
 8008722:	4628      	mov	r0, r5
 8008724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008728:	f000 f838 	bl	800879c <_malloc_usable_size_r>
 800872c:	4284      	cmp	r4, r0
 800872e:	4607      	mov	r7, r0
 8008730:	d802      	bhi.n	8008738 <_realloc_r+0x34>
 8008732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008736:	d812      	bhi.n	800875e <_realloc_r+0x5a>
 8008738:	4621      	mov	r1, r4
 800873a:	4640      	mov	r0, r8
 800873c:	f7ff ff6e 	bl	800861c <_malloc_r>
 8008740:	4605      	mov	r5, r0
 8008742:	2800      	cmp	r0, #0
 8008744:	d0ed      	beq.n	8008722 <_realloc_r+0x1e>
 8008746:	42bc      	cmp	r4, r7
 8008748:	4622      	mov	r2, r4
 800874a:	4631      	mov	r1, r6
 800874c:	bf28      	it	cs
 800874e:	463a      	movcs	r2, r7
 8008750:	f7ff fed0 	bl	80084f4 <memcpy>
 8008754:	4631      	mov	r1, r6
 8008756:	4640      	mov	r0, r8
 8008758:	f7ff fef4 	bl	8008544 <_free_r>
 800875c:	e7e1      	b.n	8008722 <_realloc_r+0x1e>
 800875e:	4635      	mov	r5, r6
 8008760:	e7df      	b.n	8008722 <_realloc_r+0x1e>
	...

08008764 <_sbrk_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d06      	ldr	r5, [pc, #24]	; (8008780 <_sbrk_r+0x1c>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	f7f8 fd76 	bl	8001260 <_sbrk>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_sbrk_r+0x1a>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_sbrk_r+0x1a>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	2000102c 	.word	0x2000102c

08008784 <__malloc_lock>:
 8008784:	4801      	ldr	r0, [pc, #4]	; (800878c <__malloc_lock+0x8>)
 8008786:	f000 b811 	b.w	80087ac <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	20001030 	.word	0x20001030

08008790 <__malloc_unlock>:
 8008790:	4801      	ldr	r0, [pc, #4]	; (8008798 <__malloc_unlock+0x8>)
 8008792:	f000 b80c 	b.w	80087ae <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	20001030 	.word	0x20001030

0800879c <_malloc_usable_size_r>:
 800879c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a0:	1f18      	subs	r0, r3, #4
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfbc      	itt	lt
 80087a6:	580b      	ldrlt	r3, [r1, r0]
 80087a8:	18c0      	addlt	r0, r0, r3
 80087aa:	4770      	bx	lr

080087ac <__retarget_lock_acquire_recursive>:
 80087ac:	4770      	bx	lr

080087ae <__retarget_lock_release_recursive>:
 80087ae:	4770      	bx	lr

080087b0 <_init>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr

080087bc <_fini>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

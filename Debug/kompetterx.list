
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d8  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a75c  0800a75c  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a75c  0800a75c  0001a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a764  0800a764  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800a76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f0c  2000032c  0800aa98  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001238  0800aa98  00021238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cbe  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393f  00000000  00000000  0003701a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230a7  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018479  00000000  00000000  0005fb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfe8f  00000000  00000000  00077fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137e77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00137ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000032c 	.word	0x2000032c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800916c 	.word	0x0800916c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000330 	.word	0x20000330
 80001cc:	0800916c 	.word	0x0800916c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <angleSensorInit>:
int32_t encoderAccumulator = 0;
int32_t smoothedAccumulator = 0;
int32_t lastSmoothedAccumulator = 0;

void angleSensorInit(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	lastEncoderVal = angleSensorReadAngle(hi2c);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f80b 	bl	8000598 <angleSensorReadAngle>
 8000582:	4603      	mov	r3, r0
 8000584:	b21a      	sxth	r2, r3
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <angleSensorInit+0x20>)
 8000588:	801a      	strh	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000348 	.word	0x20000348

08000598 <angleSensorReadAngle>:

uint16_t angleSensorReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af04      	add	r7, sp, #16
 800059e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	220e      	movs	r2, #14
 80005b2:	216c      	movs	r1, #108	; 0x6c
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f002 f8e9 	bl	800278c <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 80005ba:	7b3b      	ldrb	r3, [r7, #12]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b21a      	sxth	r2, r3
 80005c0:	7b7b      	ldrb	r3, [r7, #13]
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <angleSensorReadStatus>:

uint8_t angleSensorReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
 80005da:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 030f 	add.w	r3, r7, #15
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	220b      	movs	r2, #11
 80005ee:	216c      	movs	r1, #108	; 0x6c
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f002 f8cb 	bl	800278c <HAL_I2C_Mem_Read>

    return status;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <angleSensorIsMagnetPresent>:

uint8_t angleSensorIsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    uint8_t status = angleSensorReadStatus(hi2c);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffe3 	bl	80005d4 <angleSensorReadStatus>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <angleSensorIsMagnetPresent+0x26>
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <angleSensorIsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <angleSensorIsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 800062a:	2301      	movs	r3, #1
    }
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <encoderValueFunction>:

int32_t encoderValueFunction(int16_t currentValue, int16_t previousValue, int32_t accumulator) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	603a      	str	r2, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	460b      	mov	r3, r1
 8000642:	80bb      	strh	r3, [r7, #4]
	int16_t difference = (int16_t)currentValue - (int16_t)previousValue;
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	81fb      	strh	r3, [r7, #14]

	// Handle wraparound from 0 to 4095 and from 4095 to 0
	if (abs(difference) > 2048) {
 800064e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000652:	2b00      	cmp	r3, #0
 8000654:	bfb8      	it	lt
 8000656:	425b      	neglt	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065e:	d90e      	bls.n	800067e <encoderValueFunction+0x4a>
		if (difference > 0) {
 8000660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd05      	ble.n	8000674 <encoderValueFunction+0x40>
			difference -= 4096;
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800066e:	b29b      	uxth	r3, r3
 8000670:	81fb      	strh	r3, [r7, #14]
 8000672:	e004      	b.n	800067e <encoderValueFunction+0x4a>
		} else {
			difference += 4096;
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800067a:	b29b      	uxth	r3, r3
 800067c:	81fb      	strh	r3, [r7, #14]
		}
	}

	if (abs(difference) > 10) {
 800067e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000682:	2b00      	cmp	r3, #0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	2b0a      	cmp	r3, #10
 800068c:	d904      	bls.n	8000698 <encoderValueFunction+0x64>
		accumulator += difference;
 800068e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	4413      	add	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
	}

	// Exponential smoothing
	float alpha = ALPHA_SMOOTHING; // Smoothing factor, adjust as needed
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <encoderValueFunction+0xd4>)
 800069a:	60bb      	str	r3, [r7, #8]
	smoothedAccumulator = alpha * accumulator + (1 - alpha) * smoothedAccumulator;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <encoderValueFunction+0xd8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d2:	ee17 2a90 	vmov	r2, s15
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <encoderValueFunction+0xd8>)
 80006d8:	601a      	str	r2, [r3, #0]

	// Limit smoothedAccumulator to the range -127 to 127
	smoothedAccumulator = max(-127, min(127, smoothedAccumulator));
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <encoderValueFunction+0xd8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80006e2:	db05      	blt.n	80006f0 <encoderValueFunction+0xbc>
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <encoderValueFunction+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ea:	bfa8      	it	ge
 80006ec:	237f      	movge	r3, #127	; 0x7f
 80006ee:	e001      	b.n	80006f4 <encoderValueFunction+0xc0>
 80006f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80006f4:	4a05      	ldr	r2, [pc, #20]	; (800070c <encoderValueFunction+0xd8>)
 80006f6:	6013      	str	r3, [r2, #0]

	return smoothedAccumulator;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <encoderValueFunction+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	3e4ccccd 	.word	0x3e4ccccd
 800070c:	20000350 	.word	0x20000350

08000710 <angleSensorScrollScan>:

void angleSensorScrollScan(I2C_HandleTypeDef *hi2c){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	//ANGLE SENSOR
	uint16_t angle = angleSensorReadAngle(hi2c);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff3d 	bl	8000598 <angleSensorReadAngle>
 800071e:	4603      	mov	r3, r0
 8000720:	81fb      	strh	r3, [r7, #14]

	smoothedAccumulator = encoderValueFunction(angle, lastEncoderVal, encoderAccumulator);
 8000722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <angleSensorScrollScan+0xe0>)
 8000728:	f9b2 1000 	ldrsh.w	r1, [r2]
 800072c:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <angleSensorScrollScan+0xe4>)
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff7f 	bl	8000634 <encoderValueFunction>
 8000736:	4603      	mov	r3, r0
 8000738:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <angleSensorScrollScan+0xe8>)
 800073a:	6013      	str	r3, [r2, #0]
	lastEncoderVal = angle; // Update lastEncoderVal after calling encoderValueFunction
 800073c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <angleSensorScrollScan+0xe0>)
 8000742:	801a      	strh	r2, [r3, #0]

	//Handle magnet status
	if( angleSensorIsMagnetPresent(hi2c) == 1){
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff5b 	bl	8000600 <angleSensorIsMagnetPresent>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d142      	bne.n	80007d6 <angleSensorScrollScan+0xc6>

		SSD1306_GotoXY(40, 40);
 8000750:	2128      	movs	r1, #40	; 0x28
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 fe0e 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	4928      	ldr	r1, [pc, #160]	; (80007fc <angleSensorScrollScan+0xec>)
 800075c:	4828      	ldr	r0, [pc, #160]	; (8000800 <angleSensorScrollScan+0xf0>)
 800075e:	f000 fe9f 	bl	80014a0 <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

		//Convert to a string with leading spaces
		sprintf(angle_str, "%4u", angle);
 8000762:	89fa      	ldrh	r2, [r7, #14]
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4926      	ldr	r1, [pc, #152]	; (8000804 <angleSensorScrollScan+0xf4>)
 800076a:	4618      	mov	r0, r3
 800076c:	f008 f89e 	bl	80088ac <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fdfe 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	4923      	ldr	r1, [pc, #140]	; (8000808 <angleSensorScrollScan+0xf8>)
 800077c:	4823      	ldr	r0, [pc, #140]	; (800080c <angleSensorScrollScan+0xfc>)
 800077e:	f000 fe8f 	bl	80014a0 <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000782:	210c      	movs	r1, #12
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fdf5 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2201      	movs	r2, #1
 8000790:	491a      	ldr	r1, [pc, #104]	; (80007fc <angleSensorScrollScan+0xec>)
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe84 	bl	80014a0 <SSD1306_Puts>


		//ACCUMULATOR:
		//Convert to a string with leading spaces
		sprintf(angle_str, "%5d", (int8_t)smoothedAccumulator);
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <angleSensorScrollScan+0xe8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	491a      	ldr	r1, [pc, #104]	; (8000810 <angleSensorScrollScan+0x100>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 f880 	bl	80088ac <siprintf>

		//display accumulator
		SSD1306_GotoXY (80,0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2050      	movs	r0, #80	; 0x50
 80007b0:	f000 fde0 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts("Acc: ", &Font_7x10, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <angleSensorScrollScan+0xf8>)
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <angleSensorScrollScan+0x104>)
 80007ba:	f000 fe71 	bl	80014a0 <SSD1306_Puts>
		SSD1306_GotoXY (60, 12);
 80007be:	210c      	movs	r1, #12
 80007c0:	203c      	movs	r0, #60	; 0x3c
 80007c2:	f000 fdd7 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_7x10, 1);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2201      	movs	r2, #1
 80007cc:	490e      	ldr	r1, [pc, #56]	; (8000808 <angleSensorScrollScan+0xf8>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe66 	bl	80014a0 <SSD1306_Puts>

	} else {
		SSD1306_GotoXY(40, 40);
		SSD1306_Puts("No :(", &Font_11x18, 1);
	}
}
 80007d4:	e008      	b.n	80007e8 <angleSensorScrollScan+0xd8>
		SSD1306_GotoXY(40, 40);
 80007d6:	2128      	movs	r1, #40	; 0x28
 80007d8:	2028      	movs	r0, #40	; 0x28
 80007da:	f000 fdcb 	bl	8001374 <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <angleSensorScrollScan+0xec>)
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <angleSensorScrollScan+0x108>)
 80007e4:	f000 fe5c 	bl	80014a0 <SSD1306_Puts>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000348 	.word	0x20000348
 80007f4:	2000034c 	.word	0x2000034c
 80007f8:	20000350 	.word	0x20000350
 80007fc:	20000008 	.word	0x20000008
 8000800:	08009184 	.word	0x08009184
 8000804:	0800918c 	.word	0x0800918c
 8000808:	20000000 	.word	0x20000000
 800080c:	08009190 	.word	0x08009190
 8000810:	08009198 	.word	0x08009198
 8000814:	0800919c 	.word	0x0800919c
 8000818:	080091a4 	.word	0x080091a4

0800081c <displayInit>:
#include "displayManager.h"

void displayInit(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    SSD1306_Init (); // initialize the display
 8000820:	f000 fc3e 	bl	80010a0 <SSD1306_Init>
    HAL_Delay(50);
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f001 fa51 	bl	8001ccc <HAL_Delay>
    SSD1306_GotoXY (0,0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f000 fda1 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	491e      	ldr	r1, [pc, #120]	; (80008b0 <displayInit+0x94>)
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <displayInit+0x98>)
 8000838:	f000 fe32 	bl	80014a0 <SSD1306_Puts>
    SSD1306_GotoXY (0, 20);
 800083c:	2114      	movs	r1, #20
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fd98 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts ("v.02", &Font_7x10, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	491c      	ldr	r1, [pc, #112]	; (80008b8 <displayInit+0x9c>)
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <displayInit+0xa0>)
 800084a:	f000 fe29 	bl	80014a0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800084e:	f000 fceb 	bl	8001228 <SSD1306_UpdateScreen>
    HAL_Delay(1500);
 8000852:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000856:	f001 fa39 	bl	8001ccc <HAL_Delay>
    SSD1306_Clear();
 800085a:	f000 fe46 	bl	80014ea <SSD1306_Clear>
    SSD1306_GotoXY(0, 30);
 800085e:	211e      	movs	r1, #30
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fd87 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts("Key: ", &Font_7x10, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4913      	ldr	r1, [pc, #76]	; (80008b8 <displayInit+0x9c>)
 800086a:	4815      	ldr	r0, [pc, #84]	; (80008c0 <displayInit+0xa4>)
 800086c:	f000 fe18 	bl	80014a0 <SSD1306_Puts>
    SSD1306_GotoXY(0, 40);
 8000870:	2128      	movs	r1, #40	; 0x28
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fd7e 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts("--  ", &Font_11x18, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	490d      	ldr	r1, [pc, #52]	; (80008b0 <displayInit+0x94>)
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <displayInit+0xa8>)
 800087e:	f000 fe0f 	bl	80014a0 <SSD1306_Puts>
    SSD1306_GotoXY(40, 30);
 8000882:	211e      	movs	r1, #30
 8000884:	2028      	movs	r0, #40	; 0x28
 8000886:	f000 fd75 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	490a      	ldr	r1, [pc, #40]	; (80008b8 <displayInit+0x9c>)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <displayInit+0xac>)
 8000890:	f000 fe06 	bl	80014a0 <SSD1306_Puts>
    SSD1306_GotoXY(40, 40);
 8000894:	2128      	movs	r1, #40	; 0x28
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f000 fd6c 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts("--  ", &Font_11x18, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	4904      	ldr	r1, [pc, #16]	; (80008b0 <displayInit+0x94>)
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <displayInit+0xa8>)
 80008a2:	f000 fdfd 	bl	80014a0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80008a6:	f000 fcbf 	bl	8001228 <SSD1306_UpdateScreen>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	080091ac 	.word	0x080091ac
 80008b8:	20000000 	.word	0x20000000
 80008bc:	080091b8 	.word	0x080091b8
 80008c0:	080091c0 	.word	0x080091c0
 80008c4:	080091c8 	.word	0x080091c8
 80008c8:	080091d0 	.word	0x080091d0

080008cc <displayUpdate>:

void displayUpdate(char* last_key, int16_t angle, int32_t smoothedAccumulator, uint8_t magnetPresent) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	460b      	mov	r3, r1
 80008da:	817b      	strh	r3, [r7, #10]
 80008dc:	4613      	mov	r3, r2
 80008de:	727b      	strb	r3, [r7, #9]
    // Handle magnet status
    if(magnetPresent == 1){
 80008e0:	7a7b      	ldrb	r3, [r7, #9]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d140      	bne.n	8000968 <displayUpdate+0x9c>
        SSD1306_GotoXY(40, 40);
 80008e6:	2128      	movs	r1, #40	; 0x28
 80008e8:	2028      	movs	r0, #40	; 0x28
 80008ea:	f000 fd43 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts("ok!  ", &Font_11x18, 1);
 80008ee:	2201      	movs	r2, #1
 80008f0:	4929      	ldr	r1, [pc, #164]	; (8000998 <displayUpdate+0xcc>)
 80008f2:	482a      	ldr	r0, [pc, #168]	; (800099c <displayUpdate+0xd0>)
 80008f4:	f000 fdd4 	bl	80014a0 <SSD1306_Puts>

        // Convert the angle to a string
        char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

        // Convert to a string with leading spaces
        sprintf(angle_str, "%4u", angle);
 80008f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4927      	ldr	r1, [pc, #156]	; (80009a0 <displayUpdate+0xd4>)
 8000902:	4618      	mov	r0, r3
 8000904:	f007 ffd2 	bl	80088ac <siprintf>

        // Display the angle on the OLED display
        SSD1306_GotoXY (0,0);
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fd32 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	4924      	ldr	r1, [pc, #144]	; (80009a4 <displayUpdate+0xd8>)
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <displayUpdate+0xdc>)
 8000916:	f000 fdc3 	bl	80014a0 <SSD1306_Puts>
        SSD1306_GotoXY (0, 12);
 800091a:	210c      	movs	r1, #12
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fd29 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts(angle_str, &Font_11x18, 1);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2201      	movs	r2, #1
 8000928:	491b      	ldr	r1, [pc, #108]	; (8000998 <displayUpdate+0xcc>)
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fdb8 	bl	80014a0 <SSD1306_Puts>

        // ACCUMULATOR:
        // Convert to a string with leading spaces
        sprintf(angle_str, "%5d", smoothedAccumulator);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	491d      	ldr	r1, [pc, #116]	; (80009ac <displayUpdate+0xe0>)
 8000938:	4618      	mov	r0, r3
 800093a:	f007 ffb7 	bl	80088ac <siprintf>

        // Display accumulator
        SSD1306_GotoXY (80,0);
 800093e:	2100      	movs	r1, #0
 8000940:	2050      	movs	r0, #80	; 0x50
 8000942:	f000 fd17 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts("Acc: ", &Font_7x10, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	4916      	ldr	r1, [pc, #88]	; (80009a4 <displayUpdate+0xd8>)
 800094a:	4819      	ldr	r0, [pc, #100]	; (80009b0 <displayUpdate+0xe4>)
 800094c:	f000 fda8 	bl	80014a0 <SSD1306_Puts>
        SSD1306_GotoXY (60, 12);
 8000950:	210c      	movs	r1, #12
 8000952:	203c      	movs	r0, #60	; 0x3c
 8000954:	f000 fd0e 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts(angle_str, &Font_7x10, 1);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2201      	movs	r2, #1
 800095e:	4911      	ldr	r1, [pc, #68]	; (80009a4 <displayUpdate+0xd8>)
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fd9d 	bl	80014a0 <SSD1306_Puts>
 8000966:	e008      	b.n	800097a <displayUpdate+0xae>

    } else {
        SSD1306_GotoXY(40, 40);
 8000968:	2128      	movs	r1, #40	; 0x28
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f000 fd02 	bl	8001374 <SSD1306_GotoXY>
        SSD1306_Puts("No :(", &Font_11x18, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	4909      	ldr	r1, [pc, #36]	; (8000998 <displayUpdate+0xcc>)
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <displayUpdate+0xe8>)
 8000976:	f000 fd93 	bl	80014a0 <SSD1306_Puts>
    }

    // Update the OLED display with the last key pressed
    SSD1306_GotoXY(0, 40);
 800097a:	2128      	movs	r1, #40	; 0x28
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fcf9 	bl	8001374 <SSD1306_GotoXY>
    SSD1306_Puts(last_key, &Font_11x18, 1);
 8000982:	2201      	movs	r2, #1
 8000984:	4904      	ldr	r1, [pc, #16]	; (8000998 <displayUpdate+0xcc>)
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 fd8a 	bl	80014a0 <SSD1306_Puts>

    // Update the OLED display
    SSD1306_UpdateScreen();
 800098c:	f000 fc4c 	bl	8001228 <SSD1306_UpdateScreen>
}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000008 	.word	0x20000008
 800099c:	080091dc 	.word	0x080091dc
 80009a0:	080091e4 	.word	0x080091e4
 80009a4:	20000000 	.word	0x20000000
 80009a8:	080091e8 	.word	0x080091e8
 80009ac:	080091f0 	.word	0x080091f0
 80009b0:	080091f4 	.word	0x080091f4
 80009b4:	080091fc 	.word	0x080091fc

080009b8 <keyboardScannerInit>:
uint8_t hid_report_prev[NUM_KEYS] = {0};
char last_key[3] = {0};
enum KeyState key_state[NUM_ROWS][NUM_COLS];

void keyboardScannerInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  // Initialize each state to IDLE
  for(int i = 0; i < NUM_ROWS; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	e013      	b.n	80009ec <keyboardScannerInit+0x34>
    for(int j = 0; j < NUM_COLS; j++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	e00a      	b.n	80009e0 <keyboardScannerInit+0x28>
      key_state[i][j] = IDLE;
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <keyboardScannerInit+0x48>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	441a      	add	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < NUM_COLS; j++) {
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	ddf1      	ble.n	80009ca <keyboardScannerInit+0x12>
  for(int i = 0; i < NUM_ROWS; i++) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	dde8      	ble.n	80009c4 <keyboardScannerInit+0xc>
    }
  }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000398 	.word	0x20000398

08000a04 <keyboardScan>:

void keyboardScan(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
    for(int i = 0; i < NUM_ROWS; i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e145      	b.n	8000c9c <keyboardScan+0x298>
        uint32_t current_tick = HAL_GetTick();
 8000a10:	f001 f950 	bl	8001cb4 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
        HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 8000a16:	4aa6      	ldr	r2, [pc, #664]	; (8000cb0 <keyboardScan+0x2ac>)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a1e:	4aa5      	ldr	r2, [pc, #660]	; (8000cb4 <keyboardScan+0x2b0>)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f001 fc39 	bl	80022a0 <HAL_GPIO_WritePin>
        HAL_Delay(1); // delay after setting row high
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f001 f94c 	bl	8001ccc <HAL_Delay>

        for(int j = 0; j < NUM_COLS; j++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	e11a      	b.n	8000c70 <keyboardScan+0x26c>
            uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 8000a3a:	4a9f      	ldr	r2, [pc, #636]	; (8000cb8 <keyboardScan+0x2b4>)
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	499e      	ldr	r1, [pc, #632]	; (8000cbc <keyboardScan+0x2b8>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f001 fc0f 	bl	8002270 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	bf0c      	ite	eq
 8000a58:	2301      	moveq	r3, #1
 8000a5a:	2300      	movne	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	71fb      	strb	r3, [r7, #7]

            if (is_pressed && key_state[i][j] == IDLE) {
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d07a      	beq.n	8000b5c <keyboardScan+0x158>
 8000a66:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <keyboardScan+0x2bc>)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	441a      	add	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d171      	bne.n	8000b5c <keyboardScan+0x158>
                // Key has been pressed from an idle state
                if (keycode_map[i][j].macro != NULL) {
 8000a78:	4892      	ldr	r0, [pc, #584]	; (8000cc4 <keyboardScan+0x2c0>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	6979      	ldr	r1, [r7, #20]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	441a      	add	r2, r3
 8000a84:	0093      	lsls	r3, r2, #2
 8000a86:	461a      	mov	r2, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	440b      	add	r3, r1
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4413      	add	r3, r2
 8000a92:	4403      	add	r3, r0
 8000a94:	3304      	adds	r3, #4
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <keyboardScan+0xe0>
                    // Handle macro key press
                    usbHidHandleMacro(keycode_map[i][j].macro, keycode_map[i][j].macro_length);
 8000a9c:	4889      	ldr	r0, [pc, #548]	; (8000cc4 <keyboardScan+0x2c0>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	6979      	ldr	r1, [r7, #20]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	0052      	lsls	r2, r2, #1
 8000aa6:	441a      	add	r2, r3
 8000aa8:	0093      	lsls	r3, r2, #2
 8000aaa:	461a      	mov	r2, r3
 8000aac:	460b      	mov	r3, r1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	440b      	add	r3, r1
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4403      	add	r3, r0
 8000ab8:	3304      	adds	r3, #4
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	4c81      	ldr	r4, [pc, #516]	; (8000cc4 <keyboardScan+0x2c0>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6979      	ldr	r1, [r7, #20]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	0052      	lsls	r2, r2, #1
 8000ac6:	441a      	add	r2, r3
 8000ac8:	0093      	lsls	r3, r2, #2
 8000aca:	461a      	mov	r2, r3
 8000acc:	460b      	mov	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	440b      	add	r3, r1
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4423      	add	r3, r4
 8000ad8:	3308      	adds	r3, #8
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f000 ffa5 	bl	8001a2c <usbHidHandleMacro>
 8000ae2:	e022      	b.n	8000b2a <keyboardScan+0x126>
                } else {
                    // Handle normal key press
                    usbHidAddKey(keycode_map[i][j].keycode, keycode_map[i][j].mod);  // Add the key to the HID report
 8000ae4:	4877      	ldr	r0, [pc, #476]	; (8000cc4 <keyboardScan+0x2c0>)
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	6979      	ldr	r1, [r7, #20]
 8000aea:	461a      	mov	r2, r3
 8000aec:	0052      	lsls	r2, r2, #1
 8000aee:	441a      	add	r2, r3
 8000af0:	0093      	lsls	r3, r2, #2
 8000af2:	461a      	mov	r2, r3
 8000af4:	460b      	mov	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	440b      	add	r3, r1
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	4413      	add	r3, r2
 8000afe:	4403      	add	r3, r0
 8000b00:	7818      	ldrb	r0, [r3, #0]
 8000b02:	4c70      	ldr	r4, [pc, #448]	; (8000cc4 <keyboardScan+0x2c0>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	6979      	ldr	r1, [r7, #20]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	441a      	add	r2, r3
 8000b0e:	0093      	lsls	r3, r2, #2
 8000b10:	461a      	mov	r2, r3
 8000b12:	460b      	mov	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	440b      	add	r3, r1
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4423      	add	r3, r4
 8000b1e:	330a      	adds	r3, #10
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	f000 ff1b 	bl	8001960 <usbHidAddKey>
                }
                key_state[i][j] = PRESSED;
 8000b2a:	4a65      	ldr	r2, [pc, #404]	; (8000cc0 <keyboardScan+0x2bc>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	441a      	add	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4413      	add	r3, r2
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
                last_key_time[i][j] = current_tick;
 8000b3a:	4963      	ldr	r1, [pc, #396]	; (8000cc8 <keyboardScan+0x2c4>)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	009a      	lsls	r2, r3, #2
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4413      	add	r3, r2
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                sprintf(last_key, "%d%d", i+1, j+1);  // Save the last key pressed
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3301      	adds	r3, #1
 8000b52:	495e      	ldr	r1, [pc, #376]	; (8000ccc <keyboardScan+0x2c8>)
 8000b54:	485e      	ldr	r0, [pc, #376]	; (8000cd0 <keyboardScan+0x2cc>)
 8000b56:	f007 fea9 	bl	80088ac <siprintf>
 8000b5a:	e086      	b.n	8000c6a <keyboardScan+0x266>

            } else if (!is_pressed && key_state[i][j] == PRESSED && current_tick - last_key_time[i][j] > DEBOUNCE_DELAY) {
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8083 	bne.w	8000c6a <keyboardScan+0x266>
 8000b64:	4a56      	ldr	r2, [pc, #344]	; (8000cc0 <keyboardScan+0x2bc>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	441a      	add	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d179      	bne.n	8000c6a <keyboardScan+0x266>
 8000b76:	4954      	ldr	r1, [pc, #336]	; (8000cc8 <keyboardScan+0x2c4>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	009a      	lsls	r2, r3, #2
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4413      	add	r3, r2
 8000b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	2b0a      	cmp	r3, #10
 8000b8a:	d96e      	bls.n	8000c6a <keyboardScan+0x266>
                // Key has been released
                if (keycode_map[i][j].macro != NULL) {
 8000b8c:	484d      	ldr	r0, [pc, #308]	; (8000cc4 <keyboardScan+0x2c0>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6979      	ldr	r1, [r7, #20]
 8000b92:	461a      	mov	r2, r3
 8000b94:	0052      	lsls	r2, r2, #1
 8000b96:	441a      	add	r2, r3
 8000b98:	0093      	lsls	r3, r2, #2
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	440b      	add	r3, r1
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4403      	add	r3, r0
 8000ba8:	3304      	adds	r3, #4
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d031      	beq.n	8000c14 <keyboardScan+0x210>
                    // Handle macro key release
                    for(int k = 0; k < keycode_map[i][j].macro_length; k++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e019      	b.n	8000bea <keyboardScan+0x1e6>
                        usbHidRemoveKey(keycode_map[i][j].macro[k], 0);
 8000bb6:	4843      	ldr	r0, [pc, #268]	; (8000cc4 <keyboardScan+0x2c0>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6979      	ldr	r1, [r7, #20]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	441a      	add	r2, r3
 8000bc2:	0093      	lsls	r3, r2, #2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	440b      	add	r3, r1
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	4403      	add	r3, r0
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 feee 	bl	80019c0 <usbHidRemoveKey>
                    for(int k = 0; k < keycode_map[i][j].macro_length; k++) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <keyboardScan+0x2c0>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6979      	ldr	r1, [r7, #20]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	441a      	add	r2, r3
 8000bf6:	0093      	lsls	r3, r2, #2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	440b      	add	r3, r1
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	4413      	add	r3, r2
 8000c04:	4403      	add	r3, r0
 8000c06:	3308      	adds	r3, #8
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	dbd1      	blt.n	8000bb6 <keyboardScan+0x1b2>
 8000c12:	e022      	b.n	8000c5a <keyboardScan+0x256>
                    }
                } else {
                    // Handle normal key release
                    usbHidRemoveKey(keycode_map[i][j].keycode, keycode_map[i][j].mod); // Remove the key from the HID report
 8000c14:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <keyboardScan+0x2c0>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	6979      	ldr	r1, [r7, #20]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	441a      	add	r2, r3
 8000c20:	0093      	lsls	r3, r2, #2
 8000c22:	461a      	mov	r2, r3
 8000c24:	460b      	mov	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	440b      	add	r3, r1
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4403      	add	r3, r0
 8000c30:	7818      	ldrb	r0, [r3, #0]
 8000c32:	4c24      	ldr	r4, [pc, #144]	; (8000cc4 <keyboardScan+0x2c0>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6979      	ldr	r1, [r7, #20]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	441a      	add	r2, r3
 8000c3e:	0093      	lsls	r3, r2, #2
 8000c40:	461a      	mov	r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	440b      	add	r3, r1
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4423      	add	r3, r4
 8000c4e:	330a      	adds	r3, #10
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	f000 feb3 	bl	80019c0 <usbHidRemoveKey>
                }
                key_state[i][j] = IDLE;
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <keyboardScan+0x2bc>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	441a      	add	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < NUM_COLS; j++) {
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	f77f aee1 	ble.w	8000a3a <keyboardScan+0x36>
            }
        }

        HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <keyboardScan+0x2ac>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <keyboardScan+0x2b0>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f001 fb08 	bl	80022a0 <HAL_GPIO_WritePin>
        HAL_Delay(1); // delay after setting row low
 8000c90:	2001      	movs	r0, #1
 8000c92:	f001 f81b 	bl	8001ccc <HAL_Delay>
    for(int i = 0; i < NUM_ROWS; i++) {
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	f77f aeb6 	ble.w	8000a10 <keyboardScan+0xc>
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000d4 	.word	0x200000d4
 8000cb4:	200000e4 	.word	0x200000e4
 8000cb8:	200000ec 	.word	0x200000ec
 8000cbc:	200000fc 	.word	0x200000fc
 8000cc0:	20000398 	.word	0x20000398
 8000cc4:	20000014 	.word	0x20000014
 8000cc8:	20000354 	.word	0x20000354
 8000ccc:	08009204 	.word	0x08009204
 8000cd0:	20000394 	.word	0x20000394

08000cd4 <main>:
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);

int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  HAL_Init();
 8000cda:	f000 ff85 	bl	8001be8 <HAL_Init>
  SystemClock_Config();
 8000cde:	f000 f871 	bl	8000dc4 <SystemClock_Config>

  MX_GPIO_Init();
 8000ce2:	f000 f96b 	bl	8000fbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f8d7 	bl	8000e98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cea:	f000 f903 	bl	8000ef4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000cee:	f007 f953 	bl	8007f98 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000cf2:	f000 f92d 	bl	8000f50 <MX_SPI2_Init>

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	482a      	ldr	r0, [pc, #168]	; (8000da4 <main+0xd0>)
 8000cfa:	f001 faea 	bl	80022d2 <HAL_GPIO_TogglePin>

  usbHidInit(&hUsbDeviceFS);
 8000cfe:	482a      	ldr	r0, [pc, #168]	; (8000da8 <main+0xd4>)
 8000d00:	f000 fdfe 	bl	8001900 <usbHidInit>
  keyboardScannerInit();
 8000d04:	f7ff fe58 	bl	80009b8 <keyboardScannerInit>
  angleSensorInit(&hi2c2);
 8000d08:	4828      	ldr	r0, [pc, #160]	; (8000dac <main+0xd8>)
 8000d0a:	f7ff fc33 	bl	8000574 <angleSensorInit>
  uint8_t magnetPresent = angleSensorIsMagnetPresent(&hi2c2);
 8000d0e:	4827      	ldr	r0, [pc, #156]	; (8000dac <main+0xd8>)
 8000d10:	f7ff fc76 	bl	8000600 <angleSensorIsMagnetPresent>
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  displayInit();
 8000d18:	f7ff fd80 	bl	800081c <displayInit>

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <main+0xd0>)
 8000d20:	f001 fad7 	bl	80022d2 <HAL_GPIO_TogglePin>

  while (1)
	{
		angleSensorScrollScan(&hi2c2);
 8000d24:	4821      	ldr	r0, [pc, #132]	; (8000dac <main+0xd8>)
 8000d26:	f7ff fcf3 	bl	8000710 <angleSensorScrollScan>
		keyboardScan();
 8000d2a:	f7ff fe6b 	bl	8000a04 <keyboardScan>

		if (usbHidkeyReportChanged()) {
 8000d2e:	f000 fed9 	bl	8001ae4 <usbHidkeyReportChanged>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <main+0x68>
			usbHidSendKeyboardReport();
 8000d38:	f000 fe96 	bl	8001a68 <usbHidSendKeyboardReport>
		}

		if(smoothedAccumulator != 0){
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <main+0xdc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d011      	beq.n	8000d68 <main+0x94>
			usbHidUpdateMouseReport(0, 0, (int8_t)smoothedAccumulator / 35, 0);
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <main+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <main+0xe0>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	441a      	add	r2, r3
 8000d52:	1152      	asrs	r2, r2, #5
 8000d54:	17db      	asrs	r3, r3, #31
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fee6 	bl	8001b30 <usbHidUpdateMouseReport>
			usbHidSendMouseReport();
 8000d64:	f000 ff06 	bl	8001b74 <usbHidSendMouseReport>
		}

		if (DataReceivedFlag){
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <main+0xe4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00d      	beq.n	8000d8e <main+0xba>
			// Process the data in SharedDataBuffer...

			HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000d72:	2104      	movs	r1, #4
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <main+0xd0>)
 8000d76:	f001 faac 	bl	80022d2 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000d7a:	2064      	movs	r0, #100	; 0x64
 8000d7c:	f000 ffa6 	bl	8001ccc <HAL_Delay>
			HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000d80:	2104      	movs	r1, #4
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <main+0xd0>)
 8000d84:	f001 faa5 	bl	80022d2 <HAL_GPIO_TogglePin>

			// Clear the flag
			DataReceivedFlag = 0;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <main+0xe4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
		}

		displayUpdate(last_key, lastEncoderVal, smoothedAccumulator, magnetPresent);
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <main+0xe8>)
 8000d90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <main+0xdc>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0xec>)
 8000d9c:	f7ff fd96 	bl	80008cc <displayUpdate>
		angleSensorScrollScan(&hi2c2);
 8000da0:	e7c0      	b.n	8000d24 <main+0x50>
 8000da2:	bf00      	nop
 8000da4:	40020000 	.word	0x40020000
 8000da8:	200008fc 	.word	0x200008fc
 8000dac:	200003fc 	.word	0x200003fc
 8000db0:	20000350 	.word	0x20000350
 8000db4:	ea0ea0eb 	.word	0xea0ea0eb
 8000db8:	200004a8 	.word	0x200004a8
 8000dbc:	20000348 	.word	0x20000348
 8000dc0:	20000394 	.word	0x20000394

08000dc4 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	2230      	movs	r2, #48	; 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f007 fd62 	bl	800889c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <SystemClock_Config+0xcc>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <SystemClock_Config+0xcc>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e34:	2308      	movs	r3, #8
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e38:	23a8      	movs	r3, #168	; 0xa8
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e40:	2307      	movs	r3, #7
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fcbd 	bl	80047c8 <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e54:	f000 f91e 	bl	8001094 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2105      	movs	r1, #5
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 ff1e 	bl	8004cb8 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e82:	f000 f907 	bl	8001094 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3750      	adds	r7, #80	; 0x50
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_I2C1_Init+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x58>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed6:	f001 fa17 	bl	8002308 <HAL_I2C_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee0:	f000 f8d8 	bl	8001094 <Error_Handler>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200003a8 	.word	0x200003a8
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	00061a80 	.word	0x00061a80

08000ef4 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <MX_I2C2_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_I2C2_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_I2C2_Init+0x50>)
 8000f32:	f001 f9e9 	bl	8002308 <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 f8aa 	bl	8001094 <Error_Handler>
  }

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003fc 	.word	0x200003fc
 8000f48:	40005800 	.word	0x40005800
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_SPI2_Init+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f84:	2208      	movs	r2, #8
 8000f86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000fa2:	f004 f893 	bl	80050cc <HAL_SPI_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fac:	f000 f872 	bl	8001094 <Error_Handler>
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000450 	.word	0x20000450
 8000fb8:	40003800 	.word	0x40003800

08000fbc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_GPIO_Init+0xcc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <MX_GPIO_Init+0xcc>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_GPIO_Init+0xcc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_GPIO_Init+0xcc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <MX_GPIO_Init+0xcc>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_GPIO_Init+0xcc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_GPIO_Init+0xcc>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <MX_GPIO_Init+0xcc>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_GPIO_Init+0xcc>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_GPIO_Init+0xcc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <MX_GPIO_Init+0xcc>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_GPIO_Init+0xcc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	21f4      	movs	r1, #244	; 0xf4
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_GPIO_Init+0xd0>)
 8001048:	f001 f92a 	bl	80022a0 <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 800104c:	230f      	movs	r3, #15
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001054:	2302      	movs	r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001060:	f000 ff6a 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8001064:	23f4      	movs	r3, #244	; 0xf4
 8001066:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_GPIO_Init+0xd0>)
 800107c:	f000 ff5c 	bl	8001f38 <HAL_GPIO_Init>

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020800 	.word	0x40020800

08001094 <Error_Handler>:

void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop

  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010a6:	f000 fa29 	bl	80014fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010ae:	2201      	movs	r2, #1
 80010b0:	2178      	movs	r1, #120	; 0x78
 80010b2:	485b      	ldr	r0, [pc, #364]	; (8001220 <SSD1306_Init+0x180>)
 80010b4:	f001 fd90 	bl	8002bd8 <HAL_I2C_IsDeviceReady>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e0a9      	b.n	8001216 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010c8:	e002      	b.n	80010d0 <SSD1306_Init+0x30>
		p--;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f9      	bne.n	80010ca <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010d6:	22ae      	movs	r2, #174	; 0xae
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa8a 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fa85 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010ea:	2210      	movs	r2, #16
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fa80 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010f4:	22b0      	movs	r2, #176	; 0xb0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fa7b 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010fe:	22c8      	movs	r2, #200	; 0xc8
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fa76 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fa71 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001112:	2210      	movs	r2, #16
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fa6c 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800111c:	2240      	movs	r2, #64	; 0x40
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fa67 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001126:	2281      	movs	r2, #129	; 0x81
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fa62 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fa5d 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800113a:	22a1      	movs	r2, #161	; 0xa1
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fa58 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001144:	22a6      	movs	r2, #166	; 0xa6
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fa53 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800114e:	22a8      	movs	r2, #168	; 0xa8
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fa4e 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001158:	223f      	movs	r2, #63	; 0x3f
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fa49 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001162:	22a4      	movs	r2, #164	; 0xa4
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fa44 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800116c:	22d3      	movs	r2, #211	; 0xd3
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 fa3f 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fa3a 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001180:	22d5      	movs	r2, #213	; 0xd5
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fa35 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800118a:	22f0      	movs	r2, #240	; 0xf0
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	; 0x78
 8001190:	f000 fa30 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001194:	22d9      	movs	r2, #217	; 0xd9
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f000 fa2b 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800119e:	2222      	movs	r2, #34	; 0x22
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	; 0x78
 80011a4:	f000 fa26 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011a8:	22da      	movs	r2, #218	; 0xda
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f000 fa21 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011b2:	2212      	movs	r2, #18
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f000 fa1c 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011bc:	22db      	movs	r2, #219	; 0xdb
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	; 0x78
 80011c2:	f000 fa17 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011c6:	2220      	movs	r2, #32
 80011c8:	2100      	movs	r1, #0
 80011ca:	2078      	movs	r0, #120	; 0x78
 80011cc:	f000 fa12 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011d0:	228d      	movs	r2, #141	; 0x8d
 80011d2:	2100      	movs	r1, #0
 80011d4:	2078      	movs	r0, #120	; 0x78
 80011d6:	f000 fa0d 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011da:	2214      	movs	r2, #20
 80011dc:	2100      	movs	r1, #0
 80011de:	2078      	movs	r0, #120	; 0x78
 80011e0:	f000 fa08 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011e4:	22af      	movs	r2, #175	; 0xaf
 80011e6:	2100      	movs	r1, #0
 80011e8:	2078      	movs	r0, #120	; 0x78
 80011ea:	f000 fa03 	bl	80015f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011ee:	222e      	movs	r2, #46	; 0x2e
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f000 f9fe 	bl	80015f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f843 	bl	8001284 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011fe:	f000 f813 	bl	8001228 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SSD1306_Init+0x184>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SSD1306_Init+0x184>)
 800120a:	2200      	movs	r2, #0
 800120c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SSD1306_Init+0x184>)
 8001210:	2201      	movs	r2, #1
 8001212:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200003a8 	.word	0x200003a8
 8001224:	200008ac 	.word	0x200008ac

08001228 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e01d      	b.n	8001270 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	3b50      	subs	r3, #80	; 0x50
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 f9d8 	bl	80015f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2078      	movs	r0, #120	; 0x78
 800124a:	f000 f9d3 	bl	80015f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800124e:	2210      	movs	r2, #16
 8001250:	2100      	movs	r1, #0
 8001252:	2078      	movs	r0, #120	; 0x78
 8001254:	f000 f9ce 	bl	80015f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	01db      	lsls	r3, r3, #7
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <SSD1306_UpdateScreen+0x58>)
 800125e:	441a      	add	r2, r3
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	2078      	movs	r0, #120	; 0x78
 8001266:	f000 f95f 	bl	8001528 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	3301      	adds	r3, #1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d9de      	bls.n	8001234 <SSD1306_UpdateScreen+0xc>
	}
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200004ac 	.word	0x200004ac

08001284 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <SSD1306_Fill+0x14>
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <SSD1306_Fill+0x16>
 8001298:	23ff      	movs	r3, #255	; 0xff
 800129a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129e:	4619      	mov	r1, r3
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <SSD1306_Fill+0x2c>)
 80012a2:	f007 fafb 	bl	800889c <memset>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200004ac 	.word	0x200004ac

080012b4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	70fb      	strb	r3, [r7, #3]
	if (
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ca:	d848      	bhi.n	800135e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	2b3f      	cmp	r3, #63	; 0x3f
 80012d0:	d845      	bhi.n	800135e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <SSD1306_DrawPixel+0xb8>)
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d11a      	bne.n	8001324 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	b298      	uxth	r0, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	01db      	lsls	r3, r3, #7
 80012fa:	4413      	add	r3, r2
 80012fc:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <SSD1306_DrawPixel+0xbc>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	b25a      	sxtb	r2, r3
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b259      	sxtb	r1, r3
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	4603      	mov	r3, r0
 8001318:	01db      	lsls	r3, r3, #7
 800131a:	4413      	add	r3, r2
 800131c:	b2c9      	uxtb	r1, r1
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <SSD1306_DrawPixel+0xbc>)
 8001320:	54d1      	strb	r1, [r2, r3]
 8001322:	e01d      	b.n	8001360 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b298      	uxth	r0, r3
 800132c:	4603      	mov	r3, r0
 800132e:	01db      	lsls	r3, r3, #7
 8001330:	4413      	add	r3, r2
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <SSD1306_DrawPixel+0xbc>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	b25a      	sxtb	r2, r3
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4013      	ands	r3, r2
 800134c:	b259      	sxtb	r1, r3
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	4603      	mov	r3, r0
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	4413      	add	r3, r2
 8001356:	b2c9      	uxtb	r1, r1
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SSD1306_DrawPixel+0xbc>)
 800135a:	54d1      	strb	r1, [r2, r3]
 800135c:	e000      	b.n	8001360 <SSD1306_DrawPixel+0xac>
		return;
 800135e:	bf00      	nop
	}
}
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200008ac 	.word	0x200008ac
 8001370:	200004ac 	.word	0x200004ac

08001374 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <SSD1306_GotoXY+0x28>)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <SSD1306_GotoXY+0x28>)
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	8053      	strh	r3, [r2, #2]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	200008ac 	.word	0x200008ac

080013a0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <SSD1306_Putc+0xfc>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
	if (
 80013bc:	2b7f      	cmp	r3, #127	; 0x7f
 80013be:	dc07      	bgt.n	80013d0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <SSD1306_Putc+0xfc>)
 80013c2:	885b      	ldrh	r3, [r3, #2]
 80013c4:	461a      	mov	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013cc:	2b3f      	cmp	r3, #63	; 0x3f
 80013ce:	dd01      	ble.n	80013d4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e05e      	b.n	8001492 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e04b      	b.n	8001472 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3b20      	subs	r3, #32
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	7849      	ldrb	r1, [r1, #1]
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	440b      	add	r3, r1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	e030      	b.n	8001460 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <SSD1306_Putc+0xfc>)
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b298      	uxth	r0, r3
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <SSD1306_Putc+0xfc>)
 800141c:	885a      	ldrh	r2, [r3, #2]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	79ba      	ldrb	r2, [r7, #6]
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff ff43 	bl	80012b4 <SSD1306_DrawPixel>
 800142e:	e014      	b.n	800145a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <SSD1306_Putc+0xfc>)
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b298      	uxth	r0, r3
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <SSD1306_Putc+0xfc>)
 800143e:	885a      	ldrh	r2, [r3, #2]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b299      	uxth	r1, r3
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	f7ff ff2d 	bl	80012b4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	3301      	adds	r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4293      	cmp	r3, r2
 800146a:	d3c8      	bcc.n	80013fe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	461a      	mov	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4293      	cmp	r3, r2
 800147c:	d3ad      	bcc.n	80013da <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <SSD1306_Putc+0xfc>)
 8001480:	881a      	ldrh	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <SSD1306_Putc+0xfc>)
 800148e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001490:	79fb      	ldrb	r3, [r7, #7]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200008ac 	.word	0x200008ac

080014a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014ae:	e012      	b.n	80014d6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff71 	bl	80013a0 <SSD1306_Putc>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d002      	beq.n	80014d0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	e008      	b.n	80014e2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e8      	bne.n	80014b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fec8 	bl	8001284 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014f4:	f7ff fe98 	bl	8001228 <SSD1306_UpdateScreen>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <ssd1306_I2C_Init+0x28>)
 8001504:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001506:	e002      	b.n	800150e <ssd1306_I2C_Init+0x12>
		p--;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	0003d090 	.word	0x0003d090

08001528 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b0c7      	sub	sp, #284	; 0x11c
 800152c:	af02      	add	r7, sp, #8
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001536:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800153a:	600a      	str	r2, [r1, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001542:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001546:	4622      	mov	r2, r4
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800154e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001552:	4602      	mov	r2, r0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800155a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800155e:	460a      	mov	r2, r1
 8001560:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800156a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800156e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800157c:	e015      	b.n	80015aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800157e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001582:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001586:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	441a      	add	r2, r3
 800158e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001592:	3301      	adds	r3, #1
 8001594:	7811      	ldrb	r1, [r2, #0]
 8001596:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800159a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800159e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015b8:	8812      	ldrh	r2, [r2, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d8df      	bhi.n	800157e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	200a      	movs	r0, #10
 80015de:	9000      	str	r0, [sp, #0]
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80015e2:	f000 ffd5 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	200003a8 	.word	0x200003a8

080015f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	b299      	uxth	r1, r3
 8001612:	f107 020c 	add.w	r2, r7, #12
 8001616:	230a      	movs	r3, #10
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <ssd1306_I2C_Write+0x38>)
 800161e:	f000 ffb7 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003a8 	.word	0x200003a8

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_I2C_MspInit+0xe8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016da:	f000 fc2d 	bl	8001f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_I2C_MspInit+0xec>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fa:	e031      	b.n	8001760 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_I2C_MspInit+0xf4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d12c      	bne.n	8001760 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_I2C_MspInit+0xec>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_I2C_MspInit+0xec>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_I2C_MspInit+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001722:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001728:	2312      	movs	r3, #18
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001734:	2304      	movs	r3, #4
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 8001740:	f000 fbfa 	bl	8001f38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_I2C_MspInit+0xec>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_I2C_MspInit+0xec>)
 800174e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_I2C_MspInit+0xec>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005400 	.word	0x40005400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40005800 	.word	0x40005800

08001778 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_SPI_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12c      	bne.n	80017f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_SPI_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e4:	2305      	movs	r3, #5
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_SPI_MspInit+0x8c>)
 80017f0:	f000 fba2 	bl	8001f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40003800 	.word	0x40003800
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 fa1a 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <OTG_FS_IRQHandler+0x10>)
 8001862:	f001 ff7e 	bl	8003762 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000dcc 	.word	0x20000dcc

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f006 ffc4 	bl	800882c <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	200008b4 	.word	0x200008b4
 80018d8:	20001238 	.word	0x20001238

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <usbHidInit>:
static uint8_t hid_report_mod = 0; // Current modifier keys
static uint8_t hid_report_mod_prev = 0; // Previous modifier keys
static MouseHID mousehid;
static USBD_HandleTypeDef *usbDeviceHandle;

void usbHidInit(USBD_HandleTypeDef *handle) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    usbDeviceHandle = handle;
 8001908:	4a10      	ldr	r2, [pc, #64]	; (800194c <usbHidInit+0x4c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
    memset(hid_report, 0, NUM_KEYS);
 800190e:	2210      	movs	r2, #16
 8001910:	2100      	movs	r1, #0
 8001912:	480f      	ldr	r0, [pc, #60]	; (8001950 <usbHidInit+0x50>)
 8001914:	f006 ffc2 	bl	800889c <memset>
    memset(hid_report_prev, 0, NUM_KEYS);
 8001918:	2210      	movs	r2, #16
 800191a:	2100      	movs	r1, #0
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <usbHidInit+0x54>)
 800191e:	f006 ffbd 	bl	800889c <memset>

    memset(&keyboardhid, 0, sizeof(KeyboardHID));
 8001922:	2209      	movs	r2, #9
 8001924:	2100      	movs	r1, #0
 8001926:	480c      	ldr	r0, [pc, #48]	; (8001958 <usbHidInit+0x58>)
 8001928:	f006 ffb8 	bl	800889c <memset>
    keyboardhid.REPORT_ID = 0x01;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <usbHidInit+0x58>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

    memset(&mousehid, 0, sizeof(MouseHID));
 8001932:	2207      	movs	r2, #7
 8001934:	2100      	movs	r1, #0
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <usbHidInit+0x5c>)
 8001938:	f006 ffb0 	bl	800889c <memset>
    mousehid.REPORT_ID = 0x02;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <usbHidInit+0x5c>)
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200008f0 	.word	0x200008f0
 8001950:	200008c4 	.word	0x200008c4
 8001954:	200008d4 	.word	0x200008d4
 8001958:	200008b8 	.word	0x200008b8
 800195c:	200008e8 	.word	0x200008e8

08001960 <usbHidAddKey>:

void usbHidAddKey(uint8_t keycode, uint8_t mod) {
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < NUM_KEYS; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e015      	b.n	80019a2 <usbHidAddKey+0x42>
        if (hid_report[i] == 0) {
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <usbHidAddKey+0x58>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <usbHidAddKey+0x3c>
            hid_report[i] = keycode;
 8001982:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <usbHidAddKey+0x58>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	701a      	strb	r2, [r3, #0]
            hid_report_mod |= mod; // Add the modifier key to the HID report
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <usbHidAddKey+0x5c>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	4313      	orrs	r3, r2
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <usbHidAddKey+0x5c>)
 8001998:	701a      	strb	r2, [r3, #0]
            break;
 800199a:	e006      	b.n	80019aa <usbHidAddKey+0x4a>
    for (int i = 0; i < NUM_KEYS; i++) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	dde6      	ble.n	8001976 <usbHidAddKey+0x16>
        }
    }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200008c4 	.word	0x200008c4
 80019bc:	200008e4 	.word	0x200008e4

080019c0 <usbHidRemoveKey>:

void usbHidRemoveKey(uint8_t keycode, uint8_t mod) {
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < NUM_KEYS; i++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e01b      	b.n	8001a0e <usbHidRemoveKey+0x4e>
        if (hid_report[i] == keycode) {
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <usbHidRemoveKey+0x64>)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d111      	bne.n	8001a08 <usbHidRemoveKey+0x48>
            hid_report[i] = 0;
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <usbHidRemoveKey+0x64>)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
            hid_report_mod &= ~mod; // Remove the modifier key from the HID report
 80019ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <usbHidRemoveKey+0x68>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <usbHidRemoveKey+0x68>)
 8001a04:	701a      	strb	r2, [r3, #0]
            break;
 8001a06:	e006      	b.n	8001a16 <usbHidRemoveKey+0x56>
    for (int i = 0; i < NUM_KEYS; i++) {
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	dde0      	ble.n	80019d6 <usbHidRemoveKey+0x16>
        }
    }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200008c4 	.word	0x200008c4
 8001a28:	200008e4 	.word	0x200008e4

08001a2c <usbHidHandleMacro>:

void usbHidHandleMacro(uint8_t* macro, uint8_t macro_length) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
    // Only send key report, don't clear it
    for (int i = 0; i < macro_length; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e00a      	b.n	8001a54 <usbHidHandleMacro+0x28>
        usbHidAddKey(macro[i], 0); // 0 default value for the modifier
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff89 	bl	8001960 <usbHidAddKey>
    for (int i = 0; i < macro_length; i++) {
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <usbHidHandleMacro+0x12>
    }

    // Send key report
    usbHidSendKeyboardReport();
 8001a5c:	f000 f804 	bl	8001a68 <usbHidSendKeyboardReport>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <usbHidSendKeyboardReport>:

void usbHidSendKeyboardReport() {
 8001a68:	b598      	push	{r3, r4, r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
    // Copy keycodes from hid_report to keyboardhid
    keyboardhid.KEYCODE1 = hid_report[0];
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a72:	70da      	strb	r2, [r3, #3]
    keyboardhid.KEYCODE2 = hid_report[1];
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a76:	785a      	ldrb	r2, [r3, #1]
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a7a:	711a      	strb	r2, [r3, #4]
    keyboardhid.KEYCODE3 = hid_report[2];
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a7e:	789a      	ldrb	r2, [r3, #2]
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a82:	715a      	strb	r2, [r3, #5]
    keyboardhid.KEYCODE4 = hid_report[3];
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a86:	78da      	ldrb	r2, [r3, #3]
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a8a:	719a      	strb	r2, [r3, #6]
    keyboardhid.KEYCODE5 = hid_report[4];
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a8e:	791a      	ldrb	r2, [r3, #4]
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a92:	71da      	strb	r2, [r3, #7]
    keyboardhid.KEYCODE6 = hid_report[5];
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001a96:	795a      	ldrb	r2, [r3, #5]
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001a9a:	721a      	strb	r2, [r3, #8]

    // Copy the modifier keys from hid_report_mod to keyboardhid
    keyboardhid.MODIFIER = hid_report_mod;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <usbHidSendKeyboardReport+0x6c>)
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001aa2:	705a      	strb	r2, [r3, #1]

    //send current key report
    USBD_HID_SendReport(usbDeviceHandle, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <usbHidSendKeyboardReport+0x70>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2209      	movs	r2, #9
 8001aaa:	4909      	ldr	r1, [pc, #36]	; (8001ad0 <usbHidSendKeyboardReport+0x68>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 f87d 	bl	8006bac <USBD_HID_SendReport>
    //save it to previous report
    memcpy(hid_report_prev, hid_report, NUM_KEYS);
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <usbHidSendKeyboardReport+0x74>)
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <usbHidSendKeyboardReport+0x64>)
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    hid_report_mod_prev = hid_report_mod;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <usbHidSendKeyboardReport+0x6c>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <usbHidSendKeyboardReport+0x78>)
 8001ac4:	701a      	strb	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	bd98      	pop	{r3, r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200008c4 	.word	0x200008c4
 8001ad0:	200008b8 	.word	0x200008b8
 8001ad4:	200008e4 	.word	0x200008e4
 8001ad8:	200008f0 	.word	0x200008f0
 8001adc:	200008d4 	.word	0x200008d4
 8001ae0:	200008e5 	.word	0x200008e5

08001ae4 <usbHidkeyReportChanged>:

uint8_t usbHidkeyReportChanged(){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
	uint8_t report_changed = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < NUM_KEYS; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	e00f      	b.n	8001b14 <usbHidkeyReportChanged+0x30>
		if (hid_report[i] != hid_report_prev[i]) {
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <usbHidkeyReportChanged+0x44>)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <usbHidkeyReportChanged+0x48>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	440b      	add	r3, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d002      	beq.n	8001b0e <usbHidkeyReportChanged+0x2a>
			report_changed = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
			break;
 8001b0c:	e005      	b.n	8001b1a <usbHidkeyReportChanged+0x36>
	for (int i = 0; i < NUM_KEYS; i++) {
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	ddec      	ble.n	8001af4 <usbHidkeyReportChanged+0x10>
		}
	}
	return report_changed;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	200008c4 	.word	0x200008c4
 8001b2c:	200008d4 	.word	0x200008d4

08001b30 <usbHidUpdateMouseReport>:

void usbHidUpdateMouseReport(int8_t x, int8_t y, int8_t wheel, uint8_t buttons) {
 8001b30:	b490      	push	{r4, r7}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4604      	mov	r4, r0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4623      	mov	r3, r4
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4603      	mov	r3, r0
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	717b      	strb	r3, [r7, #5]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	713b      	strb	r3, [r7, #4]
    mousehid.X = x;
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <usbHidUpdateMouseReport+0x40>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	7093      	strb	r3, [r2, #2]
    mousehid.Y = y;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <usbHidUpdateMouseReport+0x40>)
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	70d3      	strb	r3, [r2, #3]
    mousehid.WHEEL = wheel;
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <usbHidUpdateMouseReport+0x40>)
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	7113      	strb	r3, [r2, #4]
    mousehid.BUTTONS = buttons;
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <usbHidUpdateMouseReport+0x40>)
 8001b62:	793b      	ldrb	r3, [r7, #4]
 8001b64:	7053      	strb	r3, [r2, #1]
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc90      	pop	{r4, r7}
 8001b6e:	4770      	bx	lr
 8001b70:	200008e8 	.word	0x200008e8

08001b74 <usbHidSendMouseReport>:

void usbHidSendMouseReport(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(usbDeviceHandle, (uint8_t*)&mousehid, sizeof(mousehid));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <usbHidSendMouseReport+0x18>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4904      	ldr	r1, [pc, #16]	; (8001b90 <usbHidSendMouseReport+0x1c>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 f813 	bl	8006bac <USBD_HID_SendReport>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200008f0 	.word	0x200008f0
 8001b90:	200008e8 	.word	0x200008e8

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff fe8d 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f006 fe39 	bl	8008838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f885 	bl	8000cd4 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8001bd8:	0800a76c 	.word	0x0800a76c
  ldr r2, =_sbss
 8001bdc:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8001be0:	20001238 	.word	0x20001238

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f94f 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fd08 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f967 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f92f 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000104 	.word	0x20000104
 8001c84:	2000010c 	.word	0x2000010c
 8001c88:	20000108 	.word	0x20000108

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000010c 	.word	0x2000010c
 8001cb0:	200008f4 	.word	0x200008f4

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200008f4 	.word	0x200008f4

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000010c 	.word	0x2000010c

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff3e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff31 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e16b      	b.n	800222c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 815a 	bne.w	8002226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d005      	beq.n	8001f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d130      	bne.n	8001fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d017      	beq.n	8002028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	69b9      	ldr	r1, [r7, #24]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80b4 	beq.w	8002226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b60      	ldr	r3, [pc, #384]	; (8002244 <HAL_GPIO_Init+0x30c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a5f      	ldr	r2, [pc, #380]	; (8002244 <HAL_GPIO_Init+0x30c>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <HAL_GPIO_Init+0x30c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020da:	4a5b      	ldr	r2, [pc, #364]	; (8002248 <HAL_GPIO_Init+0x310>)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_GPIO_Init+0x314>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02b      	beq.n	800215e <HAL_GPIO_Init+0x226>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a51      	ldr	r2, [pc, #324]	; (8002250 <HAL_GPIO_Init+0x318>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d025      	beq.n	800215a <HAL_GPIO_Init+0x222>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a50      	ldr	r2, [pc, #320]	; (8002254 <HAL_GPIO_Init+0x31c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <HAL_GPIO_Init+0x21e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4f      	ldr	r2, [pc, #316]	; (8002258 <HAL_GPIO_Init+0x320>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d019      	beq.n	8002152 <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4e      	ldr	r2, [pc, #312]	; (800225c <HAL_GPIO_Init+0x324>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4d      	ldr	r2, [pc, #308]	; (8002260 <HAL_GPIO_Init+0x328>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00d      	beq.n	800214a <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <HAL_GPIO_Init+0x32c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <HAL_GPIO_Init+0x330>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_GPIO_Init+0x20a>
 800213e:	2307      	movs	r3, #7
 8002140:	e00e      	b.n	8002160 <HAL_GPIO_Init+0x228>
 8002142:	2308      	movs	r3, #8
 8002144:	e00c      	b.n	8002160 <HAL_GPIO_Init+0x228>
 8002146:	2306      	movs	r3, #6
 8002148:	e00a      	b.n	8002160 <HAL_GPIO_Init+0x228>
 800214a:	2305      	movs	r3, #5
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x228>
 800214e:	2304      	movs	r3, #4
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x228>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x228>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x228>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x228>
 800215e:	2300      	movs	r3, #0
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f002 0203 	and.w	r2, r2, #3
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002170:	4935      	ldr	r1, [pc, #212]	; (8002248 <HAL_GPIO_Init+0x310>)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_GPIO_Init+0x334>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <HAL_GPIO_Init+0x334>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_GPIO_Init+0x334>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_GPIO_Init+0x334>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_GPIO_Init+0x334>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_GPIO_Init+0x334>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_GPIO_Init+0x334>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_GPIO_Init+0x334>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	f67f ae90 	bls.w	8001f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40013800 	.word	0x40013800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40021400 	.word	0x40021400
 8002264:	40021800 	.word	0x40021800
 8002268:	40021c00 	.word	0x40021c00
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e001      	b.n	8002292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	400b      	ands	r3, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e12b      	b.n	8002572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff f9a6 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800236c:	f002 fe9a 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a81      	ldr	r2, [pc, #516]	; (800257c <HAL_I2C_Init+0x274>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d807      	bhi.n	800238c <HAL_I2C_Init+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_I2C_Init+0x278>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e006      	b.n	800239a <HAL_I2C_Init+0x92>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_I2C_Init+0x27c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0e7      	b.n	8002572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a78      	ldr	r2, [pc, #480]	; (8002588 <HAL_I2C_Init+0x280>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_I2C_Init+0x274>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d802      	bhi.n	80023dc <HAL_I2C_Init+0xd4>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	e009      	b.n	80023f0 <HAL_I2C_Init+0xe8>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_I2C_Init+0x284>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	3301      	adds	r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	495c      	ldr	r1, [pc, #368]	; (800257c <HAL_I2C_Init+0x274>)
 800240c:	428b      	cmp	r3, r1
 800240e:	d819      	bhi.n	8002444 <HAL_I2C_Init+0x13c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e59      	subs	r1, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fbb1 f3f3 	udiv	r3, r1, r3
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002424:	400b      	ands	r3, r1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_I2C_Init+0x138>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e59      	subs	r1, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fbb1 f3f3 	udiv	r3, r1, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	e051      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002440:	2304      	movs	r3, #4
 8002442:	e04f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_I2C_Init+0x168>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e012      	b.n	8002496 <HAL_I2C_Init+0x18e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x196>
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10e      	bne.n	80024c4 <HAL_I2C_Init+0x1bc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e58      	subs	r0, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	6809      	ldr	r1, [r1, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6911      	ldr	r1, [r2, #16]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	000186a0 	.word	0x000186a0
 8002580:	001e847f 	.word	0x001e847f
 8002584:	003d08ff 	.word	0x003d08ff
 8002588:	431bde83 	.word	0x431bde83
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fb86 	bl	8001cb4 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80e0 	bne.w	8002778 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	4970      	ldr	r1, [pc, #448]	; (8002784 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fda0 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0d3      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0cc      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2221      	movs	r2, #33	; 0x21
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_I2C_Master_Transmit+0x1f8>)
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fbf0 	bl	8002e34 <I2C_MasterRequestWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08d      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002674:	e066      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fe1a 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x188>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	6a39      	ldr	r1, [r7, #32]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fe0a 	bl	8003336 <I2C_WaitOnBTFFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01a      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d194      	bne.n	8002676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a6:	f7ff fa85 	bl	8001cb4 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 8208 	bne.w	8002bca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2319      	movs	r3, #25
 80027c0:	2201      	movs	r2, #1
 80027c2:	497b      	ldr	r1, [pc, #492]	; (80029b0 <HAL_I2C_Mem_Read+0x224>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fc9f 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
 80027d2:	e1fb      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Mem_Read+0x56>
 80027de:	2302      	movs	r3, #2
 80027e0:	e1f4      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d007      	beq.n	8002808 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2222      	movs	r2, #34	; 0x22
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a5b      	ldr	r2, [pc, #364]	; (80029b4 <HAL_I2C_Mem_Read+0x228>)
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284a:	88f8      	ldrh	r0, [r7, #6]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4603      	mov	r3, r0
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fb6c 	bl	8002f38 <I2C_RequestMemoryRead>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1b0      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d113      	bne.n	800289a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e184      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d11b      	bne.n	80028da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e164      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d11b      	bne.n	800291a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	e144      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002930:	e138      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b03      	cmp	r3, #3
 8002938:	f200 80f1 	bhi.w	8002b1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b01      	cmp	r3, #1
 8002942:	d123      	bne.n	800298c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fd35 	bl	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e139      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298a:	e10b      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d14e      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	2200      	movs	r2, #0
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <HAL_I2C_Mem_Read+0x22c>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fbb2 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e10e      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a30:	e0b8      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4966      	ldr	r1, [pc, #408]	; (8002bd4 <HAL_I2C_Mem_Read+0x448>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb63 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0bf      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	494f      	ldr	r1, [pc, #316]	; (8002bd4 <HAL_I2C_Mem_Read+0x448>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb35 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e091      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1c:	e042      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc48 	bl	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e04c      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d118      	bne.n	8002ba4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f aec2 	bne.w	8002932 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010004 	.word	0x00010004

08002bd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff f864 	bl	8001cb4 <HAL_GetTick>
 8002bec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 8111 	bne.w	8002e22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2319      	movs	r3, #25
 8002c06:	2201      	movs	r2, #1
 8002c08:	4988      	ldr	r1, [pc, #544]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa7c 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	e104      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2C_IsDeviceReady+0x50>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0fd      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d007      	beq.n	8002c4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2224      	movs	r2, #36	; 0x24
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a70      	ldr	r2, [pc, #448]	; (8002e30 <HAL_I2C_IsDeviceReady+0x258>)
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa3a 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca8:	d103      	bne.n	8002cb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0b6      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fff5 	bl	8001cb4 <HAL_GetTick>
 8002cca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cfa:	e025      	b.n	8002d48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe ffda 	bl	8001cb4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <HAL_I2C_IsDeviceReady+0x13a>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	22a0      	movs	r2, #160	; 0xa0
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2ba0      	cmp	r3, #160	; 0xa0
 8002d52:	d005      	beq.n	8002d60 <HAL_I2C_IsDeviceReady+0x188>
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_I2C_IsDeviceReady+0x188>
 8002d5a:	7dbb      	ldrb	r3, [r7, #22]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0cd      	beq.n	8002cfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d129      	bne.n	8002dca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	4921      	ldr	r1, [pc, #132]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9ae 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e036      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e02c      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002de2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2319      	movs	r3, #25
 8002dea:	2201      	movs	r2, #1
 8002dec:	490f      	ldr	r1, [pc, #60]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f98a 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e012      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f4ff af32 	bcc.w	8002c72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d006      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d003      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f937 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eae:	d103      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e035      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e01b      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	11db      	asrs	r3, r3, #7
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0306 	and.w	r3, r3, #6
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f063 030f 	orn	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <I2C_MasterRequestWrite+0xfc>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f95d 	bl	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e010      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <I2C_MasterRequestWrite+0x100>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f94d 	bl	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010008 	.word	0x00010008
 8002f34:	00010002 	.word	0x00010002

08002f38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	813b      	strh	r3, [r7, #8]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8c2 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f98:	d103      	bne.n	8002fa2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0aa      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	4952      	ldr	r1, [pc, #328]	; (8003104 <I2C_RequestMemoryRead+0x1cc>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8fa 	bl	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e097      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f964 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e076      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003014:	893b      	ldrh	r3, [r7, #8]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	e021      	b.n	8003064 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	6a39      	ldr	r1, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f93e 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b04      	cmp	r3, #4
 8003044:	d107      	bne.n	8003056 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003054:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e050      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800305a:	893b      	ldrh	r3, [r7, #8]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	6a39      	ldr	r1, [r7, #32]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f923 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e035      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f82b 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d103      	bne.n	80030d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e013      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	4906      	ldr	r1, [pc, #24]	; (8003104 <I2C_RequestMemoryRead+0x1cc>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f863 	bl	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00010002 	.word	0x00010002

08003108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003118:	e025      	b.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d021      	beq.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fdc7 	bl	8001cb4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e023      	b.n	80031ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10d      	bne.n	800318c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	e00c      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d0b6      	beq.n	800311a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c4:	e051      	b.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d4:	d123      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e046      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe fd45 	bl	8001cb4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e020      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10c      	bne.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e00b      	b.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	43da      	mvns	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d18d      	bne.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c0:	e02d      	b.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8ce 	bl	8003464 <I2C_IsAcknowledgeFailed>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e02d      	b.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d021      	beq.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fceb 	bl	8001cb4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003328:	2b80      	cmp	r3, #128	; 0x80
 800332a:	d1ca      	bne.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003342:	e02d      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f88d 	bl	8003464 <I2C_IsAcknowledgeFailed>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e02d      	b.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d021      	beq.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe fcaa 	bl	8001cb4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d1ca      	bne.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033c4:	e042      	b.n	800344c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d119      	bne.n	8003408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e029      	b.n	800345c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003408:	f7fe fc54 	bl	8001cb4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e007      	b.n	800345c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d1b5      	bne.n	80033c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d11b      	bne.n	80034b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003484:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c4:	b08f      	sub	sp, #60	; 0x3c
 80034c6:	af0a      	add	r7, sp, #40	; 0x28
 80034c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e10f      	b.n	80036f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f004 fe88 	bl	8008204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f001 ff77 	bl	8005406 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	687e      	ldr	r6, [r7, #4]
 8003520:	466d      	mov	r5, sp
 8003522:	f106 0410 	add.w	r4, r6, #16
 8003526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003532:	e885 0003 	stmia.w	r5, {r0, r1}
 8003536:	1d33      	adds	r3, r6, #4
 8003538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f001 fe4f 	bl	80051de <USB_CoreInit>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0d0      	b.n	80036f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 ff65 	bl	8005428 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e04a      	b.n	80035fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	333c      	adds	r3, #60	; 0x3c
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	b298      	uxth	r0, r3
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3342      	adds	r3, #66	; 0x42
 80035a0:	4602      	mov	r2, r0
 80035a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	333f      	adds	r3, #63	; 0x3f
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3344      	adds	r3, #68	; 0x44
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3348      	adds	r3, #72	; 0x48
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	3301      	adds	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d3af      	bcc.n	8003564 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e044      	b.n	8003694 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3301      	adds	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3b5      	bcc.n	800360a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	687e      	ldr	r6, [r7, #4]
 80036a6:	466d      	mov	r5, sp
 80036a8:	f106 0410 	add.w	r4, r6, #16
 80036ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036bc:	1d33      	adds	r3, r6, #4
 80036be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	f001 fefd 	bl	80054c0 <USB_DevInit>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e00d      	b.n	80036f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 ff79 	bl	80065e4 <USB_DevDisconnect>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_PCD_Start+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e020      	b.n	800375a <HAL_PCD_Start+0x5e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2b01      	cmp	r3, #1
 8003726:	d109      	bne.n	800373c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800372c:	2b01      	cmp	r3, #1
 800372e:	d005      	beq.n	800373c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fe4f 	bl	80053e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f002 ff29 	bl	80065a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003762:	b590      	push	{r4, r7, lr}
 8003764:	b08d      	sub	sp, #52	; 0x34
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 ffe7 	bl	800674c <USB_GetMode>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 839d 	bne.w	8003ec0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 ff4b 	bl	8006626 <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8393 	beq.w	8003ebe <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 ff42 	bl	8006626 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d107      	bne.n	80037bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f002 0202 	and.w	r2, r2, #2
 80037ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 ff30 	bl	8006626 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d161      	bne.n	8003894 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0210 	bic.w	r2, r2, #16
 80037de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	3304      	adds	r3, #4
 80037fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	0c5b      	lsrs	r3, r3, #17
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	2b02      	cmp	r3, #2
 800380a:	d124      	bne.n	8003856 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d035      	beq.n	8003884 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	6a38      	ldr	r0, [r7, #32]
 800382c:	f002 fd67 	bl	80062fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383c:	441a      	add	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384e:	441a      	add	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	e016      	b.n	8003884 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	0c5b      	lsrs	r3, r3, #17
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	2b06      	cmp	r3, #6
 8003860:	d110      	bne.n	8003884 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003868:	2208      	movs	r2, #8
 800386a:	4619      	mov	r1, r3
 800386c:	6a38      	ldr	r0, [r7, #32]
 800386e:	f002 fd46 	bl	80062fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387e:	441a      	add	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0210 	orr.w	r2, r2, #16
 8003892:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fec4 	bl	8006626 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038a8:	d16e      	bne.n	8003988 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 feca 	bl	800664c <USB_ReadDevAllOutEpInterrupt>
 80038b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038ba:	e062      	b.n	8003982 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d057      	beq.n	8003976 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 feef 	bl	80066b4 <USB_ReadDevOutEPInterrupt>
 80038d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fdb0 	bl	800445c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	461a      	mov	r2, r3
 8003914:	2308      	movs	r3, #8
 8003916:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 feaa 	bl	8004674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	461a      	mov	r2, r3
 8003938:	2310      	movs	r3, #16
 800393a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2320      	movs	r3, #32
 8003956:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003974:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d199      	bne.n	80038bc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f002 fe4a 	bl	8006626 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800399c:	f040 80c0 	bne.w	8003b20 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f002 fe6b 	bl	8006680 <USB_ReadDevAllInEpInterrupt>
 80039aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039b0:	e0b2      	b.n	8003b18 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a7 	beq.w	8003b0c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fe91 	bl	80066f0 <USB_ReadDevInEPInterrupt>
 80039ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d057      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69f9      	ldr	r1, [r7, #28]
 80039f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fa:	4013      	ands	r3, r2
 80039fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d132      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3348      	adds	r3, #72	; 0x48
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4403      	add	r3, r0
 8003a38:	3344      	adds	r3, #68	; 0x44
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4419      	add	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4403      	add	r3, r0
 8003a4c:	3348      	adds	r3, #72	; 0x48
 8003a4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d113      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x31c>
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3350      	adds	r3, #80	; 0x50
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a76:	461a      	mov	r2, r3
 8003a78:	2101      	movs	r1, #1
 8003a7a:	f002 fe99 	bl	80067b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f004 fc3e 	bl	8008306 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	2310      	movs	r3, #16
 8003ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	461a      	mov	r2, r3
 8003af6:	2302      	movs	r3, #2
 8003af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fc1b 	bl	8004342 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	3301      	adds	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f47f af49 	bne.w	80039b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 fd7e 	bl	8006626 <USB_ReadInterrupts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b34:	d122      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d108      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fe26 	bl	80047b0 <HAL_PCDEx_LPM_Callback>
 8003b64:	e002      	b.n	8003b6c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f004 fc44 	bl	80083f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 fd50 	bl	8006626 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d112      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f004 fc00 	bl	80083a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bb6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fd32 	bl	8006626 <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	f040 80c7 	bne.w	8003d5e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2110      	movs	r1, #16
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fdcc 	bl	8005788 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf4:	e056      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c28:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	461a      	mov	r2, r3
 8003c58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3a3      	bcc.n	8003bf6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cbc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cda:	f043 030b 	orr.w	r3, r3, #11
 8003cde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf0:	f043 030b 	orr.w	r3, r3, #11
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	e015      	b.n	8003d24 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d0a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1e:	f043 030b 	orr.w	r3, r3, #11
 8003d22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f002 fd31 	bl	80067b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 fc5f 	bl	8006626 <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d72:	d124      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 fcf5 	bl	8006768 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 fd5d 	bl	8005842 <USB_GetDevSpeed>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681c      	ldr	r4, [r3, #0]
 8003d94:	f001 f97a 	bl	800508c <HAL_RCC_GetHCLKFreq>
 8003d98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	4620      	mov	r0, r4
 8003da4:	f001 fa7c 	bl	80052a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f004 fad4 	bl	8008356 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f002 fc2f 	bl	8006626 <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d10a      	bne.n	8003de8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f004 fab1 	bl	800833a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f002 0208 	and.w	r2, r2, #8
 8003de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 fc1a 	bl	8006626 <USB_ReadInterrupts>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfc:	d10f      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f004 fb13 	bl	8008434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 fbff 	bl	8006626 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e32:	d10f      	bne.n	8003e54 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f004 fae6 	bl	8008410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f002 fbe4 	bl	8006626 <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d10a      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f004 faf4 	bl	8008458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fbce 	bl	8006626 <USB_ReadInterrupts>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d115      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f004 fae4 	bl	8008474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	e000      	b.n	8003ec0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ebe:	bf00      	nop
    }
  }
}
 8003ec0:	3734      	adds	r7, #52	; 0x34
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}

08003ec6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_PCD_SetAddress+0x1a>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e013      	b.n	8003f08 <HAL_PCD_SetAddress+0x42>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f002 fb2c 	bl	8006556 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	4608      	mov	r0, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	70fb      	strb	r3, [r7, #3]
 8003f22:	460b      	mov	r3, r1
 8003f24:	803b      	strh	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da0f      	bge.n	8003f56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3338      	adds	r3, #56	; 0x38
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	705a      	strb	r2, [r3, #1]
 8003f54:	e00f      	b.n	8003f76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 020f 	and.w	r2, r3, #15
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f82:	883a      	ldrh	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	78ba      	ldrb	r2, [r7, #2]
 8003f8c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fa0:	78bb      	ldrb	r3, [r7, #2]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d102      	bne.n	8003fac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_PCD_EP_Open+0xaa>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e00e      	b.n	8003fd8 <HAL_PCD_EP_Open+0xc8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fc5f 	bl	800588c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da0f      	bge.n	8004014 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3338      	adds	r3, #56	; 0x38
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	705a      	strb	r2, [r3, #1]
 8004012:	e00f      	b.n	8004034 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_PCD_EP_Close+0x6e>
 800404a:	2302      	movs	r3, #2
 800404c:	e00e      	b.n	800406c <HAL_PCD_EP_Close+0x8c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fc9d 	bl	800599c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	460b      	mov	r3, r1
 8004082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004084:	7afb      	ldrb	r3, [r7, #11]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	f001 ff78 	bl	8005fdc <USB_EP0StartXfer>
 80040ec:	e008      	b.n	8004100 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	f001 fd2a 	bl	8005b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800412c:	681b      	ldr	r3, [r3, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	460b      	mov	r3, r1
 8004148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	3338      	adds	r3, #56	; 0x38
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2201      	movs	r2, #1
 8004178:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d102      	bne.n	8004194 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	f001 ff16 	bl	8005fdc <USB_EP0StartXfer>
 80041b0:	e008      	b.n	80041c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6979      	ldr	r1, [r7, #20]
 80041c0:	f001 fcc8 	bl	8005b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d901      	bls.n	80041ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e050      	b.n	800428e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	da0f      	bge.n	8004214 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	3338      	adds	r3, #56	; 0x38
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	705a      	strb	r2, [r3, #1]
 8004212:	e00d      	b.n	8004230 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_PCD_EP_SetStall+0x82>
 800424c:	2302      	movs	r3, #2
 800424e:	e01e      	b.n	800428e <HAL_PCD_EP_SetStall+0xc0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f002 f8a5 	bl	80063ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	b2d9      	uxtb	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800427e:	461a      	mov	r2, r3
 8004280:	f002 fa96 	bl	80067b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d901      	bls.n	80042b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e042      	b.n	800433a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da0f      	bge.n	80042dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	3338      	adds	r3, #56	; 0x38
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	705a      	strb	r2, [r3, #1]
 80042da:	e00f      	b.n	80042fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	3304      	adds	r3, #4
 80042f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_PCD_EP_ClrStall+0x86>
 8004318:	2302      	movs	r3, #2
 800431a:	e00e      	b.n	800433a <HAL_PCD_EP_ClrStall+0xa4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	f002 f8ad 	bl	800648a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b08a      	sub	sp, #40	; 0x28
 8004346:	af02      	add	r7, sp, #8
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3338      	adds	r3, #56	; 0x38
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	429a      	cmp	r2, r3
 8004374:	d901      	bls.n	800437a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e06c      	b.n	8004454 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	429a      	cmp	r2, r3
 800438e:	d902      	bls.n	8004396 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3303      	adds	r3, #3
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439e:	e02b      	b.n	80043f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d902      	bls.n	80043bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3303      	adds	r3, #3
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	4603      	mov	r3, r0
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f001 ff51 	bl	8006282 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	441a      	add	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	441a      	add	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	b29b      	uxth	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	429a      	cmp	r2, r3
 800440c:	d809      	bhi.n	8004422 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004416:	429a      	cmp	r2, r3
 8004418:	d203      	bcs.n	8004422 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1be      	bne.n	80043a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	429a      	cmp	r2, r3
 800442c:	d811      	bhi.n	8004452 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2201      	movs	r2, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	43db      	mvns	r3, r3
 8004448:	6939      	ldr	r1, [r7, #16]
 800444a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800444e:	4013      	ands	r3, r2
 8004450:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	333c      	adds	r3, #60	; 0x3c
 8004474:	3304      	adds	r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 80a0 	bne.w	80045d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d015      	beq.n	80044ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a72      	ldr	r2, [pc, #456]	; (800466c <PCD_EP_OutXfrComplete_int+0x210>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f240 80dd 	bls.w	8004662 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80d7 	beq.w	8004662 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	461a      	mov	r2, r3
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	e0cb      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	2320      	movs	r3, #32
 80044e4:	6093      	str	r3, [r2, #8]
 80044e6:	e0bc      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 80b7 	bne.w	8004662 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a5d      	ldr	r2, [pc, #372]	; (800466c <PCD_EP_OutXfrComplete_int+0x210>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d90f      	bls.n	800451c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004518:	6093      	str	r3, [r2, #8]
 800451a:	e0a2      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800452e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	0159      	lsls	r1, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	440b      	add	r3, r1
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004542:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4403      	add	r3, r0
 8004552:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004556:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4403      	add	r3, r0
 800457a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4419      	add	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4403      	add	r3, r0
 8004590:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004594:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d114      	bne.n	80045c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045be:	461a      	mov	r2, r3
 80045c0:	2101      	movs	r1, #1
 80045c2:	f002 f8f5 	bl	80067b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f003 fe7f 	bl	80082d0 <HAL_PCD_DataOutStageCallback>
 80045d2:	e046      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a26      	ldr	r2, [pc, #152]	; (8004670 <PCD_EP_OutXfrComplete_int+0x214>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d124      	bne.n	8004626 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	e032      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	2320      	movs	r3, #32
 8004616:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f003 fe56 	bl	80082d0 <HAL_PCD_DataOutStageCallback>
 8004624:	e01d      	b.n	8004662 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d114      	bne.n	8004656 <PCD_EP_OutXfrComplete_int+0x1fa>
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800464e:	461a      	mov	r2, r3
 8004650:	2100      	movs	r1, #0
 8004652:	f002 f8ad 	bl	80067b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f003 fe37 	bl	80082d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	4f54300a 	.word	0x4f54300a
 8004670:	4f54310a 	.word	0x4f54310a

08004674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	333c      	adds	r3, #60	; 0x3c
 800468c:	3304      	adds	r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90e      	bls.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f003 fdef 	bl	80082ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d90c      	bls.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d108      	bne.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046e8:	461a      	mov	r2, r3
 80046ea:	2101      	movs	r1, #1
 80046ec:	f002 f860 	bl	80067b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	4f54300a 	.word	0x4f54300a

08004700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800471e:	883b      	ldrh	r3, [r7, #0]
 8004720:	0419      	lsls	r1, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	430a      	orrs	r2, r1
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
 800472c:	e028      	b.n	8004780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e00d      	b.n	800475e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	3340      	adds	r3, #64	; 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	3b01      	subs	r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d3ec      	bcc.n	8004742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004768:	883b      	ldrh	r3, [r7, #0]
 800476a:	0418      	lsls	r0, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	4302      	orrs	r2, r0
 8004778:	3340      	adds	r3, #64	; 0x40
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e267      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d075      	beq.n	80048d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e6:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d00c      	beq.n	800480c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d112      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fe:	4b82      	ldr	r3, [pc, #520]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480a:	d10b      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05b      	beq.n	80048d0 <HAL_RCC_OscConfig+0x108>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d157      	bne.n	80048d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e242      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x74>
 800482e:	4b76      	ldr	r3, [pc, #472]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a75      	ldr	r2, [pc, #468]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x98>
 8004846:	4b70      	ldr	r3, [pc, #448]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6c      	ldr	r2, [pc, #432]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 8004860:	4b69      	ldr	r3, [pc, #420]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b66      	ldr	r3, [pc, #408]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a65      	ldr	r2, [pc, #404]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd fa18 	bl	8001cb4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd fa14 	bl	8001cb4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e207      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b5b      	ldr	r3, [pc, #364]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xc0>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd fa04 	bl	8001cb4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd fa00 	bl	8001cb4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1f3      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0xe8>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048de:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f6:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1c7      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4937      	ldr	r1, [pc, #220]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	e03a      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <HAL_RCC_OscConfig+0x244>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd f9b9 	bl	8001cb4 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004946:	f7fd f9b5 	bl	8001cb4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e1a8      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4925      	ldr	r1, [pc, #148]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCC_OscConfig+0x244>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd f998 	bl	8001cb4 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd f994 	bl	8001cb4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e187      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d036      	beq.n	8004a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd f978 	bl	8001cb4 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fd f974 	bl	8001cb4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e167      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_OscConfig+0x240>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x200>
 80049e6:	e01b      	b.n	8004a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fd f961 	bl	8001cb4 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	e00e      	b.n	8004a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd f95d 	bl	8001cb4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d907      	bls.n	8004a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e150      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	42470000 	.word	0x42470000
 8004a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	4b88      	ldr	r3, [pc, #544]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ea      	bne.n	80049f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8097 	beq.w	8004b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b81      	ldr	r3, [pc, #516]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	4b7d      	ldr	r3, [pc, #500]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	4a7c      	ldr	r2, [pc, #496]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b77      	ldr	r3, [pc, #476]	; (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d118      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6a:	4b74      	ldr	r3, [pc, #464]	; (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a73      	ldr	r2, [pc, #460]	; (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fd f91d 	bl	8001cb4 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fd f919 	bl	8001cb4 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e10c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b6a      	ldr	r3, [pc, #424]	; (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2ea>
 8004aa4:	4b64      	ldr	r3, [pc, #400]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a63      	ldr	r2, [pc, #396]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e01c      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x30c>
 8004aba:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a5e      	ldr	r2, [pc, #376]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac6:	4b5c      	ldr	r3, [pc, #368]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a5b      	ldr	r2, [pc, #364]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ad4:	4b58      	ldr	r3, [pc, #352]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a57      	ldr	r2, [pc, #348]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae0:	4b55      	ldr	r3, [pc, #340]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a54      	ldr	r2, [pc, #336]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 0304 	bic.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd f8de 	bl	8001cb4 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd f8da 	bl	8001cb4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0cb      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <HAL_RCC_OscConfig+0x334>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fd f8c8 	bl	8001cb4 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd f8c4 	bl	8001cb4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0b5      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ee      	bne.n	8004b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b50:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	4a38      	ldr	r2, [pc, #224]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a1 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b66:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d05c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d141      	bne.n	8004bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd f898 	bl	8001cb4 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fd f894 	bl	8001cb4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e087      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	491b      	ldr	r1, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd f86d 	bl	8001cb4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd f869 	bl	8001cb4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e05c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x416>
 8004bfc:	e054      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd f856 	bl	8001cb4 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd f852 	bl	8001cb4 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e045      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x444>
 8004c2a:	e03d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e038      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <HAL_RCC_OscConfig+0x4ec>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d121      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d11a      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d111      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0cc      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b68      	ldr	r3, [pc, #416]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90c      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b65      	ldr	r3, [pc, #404]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a58      	ldr	r2, [pc, #352]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a52      	ldr	r2, [pc, #328]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d044      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d119      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b3f      	ldr	r3, [pc, #252]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d86:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e067      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d96:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4934      	ldr	r1, [pc, #208]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da8:	f7fc ff84 	bl	8001cb4 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db0:	f7fc ff80 	bl	8001cb4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e04f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 020c 	and.w	r2, r3, #12
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d1eb      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20c      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490a      	ldr	r1, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc fee4 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023c00 	.word	0x40023c00
 8004e74:	40023800 	.word	0x40023800
 8004e78:	0800a710 	.word	0x0800a710
 8004e7c:	20000104 	.word	0x20000104
 8004e80:	20000108 	.word	0x20000108

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b094      	sub	sp, #80	; 0x50
 8004e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e90:	2300      	movs	r3, #0
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e94:	2300      	movs	r3, #0
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9c:	4b79      	ldr	r3, [pc, #484]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	f200 80e1 	bhi.w	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8004eb6:	e0db      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b73      	ldr	r3, [pc, #460]	; (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ebc:	e0db      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ec2:	e0d8      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec4:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ece:	4b6d      	ldr	r3, [pc, #436]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	633b      	str	r3, [r7, #48]	; 0x30
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	0159      	lsls	r1, r3, #5
 8004f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f08:	0150      	lsls	r0, r2, #5
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4621      	mov	r1, r4
 8004f10:	1a51      	subs	r1, r2, r1
 8004f12:	6139      	str	r1, [r7, #16]
 8004f14:	4629      	mov	r1, r5
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f28:	4659      	mov	r1, fp
 8004f2a:	018b      	lsls	r3, r1, #6
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f32:	4651      	mov	r1, sl
 8004f34:	018a      	lsls	r2, r1, #6
 8004f36:	4651      	mov	r1, sl
 8004f38:	ebb2 0801 	subs.w	r8, r2, r1
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f56:	4690      	mov	r8, r2
 8004f58:	4699      	mov	r9, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	eb18 0303 	adds.w	r3, r8, r3
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	462b      	mov	r3, r5
 8004f64:	eb49 0303 	adc.w	r3, r9, r3
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f94:	f7fb f96c 	bl	8000270 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	e058      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	4611      	mov	r1, r2
 8004fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	f04f 0000 	mov.w	r0, #0
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fce:	0150      	lsls	r0, r2, #5
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	00eb      	lsls	r3, r5, #3
 8005006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500a:	00e2      	lsls	r2, r4, #3
 800500c:	4614      	mov	r4, r2
 800500e:	461d      	mov	r5, r3
 8005010:	4643      	mov	r3, r8
 8005012:	18e3      	adds	r3, r4, r3
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	464b      	mov	r3, r9
 8005018:	eb45 0303 	adc.w	r3, r5, r3
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800502a:	4629      	mov	r1, r5
 800502c:	028b      	lsls	r3, r1, #10
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005034:	4621      	mov	r1, r4
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	f7fb f912 	bl	8000270 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	3301      	adds	r3, #1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005078:	4618      	mov	r0, r3
 800507a:	3750      	adds	r7, #80	; 0x50
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
 8005088:	00f42400 	.word	0x00f42400

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000104 	.word	0x20000104

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800a720 	.word	0x0800a720

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07b      	b.n	80051d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d108      	bne.n	80050f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e005      	b.n	8005104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fb2a 	bl	8001778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	ea42 0103 	orr.w	r1, r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0104 	and.w	r1, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0210 	and.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051de:	b084      	sub	sp, #16
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	f107 001c 	add.w	r0, r7, #28
 80051ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d122      	bne.n	800523c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 fb1b 	bl	800686c <USB_CoreReset>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e01a      	b.n	8005272 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fb0f 	bl	800686c <USB_CoreReset>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
 8005264:	e005      	b.n	8005272 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10b      	bne.n	8005290 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f043 0206 	orr.w	r2, r3, #6
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800529c:	b004      	add	sp, #16
 800529e:	4770      	bx	lr

080052a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d165      	bne.n	8005380 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a41      	ldr	r2, [pc, #260]	; (80053bc <USB_SetTurnaroundTime+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d906      	bls.n	80052ca <USB_SetTurnaroundTime+0x2a>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a40      	ldr	r2, [pc, #256]	; (80053c0 <USB_SetTurnaroundTime+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d202      	bcs.n	80052ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052c4:	230f      	movs	r3, #15
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e062      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <USB_SetTurnaroundTime+0x120>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d306      	bcc.n	80052e0 <USB_SetTurnaroundTime+0x40>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <USB_SetTurnaroundTime+0x124>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d202      	bcs.n	80052e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052da:	230e      	movs	r3, #14
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e057      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <USB_SetTurnaroundTime+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d306      	bcc.n	80052f6 <USB_SetTurnaroundTime+0x56>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <USB_SetTurnaroundTime+0x128>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d202      	bcs.n	80052f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052f0:	230d      	movs	r3, #13
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e04c      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a33      	ldr	r2, [pc, #204]	; (80053c8 <USB_SetTurnaroundTime+0x128>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d306      	bcc.n	800530c <USB_SetTurnaroundTime+0x6c>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a32      	ldr	r2, [pc, #200]	; (80053cc <USB_SetTurnaroundTime+0x12c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005306:	230c      	movs	r3, #12
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e041      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <USB_SetTurnaroundTime+0x12c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d906      	bls.n	8005322 <USB_SetTurnaroundTime+0x82>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <USB_SetTurnaroundTime+0x130>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d802      	bhi.n	8005322 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800531c:	230b      	movs	r3, #11
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e036      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <USB_SetTurnaroundTime+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d906      	bls.n	8005338 <USB_SetTurnaroundTime+0x98>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <USB_SetTurnaroundTime+0x134>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d802      	bhi.n	8005338 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005332:	230a      	movs	r3, #10
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e02b      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <USB_SetTurnaroundTime+0x134>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d906      	bls.n	800534e <USB_SetTurnaroundTime+0xae>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <USB_SetTurnaroundTime+0x138>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d202      	bcs.n	800534e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005348:	2309      	movs	r3, #9
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e020      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <USB_SetTurnaroundTime+0x138>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d306      	bcc.n	8005364 <USB_SetTurnaroundTime+0xc4>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <USB_SetTurnaroundTime+0x13c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800535e:	2308      	movs	r3, #8
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e015      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <USB_SetTurnaroundTime+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0xda>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <USB_SetTurnaroundTime+0x140>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d202      	bcs.n	800537a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005374:	2307      	movs	r3, #7
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e00a      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800537a:	2306      	movs	r3, #6
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e007      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005386:	2309      	movs	r3, #9
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e001      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800538c:	2309      	movs	r3, #9
 800538e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	00d8acbf 	.word	0x00d8acbf
 80053c0:	00e4e1c0 	.word	0x00e4e1c0
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	01067380 	.word	0x01067380
 80053cc:	011a499f 	.word	0x011a499f
 80053d0:	01312cff 	.word	0x01312cff
 80053d4:	014ca43f 	.word	0x014ca43f
 80053d8:	016e3600 	.word	0x016e3600
 80053dc:	01a6ab1f 	.word	0x01a6ab1f
 80053e0:	01e84800 	.word	0x01e84800

080053e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d115      	bne.n	8005476 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005456:	2001      	movs	r0, #1
 8005458:	f7fc fc38 	bl	8001ccc <HAL_Delay>
      ms++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f972 	bl	800674c <USB_GetMode>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d01e      	beq.n	80054ac <USB_SetCurrentMode+0x84>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b31      	cmp	r3, #49	; 0x31
 8005472:	d9f0      	bls.n	8005456 <USB_SetCurrentMode+0x2e>
 8005474:	e01a      	b.n	80054ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d115      	bne.n	80054a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005488:	2001      	movs	r0, #1
 800548a:	f7fc fc1f 	bl	8001ccc <HAL_Delay>
      ms++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f959 	bl	800674c <USB_GetMode>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <USB_SetCurrentMode+0x84>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b31      	cmp	r3, #49	; 0x31
 80054a4:	d9f0      	bls.n	8005488 <USB_SetCurrentMode+0x60>
 80054a6:	e001      	b.n	80054ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e005      	b.n	80054b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b32      	cmp	r3, #50	; 0x32
 80054b0:	d101      	bne.n	80054b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c0:	b084      	sub	sp, #16
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b086      	sub	sp, #24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e009      	b.n	80054f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3340      	adds	r3, #64	; 0x40
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0e      	cmp	r3, #14
 80054f8:	d9f2      	bls.n	80054e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11c      	bne.n	800553a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
 8005538:	e00b      	b.n	8005552 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	4619      	mov	r1, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556c:	461a      	mov	r2, r3
 800556e:	680b      	ldr	r3, [r1, #0]
 8005570:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10c      	bne.n	8005592 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f945 	bl	8005810 <USB_SetDevSpeed>
 8005586:	e008      	b.n	800559a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005588:	2101      	movs	r1, #1
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f940 	bl	8005810 <USB_SetDevSpeed>
 8005590:	e003      	b.n	800559a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005592:	2103      	movs	r1, #3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f93b 	bl	8005810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800559a:	2110      	movs	r1, #16
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8f3 	bl	8005788 <USB_FlushTxFifo>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f90f 	bl	80057d0 <USB_FlushRxFifo>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e043      	b.n	800566e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d118      	bne.n	8005630 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e013      	b.n	8005642 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	461a      	mov	r2, r3
 8005628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e008      	b.n	8005642 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	3301      	adds	r3, #1
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3b7      	bcc.n	80055e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e043      	b.n	8005704 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005692:	d118      	bne.n	80056c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e013      	b.n	80056d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e008      	b.n	80056d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	461a      	mov	r2, r3
 80056d4:	2300      	movs	r3, #0
 80056d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d3b7      	bcc.n	800567c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <USB_DevInit+0x2c4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f043 0208 	orr.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	803c3800 	.word	0x803c3800

08005788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	019b      	lsls	r3, r3, #6
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	4a08      	ldr	r2, [pc, #32]	; (80057cc <USB_FlushTxFifo+0x44>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e006      	b.n	80057c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d0f1      	beq.n	80057a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	00030d40 	.word	0x00030d40

080057d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2210      	movs	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <USB_FlushRxFifo+0x3c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e006      	b.n	8005800 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d0f1      	beq.n	80057e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	00030d40 	.word	0x00030d40

08005810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
 8005866:	e00a      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d002      	beq.n	8005874 <USB_GetDevSpeed+0x32>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d102      	bne.n	800587a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005874:	2302      	movs	r3, #2
 8005876:	75fb      	strb	r3, [r7, #23]
 8005878:	e001      	b.n	800587e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800587a:	230f      	movs	r3, #15
 800587c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d13a      	bne.n	800591e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d155      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	78db      	ldrb	r3, [r3, #3]
 80058fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005904:	4313      	orrs	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e036      	b.n	800598c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2101      	movs	r1, #1
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4313      	orrs	r3, r2
 800593e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11a      	bne.n	800598c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	78db      	ldrb	r3, [r3, #3]
 8005970:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005972:	430b      	orrs	r3, r1
 8005974:	4313      	orrs	r3, r2
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d161      	bne.n	8005a7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ce:	d11f      	bne.n	8005a10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <USB_DeactivateEndpoint+0x1b0>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
 8005a7a:	e060      	b.n	8005b3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a92:	d11f      	bne.n	8005ad4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ab2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	43db      	mvns	r3, r3
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af4:	4013      	ands	r3, r2
 8005af6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	43db      	mvns	r3, r3
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0159      	lsls	r1, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	4619      	mov	r1, r3
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <USB_DeactivateEndpoint+0x1b4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	ec337800 	.word	0xec337800
 8005b50:	eff37800 	.word	0xeff37800

08005b54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 815c 	bne.w	8005e2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d132      	bne.n	8005be4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	0cdb      	lsrs	r3, r3, #19
 8005bde:	04db      	lsls	r3, r3, #19
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	e074      	b.n	8005cce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	0cdb      	lsrs	r3, r3, #19
 8005c00:	04db      	lsls	r3, r3, #19
 8005c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6959      	ldr	r1, [r3, #20]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	440b      	add	r3, r1
 8005c40:	1e59      	subs	r1, r3, #1
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c4c:	4b9d      	ldr	r3, [pc, #628]	; (8005ec4 <USB_EPStartXfer+0x370>)
 8005c4e:	400b      	ands	r3, r1
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	0148      	lsls	r0, r1, #5
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	4401      	add	r1, r0
 8005c58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	0148      	lsls	r0, r1, #5
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	4401      	add	r1, r0
 8005c7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d11f      	bne.n	8005cce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ccc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d14b      	bne.n	8005d6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	78db      	ldrb	r3, [r3, #3]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d128      	bne.n	8005d4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d110      	bne.n	8005d2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e00f      	b.n	8005d4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e12f      	b.n	8005fcc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	78db      	ldrb	r3, [r3, #3]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d015      	beq.n	8005dc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8117 	beq.w	8005fcc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	634b      	str	r3, [r1, #52]	; 0x34
 8005dbe:	e105      	b.n	8005fcc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e00f      	b.n	8005e12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68d9      	ldr	r1, [r3, #12]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	b298      	uxth	r0, r3
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fa2b 	bl	8006282 <USB_WritePacket>
 8005e2c:	e0ce      	b.n	8005fcc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	0cdb      	lsrs	r3, r3, #19
 8005e4a:	04db      	lsls	r3, r3, #19
 8005e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d126      	bne.n	8005ec8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	0148      	lsls	r0, r1, #5
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	4401      	add	r1, r0
 8005e98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ebe:	6113      	str	r3, [r2, #16]
 8005ec0:	e036      	b.n	8005f30 <USB_EPStartXfer+0x3dc>
 8005ec2:	bf00      	nop
 8005ec4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	1e5a      	subs	r2, r3, #1
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	8afb      	ldrh	r3, [r7, #22]
 8005eee:	04d9      	lsls	r1, r3, #19
 8005ef0:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <USB_EPStartXfer+0x484>)
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	0148      	lsls	r0, r1, #5
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	4401      	add	r1, r0
 8005efc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f00:	4313      	orrs	r3, r2
 8005f02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	8af9      	ldrh	r1, [r7, #22]
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	0148      	lsls	r0, r1, #5
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	4401      	add	r1, r0
 8005f28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10d      	bne.n	8005f52 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68d9      	ldr	r1, [r3, #12]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	460a      	mov	r2, r1
 8005f50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d128      	bne.n	8005fac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d110      	bne.n	8005f8c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e00f      	b.n	8005fac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	1ff80000 	.word	0x1ff80000

08005fdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	f040 80cd 	bne.w	8006198 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d132      	bne.n	800606c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006064:	0cdb      	lsrs	r3, r3, #19
 8006066:	04db      	lsls	r3, r3, #19
 8006068:	6113      	str	r3, [r2, #16]
 800606a:	e04e      	b.n	800610a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	0cdb      	lsrs	r3, r3, #19
 8006088:	04db      	lsls	r3, r3, #19
 800608a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d903      	bls.n	80060c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fa:	6939      	ldr	r1, [r7, #16]
 80060fc:	0148      	lsls	r0, r1, #5
 80060fe:	6979      	ldr	r1, [r7, #20]
 8006100:	4401      	add	r1, r0
 8006102:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d11e      	bne.n	800614e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e092      	b.n	8006274 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800616c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07e      	beq.n	8006274 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	2101      	movs	r1, #1
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	6979      	ldr	r1, [r7, #20]
 800618e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006192:	4313      	orrs	r3, r2
 8006194:	634b      	str	r3, [r1, #52]	; 0x34
 8006196:	e06d      	b.n	8006274 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	0cdb      	lsrs	r3, r3, #19
 80061b4:	04db      	lsls	r3, r3, #19
 80061b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	6939      	ldr	r1, [r7, #16]
 8006224:	0148      	lsls	r0, r1, #5
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	4401      	add	r1, r0
 800622a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800622e:	4313      	orrs	r3, r2
 8006230:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10d      	bne.n	8006254 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	68d9      	ldr	r1, [r3, #12]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	460a      	mov	r2, r1
 8006252:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006282:	b480      	push	{r7}
 8006284:	b089      	sub	sp, #36	; 0x24
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	4611      	mov	r1, r2
 800628e:	461a      	mov	r2, r3
 8006290:	460b      	mov	r3, r1
 8006292:	71fb      	strb	r3, [r7, #7]
 8006294:	4613      	mov	r3, r2
 8006296:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d123      	bne.n	80062f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062a8:	88bb      	ldrh	r3, [r7, #4]
 80062aa:	3303      	adds	r3, #3
 80062ac:	089b      	lsrs	r3, r3, #2
 80062ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e018      	b.n	80062e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	031a      	lsls	r2, r3, #12
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c2:	461a      	mov	r2, r3
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	3301      	adds	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3301      	adds	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	3301      	adds	r3, #1
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3e2      	bcc.n	80062b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3724      	adds	r7, #36	; 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062fe:	b480      	push	{r7}
 8006300:	b08b      	sub	sp, #44	; 0x2c
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	4613      	mov	r3, r2
 800630a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	b29b      	uxth	r3, r3
 800631a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006324:	2300      	movs	r3, #0
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	e014      	b.n	8006354 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	601a      	str	r2, [r3, #0]
    pDest++;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	3301      	adds	r3, #1
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	3301      	adds	r3, #1
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	3301      	adds	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	3301      	adds	r3, #1
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	3301      	adds	r3, #1
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d3e6      	bcc.n	800632a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800635c:	8bfb      	ldrh	r3, [r7, #30]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01e      	beq.n	80063a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	461a      	mov	r2, r3
 800636e:	f107 0310 	add.w	r3, r7, #16
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	701a      	strb	r2, [r3, #0]
      i++;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	3301      	adds	r3, #1
 800638c:	623b      	str	r3, [r7, #32]
      pDest++;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	3301      	adds	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006394:	8bfb      	ldrh	r3, [r7, #30]
 8006396:	3b01      	subs	r3, #1
 8006398:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800639a:	8bfb      	ldrh	r3, [r7, #30]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1ea      	bne.n	8006376 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	372c      	adds	r7, #44	; 0x2c
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d12c      	bne.n	8006424 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	db12      	blt.n	8006402 <USB_EPSetStall+0x54>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00f      	beq.n	8006402 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006400:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e02b      	b.n	800647c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	db12      	blt.n	800645c <USB_EPSetStall+0xae>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00f      	beq.n	800645c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800645a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d128      	bne.n	80064f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	78db      	ldrb	r3, [r3, #3]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d003      	beq.n	80064d6 <USB_EPClearStall+0x4c>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	78db      	ldrb	r3, [r3, #3]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d138      	bne.n	8006548 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e027      	b.n	8006548 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006516:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d003      	beq.n	8006528 <USB_EPClearStall+0x9e>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	78db      	ldrb	r3, [r3, #3]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d10f      	bne.n	8006548 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006546:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006574:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006578:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065bc:	f023 0303 	bic.w	r3, r3, #3
 80065c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d0:	f023 0302 	bic.w	r3, r3, #2
 80065d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006612:	f043 0302 	orr.w	r3, r3, #2
 8006616:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	0c1b      	lsrs	r3, r3, #16
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	b29b      	uxth	r3, r3
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e2:	68bb      	ldr	r3, [r7, #8]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006712:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	01db      	lsls	r3, r3, #7
 8006722:	b2db      	uxtb	r3, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4013      	ands	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800673e:	68bb      	ldr	r3, [r7, #8]
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0301 	and.w	r3, r3, #1
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006782:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	460b      	mov	r3, r1
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	333c      	adds	r3, #60	; 0x3c
 80067c6:	3304      	adds	r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4a26      	ldr	r2, [pc, #152]	; (8006868 <USB_EP0_OutStart+0xb8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d90a      	bls.n	80067ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e4:	d101      	bne.n	80067ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e037      	b.n	800685a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f043 0318 	orr.w	r3, r3, #24
 800681c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006830:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10f      	bne.n	8006858 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006852:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	4f54300a 	.word	0x4f54300a

0800686c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4a13      	ldr	r2, [pc, #76]	; (80068cc <USB_CoreReset+0x60>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e01a      	b.n	80068be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	daf3      	bge.n	8006878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f043 0201 	orr.w	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <USB_CoreReset+0x60>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e006      	b.n	80068be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d0f1      	beq.n	80068a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	00030d40 	.word	0x00030d40

080068d0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80068dc:	2050      	movs	r0, #80	; 0x50
 80068de:	f001 ff61 	bl	80087a4 <USBD_static_malloc>
 80068e2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80068f2:	2302      	movs	r3, #2
 80068f4:	e02d      	b.n	8006952 <USBD_HID_Init+0x82>
  }

  pdev->pClassData = (void *)hhid;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7c1b      	ldrb	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2207      	movs	r2, #7
 800690a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800690c:	e002      	b.n	8006914 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	220a      	movs	r2, #10
 8006912:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006914:	2304      	movs	r3, #4
 8006916:	2203      	movs	r2, #3
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fe1f 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	2203      	movs	r2, #3
 800692a:	2101      	movs	r1, #1
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fe16 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Prepare Out endpoint to receive next packet */
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, hhid->OutBuff, HID_EPOUT_SIZE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f103 020d 	add.w	r2, r3, #13
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	2101      	movs	r1, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fef9 	bl	800873c <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006966:	2181      	movs	r1, #129	; 0x81
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fe1e 	bl	80085aa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800698a:	4618      	mov	r0, r3
 800698c:	f001 ff18 	bl	80087c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e0e8      	b.n	8006b9a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d046      	beq.n	8006a62 <USBD_HID_Setup+0xbe>
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	f040 80d8 	bne.w	8006b8a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	3b02      	subs	r3, #2
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d836      	bhi.n	8006a52 <USBD_HID_Setup+0xae>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <USBD_HID_Setup+0x48>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a43 	.word	0x08006a43
 80069f0:	08006a23 	.word	0x08006a23
 80069f4:	08006a53 	.word	0x08006a53
 80069f8:	08006a53 	.word	0x08006a53
 80069fc:	08006a53 	.word	0x08006a53
 8006a00:	08006a53 	.word	0x08006a53
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	08006a53 	.word	0x08006a53
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a15 	.word	0x08006a15
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	885b      	ldrh	r3, [r3, #2]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]
          break;
 8006a20:	e01e      	b.n	8006a60 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fa42 	bl	8007eb2 <USBD_CtlSendData>
          break;
 8006a2e:	e017      	b.n	8006a60 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	885b      	ldrh	r3, [r3, #2]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	605a      	str	r2, [r3, #4]
          break;
 8006a40:	e00e      	b.n	8006a60 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3304      	adds	r3, #4
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fa31 	bl	8007eb2 <USBD_CtlSendData>
          break;
 8006a50:	e006      	b.n	8006a60 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f9bb 	bl	8007dd0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5e:	bf00      	nop
      }
      break;
 8006a60:	e09a      	b.n	8006b98 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b0b      	cmp	r3, #11
 8006a68:	f200 8086 	bhi.w	8006b78 <USBD_HID_Setup+0x1d4>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <USBD_HID_Setup+0xd0>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006b87 	.word	0x08006b87
 8006a7c:	08006b79 	.word	0x08006b79
 8006a80:	08006b79 	.word	0x08006b79
 8006a84:	08006b79 	.word	0x08006b79
 8006a88:	08006b79 	.word	0x08006b79
 8006a8c:	08006acf 	.word	0x08006acf
 8006a90:	08006b79 	.word	0x08006b79
 8006a94:	08006b79 	.word	0x08006b79
 8006a98:	08006b79 	.word	0x08006b79
 8006a9c:	08006b27 	.word	0x08006b27
 8006aa0:	08006b51 	.word	0x08006b51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d107      	bne.n	8006ac0 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ab0:	f107 030a 	add.w	r3, r7, #10
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f9fa 	bl	8007eb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006abe:	e063      	b.n	8006b88 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f984 	bl	8007dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	75fb      	strb	r3, [r7, #23]
          break;
 8006acc:	e05c      	b.n	8006b88 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b22      	cmp	r3, #34	; 0x22
 8006ad8:	d108      	bne.n	8006aec <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	2baa      	cmp	r3, #170	; 0xaa
 8006ae0:	bf28      	it	cs
 8006ae2:	23aa      	movcs	r3, #170	; 0xaa
 8006ae4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <USBD_HID_Setup+0x200>)
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e015      	b.n	8006b18 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	885b      	ldrh	r3, [r3, #2]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b21      	cmp	r3, #33	; 0x21
 8006af6:	d108      	bne.n	8006b0a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006af8:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <USBD_HID_Setup+0x204>)
 8006afa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	88db      	ldrh	r3, [r3, #6]
 8006b00:	2b09      	cmp	r3, #9
 8006b02:	bf28      	it	cs
 8006b04:	2309      	movcs	r3, #9
 8006b06:	82bb      	strh	r3, [r7, #20]
 8006b08:	e006      	b.n	8006b18 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 f95f 	bl	8007dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	75fb      	strb	r3, [r7, #23]
            break;
 8006b16:	e037      	b.n	8006b88 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b18:	8abb      	ldrh	r3, [r7, #20]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6939      	ldr	r1, [r7, #16]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 f9c7 	bl	8007eb2 <USBD_CtlSendData>
          break;
 8006b24:	e030      	b.n	8006b88 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3308      	adds	r3, #8
 8006b36:	2201      	movs	r2, #1
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f9b9 	bl	8007eb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b40:	e022      	b.n	8006b88 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f943 	bl	8007dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e01b      	b.n	8006b88 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d106      	bne.n	8006b6a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b68:	e00e      	b.n	8006b88 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f92f 	bl	8007dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e007      	b.n	8006b88 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f928 	bl	8007dd0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b80:	2303      	movs	r3, #3
 8006b82:	75fb      	strb	r3, [r7, #23]
          break;
 8006b84:	e000      	b.n	8006b88 <USBD_HID_Setup+0x1e4>
          break;
 8006b86:	bf00      	nop
      }
      break;
 8006b88:	e006      	b.n	8006b98 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f91f 	bl	8007dd0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	75fb      	strb	r3, [r7, #23]
      break;
 8006b96:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200001cc 	.word	0x200001cc
 8006ba8:	200001b4 	.word	0x200001b4

08006bac <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e013      	b.n	8006bf4 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d10c      	bne.n	8006bf2 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	7b1b      	ldrb	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d108      	bne.n	8006bf2 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2201      	movs	r2, #1
 8006be4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	2181      	movs	r1, #129	; 0x81
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f001 fd84 	bl	80086fa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2222      	movs	r2, #34	; 0x22
 8006c08:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	20000148 	.word	0x20000148

08006c1c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2222      	movs	r2, #34	; 0x22
 8006c28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	2000016c 	.word	0x2000016c

08006c3c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2222      	movs	r2, #34	; 0x22
 8006c48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006c4a:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000190 	.word	0x20000190

08006c5c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6e:	2200      	movs	r2, #0
 8006c70:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBD_HID_DataOut>:

//DATA INPUT FROM HOST
static uint8_t  USBD_HID_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  HID_HandleTypeDef *hhid = (HID_HandleTypeDef*)pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hhid->OutBuff[0] = USBD_GetRxCount(pdev, epnum);
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f96d 	bl	8007f78 <USBD_GetRxCount>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	731a      	strb	r2, [r3, #12]

  /* Provide the buffer pointer to the next layer */
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR , hhid->OutBuff,HID_EPOUT_SIZE);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f103 020c 	add.w	r2, r3, #12
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	2101      	movs	r1, #1
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fd43 	bl	800873c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220a      	movs	r2, #10
 8006ccc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	200001c0 	.word	0x200001c0

08006ce0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e01f      	b.n	8006d38 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	79fa      	ldrb	r2, [r7, #7]
 8006d2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fbaf 	bl	8008490 <USBD_LL_Init>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e016      	b.n	8006d86 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	f107 020e 	add.w	r2, r7, #14
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fbc6 	bl	8008528 <USBD_LL_Start>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	4611      	mov	r1, r2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	4611      	mov	r1, r2
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
  }

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 ff90 	bl	8007d5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d01a      	beq.n	8006e96 <USBD_LL_SetupStage+0x72>
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d822      	bhi.n	8006eaa <USBD_LL_SetupStage+0x86>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <USBD_LL_SetupStage+0x4a>
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d00a      	beq.n	8006e82 <USBD_LL_SetupStage+0x5e>
 8006e6c:	e01d      	b.n	8006eaa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa62 	bl	8007340 <USBD_StdDevReq>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e020      	b.n	8006ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fac6 	bl	800741c <USBD_StdItfReq>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	e016      	b.n	8006ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fb05 	bl	80074ae <USBD_StdEPReq>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea8:	e00c      	b.n	8006ec4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fb95 	bl	80085e8 <USBD_LL_StallEP>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	bf00      	nop
  }

  return ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d138      	bne.n	8006f54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ee8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d14a      	bne.n	8006f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d913      	bls.n	8006f28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	bf28      	it	cs
 8006f1a:	4613      	movcs	r3, r2
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fff2 	bl	8007f0a <USBD_CtlContinueRx>
 8006f26:	e030      	b.n	8006f8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d10b      	bne.n	8006f4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 ffed 	bl	8007f2c <USBD_CtlSendStatus>
 8006f52:	e01a      	b.n	8006f8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d114      	bne.n	8006f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	7afa      	ldrb	r2, [r7, #11]
 8006f76:	4611      	mov	r1, r2
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	4798      	blx	r3
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	e000      	b.n	8006f8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d16b      	bne.n	8007080 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3314      	adds	r3, #20
 8006fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d156      	bne.n	8007066 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d914      	bls.n	8006fee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	1ad2      	subs	r2, r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 ff84 	bl	8007ee8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f001 fba8 	bl	800873c <USBD_LL_PrepareReceive>
 8006fec:	e03b      	b.n	8007066 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d11c      	bne.n	8007034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007002:	429a      	cmp	r2, r3
 8007004:	d316      	bcc.n	8007034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007010:	429a      	cmp	r2, r3
 8007012:	d20f      	bcs.n	8007034 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 ff65 	bl	8007ee8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007026:	2300      	movs	r3, #0
 8007028:	2200      	movs	r2, #0
 800702a:	2100      	movs	r1, #0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 fb85 	bl	800873c <USBD_LL_PrepareReceive>
 8007032:	e018      	b.n	8007066 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d10b      	bne.n	8007058 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f001 fac4 	bl	80085e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 ff76 	bl	8007f52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d122      	bne.n	80070b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fe98 	bl	8006da6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800707e:	e01a      	b.n	80070b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b03      	cmp	r3, #3
 800708a:	d114      	bne.n	80070b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	7afa      	ldrb	r2, [r7, #11]
 80070a2:	4611      	mov	r1, r2
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	4798      	blx	r3
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	e000      	b.n	80070b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e02f      	b.n	8007154 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00f      	beq.n	800711e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	4611      	mov	r1, r2
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	2200      	movs	r2, #0
 8007122:	2100      	movs	r1, #0
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fa1a 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2240      	movs	r2, #64	; 0x40
 8007136:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713a:	2340      	movs	r3, #64	; 0x40
 800713c:	2200      	movs	r2, #0
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fa0c 	bl	800855e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2240      	movs	r2, #64	; 0x40
 8007150:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718a:	b2da      	uxtb	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2204      	movs	r2, #4
 8007196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d106      	bne.n	80071ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e012      	b.n	8007214 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d10b      	bne.n	8007212 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	e014      	b.n	8007260 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d10d      	bne.n	800725e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800727e:	2303      	movs	r3, #3
 8007280:	e014      	b.n	80072ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b03      	cmp	r3, #3
 800728c:	d10d      	bne.n	80072aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6852      	ldr	r2, [r2, #4]
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	4611      	mov	r1, r2
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007302:	b480      	push	{r7}
 8007304:	b087      	sub	sp, #28
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	3301      	adds	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007320:	8a3b      	ldrh	r3, [r7, #16]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	b21a      	sxth	r2, r3
 8007326:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800732a:	4313      	orrs	r3, r2
 800732c:	b21b      	sxth	r3, r3
 800732e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007330:	89fb      	ldrh	r3, [r7, #14]
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d005      	beq.n	8007366 <USBD_StdDevReq+0x26>
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d853      	bhi.n	8007406 <USBD_StdDevReq+0xc6>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <USBD_StdDevReq+0x3a>
 8007362:	2b20      	cmp	r3, #32
 8007364:	d14f      	bne.n	8007406 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e04a      	b.n	8007410 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b09      	cmp	r3, #9
 8007380:	d83b      	bhi.n	80073fa <USBD_StdDevReq+0xba>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <USBD_StdDevReq+0x48>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073dd 	.word	0x080073dd
 800738c:	080073f1 	.word	0x080073f1
 8007390:	080073fb 	.word	0x080073fb
 8007394:	080073e7 	.word	0x080073e7
 8007398:	080073fb 	.word	0x080073fb
 800739c:	080073bb 	.word	0x080073bb
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073fb 	.word	0x080073fb
 80073a8:	080073d3 	.word	0x080073d3
 80073ac:	080073c5 	.word	0x080073c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9de 	bl	8007774 <USBD_GetDescriptor>
          break;
 80073b8:	e024      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb43 	bl	8007a48 <USBD_SetAddress>
          break;
 80073c2:	e01f      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb82 	bl	8007ad0 <USBD_SetConfig>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
          break;
 80073d0:	e018      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc21 	bl	8007c1c <USBD_GetConfig>
          break;
 80073da:	e013      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fc52 	bl	8007c88 <USBD_GetStatus>
          break;
 80073e4:	e00e      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc81 	bl	8007cf0 <USBD_SetFeature>
          break;
 80073ee:	e009      	b.n	8007404 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc90 	bl	8007d18 <USBD_ClrFeature>
          break;
 80073f8:	e004      	b.n	8007404 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fce7 	bl	8007dd0 <USBD_CtlError>
          break;
 8007402:	bf00      	nop
      }
      break;
 8007404:	e004      	b.n	8007410 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fce1 	bl	8007dd0 <USBD_CtlError>
      break;
 800740e:	bf00      	nop
  }

  return ret;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop

0800741c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d005      	beq.n	8007442 <USBD_StdItfReq+0x26>
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d82f      	bhi.n	800749a <USBD_StdItfReq+0x7e>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <USBD_StdItfReq+0x26>
 800743e:	2b20      	cmp	r3, #32
 8007440:	d12b      	bne.n	800749a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007448:	b2db      	uxtb	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	2b02      	cmp	r3, #2
 800744e:	d81d      	bhi.n	800748c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	889b      	ldrh	r3, [r3, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b01      	cmp	r3, #1
 8007458:	d813      	bhi.n	8007482 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88db      	ldrh	r3, [r3, #6]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d110      	bne.n	8007496 <USBD_StdItfReq+0x7a>
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10d      	bne.n	8007496 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fd56 	bl	8007f2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007480:	e009      	b.n	8007496 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fca3 	bl	8007dd0 <USBD_CtlError>
          break;
 800748a:	e004      	b.n	8007496 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc9e 	bl	8007dd0 <USBD_CtlError>
          break;
 8007494:	e000      	b.n	8007498 <USBD_StdItfReq+0x7c>
          break;
 8007496:	bf00      	nop
      }
      break;
 8007498:	e004      	b.n	80074a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc97 	bl	8007dd0 <USBD_CtlError>
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	889b      	ldrh	r3, [r3, #4]
 80074c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d007      	beq.n	80074de <USBD_StdEPReq+0x30>
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	f200 8145 	bhi.w	800775e <USBD_StdEPReq+0x2b0>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00c      	beq.n	80074f2 <USBD_StdEPReq+0x44>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	f040 8140 	bne.w	800775e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
      break;
 80074f0:	e13a      	b.n	8007768 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d007      	beq.n	800750a <USBD_StdEPReq+0x5c>
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	f300 8129 	bgt.w	8007752 <USBD_StdEPReq+0x2a4>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d07f      	beq.n	8007604 <USBD_StdEPReq+0x156>
 8007504:	2b01      	cmp	r3, #1
 8007506:	d03c      	beq.n	8007582 <USBD_StdEPReq+0xd4>
 8007508:	e123      	b.n	8007752 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d002      	beq.n	800751c <USBD_StdEPReq+0x6e>
 8007516:	2b03      	cmp	r3, #3
 8007518:	d016      	beq.n	8007548 <USBD_StdEPReq+0x9a>
 800751a:	e02c      	b.n	8007576 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00d      	beq.n	800753e <USBD_StdEPReq+0x90>
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b80      	cmp	r3, #128	; 0x80
 8007526:	d00a      	beq.n	800753e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f85b 	bl	80085e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 f857 	bl	80085e8 <USBD_LL_StallEP>
 800753a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800753c:	e020      	b.n	8007580 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc45 	bl	8007dd0 <USBD_CtlError>
              break;
 8007546:	e01b      	b.n	8007580 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10e      	bne.n	800756e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <USBD_StdEPReq+0xc0>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b80      	cmp	r3, #128	; 0x80
 800755a:	d008      	beq.n	800756e <USBD_StdEPReq+0xc0>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f83d 	bl	80085e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fcdc 	bl	8007f2c <USBD_CtlSendStatus>

              break;
 8007574:	e004      	b.n	8007580 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc29 	bl	8007dd0 <USBD_CtlError>
              break;
 800757e:	bf00      	nop
          }
          break;
 8007580:	e0ec      	b.n	800775c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d002      	beq.n	8007594 <USBD_StdEPReq+0xe6>
 800758e:	2b03      	cmp	r3, #3
 8007590:	d016      	beq.n	80075c0 <USBD_StdEPReq+0x112>
 8007592:	e030      	b.n	80075f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00d      	beq.n	80075b6 <USBD_StdEPReq+0x108>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d00a      	beq.n	80075b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f81f 	bl	80085e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f81b 	bl	80085e8 <USBD_LL_StallEP>
 80075b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b4:	e025      	b.n	8007602 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc09 	bl	8007dd0 <USBD_CtlError>
              break;
 80075be:	e020      	b.n	8007602 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	885b      	ldrh	r3, [r3, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11b      	bne.n	8007600 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f825 	bl	8008626 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fca5 	bl	8007f2c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80075f4:	e004      	b.n	8007600 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fbe9 	bl	8007dd0 <USBD_CtlError>
              break;
 80075fe:	e000      	b.n	8007602 <USBD_StdEPReq+0x154>
              break;
 8007600:	bf00      	nop
          }
          break;
 8007602:	e0ab      	b.n	800775c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d002      	beq.n	8007616 <USBD_StdEPReq+0x168>
 8007610:	2b03      	cmp	r3, #3
 8007612:	d032      	beq.n	800767a <USBD_StdEPReq+0x1cc>
 8007614:	e097      	b.n	8007746 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <USBD_StdEPReq+0x17e>
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b80      	cmp	r3, #128	; 0x80
 8007620:	d004      	beq.n	800762c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbd3 	bl	8007dd0 <USBD_CtlError>
                break;
 800762a:	e091      	b.n	8007750 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800762c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da0b      	bge.n	800764c <USBD_StdEPReq+0x19e>
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	3310      	adds	r3, #16
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	3304      	adds	r3, #4
 800764a:	e00b      	b.n	8007664 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	3304      	adds	r3, #4
 8007664:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2202      	movs	r2, #2
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fc1d 	bl	8007eb2 <USBD_CtlSendData>
              break;
 8007678:	e06a      	b.n	8007750 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800767a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	da11      	bge.n	80076a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3324      	adds	r3, #36	; 0x24
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d117      	bne.n	80076cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb96 	bl	8007dd0 <USBD_CtlError>
                  break;
 80076a4:	e054      	b.n	8007750 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb83 	bl	8007dd0 <USBD_CtlError>
                  break;
 80076ca:	e041      	b.n	8007750 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da0b      	bge.n	80076ec <USBD_StdEPReq+0x23e>
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	3310      	adds	r3, #16
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	3304      	adds	r3, #4
 80076ea:	e00b      	b.n	8007704 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	3304      	adds	r3, #4
 8007704:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <USBD_StdEPReq+0x264>
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d103      	bne.n	800771a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e00e      	b.n	8007738 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 ffa0 	bl	8008664 <USBD_LL_IsStallEP>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e002      	b.n	8007738 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2202      	movs	r2, #2
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fbb7 	bl	8007eb2 <USBD_CtlSendData>
              break;
 8007744:	e004      	b.n	8007750 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fb41 	bl	8007dd0 <USBD_CtlError>
              break;
 800774e:	bf00      	nop
          }
          break;
 8007750:	e004      	b.n	800775c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fb3b 	bl	8007dd0 <USBD_CtlError>
          break;
 800775a:	bf00      	nop
      }
      break;
 800775c:	e004      	b.n	8007768 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb35 	bl	8007dd0 <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }

  return ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	2b06      	cmp	r3, #6
 8007796:	f200 8128 	bhi.w	80079ea <USBD_GetDescriptor+0x276>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBD_GetDescriptor+0x2c>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	08007815 	.word	0x08007815
 80077ac:	080079eb 	.word	0x080079eb
 80077b0:	080079eb 	.word	0x080079eb
 80077b4:	0800798b 	.word	0x0800798b
 80077b8:	080079b7 	.word	0x080079b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
      break;
 80077d2:	e112      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f107 0208 	add.w	r2, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077f6:	e100      	b.n	80079fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f107 0208 	add.w	r2, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	2202      	movs	r2, #2
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e0f2      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	885b      	ldrh	r3, [r3, #2]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b05      	cmp	r3, #5
 800781c:	f200 80ac 	bhi.w	8007978 <USBD_GetDescriptor+0x204>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USBD_GetDescriptor+0xb4>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007841 	.word	0x08007841
 800782c:	08007875 	.word	0x08007875
 8007830:	080078a9 	.word	0x080078a9
 8007834:	080078dd 	.word	0x080078dd
 8007838:	08007911 	.word	0x08007911
 800783c:	08007945 	.word	0x08007945
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e091      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fab2 	bl	8007dd0 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e089      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e077      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa98 	bl	8007dd0 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e06f      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e05d      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa7e 	bl	8007dd0 <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e055      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e043      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa64 	bl	8007dd0 <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e03b      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007932:	e029      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa4a 	bl	8007dd0 <USBD_CtlError>
            err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
          break;
 8007942:	e021      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 0108 	add.w	r1, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007966:	e00f      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa30 	bl	8007dd0 <USBD_CtlError>
            err++;
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	3301      	adds	r3, #1
 8007974:	72fb      	strb	r3, [r7, #11]
          break;
 8007976:	e007      	b.n	8007988 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa28 	bl	8007dd0 <USBD_CtlError>
          err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007986:	bf00      	nop
      }
      break;
 8007988:	e037      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7c1b      	ldrb	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f107 0208 	add.w	r2, r7, #8
 800799e:	4610      	mov	r0, r2
 80079a0:	4798      	blx	r3
 80079a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a4:	e029      	b.n	80079fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa11 	bl	8007dd0 <USBD_CtlError>
        err++;
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	3301      	adds	r3, #1
 80079b2:	72fb      	strb	r3, [r7, #11]
      break;
 80079b4:	e021      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7c1b      	ldrb	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	f107 0208 	add.w	r2, r7, #8
 80079ca:	4610      	mov	r0, r2
 80079cc:	4798      	blx	r3
 80079ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	2207      	movs	r2, #7
 80079d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d8:	e00f      	b.n	80079fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f9f7 	bl	8007dd0 <USBD_CtlError>
        err++;
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	3301      	adds	r3, #1
 80079e6:	72fb      	strb	r3, [r7, #11]
      break;
 80079e8:	e007      	b.n	80079fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9ef 	bl	8007dd0 <USBD_CtlError>
      err++;
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	3301      	adds	r3, #1
 80079f6:	72fb      	strb	r3, [r7, #11]
      break;
 80079f8:	bf00      	nop
  }

  if (err != 0U)
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11e      	bne.n	8007a3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	88db      	ldrh	r3, [r3, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d016      	beq.n	8007a36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a08:	893b      	ldrh	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00e      	beq.n	8007a2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88da      	ldrh	r2, [r3, #6]
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bf28      	it	cs
 8007a18:	4613      	movcs	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	461a      	mov	r2, r3
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa44 	bl	8007eb2 <USBD_CtlSendData>
 8007a2a:	e009      	b.n	8007a40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9ce 	bl	8007dd0 <USBD_CtlError>
 8007a34:	e004      	b.n	8007a40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa78 	bl	8007f2c <USBD_CtlSendStatus>
 8007a3c:	e000      	b.n	8007a40 <USBD_GetDescriptor+0x2cc>
    return;
 8007a3e:	bf00      	nop
  }
}
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	889b      	ldrh	r3, [r3, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d131      	bne.n	8007abe <USBD_SetAddress+0x76>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d12d      	bne.n	8007abe <USBD_SetAddress+0x76>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	2b7f      	cmp	r3, #127	; 0x7f
 8007a68:	d829      	bhi.n	8007abe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	885b      	ldrh	r3, [r3, #2]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d104      	bne.n	8007a8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9a3 	bl	8007dd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8a:	e01d      	b.n	8007ac8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7bfa      	ldrb	r2, [r7, #15]
 8007a90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fe0f 	bl	80086bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa44 	bl	8007f2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	e009      	b.n	8007ac8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abc:	e004      	b.n	8007ac8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f985 	bl	8007dd0 <USBD_CtlError>
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	885b      	ldrh	r3, [r3, #2]
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <USBD_SetConfig+0x148>)
 8007ae6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ae8:	4b4b      	ldr	r3, [pc, #300]	; (8007c18 <USBD_SetConfig+0x148>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d905      	bls.n	8007afc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f96c 	bl	8007dd0 <USBD_CtlError>
    return USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e088      	b.n	8007c0e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d002      	beq.n	8007b0e <USBD_SetConfig+0x3e>
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d025      	beq.n	8007b58 <USBD_SetConfig+0x88>
 8007b0c:	e071      	b.n	8007bf2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b0e:	4b42      	ldr	r3, [pc, #264]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01c      	beq.n	8007b50 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007b16:	4b40      	ldr	r3, [pc, #256]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b20:	4b3d      	ldr	r3, [pc, #244]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff f948 	bl	8006dbc <USBD_SetClassConfig>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f949 	bl	8007dd0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b3e:	e065      	b.n	8007c0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f9f3 	bl	8007f2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2203      	movs	r2, #3
 8007b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b4e:	e05d      	b.n	8007c0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f9eb 	bl	8007f2c <USBD_CtlSendStatus>
      break;
 8007b56:	e059      	b.n	8007c0c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b58:	4b2f      	ldr	r3, [pc, #188]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d112      	bne.n	8007b86 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b68:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b72:	4b29      	ldr	r3, [pc, #164]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff f93b 	bl	8006df4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9d4 	bl	8007f2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b84:	e042      	b.n	8007c0c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <USBD_SetConfig+0x148>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d02a      	beq.n	8007bea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff f929 	bl	8006df4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ba2:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <USBD_SetConfig+0x148>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bac:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <USBD_SetConfig+0x148>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff f902 	bl	8006dbc <USBD_SetClassConfig>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00f      	beq.n	8007be2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f903 	bl	8007dd0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f90e 	bl	8006df4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007be0:	e014      	b.n	8007c0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9a2 	bl	8007f2c <USBD_CtlSendStatus>
      break;
 8007be8:	e010      	b.n	8007c0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f99e 	bl	8007f2c <USBD_CtlSendStatus>
      break;
 8007bf0:	e00c      	b.n	8007c0c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8eb 	bl	8007dd0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <USBD_SetConfig+0x148>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff f8f7 	bl	8006df4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	bf00      	nop
  }

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	200008f8 	.word	0x200008f8

08007c1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	88db      	ldrh	r3, [r3, #6]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d004      	beq.n	8007c38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8cd 	bl	8007dd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c36:	e023      	b.n	8007c80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	dc02      	bgt.n	8007c4a <USBD_GetConfig+0x2e>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc03      	bgt.n	8007c50 <USBD_GetConfig+0x34>
 8007c48:	e015      	b.n	8007c76 <USBD_GetConfig+0x5a>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d00b      	beq.n	8007c66 <USBD_GetConfig+0x4a>
 8007c4e:	e012      	b.n	8007c76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f927 	bl	8007eb2 <USBD_CtlSendData>
        break;
 8007c64:	e00c      	b.n	8007c80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f91f 	bl	8007eb2 <USBD_CtlSendData>
        break;
 8007c74:	e004      	b.n	8007c80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f8a9 	bl	8007dd0 <USBD_CtlError>
        break;
 8007c7e:	bf00      	nop
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d81e      	bhi.n	8007cde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	88db      	ldrh	r3, [r3, #6]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d004      	beq.n	8007cb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f890 	bl	8007dd0 <USBD_CtlError>
        break;
 8007cb0:	e01a      	b.n	8007ce8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f043 0202 	orr.w	r2, r3, #2
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f8eb 	bl	8007eb2 <USBD_CtlSendData>
      break;
 8007cdc:	e004      	b.n	8007ce8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f875 	bl	8007dd0 <USBD_CtlError>
      break;
 8007ce6:	bf00      	nop
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d106      	bne.n	8007d10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f90e 	bl	8007f2c <USBD_CtlSendStatus>
  }
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d80b      	bhi.n	8007d48 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	885b      	ldrh	r3, [r3, #2]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10c      	bne.n	8007d52 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8f3 	bl	8007f2c <USBD_CtlSendStatus>
      }
      break;
 8007d46:	e004      	b.n	8007d52 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f840 	bl	8007dd0 <USBD_CtlError>
      break;
 8007d50:	e000      	b.n	8007d54 <USBD_ClrFeature+0x3c>
      break;
 8007d52:	bf00      	nop
  }
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fabb 	bl	8007302 <SWAPBYTE>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff faae 	bl	8007302 <SWAPBYTE>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff faa1 	bl	8007302 <SWAPBYTE>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	80da      	strh	r2, [r3, #6]
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dda:	2180      	movs	r1, #128	; 0x80
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc03 	bl	80085e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007de2:	2100      	movs	r1, #0
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fbff 	bl	80085e8 <USBD_LL_StallEP>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d036      	beq.n	8007e76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e0c:	6938      	ldr	r0, [r7, #16]
 8007e0e:	f000 f836 	bl	8007e7e <USBD_GetLen>
 8007e12:	4603      	mov	r3, r0
 8007e14:	3301      	adds	r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	4413      	add	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	7812      	ldrb	r2, [r2, #0]
 8007e2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4413      	add	r3, r2
 8007e38:	2203      	movs	r2, #3
 8007e3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e42:	e013      	b.n	8007e6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	4413      	add	r3, r2
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	3301      	adds	r3, #1
 8007e54:	613b      	str	r3, [r7, #16]
    idx++;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	2200      	movs	r2, #0
 8007e64:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e7      	bne.n	8007e44 <USBD_GetString+0x52>
 8007e74:	e000      	b.n	8007e78 <USBD_GetString+0x86>
    return;
 8007e76:	bf00      	nop
  }
}
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e8e:	e005      	b.n	8007e9c <USBD_GetLen+0x1e>
  {
    len++;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	3301      	adds	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f5      	bne.n	8007e90 <USBD_GetLen+0x12>
  }

  return len;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fc0e 	bl	80086fa <USBD_LL_Transmit>

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 fbfd 	bl	80086fa <USBD_LL_Transmit>

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fc0d 	bl	800873c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2204      	movs	r2, #4
 8007f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fbd9 	bl	80086fa <USBD_LL_Transmit>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2205      	movs	r2, #5
 8007f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f62:	2300      	movs	r3, #0
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fbe7 	bl	800873c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fbf8 	bl	800877e <USBD_LL_GetRxDataSize>
 8007f8e:	4603      	mov	r3, r0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	490e      	ldr	r1, [pc, #56]	; (8007fd8 <MX_USB_DEVICE_Init+0x40>)
 8007fa0:	480e      	ldr	r0, [pc, #56]	; (8007fdc <MX_USB_DEVICE_Init+0x44>)
 8007fa2:	f7fe fe9d 	bl	8006ce0 <USBD_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fac:	f7f9 f872 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007fb0:	490b      	ldr	r1, [pc, #44]	; (8007fe0 <MX_USB_DEVICE_Init+0x48>)
 8007fb2:	480a      	ldr	r0, [pc, #40]	; (8007fdc <MX_USB_DEVICE_Init+0x44>)
 8007fb4:	f7fe fec4 	bl	8006d40 <USBD_RegisterClass>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fbe:	f7f9 f869 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fc2:	4806      	ldr	r0, [pc, #24]	; (8007fdc <MX_USB_DEVICE_Init+0x44>)
 8007fc4:	f7fe fee3 	bl	8006d8e <USBD_Start>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007fce:	f7f9 f861 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fd2:	bf00      	nop
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000278 	.word	0x20000278
 8007fdc:	200008fc 	.word	0x200008fc
 8007fe0:	20000110 	.word	0x20000110

08007fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2212      	movs	r2, #18
 8007ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ff6:	4b03      	ldr	r3, [pc, #12]	; (8008004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	20000294 	.word	0x20000294

08008008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2204      	movs	r2, #4
 8008018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800801a:	4b03      	ldr	r3, [pc, #12]	; (8008028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	200002a8 	.word	0x200002a8

0800802c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4907      	ldr	r1, [pc, #28]	; (8008060 <USBD_FS_ProductStrDescriptor+0x34>)
 8008042:	4808      	ldr	r0, [pc, #32]	; (8008064 <USBD_FS_ProductStrDescriptor+0x38>)
 8008044:	f7ff fed5 	bl	8007df2 <USBD_GetString>
 8008048:	e004      	b.n	8008054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4904      	ldr	r1, [pc, #16]	; (8008060 <USBD_FS_ProductStrDescriptor+0x34>)
 800804e:	4805      	ldr	r0, [pc, #20]	; (8008064 <USBD_FS_ProductStrDescriptor+0x38>)
 8008050:	f7ff fecf 	bl	8007df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000bcc 	.word	0x20000bcc
 8008064:	0800920c 	.word	0x0800920c

08008068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	4904      	ldr	r1, [pc, #16]	; (8008088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008078:	4804      	ldr	r0, [pc, #16]	; (800808c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800807a:	f7ff feba 	bl	8007df2 <USBD_GetString>
  return USBD_StrDesc;
 800807e:	4b02      	ldr	r3, [pc, #8]	; (8008088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000bcc 	.word	0x20000bcc
 800808c:	0800921c 	.word	0x0800921c

08008090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	221a      	movs	r2, #26
 80080a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080a2:	f000 f843 	bl	800812c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080a6:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	200002ac 	.word	0x200002ac

080080b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4907      	ldr	r1, [pc, #28]	; (80080e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ca:	4808      	ldr	r0, [pc, #32]	; (80080ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80080cc:	f7ff fe91 	bl	8007df2 <USBD_GetString>
 80080d0:	e004      	b.n	80080dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4904      	ldr	r1, [pc, #16]	; (80080e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080d6:	4805      	ldr	r0, [pc, #20]	; (80080ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80080d8:	f7ff fe8b 	bl	8007df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000bcc 	.word	0x20000bcc
 80080ec:	0800922c 	.word	0x0800922c

080080f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4907      	ldr	r1, [pc, #28]	; (8008124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008106:	4808      	ldr	r0, [pc, #32]	; (8008128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008108:	f7ff fe73 	bl	8007df2 <USBD_GetString>
 800810c:	e004      	b.n	8008118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4904      	ldr	r1, [pc, #16]	; (8008124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008112:	4805      	ldr	r0, [pc, #20]	; (8008128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008114:	f7ff fe6d 	bl	8007df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000bcc 	.word	0x20000bcc
 8008128:	08009238 	.word	0x08009238

0800812c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008132:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <Get_SerialNum+0x44>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <Get_SerialNum+0x48>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800813e:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <Get_SerialNum+0x4c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4413      	add	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008152:	2208      	movs	r2, #8
 8008154:	4909      	ldr	r1, [pc, #36]	; (800817c <Get_SerialNum+0x50>)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f814 	bl	8008184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800815c:	2204      	movs	r2, #4
 800815e:	4908      	ldr	r1, [pc, #32]	; (8008180 <Get_SerialNum+0x54>)
 8008160:	68b8      	ldr	r0, [r7, #8]
 8008162:	f000 f80f 	bl	8008184 <IntToUnicode>
  }
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	1fff7a10 	.word	0x1fff7a10
 8008174:	1fff7a14 	.word	0x1fff7a14
 8008178:	1fff7a18 	.word	0x1fff7a18
 800817c:	200002ae 	.word	0x200002ae
 8008180:	200002be 	.word	0x200002be

08008184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]
 800819a:	e027      	b.n	80081ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	0f1b      	lsrs	r3, r3, #28
 80081a0:	2b09      	cmp	r3, #9
 80081a2:	d80b      	bhi.n	80081bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	0f1b      	lsrs	r3, r3, #28
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4619      	mov	r1, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	440b      	add	r3, r1
 80081b4:	3230      	adds	r2, #48	; 0x30
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	e00a      	b.n	80081d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	0f1b      	lsrs	r3, r3, #28
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	4619      	mov	r1, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	440b      	add	r3, r1
 80081cc:	3237      	adds	r2, #55	; 0x37
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	3301      	adds	r3, #1
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	3301      	adds	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
 80081ec:	7dfa      	ldrb	r2, [r7, #23]
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3d3      	bcc.n	800819c <IntToUnicode+0x18>
  }
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008224:	d13a      	bne.n	800829c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6313      	str	r3, [r2, #48]	; 0x30
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008242:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008248:	2302      	movs	r3, #2
 800824a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008250:	2303      	movs	r3, #3
 8008252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008254:	230a      	movs	r3, #10
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4619      	mov	r1, r3
 800825e:	4812      	ldr	r0, [pc, #72]	; (80082a8 <HAL_PCD_MspInit+0xa4>)
 8008260:	f7f9 fe6a 	bl	8001f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	4a0e      	ldr	r2, [pc, #56]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 800826a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826e:	6353      	str	r3, [r2, #52]	; 0x34
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 800827a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800827e:	6453      	str	r3, [r2, #68]	; 0x44
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <HAL_PCD_MspInit+0xa0>)
 8008282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	2043      	movs	r0, #67	; 0x43
 8008292:	f7f9 fe1a 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008296:	2043      	movs	r0, #67	; 0x43
 8008298:	f7f9 fe33 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800829c:	bf00      	nop
 800829e:	3728      	adds	r7, #40	; 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40023800 	.word	0x40023800
 80082a8:	40020000 	.word	0x40020000

080082ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe fdae 	bl	8006e24 <USBD_LL_SetupStage>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	4619      	mov	r1, r3
 80082fa:	f7fe fde8 	bl	8006ece <USBD_LL_DataOutStage>
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	3348      	adds	r3, #72	; 0x48
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	4619      	mov	r1, r3
 800832e:	f7fe fe31 	bl	8006f94 <USBD_LL_DataInStage>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe ff45 	bl	80071d8 <USBD_LL_SOF>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800835e:	2301      	movs	r3, #1
 8008360:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e008      	b.n	8008382 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d102      	bne.n	800837e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
 800837c:	e001      	b.n	8008382 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800837e:	f7f8 fe89 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008388:	7bfa      	ldrb	r2, [r7, #15]
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fee5 	bl	800715c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fe91 	bl	80070c0 <USBD_LL_Reset>
}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fee0 	bl	800717c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <HAL_PCD_SuspendCallback+0x48>)
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <HAL_PCD_SuspendCallback+0x48>)
 80083e2:	f043 0306 	orr.w	r3, r3, #6
 80083e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	e000ed00 	.word	0xe000ed00

080083f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fed0 	bl	80071a8 <USBD_LL_Resume>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe ff1e 	bl	8007268 <USBD_LL_IsoOUTIncomplete>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fee6 	bl	800721c <USBD_LL_IsoINIncomplete>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ff24 	bl	80072b4 <USBD_LL_DevConnected>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe ff21 	bl	80072ca <USBD_LL_DevDisconnected>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d13c      	bne.n	800851a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084a0:	4a20      	ldr	r2, [pc, #128]	; (8008524 <USBD_LL_Init+0x94>)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <USBD_LL_Init+0x94>)
 80084ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084b0:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <USBD_LL_Init+0x94>)
 80084b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_LL_Init+0x94>)
 80084ba:	2204      	movs	r2, #4
 80084bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084be:	4b19      	ldr	r3, [pc, #100]	; (8008524 <USBD_LL_Init+0x94>)
 80084c0:	2202      	movs	r2, #2
 80084c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084c4:	4b17      	ldr	r3, [pc, #92]	; (8008524 <USBD_LL_Init+0x94>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <USBD_LL_Init+0x94>)
 80084cc:	2202      	movs	r2, #2
 80084ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084d0:	4b14      	ldr	r3, [pc, #80]	; (8008524 <USBD_LL_Init+0x94>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <USBD_LL_Init+0x94>)
 80084d8:	2200      	movs	r2, #0
 80084da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <USBD_LL_Init+0x94>)
 80084de:	2200      	movs	r2, #0
 80084e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <USBD_LL_Init+0x94>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084e8:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <USBD_LL_Init+0x94>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084ee:	480d      	ldr	r0, [pc, #52]	; (8008524 <USBD_LL_Init+0x94>)
 80084f0:	f7fa ffe7 	bl	80034c2 <HAL_PCD_Init>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084fa:	f7f8 fdcb 	bl	8001094 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084fe:	2180      	movs	r1, #128	; 0x80
 8008500:	4808      	ldr	r0, [pc, #32]	; (8008524 <USBD_LL_Init+0x94>)
 8008502:	f7fc f944 	bl	800478e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008506:	2240      	movs	r2, #64	; 0x40
 8008508:	2100      	movs	r1, #0
 800850a:	4806      	ldr	r0, [pc, #24]	; (8008524 <USBD_LL_Init+0x94>)
 800850c:	f7fc f8f8 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	2101      	movs	r1, #1
 8008514:	4803      	ldr	r0, [pc, #12]	; (8008524 <USBD_LL_Init+0x94>)
 8008516:	f7fc f8f3 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000dcc 	.word	0x20000dcc

08008528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800853e:	4618      	mov	r0, r3
 8008540:	f7fb f8dc 	bl	80036fc <HAL_PCD_Start>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f942 	bl	80087d4 <USBD_Get_USB_Status>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008554:	7bbb      	ldrb	r3, [r7, #14]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	4603      	mov	r3, r0
 800856e:	70fb      	strb	r3, [r7, #3]
 8008570:	460b      	mov	r3, r1
 8008572:	70bb      	strb	r3, [r7, #2]
 8008574:	4613      	mov	r3, r2
 8008576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008586:	78bb      	ldrb	r3, [r7, #2]
 8008588:	883a      	ldrh	r2, [r7, #0]
 800858a:	78f9      	ldrb	r1, [r7, #3]
 800858c:	f7fb fcc0 	bl	8003f10 <HAL_PCD_EP_Open>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 f91c 	bl	80087d4 <USBD_Get_USB_Status>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fb fd09 	bl	8003fe0 <HAL_PCD_EP_Close>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f8fd 	bl	80087d4 <USBD_Get_USB_Status>
 80085da:	4603      	mov	r3, r0
 80085dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085de:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f7fb fde1 	bl	80041ce <HAL_PCD_EP_SetStall>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f8de 	bl	80087d4 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7fb fe26 	bl	8004296 <HAL_PCD_EP_ClrStall>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f8bf 	bl	80087d4 <USBD_Get_USB_Status>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008676:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800867c:	2b00      	cmp	r3, #0
 800867e:	da0b      	bge.n	8008698 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	4613      	mov	r3, r2
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	333e      	adds	r3, #62	; 0x3e
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	e00b      	b.n	80086b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fb fbf3 	bl	8003ec6 <HAL_PCD_SetAddress>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f874 	bl	80087d4 <USBD_Get_USB_Status>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	460b      	mov	r3, r1
 8008708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008718:	7af9      	ldrb	r1, [r7, #11]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	f7fb fd0c 	bl	800413a <HAL_PCD_EP_Transmit>
 8008722:	4603      	mov	r3, r0
 8008724:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f853 	bl	80087d4 <USBD_Get_USB_Status>
 800872e:	4603      	mov	r3, r0
 8008730:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008732:	7dbb      	ldrb	r3, [r7, #22]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	460b      	mov	r3, r1
 800874a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800875a:	7af9      	ldrb	r1, [r7, #11]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	f7fb fc88 	bl	8004074 <HAL_PCD_EP_Receive>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f832 	bl	80087d4 <USBD_Get_USB_Status>
 8008770:	4603      	mov	r3, r0
 8008772:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008774:	7dbb      	ldrb	r3, [r7, #22]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7fb fcb8 	bl	800410a <HAL_PCD_EP_GetRxCount>
 800879a:	4603      	mov	r3, r0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087ac:	4b03      	ldr	r3, [pc, #12]	; (80087bc <USBD_static_malloc+0x18>)
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	200011d4 	.word	0x200011d4

080087c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d817      	bhi.n	8008818 <USBD_Get_USB_Status+0x44>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBD_Get_USB_Status+0x1c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008801 	.word	0x08008801
 80087f4:	08008807 	.word	0x08008807
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	08008813 	.word	0x08008813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	e00b      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008806:	2303      	movs	r3, #3
 8008808:	73fb      	strb	r3, [r7, #15]
    break;
 800880a:	e008      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e005      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008812:	2303      	movs	r3, #3
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	e002      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008818:	2303      	movs	r3, #3
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	bf00      	nop
  }
  return usb_status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <__errno>:
 800882c:	4b01      	ldr	r3, [pc, #4]	; (8008834 <__errno+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	200002c8 	.word	0x200002c8

08008838 <__libc_init_array>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	4d0d      	ldr	r5, [pc, #52]	; (8008870 <__libc_init_array+0x38>)
 800883c:	4c0d      	ldr	r4, [pc, #52]	; (8008874 <__libc_init_array+0x3c>)
 800883e:	1b64      	subs	r4, r4, r5
 8008840:	10a4      	asrs	r4, r4, #2
 8008842:	2600      	movs	r6, #0
 8008844:	42a6      	cmp	r6, r4
 8008846:	d109      	bne.n	800885c <__libc_init_array+0x24>
 8008848:	4d0b      	ldr	r5, [pc, #44]	; (8008878 <__libc_init_array+0x40>)
 800884a:	4c0c      	ldr	r4, [pc, #48]	; (800887c <__libc_init_array+0x44>)
 800884c:	f000 fc8e 	bl	800916c <_init>
 8008850:	1b64      	subs	r4, r4, r5
 8008852:	10a4      	asrs	r4, r4, #2
 8008854:	2600      	movs	r6, #0
 8008856:	42a6      	cmp	r6, r4
 8008858:	d105      	bne.n	8008866 <__libc_init_array+0x2e>
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008860:	4798      	blx	r3
 8008862:	3601      	adds	r6, #1
 8008864:	e7ee      	b.n	8008844 <__libc_init_array+0xc>
 8008866:	f855 3b04 	ldr.w	r3, [r5], #4
 800886a:	4798      	blx	r3
 800886c:	3601      	adds	r6, #1
 800886e:	e7f2      	b.n	8008856 <__libc_init_array+0x1e>
 8008870:	0800a764 	.word	0x0800a764
 8008874:	0800a764 	.word	0x0800a764
 8008878:	0800a764 	.word	0x0800a764
 800887c:	0800a768 	.word	0x0800a768

08008880 <memcpy>:
 8008880:	440a      	add	r2, r1
 8008882:	4291      	cmp	r1, r2
 8008884:	f100 33ff 	add.w	r3, r0, #4294967295
 8008888:	d100      	bne.n	800888c <memcpy+0xc>
 800888a:	4770      	bx	lr
 800888c:	b510      	push	{r4, lr}
 800888e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008896:	4291      	cmp	r1, r2
 8008898:	d1f9      	bne.n	800888e <memcpy+0xe>
 800889a:	bd10      	pop	{r4, pc}

0800889c <memset>:
 800889c:	4402      	add	r2, r0
 800889e:	4603      	mov	r3, r0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d100      	bne.n	80088a6 <memset+0xa>
 80088a4:	4770      	bx	lr
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	e7f9      	b.n	80088a0 <memset+0x4>

080088ac <siprintf>:
 80088ac:	b40e      	push	{r1, r2, r3}
 80088ae:	b500      	push	{lr}
 80088b0:	b09c      	sub	sp, #112	; 0x70
 80088b2:	ab1d      	add	r3, sp, #116	; 0x74
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	9006      	str	r0, [sp, #24]
 80088b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088bc:	4809      	ldr	r0, [pc, #36]	; (80088e4 <siprintf+0x38>)
 80088be:	9107      	str	r1, [sp, #28]
 80088c0:	9104      	str	r1, [sp, #16]
 80088c2:	4909      	ldr	r1, [pc, #36]	; (80088e8 <siprintf+0x3c>)
 80088c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c8:	9105      	str	r1, [sp, #20]
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	a902      	add	r1, sp, #8
 80088d0:	f000 f868 	bl	80089a4 <_svfiprintf_r>
 80088d4:	9b02      	ldr	r3, [sp, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	b01c      	add	sp, #112	; 0x70
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b003      	add	sp, #12
 80088e2:	4770      	bx	lr
 80088e4:	200002c8 	.word	0x200002c8
 80088e8:	ffff0208 	.word	0xffff0208

080088ec <__ssputs_r>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	688e      	ldr	r6, [r1, #8]
 80088f2:	429e      	cmp	r6, r3
 80088f4:	4682      	mov	sl, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	4690      	mov	r8, r2
 80088fa:	461f      	mov	r7, r3
 80088fc:	d838      	bhi.n	8008970 <__ssputs_r+0x84>
 80088fe:	898a      	ldrh	r2, [r1, #12]
 8008900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008904:	d032      	beq.n	800896c <__ssputs_r+0x80>
 8008906:	6825      	ldr	r5, [r4, #0]
 8008908:	6909      	ldr	r1, [r1, #16]
 800890a:	eba5 0901 	sub.w	r9, r5, r1
 800890e:	6965      	ldr	r5, [r4, #20]
 8008910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008918:	3301      	adds	r3, #1
 800891a:	444b      	add	r3, r9
 800891c:	106d      	asrs	r5, r5, #1
 800891e:	429d      	cmp	r5, r3
 8008920:	bf38      	it	cc
 8008922:	461d      	movcc	r5, r3
 8008924:	0553      	lsls	r3, r2, #21
 8008926:	d531      	bpl.n	800898c <__ssputs_r+0xa0>
 8008928:	4629      	mov	r1, r5
 800892a:	f000 fb55 	bl	8008fd8 <_malloc_r>
 800892e:	4606      	mov	r6, r0
 8008930:	b950      	cbnz	r0, 8008948 <__ssputs_r+0x5c>
 8008932:	230c      	movs	r3, #12
 8008934:	f8ca 3000 	str.w	r3, [sl]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008948:	6921      	ldr	r1, [r4, #16]
 800894a:	464a      	mov	r2, r9
 800894c:	f7ff ff98 	bl	8008880 <memcpy>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	6126      	str	r6, [r4, #16]
 800895e:	6165      	str	r5, [r4, #20]
 8008960:	444e      	add	r6, r9
 8008962:	eba5 0509 	sub.w	r5, r5, r9
 8008966:	6026      	str	r6, [r4, #0]
 8008968:	60a5      	str	r5, [r4, #8]
 800896a:	463e      	mov	r6, r7
 800896c:	42be      	cmp	r6, r7
 800896e:	d900      	bls.n	8008972 <__ssputs_r+0x86>
 8008970:	463e      	mov	r6, r7
 8008972:	6820      	ldr	r0, [r4, #0]
 8008974:	4632      	mov	r2, r6
 8008976:	4641      	mov	r1, r8
 8008978:	f000 faa8 	bl	8008ecc <memmove>
 800897c:	68a3      	ldr	r3, [r4, #8]
 800897e:	1b9b      	subs	r3, r3, r6
 8008980:	60a3      	str	r3, [r4, #8]
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	4433      	add	r3, r6
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	2000      	movs	r0, #0
 800898a:	e7db      	b.n	8008944 <__ssputs_r+0x58>
 800898c:	462a      	mov	r2, r5
 800898e:	f000 fb97 	bl	80090c0 <_realloc_r>
 8008992:	4606      	mov	r6, r0
 8008994:	2800      	cmp	r0, #0
 8008996:	d1e1      	bne.n	800895c <__ssputs_r+0x70>
 8008998:	6921      	ldr	r1, [r4, #16]
 800899a:	4650      	mov	r0, sl
 800899c:	f000 fab0 	bl	8008f00 <_free_r>
 80089a0:	e7c7      	b.n	8008932 <__ssputs_r+0x46>
	...

080089a4 <_svfiprintf_r>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	4698      	mov	r8, r3
 80089aa:	898b      	ldrh	r3, [r1, #12]
 80089ac:	061b      	lsls	r3, r3, #24
 80089ae:	b09d      	sub	sp, #116	; 0x74
 80089b0:	4607      	mov	r7, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	4614      	mov	r4, r2
 80089b6:	d50e      	bpl.n	80089d6 <_svfiprintf_r+0x32>
 80089b8:	690b      	ldr	r3, [r1, #16]
 80089ba:	b963      	cbnz	r3, 80089d6 <_svfiprintf_r+0x32>
 80089bc:	2140      	movs	r1, #64	; 0x40
 80089be:	f000 fb0b 	bl	8008fd8 <_malloc_r>
 80089c2:	6028      	str	r0, [r5, #0]
 80089c4:	6128      	str	r0, [r5, #16]
 80089c6:	b920      	cbnz	r0, 80089d2 <_svfiprintf_r+0x2e>
 80089c8:	230c      	movs	r3, #12
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e0d1      	b.n	8008b76 <_svfiprintf_r+0x1d2>
 80089d2:	2340      	movs	r3, #64	; 0x40
 80089d4:	616b      	str	r3, [r5, #20]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9309      	str	r3, [sp, #36]	; 0x24
 80089da:	2320      	movs	r3, #32
 80089dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e4:	2330      	movs	r3, #48	; 0x30
 80089e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b90 <_svfiprintf_r+0x1ec>
 80089ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ee:	f04f 0901 	mov.w	r9, #1
 80089f2:	4623      	mov	r3, r4
 80089f4:	469a      	mov	sl, r3
 80089f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fa:	b10a      	cbz	r2, 8008a00 <_svfiprintf_r+0x5c>
 80089fc:	2a25      	cmp	r2, #37	; 0x25
 80089fe:	d1f9      	bne.n	80089f4 <_svfiprintf_r+0x50>
 8008a00:	ebba 0b04 	subs.w	fp, sl, r4
 8008a04:	d00b      	beq.n	8008a1e <_svfiprintf_r+0x7a>
 8008a06:	465b      	mov	r3, fp
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff ff6d 	bl	80088ec <__ssputs_r>
 8008a12:	3001      	adds	r0, #1
 8008a14:	f000 80aa 	beq.w	8008b6c <_svfiprintf_r+0x1c8>
 8008a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1a:	445a      	add	r2, fp
 8008a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80a2 	beq.w	8008b6c <_svfiprintf_r+0x1c8>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a32:	f10a 0a01 	add.w	sl, sl, #1
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	9307      	str	r3, [sp, #28]
 8008a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a40:	4654      	mov	r4, sl
 8008a42:	2205      	movs	r2, #5
 8008a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a48:	4851      	ldr	r0, [pc, #324]	; (8008b90 <_svfiprintf_r+0x1ec>)
 8008a4a:	f7f7 fbc1 	bl	80001d0 <memchr>
 8008a4e:	9a04      	ldr	r2, [sp, #16]
 8008a50:	b9d8      	cbnz	r0, 8008a8a <_svfiprintf_r+0xe6>
 8008a52:	06d0      	lsls	r0, r2, #27
 8008a54:	bf44      	itt	mi
 8008a56:	2320      	movmi	r3, #32
 8008a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5c:	0711      	lsls	r1, r2, #28
 8008a5e:	bf44      	itt	mi
 8008a60:	232b      	movmi	r3, #43	; 0x2b
 8008a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a66:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6c:	d015      	beq.n	8008a9a <_svfiprintf_r+0xf6>
 8008a6e:	9a07      	ldr	r2, [sp, #28]
 8008a70:	4654      	mov	r4, sl
 8008a72:	2000      	movs	r0, #0
 8008a74:	f04f 0c0a 	mov.w	ip, #10
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7e:	3b30      	subs	r3, #48	; 0x30
 8008a80:	2b09      	cmp	r3, #9
 8008a82:	d94e      	bls.n	8008b22 <_svfiprintf_r+0x17e>
 8008a84:	b1b0      	cbz	r0, 8008ab4 <_svfiprintf_r+0x110>
 8008a86:	9207      	str	r2, [sp, #28]
 8008a88:	e014      	b.n	8008ab4 <_svfiprintf_r+0x110>
 8008a8a:	eba0 0308 	sub.w	r3, r0, r8
 8008a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	46a2      	mov	sl, r4
 8008a98:	e7d2      	b.n	8008a40 <_svfiprintf_r+0x9c>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	1d19      	adds	r1, r3, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	9103      	str	r1, [sp, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfbb      	ittet	lt
 8008aa6:	425b      	neglt	r3, r3
 8008aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8008aac:	9307      	strge	r3, [sp, #28]
 8008aae:	9307      	strlt	r3, [sp, #28]
 8008ab0:	bfb8      	it	lt
 8008ab2:	9204      	strlt	r2, [sp, #16]
 8008ab4:	7823      	ldrb	r3, [r4, #0]
 8008ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab8:	d10c      	bne.n	8008ad4 <_svfiprintf_r+0x130>
 8008aba:	7863      	ldrb	r3, [r4, #1]
 8008abc:	2b2a      	cmp	r3, #42	; 0x2a
 8008abe:	d135      	bne.n	8008b2c <_svfiprintf_r+0x188>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	9203      	str	r2, [sp, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bfb8      	it	lt
 8008acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad0:	3402      	adds	r4, #2
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ba0 <_svfiprintf_r+0x1fc>
 8008ad8:	7821      	ldrb	r1, [r4, #0]
 8008ada:	2203      	movs	r2, #3
 8008adc:	4650      	mov	r0, sl
 8008ade:	f7f7 fb77 	bl	80001d0 <memchr>
 8008ae2:	b140      	cbz	r0, 8008af6 <_svfiprintf_r+0x152>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	eba0 000a 	sub.w	r0, r0, sl
 8008aea:	fa03 f000 	lsl.w	r0, r3, r0
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	4303      	orrs	r3, r0
 8008af2:	3401      	adds	r4, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	4826      	ldr	r0, [pc, #152]	; (8008b94 <_svfiprintf_r+0x1f0>)
 8008afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b00:	2206      	movs	r2, #6
 8008b02:	f7f7 fb65 	bl	80001d0 <memchr>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d038      	beq.n	8008b7c <_svfiprintf_r+0x1d8>
 8008b0a:	4b23      	ldr	r3, [pc, #140]	; (8008b98 <_svfiprintf_r+0x1f4>)
 8008b0c:	bb1b      	cbnz	r3, 8008b56 <_svfiprintf_r+0x1b2>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	3308      	adds	r3, #8
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	4433      	add	r3, r6
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	e767      	b.n	80089f2 <_svfiprintf_r+0x4e>
 8008b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b26:	460c      	mov	r4, r1
 8008b28:	2001      	movs	r0, #1
 8008b2a:	e7a5      	b.n	8008a78 <_svfiprintf_r+0xd4>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	3401      	adds	r4, #1
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	4619      	mov	r1, r3
 8008b34:	f04f 0c0a 	mov.w	ip, #10
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3e:	3a30      	subs	r2, #48	; 0x30
 8008b40:	2a09      	cmp	r2, #9
 8008b42:	d903      	bls.n	8008b4c <_svfiprintf_r+0x1a8>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0c5      	beq.n	8008ad4 <_svfiprintf_r+0x130>
 8008b48:	9105      	str	r1, [sp, #20]
 8008b4a:	e7c3      	b.n	8008ad4 <_svfiprintf_r+0x130>
 8008b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b50:	4604      	mov	r4, r0
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7f0      	b.n	8008b38 <_svfiprintf_r+0x194>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <_svfiprintf_r+0x1f8>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4638      	mov	r0, r7
 8008b62:	f3af 8000 	nop.w
 8008b66:	1c42      	adds	r2, r0, #1
 8008b68:	4606      	mov	r6, r0
 8008b6a:	d1d6      	bne.n	8008b1a <_svfiprintf_r+0x176>
 8008b6c:	89ab      	ldrh	r3, [r5, #12]
 8008b6e:	065b      	lsls	r3, r3, #25
 8008b70:	f53f af2c 	bmi.w	80089cc <_svfiprintf_r+0x28>
 8008b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b76:	b01d      	add	sp, #116	; 0x74
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	462a      	mov	r2, r5
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <_svfiprintf_r+0x1f8>)
 8008b84:	a904      	add	r1, sp, #16
 8008b86:	4638      	mov	r0, r7
 8008b88:	f000 f87a 	bl	8008c80 <_printf_i>
 8008b8c:	e7eb      	b.n	8008b66 <_svfiprintf_r+0x1c2>
 8008b8e:	bf00      	nop
 8008b90:	0800a728 	.word	0x0800a728
 8008b94:	0800a732 	.word	0x0800a732
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	080088ed 	.word	0x080088ed
 8008ba0:	0800a72e 	.word	0x0800a72e

08008ba4 <_printf_common>:
 8008ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba8:	4616      	mov	r6, r2
 8008baa:	4699      	mov	r9, r3
 8008bac:	688a      	ldr	r2, [r1, #8]
 8008bae:	690b      	ldr	r3, [r1, #16]
 8008bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	bfb8      	it	lt
 8008bb8:	4613      	movlt	r3, r2
 8008bba:	6033      	str	r3, [r6, #0]
 8008bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b10a      	cbz	r2, 8008bca <_printf_common+0x26>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	0699      	lsls	r1, r3, #26
 8008bce:	bf42      	ittt	mi
 8008bd0:	6833      	ldrmi	r3, [r6, #0]
 8008bd2:	3302      	addmi	r3, #2
 8008bd4:	6033      	strmi	r3, [r6, #0]
 8008bd6:	6825      	ldr	r5, [r4, #0]
 8008bd8:	f015 0506 	ands.w	r5, r5, #6
 8008bdc:	d106      	bne.n	8008bec <_printf_common+0x48>
 8008bde:	f104 0a19 	add.w	sl, r4, #25
 8008be2:	68e3      	ldr	r3, [r4, #12]
 8008be4:	6832      	ldr	r2, [r6, #0]
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	42ab      	cmp	r3, r5
 8008bea:	dc26      	bgt.n	8008c3a <_printf_common+0x96>
 8008bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bf0:	1e13      	subs	r3, r2, #0
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	2301      	movne	r3, #1
 8008bf8:	0692      	lsls	r2, r2, #26
 8008bfa:	d42b      	bmi.n	8008c54 <_printf_common+0xb0>
 8008bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c00:	4649      	mov	r1, r9
 8008c02:	4638      	mov	r0, r7
 8008c04:	47c0      	blx	r8
 8008c06:	3001      	adds	r0, #1
 8008c08:	d01e      	beq.n	8008c48 <_printf_common+0xa4>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	68e5      	ldr	r5, [r4, #12]
 8008c0e:	6832      	ldr	r2, [r6, #0]
 8008c10:	f003 0306 	and.w	r3, r3, #6
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	bf08      	it	eq
 8008c18:	1aad      	subeq	r5, r5, r2
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	6922      	ldr	r2, [r4, #16]
 8008c1e:	bf0c      	ite	eq
 8008c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c24:	2500      	movne	r5, #0
 8008c26:	4293      	cmp	r3, r2
 8008c28:	bfc4      	itt	gt
 8008c2a:	1a9b      	subgt	r3, r3, r2
 8008c2c:	18ed      	addgt	r5, r5, r3
 8008c2e:	2600      	movs	r6, #0
 8008c30:	341a      	adds	r4, #26
 8008c32:	42b5      	cmp	r5, r6
 8008c34:	d11a      	bne.n	8008c6c <_printf_common+0xc8>
 8008c36:	2000      	movs	r0, #0
 8008c38:	e008      	b.n	8008c4c <_printf_common+0xa8>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4652      	mov	r2, sl
 8008c3e:	4649      	mov	r1, r9
 8008c40:	4638      	mov	r0, r7
 8008c42:	47c0      	blx	r8
 8008c44:	3001      	adds	r0, #1
 8008c46:	d103      	bne.n	8008c50 <_printf_common+0xac>
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c50:	3501      	adds	r5, #1
 8008c52:	e7c6      	b.n	8008be2 <_printf_common+0x3e>
 8008c54:	18e1      	adds	r1, r4, r3
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	2030      	movs	r0, #48	; 0x30
 8008c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c5e:	4422      	add	r2, r4
 8008c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c68:	3302      	adds	r3, #2
 8008c6a:	e7c7      	b.n	8008bfc <_printf_common+0x58>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	4622      	mov	r2, r4
 8008c70:	4649      	mov	r1, r9
 8008c72:	4638      	mov	r0, r7
 8008c74:	47c0      	blx	r8
 8008c76:	3001      	adds	r0, #1
 8008c78:	d0e6      	beq.n	8008c48 <_printf_common+0xa4>
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	e7d9      	b.n	8008c32 <_printf_common+0x8e>
	...

08008c80 <_printf_i>:
 8008c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	7e0f      	ldrb	r7, [r1, #24]
 8008c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c88:	2f78      	cmp	r7, #120	; 0x78
 8008c8a:	4691      	mov	r9, r2
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	469a      	mov	sl, r3
 8008c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c96:	d807      	bhi.n	8008ca8 <_printf_i+0x28>
 8008c98:	2f62      	cmp	r7, #98	; 0x62
 8008c9a:	d80a      	bhi.n	8008cb2 <_printf_i+0x32>
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	f000 80d8 	beq.w	8008e52 <_printf_i+0x1d2>
 8008ca2:	2f58      	cmp	r7, #88	; 0x58
 8008ca4:	f000 80a3 	beq.w	8008dee <_printf_i+0x16e>
 8008ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cb0:	e03a      	b.n	8008d28 <_printf_i+0xa8>
 8008cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cb6:	2b15      	cmp	r3, #21
 8008cb8:	d8f6      	bhi.n	8008ca8 <_printf_i+0x28>
 8008cba:	a101      	add	r1, pc, #4	; (adr r1, 8008cc0 <_printf_i+0x40>)
 8008cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cc0:	08008d19 	.word	0x08008d19
 8008cc4:	08008d2d 	.word	0x08008d2d
 8008cc8:	08008ca9 	.word	0x08008ca9
 8008ccc:	08008ca9 	.word	0x08008ca9
 8008cd0:	08008ca9 	.word	0x08008ca9
 8008cd4:	08008ca9 	.word	0x08008ca9
 8008cd8:	08008d2d 	.word	0x08008d2d
 8008cdc:	08008ca9 	.word	0x08008ca9
 8008ce0:	08008ca9 	.word	0x08008ca9
 8008ce4:	08008ca9 	.word	0x08008ca9
 8008ce8:	08008ca9 	.word	0x08008ca9
 8008cec:	08008e39 	.word	0x08008e39
 8008cf0:	08008d5d 	.word	0x08008d5d
 8008cf4:	08008e1b 	.word	0x08008e1b
 8008cf8:	08008ca9 	.word	0x08008ca9
 8008cfc:	08008ca9 	.word	0x08008ca9
 8008d00:	08008e5b 	.word	0x08008e5b
 8008d04:	08008ca9 	.word	0x08008ca9
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008ca9 	.word	0x08008ca9
 8008d10:	08008ca9 	.word	0x08008ca9
 8008d14:	08008e23 	.word	0x08008e23
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e0a3      	b.n	8008e74 <_printf_i+0x1f4>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	6829      	ldr	r1, [r5, #0]
 8008d30:	0606      	lsls	r6, r0, #24
 8008d32:	f101 0304 	add.w	r3, r1, #4
 8008d36:	d50a      	bpl.n	8008d4e <_printf_i+0xce>
 8008d38:	680e      	ldr	r6, [r1, #0]
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	2e00      	cmp	r6, #0
 8008d3e:	da03      	bge.n	8008d48 <_printf_i+0xc8>
 8008d40:	232d      	movs	r3, #45	; 0x2d
 8008d42:	4276      	negs	r6, r6
 8008d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d48:	485e      	ldr	r0, [pc, #376]	; (8008ec4 <_printf_i+0x244>)
 8008d4a:	230a      	movs	r3, #10
 8008d4c:	e019      	b.n	8008d82 <_printf_i+0x102>
 8008d4e:	680e      	ldr	r6, [r1, #0]
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d56:	bf18      	it	ne
 8008d58:	b236      	sxthne	r6, r6
 8008d5a:	e7ef      	b.n	8008d3c <_printf_i+0xbc>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	6820      	ldr	r0, [r4, #0]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	6029      	str	r1, [r5, #0]
 8008d64:	0601      	lsls	r1, r0, #24
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0xec>
 8008d68:	681e      	ldr	r6, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <_printf_i+0xf2>
 8008d6c:	0646      	lsls	r6, r0, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0xe8>
 8008d70:	881e      	ldrh	r6, [r3, #0]
 8008d72:	4854      	ldr	r0, [pc, #336]	; (8008ec4 <_printf_i+0x244>)
 8008d74:	2f6f      	cmp	r7, #111	; 0x6f
 8008d76:	bf0c      	ite	eq
 8008d78:	2308      	moveq	r3, #8
 8008d7a:	230a      	movne	r3, #10
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d82:	6865      	ldr	r5, [r4, #4]
 8008d84:	60a5      	str	r5, [r4, #8]
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	bfa2      	ittt	ge
 8008d8a:	6821      	ldrge	r1, [r4, #0]
 8008d8c:	f021 0104 	bicge.w	r1, r1, #4
 8008d90:	6021      	strge	r1, [r4, #0]
 8008d92:	b90e      	cbnz	r6, 8008d98 <_printf_i+0x118>
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d04d      	beq.n	8008e34 <_printf_i+0x1b4>
 8008d98:	4615      	mov	r5, r2
 8008d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008da2:	5dc7      	ldrb	r7, [r0, r7]
 8008da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008da8:	4637      	mov	r7, r6
 8008daa:	42bb      	cmp	r3, r7
 8008dac:	460e      	mov	r6, r1
 8008dae:	d9f4      	bls.n	8008d9a <_printf_i+0x11a>
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d10b      	bne.n	8008dcc <_printf_i+0x14c>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	07de      	lsls	r6, r3, #31
 8008db8:	d508      	bpl.n	8008dcc <_printf_i+0x14c>
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	6861      	ldr	r1, [r4, #4]
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	bfde      	ittt	le
 8008dc2:	2330      	movle	r3, #48	; 0x30
 8008dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dcc:	1b52      	subs	r2, r2, r5
 8008dce:	6122      	str	r2, [r4, #16]
 8008dd0:	f8cd a000 	str.w	sl, [sp]
 8008dd4:	464b      	mov	r3, r9
 8008dd6:	aa03      	add	r2, sp, #12
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f7ff fee2 	bl	8008ba4 <_printf_common>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d14c      	bne.n	8008e7e <_printf_i+0x1fe>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	b004      	add	sp, #16
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	4835      	ldr	r0, [pc, #212]	; (8008ec4 <_printf_i+0x244>)
 8008df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dfc:	6029      	str	r1, [r5, #0]
 8008dfe:	061d      	lsls	r5, r3, #24
 8008e00:	d514      	bpl.n	8008e2c <_printf_i+0x1ac>
 8008e02:	07df      	lsls	r7, r3, #31
 8008e04:	bf44      	itt	mi
 8008e06:	f043 0320 	orrmi.w	r3, r3, #32
 8008e0a:	6023      	strmi	r3, [r4, #0]
 8008e0c:	b91e      	cbnz	r6, 8008e16 <_printf_i+0x196>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f023 0320 	bic.w	r3, r3, #32
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	2310      	movs	r3, #16
 8008e18:	e7b0      	b.n	8008d7c <_printf_i+0xfc>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f043 0320 	orr.w	r3, r3, #32
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	2378      	movs	r3, #120	; 0x78
 8008e24:	4828      	ldr	r0, [pc, #160]	; (8008ec8 <_printf_i+0x248>)
 8008e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e2a:	e7e3      	b.n	8008df4 <_printf_i+0x174>
 8008e2c:	0659      	lsls	r1, r3, #25
 8008e2e:	bf48      	it	mi
 8008e30:	b2b6      	uxthmi	r6, r6
 8008e32:	e7e6      	b.n	8008e02 <_printf_i+0x182>
 8008e34:	4615      	mov	r5, r2
 8008e36:	e7bb      	b.n	8008db0 <_printf_i+0x130>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	6826      	ldr	r6, [r4, #0]
 8008e3c:	6961      	ldr	r1, [r4, #20]
 8008e3e:	1d18      	adds	r0, r3, #4
 8008e40:	6028      	str	r0, [r5, #0]
 8008e42:	0635      	lsls	r5, r6, #24
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0x1cc>
 8008e48:	6019      	str	r1, [r3, #0]
 8008e4a:	e002      	b.n	8008e52 <_printf_i+0x1d2>
 8008e4c:	0670      	lsls	r0, r6, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0x1c8>
 8008e50:	8019      	strh	r1, [r3, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	4615      	mov	r5, r2
 8008e58:	e7ba      	b.n	8008dd0 <_printf_i+0x150>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	1d1a      	adds	r2, r3, #4
 8008e5e:	602a      	str	r2, [r5, #0]
 8008e60:	681d      	ldr	r5, [r3, #0]
 8008e62:	6862      	ldr	r2, [r4, #4]
 8008e64:	2100      	movs	r1, #0
 8008e66:	4628      	mov	r0, r5
 8008e68:	f7f7 f9b2 	bl	80001d0 <memchr>
 8008e6c:	b108      	cbz	r0, 8008e72 <_printf_i+0x1f2>
 8008e6e:	1b40      	subs	r0, r0, r5
 8008e70:	6060      	str	r0, [r4, #4]
 8008e72:	6863      	ldr	r3, [r4, #4]
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	2300      	movs	r3, #0
 8008e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e7c:	e7a8      	b.n	8008dd0 <_printf_i+0x150>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	462a      	mov	r2, r5
 8008e82:	4649      	mov	r1, r9
 8008e84:	4640      	mov	r0, r8
 8008e86:	47d0      	blx	sl
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d0ab      	beq.n	8008de4 <_printf_i+0x164>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	079b      	lsls	r3, r3, #30
 8008e90:	d413      	bmi.n	8008eba <_printf_i+0x23a>
 8008e92:	68e0      	ldr	r0, [r4, #12]
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	4298      	cmp	r0, r3
 8008e98:	bfb8      	it	lt
 8008e9a:	4618      	movlt	r0, r3
 8008e9c:	e7a4      	b.n	8008de8 <_printf_i+0x168>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	47d0      	blx	sl
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d09b      	beq.n	8008de4 <_printf_i+0x164>
 8008eac:	3501      	adds	r5, #1
 8008eae:	68e3      	ldr	r3, [r4, #12]
 8008eb0:	9903      	ldr	r1, [sp, #12]
 8008eb2:	1a5b      	subs	r3, r3, r1
 8008eb4:	42ab      	cmp	r3, r5
 8008eb6:	dcf2      	bgt.n	8008e9e <_printf_i+0x21e>
 8008eb8:	e7eb      	b.n	8008e92 <_printf_i+0x212>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	f104 0619 	add.w	r6, r4, #25
 8008ec0:	e7f5      	b.n	8008eae <_printf_i+0x22e>
 8008ec2:	bf00      	nop
 8008ec4:	0800a739 	.word	0x0800a739
 8008ec8:	0800a74a 	.word	0x0800a74a

08008ecc <memmove>:
 8008ecc:	4288      	cmp	r0, r1
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	eb01 0402 	add.w	r4, r1, r2
 8008ed4:	d902      	bls.n	8008edc <memmove+0x10>
 8008ed6:	4284      	cmp	r4, r0
 8008ed8:	4623      	mov	r3, r4
 8008eda:	d807      	bhi.n	8008eec <memmove+0x20>
 8008edc:	1e43      	subs	r3, r0, #1
 8008ede:	42a1      	cmp	r1, r4
 8008ee0:	d008      	beq.n	8008ef4 <memmove+0x28>
 8008ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eea:	e7f8      	b.n	8008ede <memmove+0x12>
 8008eec:	4402      	add	r2, r0
 8008eee:	4601      	mov	r1, r0
 8008ef0:	428a      	cmp	r2, r1
 8008ef2:	d100      	bne.n	8008ef6 <memmove+0x2a>
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008efe:	e7f7      	b.n	8008ef0 <memmove+0x24>

08008f00 <_free_r>:
 8008f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f02:	2900      	cmp	r1, #0
 8008f04:	d044      	beq.n	8008f90 <_free_r+0x90>
 8008f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0a:	9001      	str	r0, [sp, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f12:	bfb8      	it	lt
 8008f14:	18e4      	addlt	r4, r4, r3
 8008f16:	f000 f913 	bl	8009140 <__malloc_lock>
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <_free_r+0x94>)
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	b933      	cbnz	r3, 8008f30 <_free_r+0x30>
 8008f22:	6063      	str	r3, [r4, #4]
 8008f24:	6014      	str	r4, [r2, #0]
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	f000 b90e 	b.w	800914c <__malloc_unlock>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d908      	bls.n	8008f46 <_free_r+0x46>
 8008f34:	6825      	ldr	r5, [r4, #0]
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	bf01      	itttt	eq
 8008f3c:	6819      	ldreq	r1, [r3, #0]
 8008f3e:	685b      	ldreq	r3, [r3, #4]
 8008f40:	1949      	addeq	r1, r1, r5
 8008f42:	6021      	streq	r1, [r4, #0]
 8008f44:	e7ed      	b.n	8008f22 <_free_r+0x22>
 8008f46:	461a      	mov	r2, r3
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	b10b      	cbz	r3, 8008f50 <_free_r+0x50>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d9fa      	bls.n	8008f46 <_free_r+0x46>
 8008f50:	6811      	ldr	r1, [r2, #0]
 8008f52:	1855      	adds	r5, r2, r1
 8008f54:	42a5      	cmp	r5, r4
 8008f56:	d10b      	bne.n	8008f70 <_free_r+0x70>
 8008f58:	6824      	ldr	r4, [r4, #0]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	1854      	adds	r4, r2, r1
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	d1e0      	bne.n	8008f26 <_free_r+0x26>
 8008f64:	681c      	ldr	r4, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	6053      	str	r3, [r2, #4]
 8008f6a:	4421      	add	r1, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	e7da      	b.n	8008f26 <_free_r+0x26>
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x78>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6003      	str	r3, [r0, #0]
 8008f76:	e7d6      	b.n	8008f26 <_free_r+0x26>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf04      	itt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	bf04      	itt	eq
 8008f88:	1949      	addeq	r1, r1, r5
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	6054      	str	r4, [r2, #4]
 8008f8e:	e7ca      	b.n	8008f26 <_free_r+0x26>
 8008f90:	b003      	add	sp, #12
 8008f92:	bd30      	pop	{r4, r5, pc}
 8008f94:	20001228 	.word	0x20001228

08008f98 <sbrk_aligned>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4e0e      	ldr	r6, [pc, #56]	; (8008fd4 <sbrk_aligned+0x3c>)
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	6831      	ldr	r1, [r6, #0]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b911      	cbnz	r1, 8008faa <sbrk_aligned+0x12>
 8008fa4:	f000 f8bc 	bl	8009120 <_sbrk_r>
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 f8b7 	bl	8009120 <_sbrk_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d00a      	beq.n	8008fcc <sbrk_aligned+0x34>
 8008fb6:	1cc4      	adds	r4, r0, #3
 8008fb8:	f024 0403 	bic.w	r4, r4, #3
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d007      	beq.n	8008fd0 <sbrk_aligned+0x38>
 8008fc0:	1a21      	subs	r1, r4, r0
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f8ac 	bl	8009120 <_sbrk_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d101      	bne.n	8008fd0 <sbrk_aligned+0x38>
 8008fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	2000122c 	.word	0x2000122c

08008fd8 <_malloc_r>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	1ccd      	adds	r5, r1, #3
 8008fde:	f025 0503 	bic.w	r5, r5, #3
 8008fe2:	3508      	adds	r5, #8
 8008fe4:	2d0c      	cmp	r5, #12
 8008fe6:	bf38      	it	cc
 8008fe8:	250c      	movcc	r5, #12
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	4607      	mov	r7, r0
 8008fee:	db01      	blt.n	8008ff4 <_malloc_r+0x1c>
 8008ff0:	42a9      	cmp	r1, r5
 8008ff2:	d905      	bls.n	8009000 <_malloc_r+0x28>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009000:	4e2e      	ldr	r6, [pc, #184]	; (80090bc <_malloc_r+0xe4>)
 8009002:	f000 f89d 	bl	8009140 <__malloc_lock>
 8009006:	6833      	ldr	r3, [r6, #0]
 8009008:	461c      	mov	r4, r3
 800900a:	bb34      	cbnz	r4, 800905a <_malloc_r+0x82>
 800900c:	4629      	mov	r1, r5
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff ffc2 	bl	8008f98 <sbrk_aligned>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	4604      	mov	r4, r0
 8009018:	d14d      	bne.n	80090b6 <_malloc_r+0xde>
 800901a:	6834      	ldr	r4, [r6, #0]
 800901c:	4626      	mov	r6, r4
 800901e:	2e00      	cmp	r6, #0
 8009020:	d140      	bne.n	80090a4 <_malloc_r+0xcc>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	4631      	mov	r1, r6
 8009026:	4638      	mov	r0, r7
 8009028:	eb04 0803 	add.w	r8, r4, r3
 800902c:	f000 f878 	bl	8009120 <_sbrk_r>
 8009030:	4580      	cmp	r8, r0
 8009032:	d13a      	bne.n	80090aa <_malloc_r+0xd2>
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	3503      	adds	r5, #3
 8009038:	1a6d      	subs	r5, r5, r1
 800903a:	f025 0503 	bic.w	r5, r5, #3
 800903e:	3508      	adds	r5, #8
 8009040:	2d0c      	cmp	r5, #12
 8009042:	bf38      	it	cc
 8009044:	250c      	movcc	r5, #12
 8009046:	4629      	mov	r1, r5
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa5 	bl	8008f98 <sbrk_aligned>
 800904e:	3001      	adds	r0, #1
 8009050:	d02b      	beq.n	80090aa <_malloc_r+0xd2>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	442b      	add	r3, r5
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	e00e      	b.n	8009078 <_malloc_r+0xa0>
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	1b52      	subs	r2, r2, r5
 800905e:	d41e      	bmi.n	800909e <_malloc_r+0xc6>
 8009060:	2a0b      	cmp	r2, #11
 8009062:	d916      	bls.n	8009092 <_malloc_r+0xba>
 8009064:	1961      	adds	r1, r4, r5
 8009066:	42a3      	cmp	r3, r4
 8009068:	6025      	str	r5, [r4, #0]
 800906a:	bf18      	it	ne
 800906c:	6059      	strne	r1, [r3, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	bf08      	it	eq
 8009072:	6031      	streq	r1, [r6, #0]
 8009074:	5162      	str	r2, [r4, r5]
 8009076:	604b      	str	r3, [r1, #4]
 8009078:	4638      	mov	r0, r7
 800907a:	f104 060b 	add.w	r6, r4, #11
 800907e:	f000 f865 	bl	800914c <__malloc_unlock>
 8009082:	f026 0607 	bic.w	r6, r6, #7
 8009086:	1d23      	adds	r3, r4, #4
 8009088:	1af2      	subs	r2, r6, r3
 800908a:	d0b6      	beq.n	8008ffa <_malloc_r+0x22>
 800908c:	1b9b      	subs	r3, r3, r6
 800908e:	50a3      	str	r3, [r4, r2]
 8009090:	e7b3      	b.n	8008ffa <_malloc_r+0x22>
 8009092:	6862      	ldr	r2, [r4, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	bf0c      	ite	eq
 8009098:	6032      	streq	r2, [r6, #0]
 800909a:	605a      	strne	r2, [r3, #4]
 800909c:	e7ec      	b.n	8009078 <_malloc_r+0xa0>
 800909e:	4623      	mov	r3, r4
 80090a0:	6864      	ldr	r4, [r4, #4]
 80090a2:	e7b2      	b.n	800900a <_malloc_r+0x32>
 80090a4:	4634      	mov	r4, r6
 80090a6:	6876      	ldr	r6, [r6, #4]
 80090a8:	e7b9      	b.n	800901e <_malloc_r+0x46>
 80090aa:	230c      	movs	r3, #12
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	4638      	mov	r0, r7
 80090b0:	f000 f84c 	bl	800914c <__malloc_unlock>
 80090b4:	e7a1      	b.n	8008ffa <_malloc_r+0x22>
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	e7de      	b.n	8009078 <_malloc_r+0xa0>
 80090ba:	bf00      	nop
 80090bc:	20001228 	.word	0x20001228

080090c0 <_realloc_r>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	4680      	mov	r8, r0
 80090c6:	4614      	mov	r4, r2
 80090c8:	460e      	mov	r6, r1
 80090ca:	b921      	cbnz	r1, 80090d6 <_realloc_r+0x16>
 80090cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d0:	4611      	mov	r1, r2
 80090d2:	f7ff bf81 	b.w	8008fd8 <_malloc_r>
 80090d6:	b92a      	cbnz	r2, 80090e4 <_realloc_r+0x24>
 80090d8:	f7ff ff12 	bl	8008f00 <_free_r>
 80090dc:	4625      	mov	r5, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e4:	f000 f838 	bl	8009158 <_malloc_usable_size_r>
 80090e8:	4284      	cmp	r4, r0
 80090ea:	4607      	mov	r7, r0
 80090ec:	d802      	bhi.n	80090f4 <_realloc_r+0x34>
 80090ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090f2:	d812      	bhi.n	800911a <_realloc_r+0x5a>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4640      	mov	r0, r8
 80090f8:	f7ff ff6e 	bl	8008fd8 <_malloc_r>
 80090fc:	4605      	mov	r5, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	d0ed      	beq.n	80090de <_realloc_r+0x1e>
 8009102:	42bc      	cmp	r4, r7
 8009104:	4622      	mov	r2, r4
 8009106:	4631      	mov	r1, r6
 8009108:	bf28      	it	cs
 800910a:	463a      	movcs	r2, r7
 800910c:	f7ff fbb8 	bl	8008880 <memcpy>
 8009110:	4631      	mov	r1, r6
 8009112:	4640      	mov	r0, r8
 8009114:	f7ff fef4 	bl	8008f00 <_free_r>
 8009118:	e7e1      	b.n	80090de <_realloc_r+0x1e>
 800911a:	4635      	mov	r5, r6
 800911c:	e7df      	b.n	80090de <_realloc_r+0x1e>
	...

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	; (800913c <_sbrk_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f8 fba0 	bl	8001870 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20001230 	.word	0x20001230

08009140 <__malloc_lock>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__malloc_lock+0x8>)
 8009142:	f000 b811 	b.w	8009168 <__retarget_lock_acquire_recursive>
 8009146:	bf00      	nop
 8009148:	20001234 	.word	0x20001234

0800914c <__malloc_unlock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_unlock+0x8>)
 800914e:	f000 b80c 	b.w	800916a <__retarget_lock_release_recursive>
 8009152:	bf00      	nop
 8009154:	20001234 	.word	0x20001234

08009158 <_malloc_usable_size_r>:
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f18      	subs	r0, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfbc      	itt	lt
 8009162:	580b      	ldrlt	r3, [r1, r0]
 8009164:	18c0      	addlt	r0, r0, r3
 8009166:	4770      	bx	lr

08009168 <__retarget_lock_acquire_recursive>:
 8009168:	4770      	bx	lr

0800916a <__retarget_lock_release_recursive>:
 800916a:	4770      	bx	lr

0800916c <_init>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr

08009178 <_fini>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr

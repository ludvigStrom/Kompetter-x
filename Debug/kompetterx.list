
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009858  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001638  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b020  0800b020  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800b020  0800b020  0001b020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b028  0800b028  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b02c  0800b02c  0001b02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800b030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  20000228  0800b258  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002268  0800b258  00022268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eee  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003798  00000000  00000000  00035146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000388e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00039ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230ca  00000000  00000000  0003ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017343  00000000  00000000  0005dbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf322  00000000  00000000  00074f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013422f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  00134280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099d0 	.word	0x080099d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080099d0 	.word	0x080099d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9302      	str	r3, [sp, #8]
 8000590:	2302      	movs	r3, #2
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	220e      	movs	r2, #14
 800059e:	216c      	movs	r1, #108	; 0x6c
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f001 fdb5 	bl	8002110 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	7b7b      	ldrb	r3, [r7, #13]
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005b6:	89fb      	ldrh	r3, [r7, #14]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d013      	beq.n	8000600 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e8:	e000      	b.n	80005ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_write>:
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */


int _write(int file, char *ptr, int len){
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
	int i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e009      	b.n	8000638 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	60ba      	str	r2, [r7, #8]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffc7 	bl	80005c0 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	dbf1      	blt.n	8000624 <_write+0x16>
	return len;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	; 0x70
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 ff8b 	bl	800156c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f96f 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fa69 	bl	8000b30 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065e:	f000 f9d5 	bl	8000a0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000662:	f000 fa01 	bl	8000a68 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000666:	f007 fa9f 	bl	8007ba8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800066a:	f000 fa2b 	bl	8000ac4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 800066e:	2104      	movs	r1, #4
 8000670:	489f      	ldr	r0, [pc, #636]	; (80008f0 <main+0x2a4>)
 8000672:	f001 faf0 	bl	8001c56 <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 8000676:	2032      	movs	r0, #50	; 0x32
 8000678:	f000 ffea 	bl	8001650 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 800067c:	f000 faca 	bl	8000c14 <SSD1306_Init>

  HAL_Delay(50);
 8000680:	2032      	movs	r0, #50	; 0x32
 8000682:	f000 ffe5 	bl	8001650 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 8000686:	2100      	movs	r1, #0
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fc2d 	bl	8000ee8 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	4998      	ldr	r1, [pc, #608]	; (80008f4 <main+0x2a8>)
 8000692:	4899      	ldr	r0, [pc, #612]	; (80008f8 <main+0x2ac>)
 8000694:	f000 fcbe 	bl	8001014 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 8000698:	2114      	movs	r1, #20
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fc24 	bl	8000ee8 <SSD1306_GotoXY>
  SSD1306_Puts ("v.01", &Font_7x10, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	4996      	ldr	r1, [pc, #600]	; (80008fc <main+0x2b0>)
 80006a4:	4896      	ldr	r0, [pc, #600]	; (8000900 <main+0x2b4>)
 80006a6:	f000 fcb5 	bl	8001014 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80006aa:	f000 fb77 	bl	8000d9c <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 80006ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006b2:	f000 ffcd 	bl	8001650 <HAL_Delay>

  SSD1306_Clear();
 80006b6:	f000 fcd2 	bl	800105e <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 80006ba:	2104      	movs	r1, #4
 80006bc:	488c      	ldr	r0, [pc, #560]	; (80008f0 <main+0x2a4>)
 80006be:	f001 faca 	bl	8001c56 <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 80006c2:	211e      	movs	r1, #30
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fc0f 	bl	8000ee8 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	498b      	ldr	r1, [pc, #556]	; (80008fc <main+0x2b0>)
 80006ce:	488d      	ldr	r0, [pc, #564]	; (8000904 <main+0x2b8>)
 80006d0:	f000 fca0 	bl	8001014 <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 80006d4:	2128      	movs	r1, #40	; 0x28
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fc06 	bl	8000ee8 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	4985      	ldr	r1, [pc, #532]	; (80008f4 <main+0x2a8>)
 80006e0:	4889      	ldr	r0, [pc, #548]	; (8000908 <main+0x2bc>)
 80006e2:	f000 fc97 	bl	8001014 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	sprintf(txBuf, "%u\r\n", count);
 80006e6:	4b89      	ldr	r3, [pc, #548]	; (800090c <main+0x2c0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4988      	ldr	r1, [pc, #544]	; (8000910 <main+0x2c4>)
 80006ee:	4889      	ldr	r0, [pc, #548]	; (8000914 <main+0x2c8>)
 80006f0:	f007 ffd4 	bl	800869c <siprintf>
	count++;
 80006f4:	4b85      	ldr	r3, [pc, #532]	; (800090c <main+0x2c0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b83      	ldr	r3, [pc, #524]	; (800090c <main+0x2c0>)
 80006fe:	701a      	strb	r2, [r3, #0]
	if(count > 100){
 8000700:	4b82      	ldr	r3, [pc, #520]	; (800090c <main+0x2c0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b64      	cmp	r3, #100	; 0x64
 8000706:	d902      	bls.n	800070e <main+0xc2>
		count = 1;
 8000708:	4b80      	ldr	r3, [pc, #512]	; (800090c <main+0x2c0>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 800070e:	4881      	ldr	r0, [pc, #516]	; (8000914 <main+0x2c8>)
 8000710:	f7ff fd5e 	bl	80001d0 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29b      	uxth	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	487e      	ldr	r0, [pc, #504]	; (8000914 <main+0x2c8>)
 800071c:	f007 fb02 	bl	8007d24 <CDC_Transmit_FS>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 8000720:	487d      	ldr	r0, [pc, #500]	; (8000918 <main+0x2cc>)
 8000722:	f7ff ff2f 	bl	8000584 <AS5600_ReadAngle>
 8000726:	4603      	mov	r3, r0
 8000728:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	//Convert the angle to a string
	char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

    //Convert to a string with leading spaces
    sprintf(angle_str, "%4u", angle);
 800072c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000734:	4979      	ldr	r1, [pc, #484]	; (800091c <main+0x2d0>)
 8000736:	4618      	mov	r0, r3
 8000738:	f007 ffb0 	bl	800869c <siprintf>

	// Display the angle on the OLED display
	SSD1306_GotoXY (0,0);
 800073c:	2100      	movs	r1, #0
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fbd2 	bl	8000ee8 <SSD1306_GotoXY>
	SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	496d      	ldr	r1, [pc, #436]	; (80008fc <main+0x2b0>)
 8000748:	4875      	ldr	r0, [pc, #468]	; (8000920 <main+0x2d4>)
 800074a:	f000 fc63 	bl	8001014 <SSD1306_Puts>
	SSD1306_GotoXY (0, 12);
 800074e:	210c      	movs	r1, #12
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fbc9 	bl	8000ee8 <SSD1306_GotoXY>
	SSD1306_Puts(angle_str, &Font_11x18, 1);
 8000756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075a:	2201      	movs	r2, #1
 800075c:	4965      	ldr	r1, [pc, #404]	; (80008f4 <main+0x2a8>)
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fc58 	bl	8001014 <SSD1306_Puts>

	//debounce scan:
	enum KeyState { IDLE, PRESSED };
	enum KeyState key_state[NUM_ROWS][NUM_COLS];  // Declare the array of states

	for(int i = 0; i < NUM_ROWS; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000768:	e014      	b.n	8000794 <main+0x148>
	    for(int j = 0; j < NUM_COLS; j++) {
 800076a:	2300      	movs	r3, #0
 800076c:	66bb      	str	r3, [r7, #104]	; 0x68
 800076e:	e00b      	b.n	8000788 <main+0x13c>
	        key_state[i][j] = IDLE;  // Initialize each state to IDLE
 8000770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	3370      	adds	r3, #112	; 0x70
 8000776:	19da      	adds	r2, r3, r7
 8000778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800077a:	4413      	add	r3, r2
 800077c:	3b28      	subs	r3, #40	; 0x28
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 8000782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000784:	3301      	adds	r3, #1
 8000786:	66bb      	str	r3, [r7, #104]	; 0x68
 8000788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078a:	2b03      	cmp	r3, #3
 800078c:	ddf0      	ble.n	8000770 <main+0x124>
	for(int i = 0; i < NUM_ROWS; i++) {
 800078e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000790:	3301      	adds	r3, #1
 8000792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	2b03      	cmp	r3, #3
 8000798:	dde7      	ble.n	800076a <main+0x11e>
	    }
	}

	uint32_t last_key_time[NUM_ROWS][NUM_COLS] = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2240      	movs	r2, #64	; 0x40
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f007 ff45 	bl	8008630 <memset>

	for(int i = 0; i < NUM_ROWS; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	667b      	str	r3, [r7, #100]	; 0x64
 80007aa:	e099      	b.n	80008e0 <main+0x294>
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 80007ac:	4a5d      	ldr	r2, [pc, #372]	; (8000924 <main+0x2d8>)
 80007ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007b4:	4a5c      	ldr	r2, [pc, #368]	; (8000928 <main+0x2dc>)
 80007b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f001 fa30 	bl	8001c24 <HAL_GPIO_WritePin>

	    for(int j = 0; j < NUM_COLS; j++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	663b      	str	r3, [r7, #96]	; 0x60
 80007c8:	e078      	b.n	80008bc <main+0x270>
	        uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 80007ca:	4a58      	ldr	r2, [pc, #352]	; (800092c <main+0x2e0>)
 80007cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d2:	4957      	ldr	r1, [pc, #348]	; (8000930 <main+0x2e4>)
 80007d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007da:	4619      	mov	r1, r3
 80007dc:	4610      	mov	r0, r2
 80007de:	f001 fa09 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	bf0c      	ite	eq
 80007e8:	2301      	moveq	r3, #1
 80007ea:	2300      	movne	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	        if (is_pressed && key_state[i][j] == IDLE) {
 80007f2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d037      	beq.n	800086a <main+0x21e>
 80007fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	3370      	adds	r3, #112	; 0x70
 8000800:	19da      	adds	r2, r3, r7
 8000802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000804:	4413      	add	r3, r2
 8000806:	3b28      	subs	r3, #40	; 0x28
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d12d      	bne.n	800086a <main+0x21e>
	            // Key was just pressed, change state and record time
	            key_state[i][j] = PRESSED;
 800080e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	3370      	adds	r3, #112	; 0x70
 8000814:	19da      	adds	r2, r3, r7
 8000816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000818:	4413      	add	r3, r2
 800081a:	3b28      	subs	r3, #40	; 0x28
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
	            last_key_time[i][j] = HAL_GetTick();
 8000820:	f000 ff0a 	bl	8001638 <HAL_GetTick>
 8000824:	4601      	mov	r1, r0
 8000826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000828:	009a      	lsls	r2, r3, #2
 800082a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082c:	4413      	add	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	3370      	adds	r3, #112	; 0x70
 8000832:	443b      	add	r3, r7
 8000834:	f843 1c6c 	str.w	r1, [r3, #-108]

	            // Format the key string
	            char key_str[3];
	            sprintf(key_str, "%d%d", i+1, j+1);
 8000838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800083e:	3301      	adds	r3, #1
 8000840:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000844:	493b      	ldr	r1, [pc, #236]	; (8000934 <main+0x2e8>)
 8000846:	f007 ff29 	bl	800869c <siprintf>

	            // Display the key on the OLED display
	            SSD1306_GotoXY(0, 40);
 800084a:	2128      	movs	r1, #40	; 0x28
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fb4b 	bl	8000ee8 <SSD1306_GotoXY>
	            SSD1306_Puts(key_str, &Font_11x18, 1);
 8000852:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000856:	2201      	movs	r2, #1
 8000858:	4926      	ldr	r1, [pc, #152]	; (80008f4 <main+0x2a8>)
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fbda 	bl	8001014 <SSD1306_Puts>

	            // Light up led:
	            HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000860:	2104      	movs	r1, #4
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <main+0x2a4>)
 8000864:	f001 f9f7 	bl	8001c56 <HAL_GPIO_TogglePin>
	        if (is_pressed && key_state[i][j] == IDLE) {
 8000868:	e025      	b.n	80008b6 <main+0x26a>
	        } else if (!is_pressed && key_state[i][j] == PRESSED && HAL_GetTick() - last_key_time[i][j] > DEBOUNCE_DELAY) {
 800086a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800086e:	2b00      	cmp	r3, #0
 8000870:	d121      	bne.n	80008b6 <main+0x26a>
 8000872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	3370      	adds	r3, #112	; 0x70
 8000878:	19da      	adds	r2, r3, r7
 800087a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800087c:	4413      	add	r3, r2
 800087e:	3b28      	subs	r3, #40	; 0x28
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d117      	bne.n	80008b6 <main+0x26a>
 8000886:	f000 fed7 	bl	8001638 <HAL_GetTick>
 800088a:	4601      	mov	r1, r0
 800088c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800088e:	009a      	lsls	r2, r3, #2
 8000890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	3370      	adds	r3, #112	; 0x70
 8000898:	443b      	add	r3, r7
 800089a:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800089e:	1acb      	subs	r3, r1, r3
 80008a0:	2b96      	cmp	r3, #150	; 0x96
 80008a2:	d908      	bls.n	80008b6 <main+0x26a>
	            // Key was released and debounce delay passed, go back to idle
	            key_state[i][j] = IDLE;
 80008a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	3370      	adds	r3, #112	; 0x70
 80008aa:	19da      	adds	r2, r3, r7
 80008ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008ae:	4413      	add	r3, r2
 80008b0:	3b28      	subs	r3, #40	; 0x28
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 80008b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008b8:	3301      	adds	r3, #1
 80008ba:	663b      	str	r3, [r7, #96]	; 0x60
 80008bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008be:	2b03      	cmp	r3, #3
 80008c0:	dd83      	ble.n	80007ca <main+0x17e>
	        }
	    }

	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <main+0x2d8>)
 80008c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <main+0x2dc>)
 80008cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f001 f9a5 	bl	8001c24 <HAL_GPIO_WritePin>
	for(int i = 0; i < NUM_ROWS; i++) {
 80008da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008dc:	3301      	adds	r3, #1
 80008de:	667b      	str	r3, [r7, #100]	; 0x64
 80008e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	f77f af62 	ble.w	80007ac <main+0x160>
	}
	//Debounce scan END

  	// Update the OLED display
	SSD1306_UpdateScreen();
 80008e8:	f000 fa58 	bl	8000d9c <SSD1306_UpdateScreen>
  {
 80008ec:	e6fb      	b.n	80006e6 <main+0x9a>
 80008ee:	bf00      	nop
 80008f0:	40020000 	.word	0x40020000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	080099e8 	.word	0x080099e8
 80008fc:	20000000 	.word	0x20000000
 8000900:	080099f4 	.word	0x080099f4
 8000904:	080099fc 	.word	0x080099fc
 8000908:	08009a04 	.word	0x08009a04
 800090c:	20000040 	.word	0x20000040
 8000910:	08009a0c 	.word	0x08009a0c
 8000914:	20000344 	.word	0x20000344
 8000918:	20000298 	.word	0x20000298
 800091c:	08009a14 	.word	0x08009a14
 8000920:	08009a18 	.word	0x08009a18
 8000924:	20000010 	.word	0x20000010
 8000928:	20000020 	.word	0x20000020
 800092c:	20000028 	.word	0x20000028
 8000930:	20000038 	.word	0x20000038
 8000934:	08009a20 	.word	0x08009a20

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fe72 	bl	8008630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ac:	23a8      	movs	r3, #168	; 0xa8
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fbc5 	bl	800414c <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c8:	f000 f91e 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2105      	movs	r1, #5
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 fe26 	bl	800463c <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 f907 	bl	8000c08 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <MX_I2C1_Init+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x58>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a4a:	f001 f91f 	bl	8001c8c <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 f8d8 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000244 	.word	0x20000244
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00061a80 	.word	0x00061a80

08000a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_I2C2_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_I2C2_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C2_Init+0x50>)
 8000aa6:	f001 f8f1 	bl	8001c8c <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 f8aa 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000298 	.word	0x20000298
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <MX_SPI2_Init+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000af8:	2208      	movs	r2, #8
 8000afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000b10:	220a      	movs	r2, #10
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_SPI2_Init+0x64>)
 8000b16:	f003 ff9b 	bl	8004a50 <HAL_SPI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f872 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002ec 	.word	0x200002ec
 8000b2c:	40003800 	.word	0x40003800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a24      	ldr	r2, [pc, #144]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_GPIO_Init+0xcc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	21f4      	movs	r1, #244	; 0xf4
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_GPIO_Init+0xd0>)
 8000bbc:	f001 f832 	bl	8001c24 <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0xd4>)
 8000bd4:	f000 fe72 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000bd8:	23f4      	movs	r3, #244	; 0xf4
 8000bda:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_GPIO_Init+0xd0>)
 8000bf0:	f000 fe64 	bl	80018bc <HAL_GPIO_Init>

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020800 	.word	0x40020800

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c1a:	f000 fa29 	bl	8001070 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c22:	2201      	movs	r2, #1
 8000c24:	2178      	movs	r1, #120	; 0x78
 8000c26:	485b      	ldr	r0, [pc, #364]	; (8000d94 <SSD1306_Init+0x180>)
 8000c28:	f001 fc98 	bl	800255c <HAL_I2C_IsDeviceReady>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e0a9      	b.n	8000d8a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c36:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c3c:	e002      	b.n	8000c44 <SSD1306_Init+0x30>
		p--;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f9      	bne.n	8000c3e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c4a:	22ae      	movs	r2, #174	; 0xae
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 fa8a 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c54:	2220      	movs	r2, #32
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	; 0x78
 8000c5a:	f000 fa85 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c5e:	2210      	movs	r2, #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 fa80 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c68:	22b0      	movs	r2, #176	; 0xb0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 fa7b 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c72:	22c8      	movs	r2, #200	; 0xc8
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 fa76 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	; 0x78
 8000c82:	f000 fa71 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c86:	2210      	movs	r2, #16
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	; 0x78
 8000c8c:	f000 fa6c 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f000 fa67 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c9a:	2281      	movs	r2, #129	; 0x81
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f000 fa62 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ca4:	22ff      	movs	r2, #255	; 0xff
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	; 0x78
 8000caa:	f000 fa5d 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cae:	22a1      	movs	r2, #161	; 0xa1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	; 0x78
 8000cb4:	f000 fa58 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cb8:	22a6      	movs	r2, #166	; 0xa6
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	; 0x78
 8000cbe:	f000 fa53 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000cc2:	22a8      	movs	r2, #168	; 0xa8
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 fa4e 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ccc:	223f      	movs	r2, #63	; 0x3f
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 fa49 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cd6:	22a4      	movs	r2, #164	; 0xa4
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 fa44 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ce0:	22d3      	movs	r2, #211	; 0xd3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 fa3f 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 fa3a 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cf4:	22d5      	movs	r2, #213	; 0xd5
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f000 fa35 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cfe:	22f0      	movs	r2, #240	; 0xf0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fa30 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d08:	22d9      	movs	r2, #217	; 0xd9
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fa2b 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d12:	2222      	movs	r2, #34	; 0x22
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fa26 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d1c:	22da      	movs	r2, #218	; 0xda
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fa21 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d26:	2212      	movs	r2, #18
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa1c 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d30:	22db      	movs	r2, #219	; 0xdb
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa17 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa12 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d44:	228d      	movs	r2, #141	; 0x8d
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa0d 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d4e:	2214      	movs	r2, #20
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa08 	bl	8001168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d58:	22af      	movs	r2, #175	; 0xaf
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 fa03 	bl	8001168 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d62:	222e      	movs	r2, #46	; 0x2e
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 f9fe 	bl	8001168 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f843 	bl	8000df8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d72:	f000 f813 	bl	8000d9c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SSD1306_Init+0x184>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SSD1306_Init+0x184>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SSD1306_Init+0x184>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000244 	.word	0x20000244
 8000d98:	2000074c 	.word	0x2000074c

08000d9c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e01d      	b.n	8000de4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	3b50      	subs	r3, #80	; 0x50
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	2078      	movs	r0, #120	; 0x78
 8000db4:	f000 f9d8 	bl	8001168 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2078      	movs	r0, #120	; 0x78
 8000dbe:	f000 f9d3 	bl	8001168 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	; 0x78
 8000dc8:	f000 f9ce 	bl	8001168 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <SSD1306_UpdateScreen+0x58>)
 8000dd2:	441a      	add	r2, r3
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	2078      	movs	r0, #120	; 0x78
 8000dda:	f000 f95f 	bl	800109c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	3301      	adds	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d9de      	bls.n	8000da8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000034c 	.word	0x2000034c

08000df8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <SSD1306_Fill+0x14>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <SSD1306_Fill+0x16>
 8000e0c:	23ff      	movs	r3, #255	; 0xff
 8000e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e12:	4619      	mov	r1, r3
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <SSD1306_Fill+0x2c>)
 8000e16:	f007 fc0b 	bl	8008630 <memset>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000034c 	.word	0x2000034c

08000e28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	460b      	mov	r3, r1
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	70fb      	strb	r3, [r7, #3]
	if (
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e3e:	d848      	bhi.n	8000ed2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	2b3f      	cmp	r3, #63	; 0x3f
 8000e44:	d845      	bhi.n	8000ed2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <SSD1306_DrawPixel+0xb8>)
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d11a      	bne.n	8000e98 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e62:	88fa      	ldrh	r2, [r7, #6]
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	01db      	lsls	r3, r3, #7
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <SSD1306_DrawPixel+0xbc>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b259      	sxtb	r1, r3
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	01db      	lsls	r3, r3, #7
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2c9      	uxtb	r1, r1
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <SSD1306_DrawPixel+0xbc>)
 8000e94:	54d1      	strb	r1, [r2, r3]
 8000e96:	e01d      	b.n	8000ed4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <SSD1306_DrawPixel+0xbc>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b259      	sxtb	r1, r3
 8000ec2:	88fa      	ldrh	r2, [r7, #6]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2c9      	uxtb	r1, r1
 8000ecc:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SSD1306_DrawPixel+0xbc>)
 8000ece:	54d1      	strb	r1, [r2, r3]
 8000ed0:	e000      	b.n	8000ed4 <SSD1306_DrawPixel+0xac>
		return;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000074c 	.word	0x2000074c
 8000ee4:	2000034c 	.word	0x2000034c

08000ee8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SSD1306_GotoXY+0x28>)
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <SSD1306_GotoXY+0x28>)
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	8053      	strh	r3, [r2, #2]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	2000074c 	.word	0x2000074c

08000f14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f24:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <SSD1306_Putc+0xfc>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
	if (
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	dc07      	bgt.n	8000f44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <SSD1306_Putc+0xfc>)
 8000f36:	885b      	ldrh	r3, [r3, #2]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f40:	2b3f      	cmp	r3, #63	; 0x3f
 8000f42:	dd01      	ble.n	8000f48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05e      	b.n	8001006 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e04b      	b.n	8000fe6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	3b20      	subs	r3, #32
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	7849      	ldrb	r1, [r1, #1]
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	440b      	add	r3, r1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	e030      	b.n	8000fd4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d010      	beq.n	8000fa4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SSD1306_Putc+0xfc>)
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b298      	uxth	r0, r3
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <SSD1306_Putc+0xfc>)
 8000f90:	885a      	ldrh	r2, [r3, #2]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff ff43 	bl	8000e28 <SSD1306_DrawPixel>
 8000fa2:	e014      	b.n	8000fce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <SSD1306_Putc+0xfc>)
 8000fa6:	881a      	ldrh	r2, [r3, #0]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b298      	uxth	r0, r3
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <SSD1306_Putc+0xfc>)
 8000fb2:	885a      	ldrh	r2, [r3, #2]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b299      	uxth	r1, r3
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf0c      	ite	eq
 8000fc2:	2301      	moveq	r3, #1
 8000fc4:	2300      	movne	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f7ff ff2d 	bl	8000e28 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d3c8      	bcc.n	8000f72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	461a      	mov	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d3ad      	bcc.n	8000f4e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <SSD1306_Putc+0xfc>)
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <SSD1306_Putc+0xfc>)
 8001002:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001004:	79fb      	ldrb	r3, [r7, #7]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000074c 	.word	0x2000074c

08001014 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	4613      	mov	r3, r2
 8001020:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001022:	e012      	b.n	800104a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	79fa      	ldrb	r2, [r7, #7]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff71 	bl	8000f14 <SSD1306_Putc>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d002      	beq.n	8001044 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	e008      	b.n	8001056 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1e8      	bne.n	8001024 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	781b      	ldrb	r3, [r3, #0]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fec8 	bl	8000df8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001068:	f7ff fe98 	bl	8000d9c <SSD1306_UpdateScreen>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <ssd1306_I2C_Init+0x28>)
 8001078:	607b      	str	r3, [r7, #4]
	while(p>0)
 800107a:	e002      	b.n	8001082 <ssd1306_I2C_Init+0x12>
		p--;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	0003d090 	.word	0x0003d090

0800109c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b0c7      	sub	sp, #284	; 0x11c
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010aa:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80010ae:	600a      	str	r2, [r1, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010ba:	4622      	mov	r2, r4
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010c2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010c6:	4602      	mov	r2, r0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010d2:	460a      	mov	r2, r1
 80010d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010e2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010f0:	e015      	b.n	800111e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80010f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010fa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	441a      	add	r2, r3
 8001102:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001106:	3301      	adds	r3, #1
 8001108:	7811      	ldrb	r1, [r2, #0]
 800110a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800110e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001112:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001114:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001118:	3301      	adds	r3, #1
 800111a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800111e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001122:	b29b      	uxth	r3, r3
 8001124:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001128:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800112c:	8812      	ldrh	r2, [r2, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d8df      	bhi.n	80010f2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001132:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001136:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b299      	uxth	r1, r3
 800113e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001142:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	200a      	movs	r0, #10
 8001152:	9000      	str	r0, [sp, #0]
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ssd1306_I2C_WriteMulti+0xc8>)
 8001156:	f000 fedd 	bl	8001f14 <HAL_I2C_Master_Transmit>
}
 800115a:	bf00      	nop
 800115c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	20000244 	.word	0x20000244

08001168 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	460b      	mov	r3, r1
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	4613      	mov	r3, r2
 8001178:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	b299      	uxth	r1, r3
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	230a      	movs	r3, #10
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2302      	movs	r3, #2
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <ssd1306_I2C_Write+0x38>)
 8001192:	f000 febf 	bl	8001f14 <HAL_I2C_Master_Transmit>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000244 	.word	0x20000244

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_I2C_MspInit+0xe8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12c      	bne.n	8001270 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001236:	2312      	movs	r3, #18
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001242:	2304      	movs	r3, #4
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4825      	ldr	r0, [pc, #148]	; (80012e4 <HAL_I2C_MspInit+0xf0>)
 800124e:	f000 fb35 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800126e:	e031      	b.n	80012d4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_I2C_MspInit+0xf4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001296:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012a8:	2304      	movs	r3, #4
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	480c      	ldr	r0, [pc, #48]	; (80012e4 <HAL_I2C_MspInit+0xf0>)
 80012b4:	f000 fb02 	bl	80018bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 80012c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_I2C_MspInit+0xec>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40005800 	.word	0x40005800

080012ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_SPI_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_SPI_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001346:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001358:	2305      	movs	r3, #5
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001364:	f000 faaa 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40003800 	.word	0x40003800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler+0x4>

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c8:	f000 f922 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <OTG_FS_IRQHandler+0x10>)
 80013d6:	f001 fe86 	bl	80030e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20001c30 	.word	0x20001c30

080013e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:
	}
	return len;
}

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f007 f890 	bl	80085dc <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000754 	.word	0x20000754
 80014f0:	20002268 	.word	0x20002268

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
  ldr r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001534:	4c0b      	ldr	r4, [pc, #44]	; (8001564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001542:	f7ff ffd7 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f007 f84f 	bl	80085e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f87f 	bl	800064c <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 800155c:	0800b030 	.word	0x0800b030
  ldr r2, =_sbss
 8001560:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001564:	20002268 	.word	0x20002268

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f94f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe00 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f967 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f92f 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000044 	.word	0x20000044
 8001608:	2000004c 	.word	0x2000004c
 800160c:	20000048 	.word	0x20000048

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000004c 	.word	0x2000004c
 8001634:	20000758 	.word	0x20000758

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000758 	.word	0x20000758

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000004c 	.word	0x2000004c

08001698 <__NVIC_SetPriorityGrouping>:
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e16b      	b.n	8001bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 815a 	bne.w	8001baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80b4 	beq.w	8001baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x314>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x318>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x222>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x31c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x21e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x320>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_Init+0x324>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x216>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x328>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x212>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x20a>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae90 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	4613      	mov	r3, r2
 8001c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	400b      	ands	r3, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	619a      	str	r2, [r3, #24]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e12b      	b.n	8001ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fa9e 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf0:	f002 fe9a 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a81      	ldr	r2, [pc, #516]	; (8001f00 <HAL_I2C_Init+0x274>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d807      	bhi.n	8001d10 <HAL_I2C_Init+0x84>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a80      	ldr	r2, [pc, #512]	; (8001f04 <HAL_I2C_Init+0x278>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	e006      	b.n	8001d1e <HAL_I2C_Init+0x92>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a7d      	ldr	r2, [pc, #500]	; (8001f08 <HAL_I2C_Init+0x27c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	bf94      	ite	ls
 8001d18:	2301      	movls	r3, #1
 8001d1a:	2300      	movhi	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0e7      	b.n	8001ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4a78      	ldr	r2, [pc, #480]	; (8001f0c <HAL_I2C_Init+0x280>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a6a      	ldr	r2, [pc, #424]	; (8001f00 <HAL_I2C_Init+0x274>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d802      	bhi.n	8001d60 <HAL_I2C_Init+0xd4>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	e009      	b.n	8001d74 <HAL_I2C_Init+0xe8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_I2C_Init+0x284>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	495c      	ldr	r1, [pc, #368]	; (8001f00 <HAL_I2C_Init+0x274>)
 8001d90:	428b      	cmp	r3, r1
 8001d92:	d819      	bhi.n	8001dc8 <HAL_I2C_Init+0x13c>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e59      	subs	r1, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001da8:	400b      	ands	r3, r1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_I2C_Init+0x138>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	e051      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e04f      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d111      	bne.n	8001df4 <HAL_I2C_Init+0x168>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e012      	b.n	8001e1a <HAL_I2C_Init+0x18e>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	0099      	lsls	r1, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Init+0x196>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e022      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10e      	bne.n	8001e48 <HAL_I2C_Init+0x1bc>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1e58      	subs	r0, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	440b      	add	r3, r1
 8001e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	e00f      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	6809      	ldr	r1, [r1, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6911      	ldr	r1, [r2, #16]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68d2      	ldr	r2, [r2, #12]
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	000186a0 	.word	0x000186a0
 8001f04:	001e847f 	.word	0x001e847f
 8001f08:	003d08ff 	.word	0x003d08ff
 8001f0c:	431bde83 	.word	0x431bde83
 8001f10:	10624dd3 	.word	0x10624dd3

08001f14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	817b      	strh	r3, [r7, #10]
 8001f24:	4613      	mov	r3, r2
 8001f26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff fb86 	bl	8001638 <HAL_GetTick>
 8001f2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	f040 80e0 	bne.w	80020fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2319      	movs	r3, #25
 8001f42:	2201      	movs	r2, #1
 8001f44:	4970      	ldr	r1, [pc, #448]	; (8002108 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fda0 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0d3      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_I2C_Master_Transmit+0x50>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0cc      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d007      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2221      	movs	r2, #33	; 0x21
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	893a      	ldrh	r2, [r7, #8]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_I2C_Master_Transmit+0x1f8>)
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fbf0 	bl	80027b8 <I2C_MasterRequestWrite>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e08d      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ff8:	e066      	b.n	80020c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fe1a 	bl	8002c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <HAL_I2C_Master_Transmit+0x188>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	6a39      	ldr	r1, [r7, #32]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fe0a 	bl	8002cba <I2C_WaitOnBTFFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d107      	bne.n	80020c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e01a      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d194      	bne.n	8001ffa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000

08002110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7ff fa85 	bl	8001638 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	f040 8208 	bne.w	800254e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2319      	movs	r3, #25
 8002144:	2201      	movs	r2, #1
 8002146:	497b      	ldr	r1, [pc, #492]	; (8002334 <HAL_I2C_Mem_Read+0x224>)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fc9f 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
 8002156:	e1fb      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Mem_Read+0x56>
 8002162:	2302      	movs	r3, #2
 8002164:	e1f4      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2222      	movs	r2, #34	; 0x22
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a5b      	ldr	r2, [pc, #364]	; (8002338 <HAL_I2C_Mem_Read+0x228>)
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ce:	88f8      	ldrh	r0, [r7, #6]
 80021d0:	893a      	ldrh	r2, [r7, #8]
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4603      	mov	r3, r0
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fb6c 	bl	80028bc <I2C_RequestMemoryRead>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1b0      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e184      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d11b      	bne.n	800225e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e164      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d11b      	bne.n	800229e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	e144      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022b4:	e138      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80f1 	bhi.w	80024a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d123      	bne.n	8002310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fd35 	bl	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e139      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230e:	e10b      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	2b02      	cmp	r3, #2
 8002316:	d14e      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	2200      	movs	r2, #0
 8002320:	4906      	ldr	r1, [pc, #24]	; (800233c <HAL_I2C_Mem_Read+0x22c>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fbb2 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e10e      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
 8002332:	bf00      	nop
 8002334:	00100002 	.word	0x00100002
 8002338:	ffff0000 	.word	0xffff0000
 800233c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023b4:	e0b8      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2200      	movs	r2, #0
 80023be:	4966      	ldr	r1, [pc, #408]	; (8002558 <HAL_I2C_Mem_Read+0x448>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb63 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0bf      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	494f      	ldr	r1, [pc, #316]	; (8002558 <HAL_I2C_Mem_Read+0x448>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb35 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e091      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a0:	e042      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fc48 	bl	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04c      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d118      	bne.n	8002528 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f aec2 	bne.w	80022b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010004 	.word	0x00010004

0800255c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff f864 	bl	8001638 <HAL_GetTick>
 8002570:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	f040 8111 	bne.w	80027a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2319      	movs	r3, #25
 800258a:	2201      	movs	r2, #1
 800258c:	4988      	ldr	r1, [pc, #544]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa7c 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e104      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_IsDeviceReady+0x50>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0fd      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d007      	beq.n	80025d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2224      	movs	r2, #36	; 0x24
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a70      	ldr	r2, [pc, #448]	; (80027b4 <HAL_I2C_IsDeviceReady+0x258>)
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa3a 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d103      	bne.n	8002636 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0b6      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002648:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe fff5 	bl	8001638 <HAL_GetTick>
 800264e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800267e:	e025      	b.n	80026cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002680:	f7fe ffda 	bl	8001638 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d302      	bcc.n	8002696 <HAL_I2C_IsDeviceReady+0x13a>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22a0      	movs	r2, #160	; 0xa0
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2ba0      	cmp	r3, #160	; 0xa0
 80026d6:	d005      	beq.n	80026e4 <HAL_I2C_IsDeviceReady+0x188>
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_I2C_IsDeviceReady+0x188>
 80026de:	7dbb      	ldrb	r3, [r7, #22]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0cd      	beq.n	8002680 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d129      	bne.n	800274e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4921      	ldr	r1, [pc, #132]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f9ae 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e036      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e02c      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002766:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	490f      	ldr	r1, [pc, #60]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f98a 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e012      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3301      	adds	r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	f4ff af32 	bcc.w	80025f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00100002 	.word	0x00100002
 80027b4:	ffff0000 	.word	0xffff0000

080027b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	460b      	mov	r3, r1
 80027c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d006      	beq.n	80027e2 <I2C_MasterRequestWrite+0x2a>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d003      	beq.n	80027e2 <I2C_MasterRequestWrite+0x2a>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e0:	d108      	bne.n	80027f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e00b      	b.n	800280c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d107      	bne.n	800280c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f937 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	d103      	bne.n	800283c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e035      	b.n	80028ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002848:	d108      	bne.n	800285c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	e01b      	b.n	8002894 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	11db      	asrs	r3, r3, #7
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0306 	and.w	r3, r3, #6
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f063 030f 	orn	r3, r3, #15
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <I2C_MasterRequestWrite+0xfc>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f95d 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e010      	b.n	80028ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <I2C_MasterRequestWrite+0x100>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f94d 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010008 	.word	0x00010008
 80028b8:	00010002 	.word	0x00010002

080028bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	460b      	mov	r3, r1
 80028d0:	813b      	strh	r3, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8c2 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	d103      	bne.n	8002926 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0aa      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002938:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	4952      	ldr	r1, [pc, #328]	; (8002a88 <I2C_RequestMemoryRead+0x1cc>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f8fa 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e097      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f964 	bl	8002c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e076      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e021      	b.n	80029e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f93e 	bl	8002c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d107      	bne.n	80029da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e050      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	6a39      	ldr	r1, [r7, #32]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f923 	bl	8002c38 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d107      	bne.n	8002a10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e035      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f82b 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d103      	bne.n	8002a54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e013      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	4906      	ldr	r1, [pc, #24]	; (8002a88 <I2C_RequestMemoryRead+0x1cc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f863 	bl	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00010002 	.word	0x00010002

08002a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	e025      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d021      	beq.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe fdc7 	bl	8001638 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d116      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e023      	b.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10d      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	e00c      	b.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d0b6      	beq.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b48:	e051      	b.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d123      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e046      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d021      	beq.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7fe fd45 	bl	8001638 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e020      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e00b      	b.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d18d      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c44:	e02d      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8ce 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02d      	b.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fceb 	bl	8001638 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d1ca      	bne.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc6:	e02d      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f88d 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e02d      	b.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d021      	beq.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fcaa 	bl	8001638 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e007      	b.n	8002d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d1ca      	bne.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d48:	e042      	b.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d119      	bne.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0210 	mvn.w	r2, #16
 8002d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e029      	b.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fc54 	bl	8001638 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d1b5      	bne.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d11b      	bne.n	8002e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e48:	b08f      	sub	sp, #60	; 0x3c
 8002e4a:	af0a      	add	r7, sp, #40	; 0x28
 8002e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e10f      	b.n	8003078 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f005 f89e 	bl	8007fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 ff77 	bl	8004d8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	687e      	ldr	r6, [r7, #4]
 8002ea4:	466d      	mov	r5, sp
 8002ea6:	f106 0410 	add.w	r4, r6, #16
 8002eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eba:	1d33      	adds	r3, r6, #4
 8002ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	f001 fe4f 	bl	8004b62 <USB_CoreInit>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0d0      	b.n	8003078 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 ff65 	bl	8004dac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e04a      	b.n	8002f7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333d      	adds	r3, #61	; 0x3d
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	333c      	adds	r3, #60	; 0x3c
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	b298      	uxth	r0, r3
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3342      	adds	r3, #66	; 0x42
 8002f24:	4602      	mov	r2, r0
 8002f26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	333f      	adds	r3, #63	; 0x3f
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3344      	adds	r3, #68	; 0x44
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3348      	adds	r3, #72	; 0x48
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3350      	adds	r3, #80	; 0x50
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3af      	bcc.n	8002ee8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e044      	b.n	8003018 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	3301      	adds	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d3b5      	bcc.n	8002f8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	687e      	ldr	r6, [r7, #4]
 800302a:	466d      	mov	r5, sp
 800302c:	f106 0410 	add.w	r4, r6, #16
 8003030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003038:	e894 0003 	ldmia.w	r4, {r0, r1}
 800303c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003040:	1d33      	adds	r3, r6, #4
 8003042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	f001 fefd 	bl	8004e44 <USB_DevInit>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e00d      	b.n	8003078 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 ff79 	bl	8005f68 <USB_DevDisconnect>

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003080 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_Start+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e020      	b.n	80030de <HAL_PCD_Start+0x5e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d109      	bne.n	80030c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d005      	beq.n	80030c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fe4f 	bl	8004d68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 ff29 	bl	8005f26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030e6:	b590      	push	{r4, r7, lr}
 80030e8:	b08d      	sub	sp, #52	; 0x34
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 ffe7 	bl	80060d0 <USB_GetMode>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 839d 	bne.w	8003844 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f002 ff4b 	bl	8005faa <USB_ReadInterrupts>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8393 	beq.w	8003842 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f002 ff42 	bl	8005faa <USB_ReadInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d107      	bne.n	8003140 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f002 0202 	and.w	r2, r2, #2
 800313e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 ff30 	bl	8005faa <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	d161      	bne.n	8003218 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0210 	bic.w	r2, r2, #16
 8003162:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0c5b      	lsrs	r3, r3, #17
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b02      	cmp	r3, #2
 800318e:	d124      	bne.n	80031da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d035      	beq.n	8003208 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	6a38      	ldr	r0, [r7, #32]
 80031b0:	f002 fd67 	bl	8005c82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c0:	441a      	add	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d2:	441a      	add	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e016      	b.n	8003208 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	0c5b      	lsrs	r3, r3, #17
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d110      	bne.n	8003208 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ec:	2208      	movs	r2, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	6a38      	ldr	r0, [r7, #32]
 80031f2:	f002 fd46 	bl	8005c82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003202:	441a      	add	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0210 	orr.w	r2, r2, #16
 8003216:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f002 fec4 	bl	8005faa <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800322c:	d16e      	bne.n	800330c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 feca 	bl	8005fd0 <USB_ReadDevAllOutEpInterrupt>
 800323c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800323e:	e062      	b.n	8003306 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d057      	beq.n	80032fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f002 feef 	bl	8006038 <USB_ReadDevOutEPInterrupt>
 800325a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	2301      	movs	r3, #1
 8003276:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fdb0 	bl	8003de0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	461a      	mov	r2, r3
 8003298:	2308      	movs	r3, #8
 800329a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800329c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 feaa 	bl	8003ff8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2310      	movs	r3, #16
 80032be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2320      	movs	r3, #32
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d199      	bne.n	8003240 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fe4a 	bl	8005faa <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003320:	f040 80c0 	bne.w	80034a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fe6b 	bl	8006004 <USB_ReadDevAllInEpInterrupt>
 800332e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003334:	e0b2      	b.n	800349c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a7 	beq.w	8003490 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fe91 	bl	8006074 <USB_ReadDevInEPInterrupt>
 8003352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d057      	beq.n	800340e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	2201      	movs	r2, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	69f9      	ldr	r1, [r7, #28]
 800337a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337e:	4013      	ands	r3, r2
 8003380:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	2301      	movs	r3, #1
 8003392:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d132      	bne.n	8003402 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3348      	adds	r3, #72	; 0x48
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4403      	add	r3, r0
 80033bc:	3344      	adds	r3, #68	; 0x44
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4419      	add	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4403      	add	r3, r0
 80033d0:	3348      	adds	r3, #72	; 0x48
 80033d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <HAL_PCD_IRQHandler+0x31c>
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3350      	adds	r3, #80	; 0x50
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033fa:	461a      	mov	r2, r3
 80033fc:	2101      	movs	r1, #1
 80033fe:	f002 fe99 	bl	8006134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f004 fe54 	bl	80080b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	461a      	mov	r2, r3
 8003426:	2308      	movs	r3, #8
 8003428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	461a      	mov	r2, r3
 8003442:	2310      	movs	r3, #16
 8003444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	461a      	mov	r2, r3
 800345e:	2340      	movs	r3, #64	; 0x40
 8003460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fc1b 	bl	8003cc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f af49 	bne.w	8003336 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 fd7e 	bl	8005faa <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b8:	d122      	bne.n	8003500 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fe26 	bl	8004134 <HAL_PCDEx_LPM_Callback>
 80034e8:	e002      	b.n	80034f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f004 fe5a 	bl	80081a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fd50 	bl	8005faa <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003514:	d112      	bne.n	800353c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f004 fe16 	bl	8008158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800353a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fd32 	bl	8005faa <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	f040 80c7 	bne.w	80036e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2110      	movs	r1, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fdcc 	bl	800510c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	e056      	b.n	8003628 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800358c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003620:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	3301      	adds	r3, #1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362e:	429a      	cmp	r2, r3
 8003630:	d3a3      	bcc.n	800357a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003640:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003644:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f043 030b 	orr.w	r3, r3, #11
 8003662:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003674:	f043 030b 	orr.w	r3, r3, #11
 8003678:	6453      	str	r3, [r2, #68]	; 0x44
 800367a:	e015      	b.n	80036a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800368e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003692:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a2:	f043 030b 	orr.w	r3, r3, #11
 80036a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036cc:	461a      	mov	r2, r3
 80036ce:	f002 fd31 	bl	8006134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fc5f 	bl	8005faa <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d124      	bne.n	8003742 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fcf5 	bl	80060ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fd5d 	bl	80051c6 <USB_GetDevSpeed>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681c      	ldr	r4, [r3, #0]
 8003718:	f001 f97a 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 800371c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4620      	mov	r0, r4
 8003728:	f001 fa7c 	bl	8004c24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f004 fcea 	bl	8008106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003740:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fc2f 	bl	8005faa <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d10a      	bne.n	800376c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f004 fcc7 	bl	80080ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f002 0208 	and.w	r2, r2, #8
 800376a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fc1a 	bl	8005faa <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003780:	d10f      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f004 fd29 	bl	80081e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fbff 	bl	8005faa <USB_ReadInterrupts>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b6:	d10f      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f004 fcfc 	bl	80081c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fbe4 	bl	8005faa <USB_ReadInterrupts>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d10a      	bne.n	8003804 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f004 fd0a 	bl	8008208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f002 fbce 	bl	8005faa <USB_ReadInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d115      	bne.n	8003844 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f004 fcfa 	bl	8008224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e000      	b.n	8003844 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003842:	bf00      	nop
    }
  }
}
 8003844:	3734      	adds	r7, #52	; 0x34
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}

0800384a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_SetAddress+0x1a>
 8003860:	2302      	movs	r3, #2
 8003862:	e013      	b.n	800388c <HAL_PCD_SetAddress+0x42>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f002 fb2c 	bl	8005eda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	70fb      	strb	r3, [r7, #3]
 80038a6:	460b      	mov	r3, r1
 80038a8:	803b      	strh	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da0f      	bge.n	80038da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	705a      	strb	r2, [r3, #1]
 80038d8:	e00f      	b.n	80038fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	3304      	adds	r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003906:	883a      	ldrh	r2, [r7, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	78ba      	ldrb	r2, [r7, #2]
 8003910:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003924:	78bb      	ldrb	r3, [r7, #2]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d102      	bne.n	8003930 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_PCD_EP_Open+0xaa>
 800393a:	2302      	movs	r3, #2
 800393c:	e00e      	b.n	800395c <HAL_PCD_EP_Open+0xc8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fc5f 	bl	8005210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800395a:	7afb      	ldrb	r3, [r7, #11]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	da0f      	bge.n	8003998 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	3338      	adds	r3, #56	; 0x38
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	705a      	strb	r2, [r3, #1]
 8003996:	e00f      	b.n	80039b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_PCD_EP_Close+0x6e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e00e      	b.n	80039f0 <HAL_PCD_EP_Close+0x8c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fc9d 	bl	8005320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	460b      	mov	r3, r1
 8003a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	f001 ff78 	bl	8005960 <USB_EP0StartXfer>
 8003a70:	e008      	b.n	8003a84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	f001 fd2a 	bl	80054d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ab0:	681b      	ldr	r3, [r3, #0]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	460b      	mov	r3, r1
 8003acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3338      	adds	r3, #56	; 0x38
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2201      	movs	r2, #1
 8003afc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afe:	7afb      	ldrb	r3, [r7, #11]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	f001 ff16 	bl	8005960 <USB_EP0StartXfer>
 8003b34:	e008      	b.n	8003b48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	f001 fcc8 	bl	80054d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d901      	bls.n	8003b70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e050      	b.n	8003c12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da0f      	bge.n	8003b98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3338      	adds	r3, #56	; 0x38
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	705a      	strb	r2, [r3, #1]
 8003b96:	e00d      	b.n	8003bb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3304      	adds	r3, #4
 8003bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_PCD_EP_SetStall+0x82>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e01e      	b.n	8003c12 <HAL_PCD_EP_SetStall+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 f8a5 	bl	8005d32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	b2d9      	uxtb	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c02:	461a      	mov	r2, r3
 8003c04:	f002 fa96 	bl	8006134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d901      	bls.n	8003c38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e042      	b.n	8003cbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da0f      	bge.n	8003c60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	3338      	adds	r3, #56	; 0x38
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	705a      	strb	r2, [r3, #1]
 8003c5e:	e00f      	b.n	8003c80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	3304      	adds	r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_EP_ClrStall+0x86>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e00e      	b.n	8003cbe <HAL_PCD_EP_ClrStall+0xa4>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 f8ad 	bl	8005e0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3338      	adds	r3, #56	; 0x38
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3304      	adds	r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d901      	bls.n	8003cfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06c      	b.n	8003dd8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d902      	bls.n	8003d1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3303      	adds	r3, #3
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d22:	e02b      	b.n	8003d7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3303      	adds	r3, #3
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68d9      	ldr	r1, [r3, #12]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f001 ff51 	bl	8005c06 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	441a      	add	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d809      	bhi.n	8003da6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d203      	bcs.n	8003da6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1be      	bne.n	8003d24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d811      	bhi.n	8003dd6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	2201      	movs	r2, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	6939      	ldr	r1, [r7, #16]
 8003dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 80a0 	bne.w	8003f58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a72      	ldr	r2, [pc, #456]	; (8003ff0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f240 80dd 	bls.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80d7 	beq.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	6093      	str	r3, [r2, #8]
 8003e4c:	e0cb      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2320      	movs	r3, #32
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	e0bc      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80b7 	bne.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d90f      	bls.n	8003ea0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	461a      	mov	r2, r3
 8003e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9c:	6093      	str	r3, [r2, #8]
 8003e9e:	e0a2      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ec6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4419      	add	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f42:	461a      	mov	r2, r3
 8003f44:	2101      	movs	r1, #1
 8003f46:	f002 f8f5 	bl	8006134 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f004 f895 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 8003f56:	e046      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d124      	bne.n	8003faa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7c:	6093      	str	r3, [r2, #8]
 8003f7e:	e032      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	2320      	movs	r3, #32
 8003f9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f004 f86c 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 8003fa8:	e01d      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d114      	bne.n	8003fda <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d108      	bne.n	8003fda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f002 f8ad 	bl	8006134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f004 f84d 	bl	8008080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	4f54300a 	.word	0x4f54300a
 8003ff4:	4f54310a 	.word	0x4f54310a

08003ff8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	333c      	adds	r3, #60	; 0x3c
 8004010:	3304      	adds	r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <PCD_EP_OutSetupPacket_int+0x88>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d90e      	bls.n	800404c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	461a      	mov	r2, r3
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f004 f805 	bl	800805c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <PCD_EP_OutSetupPacket_int+0x88>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d90c      	bls.n	8004074 <PCD_EP_OutSetupPacket_int+0x7c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800406c:	461a      	mov	r2, r3
 800406e:	2101      	movs	r1, #1
 8004070:	f002 f860 	bl	8006134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	4f54300a 	.word	0x4f54300a

08004084 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
 8004090:	4613      	mov	r3, r2
 8004092:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040a2:	883b      	ldrh	r3, [r7, #0]
 80040a4:	0419      	lsls	r1, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
 80040b0:	e028      	b.n	8004104 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4413      	add	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e00d      	b.n	80040e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3340      	adds	r3, #64	; 0x40
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	3301      	adds	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3ec      	bcc.n	80040c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040ec:	883b      	ldrh	r3, [r7, #0]
 80040ee:	0418      	lsls	r0, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4302      	orrs	r2, r0
 80040fc:	3340      	adds	r3, #64	; 0x40
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e267      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d075      	beq.n	8004256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCC_OscConfig+0x240>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b85      	ldr	r3, [pc, #532]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417e:	2b08      	cmp	r3, #8
 8004180:	d112      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4b82      	ldr	r3, [pc, #520]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	4b7e      	ldr	r3, [pc, #504]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05b      	beq.n	8004254 <HAL_RCC_OscConfig+0x108>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d157      	bne.n	8004254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e242      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x74>
 80041b2:	4b76      	ldr	r3, [pc, #472]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a75      	ldr	r2, [pc, #468]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e01d      	b.n	80041fc <HAL_RCC_OscConfig+0xb0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x98>
 80041ca:	4b70      	ldr	r3, [pc, #448]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6f      	ldr	r2, [pc, #444]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b6d      	ldr	r3, [pc, #436]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6c      	ldr	r2, [pc, #432]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xb0>
 80041e4:	4b69      	ldr	r3, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a68      	ldr	r2, [pc, #416]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fa18 	bl	8001638 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fa14 	bl	8001638 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e207      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xc0>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd fa04 	bl	8001638 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fa00 	bl	8001638 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1f3      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004246:	4b51      	ldr	r3, [pc, #324]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0xe8>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d063      	beq.n	800432a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426e:	4b47      	ldr	r3, [pc, #284]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004276:	2b08      	cmp	r3, #8
 8004278:	d11c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCC_OscConfig+0x240>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d116      	bne.n	80042b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x152>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d001      	beq.n	800429e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e1c7      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4937      	ldr	r1, [pc, #220]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	e03a      	b.n	800432a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042bc:	4b34      	ldr	r3, [pc, #208]	; (8004390 <HAL_RCC_OscConfig+0x244>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd f9b9 	bl	8001638 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ca:	f7fd f9b5 	bl	8001638 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e1a8      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4925      	ldr	r1, [pc, #148]	; (800438c <HAL_RCC_OscConfig+0x240>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x244>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd f998 	bl	8001638 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430c:	f7fd f994 	bl	8001638 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e187      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431e:	4b1b      	ldr	r3, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d036      	beq.n	80043a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_RCC_OscConfig+0x248>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd f978 	bl	8001638 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd f974 	bl	8001638 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e167      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_OscConfig+0x240>)
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x200>
 800436a:	e01b      	b.n	80043a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_OscConfig+0x248>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004372:	f7fd f961 	bl	8001638 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004378:	e00e      	b.n	8004398 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800437a:	f7fd f95d 	bl	8001638 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d907      	bls.n	8004398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e150      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
 800438c:	40023800 	.word	0x40023800
 8004390:	42470000 	.word	0x42470000
 8004394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ea      	bne.n	800437a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8097 	beq.w	80044e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b6:	4b81      	ldr	r3, [pc, #516]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	4b7d      	ldr	r3, [pc, #500]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a7c      	ldr	r2, [pc, #496]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
 80043d2:	4b7a      	ldr	r3, [pc, #488]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	4b77      	ldr	r3, [pc, #476]	; (80045c0 <HAL_RCC_OscConfig+0x474>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d118      	bne.n	8004420 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ee:	4b74      	ldr	r3, [pc, #464]	; (80045c0 <HAL_RCC_OscConfig+0x474>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a73      	ldr	r2, [pc, #460]	; (80045c0 <HAL_RCC_OscConfig+0x474>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fa:	f7fd f91d 	bl	8001638 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004402:	f7fd f919 	bl	8001638 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e10c      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCC_OscConfig+0x474>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ea>
 8004428:	4b64      	ldr	r3, [pc, #400]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4a63      	ldr	r2, [pc, #396]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	; 0x70
 8004434:	e01c      	b.n	8004470 <HAL_RCC_OscConfig+0x324>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x30c>
 800443e:	4b5f      	ldr	r3, [pc, #380]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a5e      	ldr	r2, [pc, #376]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	4b5c      	ldr	r3, [pc, #368]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a5b      	ldr	r2, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e00b      	b.n	8004470 <HAL_RCC_OscConfig+0x324>
 8004458:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a57      	ldr	r2, [pc, #348]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
 8004464:	4b55      	ldr	r3, [pc, #340]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a54      	ldr	r2, [pc, #336]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 800446a:	f023 0304 	bic.w	r3, r3, #4
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fd f8de 	bl	8001638 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd f8da 	bl	8001638 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0cb      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	4b49      	ldr	r3, [pc, #292]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ee      	beq.n	8004480 <HAL_RCC_OscConfig+0x334>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a4:	f7fd f8c8 	bl	8001638 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd f8c4 	bl	8001638 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0b5      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	4b3e      	ldr	r3, [pc, #248]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ee      	bne.n	80044ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d4:	4b39      	ldr	r3, [pc, #228]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	4a38      	ldr	r2, [pc, #224]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80044da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80a1 	beq.w	800462c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ea:	4b34      	ldr	r3, [pc, #208]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d05c      	beq.n	80045b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d141      	bne.n	8004582 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCC_OscConfig+0x478>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd f898 	bl	8001638 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd f894 	bl	8001638 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e087      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	3b01      	subs	r3, #1
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	491b      	ldr	r1, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x478>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fd f86d 	bl	8001638 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd f869 	bl	8001638 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e05c      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x416>
 8004580:	e054      	b.n	800462c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_RCC_OscConfig+0x478>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fd f856 	bl	8001638 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd f852 	bl	8001638 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e045      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_OscConfig+0x470>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x444>
 80045ae:	e03d      	b.n	800462c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e038      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40007000 	.word	0x40007000
 80045c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x4ec>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d028      	beq.n	8004628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d121      	bne.n	8004628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d11a      	bne.n	8004628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045f8:	4013      	ands	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004600:	4293      	cmp	r3, r2
 8004602:	d111      	bne.n	8004628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	3b01      	subs	r3, #1
 8004612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d107      	bne.n	8004628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800

0800463c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0cc      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b68      	ldr	r3, [pc, #416]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d90c      	bls.n	8004678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0b8      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004690:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a58      	ldr	r2, [pc, #352]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800469a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a8:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	494d      	ldr	r1, [pc, #308]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d044      	beq.n	800475c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d119      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e07f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e06f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e067      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4934      	ldr	r1, [pc, #208]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800472c:	f7fc ff84 	bl	8001638 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fc ff80 	bl	8001638 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e04f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d20c      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e032      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4916      	ldr	r1, [pc, #88]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	490e      	ldr	r1, [pc, #56]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047c2:	f000 f821 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	490a      	ldr	r1, [pc, #40]	; (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	5ccb      	ldrb	r3, [r1, r3]
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fc fee4 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023c00 	.word	0x40023c00
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800af70 	.word	0x0800af70
 8004800:	20000044 	.word	0x20000044
 8004804:	20000048 	.word	0x20000048

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800480c:	b094      	sub	sp, #80	; 0x50
 800480e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
 8004814:	2300      	movs	r3, #0
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	2300      	movs	r3, #0
 800481a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004820:	4b79      	ldr	r3, [pc, #484]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b08      	cmp	r3, #8
 800482a:	d00d      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x40>
 800482c:	2b08      	cmp	r3, #8
 800482e:	f200 80e1 	bhi.w	80049f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x34>
 8004836:	2b04      	cmp	r3, #4
 8004838:	d003      	beq.n	8004842 <HAL_RCC_GetSysClockFreq+0x3a>
 800483a:	e0db      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b73      	ldr	r3, [pc, #460]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x204>)
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004840:	e0db      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004842:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004846:	e0d8      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004848:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004850:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d063      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	2200      	movs	r2, #0
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
 8004868:	63fa      	str	r2, [r7, #60]	; 0x3c
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800487a:	4622      	mov	r2, r4
 800487c:	462b      	mov	r3, r5
 800487e:	f04f 0000 	mov.w	r0, #0
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	0159      	lsls	r1, r3, #5
 8004888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800488c:	0150      	lsls	r0, r2, #5
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4621      	mov	r1, r4
 8004894:	1a51      	subs	r1, r2, r1
 8004896:	6139      	str	r1, [r7, #16]
 8004898:	4629      	mov	r1, r5
 800489a:	eb63 0301 	sbc.w	r3, r3, r1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ac:	4659      	mov	r1, fp
 80048ae:	018b      	lsls	r3, r1, #6
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048b6:	4651      	mov	r1, sl
 80048b8:	018a      	lsls	r2, r1, #6
 80048ba:	4651      	mov	r1, sl
 80048bc:	ebb2 0801 	subs.w	r8, r2, r1
 80048c0:	4659      	mov	r1, fp
 80048c2:	eb63 0901 	sbc.w	r9, r3, r1
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048da:	4690      	mov	r8, r2
 80048dc:	4699      	mov	r9, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	eb18 0303 	adds.w	r3, r8, r3
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	462b      	mov	r3, r5
 80048e8:	eb49 0303 	adc.w	r3, r9, r3
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	2200      	movs	r2, #0
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
 8004912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004918:	f7fb fcb2 	bl	8000280 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004924:	e058      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	2200      	movs	r2, #0
 800492e:	4618      	mov	r0, r3
 8004930:	4611      	mov	r1, r2
 8004932:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	0159      	lsls	r1, r3, #5
 800494e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004952:	0150      	lsls	r0, r2, #5
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4641      	mov	r1, r8
 800495a:	ebb2 0a01 	subs.w	sl, r2, r1
 800495e:	4649      	mov	r1, r9
 8004960:	eb63 0b01 	sbc.w	fp, r3, r1
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004970:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004974:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004978:	ebb2 040a 	subs.w	r4, r2, sl
 800497c:	eb63 050b 	sbc.w	r5, r3, fp
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	00eb      	lsls	r3, r5, #3
 800498a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	4643      	mov	r3, r8
 8004996:	18e3      	adds	r3, r4, r3
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	464b      	mov	r3, r9
 800499c:	eb45 0303 	adc.w	r3, r5, r3
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ae:	4629      	mov	r1, r5
 80049b0:	028b      	lsls	r3, r1, #10
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b8:	4621      	mov	r1, r4
 80049ba:	028a      	lsls	r2, r1, #10
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	2200      	movs	r2, #0
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	61fa      	str	r2, [r7, #28]
 80049c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049cc:	f7fb fc58 	bl	8000280 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4613      	mov	r3, r2
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x200>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	3301      	adds	r3, #1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049f2:	e002      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x204>)
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3750      	adds	r7, #80	; 0x50
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	00f42400 	.word	0x00f42400

08004a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000044 	.word	0x20000044

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a2c:	f7ff fff0 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0a9b      	lsrs	r3, r3, #10
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800af80 	.word	0x0800af80

08004a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07b      	b.n	8004b5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d009      	beq.n	8004a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fc22 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	f003 0104 	and.w	r1, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0210 	and.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b62:	b084      	sub	sp, #16
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	f107 001c 	add.w	r0, r7, #28
 8004b70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d122      	bne.n	8004bc0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f001 fb1b 	bl	80061f0 <USB_CoreReset>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e01a      	b.n	8004bf6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fb0f 	bl	80061f0 <USB_CoreReset>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
 8004be8:	e005      	b.n	8004bf6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10b      	bne.n	8004c14 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f043 0206 	orr.w	r2, r3, #6
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c20:	b004      	add	sp, #16
 8004c22:	4770      	bx	lr

08004c24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d165      	bne.n	8004d04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a41      	ldr	r2, [pc, #260]	; (8004d40 <USB_SetTurnaroundTime+0x11c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d906      	bls.n	8004c4e <USB_SetTurnaroundTime+0x2a>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a40      	ldr	r2, [pc, #256]	; (8004d44 <USB_SetTurnaroundTime+0x120>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d202      	bcs.n	8004c4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c48:	230f      	movs	r3, #15
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e062      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <USB_SetTurnaroundTime+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d306      	bcc.n	8004c64 <USB_SetTurnaroundTime+0x40>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a3b      	ldr	r2, [pc, #236]	; (8004d48 <USB_SetTurnaroundTime+0x124>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d202      	bcs.n	8004c64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c5e:	230e      	movs	r3, #14
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e057      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <USB_SetTurnaroundTime+0x124>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d306      	bcc.n	8004c7a <USB_SetTurnaroundTime+0x56>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a37      	ldr	r2, [pc, #220]	; (8004d4c <USB_SetTurnaroundTime+0x128>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d202      	bcs.n	8004c7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c74:	230d      	movs	r3, #13
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e04c      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <USB_SetTurnaroundTime+0x128>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d306      	bcc.n	8004c90 <USB_SetTurnaroundTime+0x6c>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <USB_SetTurnaroundTime+0x12c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d802      	bhi.n	8004c90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e041      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4a2f      	ldr	r2, [pc, #188]	; (8004d50 <USB_SetTurnaroundTime+0x12c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d906      	bls.n	8004ca6 <USB_SetTurnaroundTime+0x82>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a2e      	ldr	r2, [pc, #184]	; (8004d54 <USB_SetTurnaroundTime+0x130>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d802      	bhi.n	8004ca6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ca0:	230b      	movs	r3, #11
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e036      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <USB_SetTurnaroundTime+0x130>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d906      	bls.n	8004cbc <USB_SetTurnaroundTime+0x98>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a29      	ldr	r2, [pc, #164]	; (8004d58 <USB_SetTurnaroundTime+0x134>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d802      	bhi.n	8004cbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	e02b      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <USB_SetTurnaroundTime+0x134>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d906      	bls.n	8004cd2 <USB_SetTurnaroundTime+0xae>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <USB_SetTurnaroundTime+0x138>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d202      	bcs.n	8004cd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ccc:	2309      	movs	r3, #9
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e020      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <USB_SetTurnaroundTime+0x138>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d306      	bcc.n	8004ce8 <USB_SetTurnaroundTime+0xc4>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <USB_SetTurnaroundTime+0x13c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d802      	bhi.n	8004ce8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e015      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <USB_SetTurnaroundTime+0x13c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d906      	bls.n	8004cfe <USB_SetTurnaroundTime+0xda>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <USB_SetTurnaroundTime+0x140>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d202      	bcs.n	8004cfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004cf8:	2307      	movs	r3, #7
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e00a      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004cfe:	2306      	movs	r3, #6
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e007      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d0a:	2309      	movs	r3, #9
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e001      	b.n	8004d14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d10:	2309      	movs	r3, #9
 8004d12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	029b      	lsls	r3, r3, #10
 8004d28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	00d8acbf 	.word	0x00d8acbf
 8004d44:	00e4e1c0 	.word	0x00e4e1c0
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	01067380 	.word	0x01067380
 8004d50:	011a499f 	.word	0x011a499f
 8004d54:	01312cff 	.word	0x01312cff
 8004d58:	014ca43f 	.word	0x014ca43f
 8004d5c:	016e3600 	.word	0x016e3600
 8004d60:	01a6ab1f 	.word	0x01a6ab1f
 8004d64:	01e84800 	.word	0x01e84800

08004d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d115      	bne.n	8004dfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f7fc fc38 	bl	8001650 <HAL_Delay>
      ms++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 f972 	bl	80060d0 <USB_GetMode>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d01e      	beq.n	8004e30 <USB_SetCurrentMode+0x84>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b31      	cmp	r3, #49	; 0x31
 8004df6:	d9f0      	bls.n	8004dda <USB_SetCurrentMode+0x2e>
 8004df8:	e01a      	b.n	8004e30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d115      	bne.n	8004e2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f7fc fc1f 	bl	8001650 <HAL_Delay>
      ms++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 f959 	bl	80060d0 <USB_GetMode>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <USB_SetCurrentMode+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b31      	cmp	r3, #49	; 0x31
 8004e28:	d9f0      	bls.n	8004e0c <USB_SetCurrentMode+0x60>
 8004e2a:	e001      	b.n	8004e30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e005      	b.n	8004e3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b32      	cmp	r3, #50	; 0x32
 8004e34:	d101      	bne.n	8004e3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e009      	b.n	8004e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3340      	adds	r3, #64	; 0x40
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0e      	cmp	r3, #14
 8004e7c:	d9f2      	bls.n	8004e64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11c      	bne.n	8004ebe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e92:	f043 0302 	orr.w	r3, r3, #2
 8004e96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
 8004ebc:	e00b      	b.n	8004ed6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004edc:	461a      	mov	r2, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	4619      	mov	r1, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	680b      	ldr	r3, [r1, #0]
 8004ef4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d10c      	bne.n	8004f16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f02:	2100      	movs	r1, #0
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f945 	bl	8005194 <USB_SetDevSpeed>
 8004f0a:	e008      	b.n	8004f1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f940 	bl	8005194 <USB_SetDevSpeed>
 8004f14:	e003      	b.n	8004f1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f16:	2103      	movs	r1, #3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f93b 	bl	8005194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f1e:	2110      	movs	r1, #16
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f8f3 	bl	800510c <USB_FlushTxFifo>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f90f 	bl	8005154 <USB_FlushRxFifo>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	461a      	mov	r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	461a      	mov	r2, r3
 8004f54:	2300      	movs	r3, #0
 8004f56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2300      	movs	r3, #0
 8004f62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e043      	b.n	8004ff2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f80:	d118      	bne.n	8004fb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e013      	b.n	8004fc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e008      	b.n	8004fc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d3b7      	bcc.n	8004f6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e043      	b.n	8005088 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005016:	d118      	bne.n	800504a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e013      	b.n	800505c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e008      	b.n	800505c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	461a      	mov	r2, r3
 800507c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005080:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3301      	adds	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d3b7      	bcc.n	8005000 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0210 	orr.w	r2, r3, #16
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <USB_DevInit+0x2c4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f043 0208 	orr.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	f043 0304 	orr.w	r3, r3, #4
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005104:	b004      	add	sp, #16
 8005106:	4770      	bx	lr
 8005108:	803c3800 	.word	0x803c3800

0800510c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <USB_FlushTxFifo+0x44>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e006      	b.n	8005144 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d0f1      	beq.n	8005126 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	00030d40 	.word	0x00030d40

08005154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2210      	movs	r2, #16
 8005164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <USB_FlushRxFifo+0x3c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e006      	b.n	8005184 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b10      	cmp	r3, #16
 8005180:	d0f1      	beq.n	8005166 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	00030d40 	.word	0x00030d40

08005194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0306 	and.w	r3, r3, #6
 80051de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]
 80051ea:	e00a      	b.n	8005202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d002      	beq.n	80051f8 <USB_GetDevSpeed+0x32>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d102      	bne.n	80051fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051f8:	2302      	movs	r3, #2
 80051fa:	75fb      	strb	r3, [r7, #23]
 80051fc:	e001      	b.n	8005202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051fe:	230f      	movs	r3, #15
 8005200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d13a      	bne.n	80052a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	b29b      	uxth	r3, r3
 8005244:	68f9      	ldr	r1, [r7, #12]
 8005246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524a:	4313      	orrs	r3, r2
 800524c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d155      	bne.n	8005310 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	78db      	ldrb	r3, [r3, #3]
 800527e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	059b      	lsls	r3, r3, #22
 8005286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005288:	4313      	orrs	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e036      	b.n	8005310 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	2101      	movs	r1, #1
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11a      	bne.n	8005310 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	78db      	ldrb	r3, [r3, #3]
 80052f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052f6:	430b      	orrs	r3, r1
 80052f8:	4313      	orrs	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d161      	bne.n	8005400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005352:	d11f      	bne.n	8005394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b4:	4013      	ands	r3, r2
 80053b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d8:	4013      	ands	r3, r2
 80053da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	0159      	lsls	r1, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	440b      	add	r3, r1
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	4619      	mov	r1, r3
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <USB_DeactivateEndpoint+0x1b0>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
 80053fe:	e060      	b.n	80054c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005416:	d11f      	bne.n	8005458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f303 	lsl.w	r3, r1, r3
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	43db      	mvns	r3, r3
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005478:	4013      	ands	r3, r2
 800547a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	43db      	mvns	r3, r3
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4013      	ands	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	0159      	lsls	r1, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	440b      	add	r3, r1
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	4619      	mov	r1, r3
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <USB_DeactivateEndpoint+0x1b4>)
 80054be:	4013      	ands	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	ec337800 	.word	0xec337800
 80054d4:	eff37800 	.word	0xeff37800

080054d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 815c 	bne.w	80057b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d132      	bne.n	8005568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	0cdb      	lsrs	r3, r3, #19
 8005562:	04db      	lsls	r3, r3, #19
 8005564:	6113      	str	r3, [r2, #16]
 8005566:	e074      	b.n	8005652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005582:	0cdb      	lsrs	r3, r3, #19
 8005584:	04db      	lsls	r3, r3, #19
 8005586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	440b      	add	r3, r1
 80055c4:	1e59      	subs	r1, r3, #1
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055d0:	4b9d      	ldr	r3, [pc, #628]	; (8005848 <USB_EPStartXfer+0x370>)
 80055d2:	400b      	ands	r3, r1
 80055d4:	69b9      	ldr	r1, [r7, #24]
 80055d6:	0148      	lsls	r0, r1, #5
 80055d8:	69f9      	ldr	r1, [r7, #28]
 80055da:	4401      	add	r1, r0
 80055dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fa:	69b9      	ldr	r1, [r7, #24]
 80055fc:	0148      	lsls	r0, r1, #5
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	4401      	add	r1, r0
 8005602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d11f      	bne.n	8005652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d14b      	bne.n	80056f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d128      	bne.n	80056ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d110      	bne.n	80056ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e00f      	b.n	80056ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e12f      	b.n	8005950 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800570e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	78db      	ldrb	r3, [r3, #3]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d015      	beq.n	8005744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8117 	beq.w	8005950 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	2101      	movs	r1, #1
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573e:	4313      	orrs	r3, r2
 8005740:	634b      	str	r3, [r1, #52]	; 0x34
 8005742:	e105      	b.n	8005950 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d110      	bne.n	8005776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	e00f      	b.n	8005796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68d9      	ldr	r1, [r3, #12]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781a      	ldrb	r2, [r3, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	b298      	uxth	r0, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fa2b 	bl	8005c06 <USB_WritePacket>
 80057b0:	e0ce      	b.n	8005950 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	0cdb      	lsrs	r3, r3, #19
 80057ce:	04db      	lsls	r3, r3, #19
 80057d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d126      	bne.n	800584c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	0148      	lsls	r0, r1, #5
 8005818:	69f9      	ldr	r1, [r7, #28]
 800581a:	4401      	add	r1, r0
 800581c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005820:	4313      	orrs	r3, r2
 8005822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005842:	6113      	str	r3, [r2, #16]
 8005844:	e036      	b.n	80058b4 <USB_EPStartXfer+0x3dc>
 8005846:	bf00      	nop
 8005848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4413      	add	r3, r2
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	8afb      	ldrh	r3, [r7, #22]
 8005872:	04d9      	lsls	r1, r3, #19
 8005874:	4b39      	ldr	r3, [pc, #228]	; (800595c <USB_EPStartXfer+0x484>)
 8005876:	400b      	ands	r3, r1
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	0148      	lsls	r0, r1, #5
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	4401      	add	r1, r0
 8005880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005884:	4313      	orrs	r3, r2
 8005886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	8af9      	ldrh	r1, [r7, #22]
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	0148      	lsls	r0, r1, #5
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	4401      	add	r1, r0
 80058ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058b0:	4313      	orrs	r3, r2
 80058b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10d      	bne.n	80058d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	68d9      	ldr	r1, [r3, #12]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	460a      	mov	r2, r1
 80058d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d128      	bne.n	8005930 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d110      	bne.n	8005910 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00f      	b.n	8005930 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	1ff80000 	.word	0x1ff80000

08005960 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	f040 80cd 	bne.w	8005b1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d132      	bne.n	80059f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	0cdb      	lsrs	r3, r3, #19
 80059ea:	04db      	lsls	r3, r3, #19
 80059ec:	6113      	str	r3, [r2, #16]
 80059ee:	e04e      	b.n	8005a8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	0cdb      	lsrs	r3, r3, #19
 8005a0c:	04db      	lsls	r3, r3, #19
 8005a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d903      	bls.n	8005a48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7e:	6939      	ldr	r1, [r7, #16]
 8005a80:	0148      	lsls	r0, r1, #5
 8005a82:	6979      	ldr	r1, [r7, #20]
 8005a84:	4401      	add	r1, r0
 8005a86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d11e      	bne.n	8005ad2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e092      	b.n	8005bf8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005af0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d07e      	beq.n	8005bf8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b16:	4313      	orrs	r3, r2
 8005b18:	634b      	str	r3, [r1, #52]	; 0x34
 8005b1a:	e06d      	b.n	8005bf8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b36:	0cdb      	lsrs	r3, r3, #19
 8005b38:	04db      	lsls	r3, r3, #19
 8005b3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba6:	6939      	ldr	r1, [r7, #16]
 8005ba8:	0148      	lsls	r0, r1, #5
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	4401      	add	r1, r0
 8005bae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d10d      	bne.n	8005bd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	68d9      	ldr	r1, [r3, #12]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	460a      	mov	r2, r1
 8005bd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b089      	sub	sp, #36	; 0x24
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	4611      	mov	r1, r2
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d123      	bne.n	8005c74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c2c:	88bb      	ldrh	r3, [r7, #4]
 8005c2e:	3303      	adds	r3, #3
 8005c30:	089b      	lsrs	r3, r3, #2
 8005c32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e018      	b.n	8005c6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	031a      	lsls	r2, r3, #12
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	461a      	mov	r2, r3
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d3e2      	bcc.n	8005c3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3724      	adds	r7, #36	; 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b08b      	sub	sp, #44	; 0x2c
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	623b      	str	r3, [r7, #32]
 8005cac:	e014      	b.n	8005cd8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	3301      	adds	r3, #1
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	6a3a      	ldr	r2, [r7, #32]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3e6      	bcc.n	8005cae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01e      	beq.n	8005d24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f107 0310 	add.w	r3, r7, #16
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	701a      	strb	r2, [r3, #0]
      i++;
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	3301      	adds	r3, #1
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d18:	8bfb      	ldrh	r3, [r7, #30]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d1e:	8bfb      	ldrh	r3, [r7, #30]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ea      	bne.n	8005cfa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	372c      	adds	r7, #44	; 0x2c
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d12c      	bne.n	8005da8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db12      	blt.n	8005d86 <USB_EPSetStall+0x54>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00f      	beq.n	8005d86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e02b      	b.n	8005e00 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	db12      	blt.n	8005de0 <USB_EPSetStall+0xae>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d128      	bne.n	8005e7c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	78db      	ldrb	r3, [r3, #3]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d003      	beq.n	8005e5a <USB_EPClearStall+0x4c>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	78db      	ldrb	r3, [r3, #3]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d138      	bne.n	8005ecc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e027      	b.n	8005ecc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d003      	beq.n	8005eac <USB_EPClearStall+0x9e>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d10f      	bne.n	8005ecc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005efc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f54:	f023 0302 	bic.w	r3, r3, #2
 8005f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f96:	f043 0302 	orr.w	r3, r3, #2
 8005f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	0c1b      	lsrs	r3, r3, #16
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4013      	ands	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	b29b      	uxth	r3, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006066:	68bb      	ldr	r3, [r7, #8]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	01db      	lsls	r3, r3, #7
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4013      	ands	r3, r2
 80060c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060c2:	68bb      	ldr	r3, [r7, #8]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0301 	and.w	r3, r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	333c      	adds	r3, #60	; 0x3c
 800614a:	3304      	adds	r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <USB_EP0_OutStart+0xb8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d90a      	bls.n	800616e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d101      	bne.n	800616e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e037      	b.n	80061de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800618c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 0318 	orr.w	r3, r3, #24
 80061a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d10f      	bne.n	80061dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	4f54300a 	.word	0x4f54300a

080061f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <USB_CoreReset+0x60>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e01a      	b.n	8006242 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	daf3      	bge.n	80061fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f043 0201 	orr.w	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <USB_CoreReset+0x60>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d901      	bls.n	8006234 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e006      	b.n	8006242 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b01      	cmp	r3, #1
 800623e:	d0f1      	beq.n	8006224 <USB_CoreReset+0x34>

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	00030d40 	.word	0x00030d40

08006254 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006260:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006264:	f002 f976 	bl	8008554 <USBD_static_malloc>
 8006268:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006278:	2302      	movs	r3, #2
 800627a:	e066      	b.n	800634a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	7c1b      	ldrb	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d119      	bne.n	80062c0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800628c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006290:	2202      	movs	r2, #2
 8006292:	2181      	movs	r1, #129	; 0x81
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f002 f83a 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a4:	2202      	movs	r2, #2
 80062a6:	2101      	movs	r1, #1
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f002 f830 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2210      	movs	r2, #16
 80062ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80062be:	e016      	b.n	80062ee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c0:	2340      	movs	r3, #64	; 0x40
 80062c2:	2202      	movs	r2, #2
 80062c4:	2181      	movs	r1, #129	; 0x81
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f002 f821 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d2:	2340      	movs	r3, #64	; 0x40
 80062d4:	2202      	movs	r2, #2
 80062d6:	2101      	movs	r1, #1
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f002 f818 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2210      	movs	r2, #16
 80062ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062ee:	2308      	movs	r3, #8
 80062f0:	2203      	movs	r2, #3
 80062f2:	2182      	movs	r1, #130	; 0x82
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 f80a 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7c1b      	ldrb	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800632a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800632e:	2101      	movs	r1, #1
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f002 f8db 	bl	80084ec <USBD_LL_PrepareReceive>
 8006336:	e007      	b.n	8006348 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	2101      	movs	r1, #1
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f002 f8d2 	bl	80084ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800635e:	2181      	movs	r1, #129	; 0x81
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fffa 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800636c:	2101      	movs	r1, #1
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fff3 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800637c:	2182      	movs	r1, #130	; 0x82
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 ffeb 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 f8de 	bl	8008570 <USBD_static_free>
    pdev->pClassData = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e0af      	b.n	8006550 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d03f      	beq.n	800647c <USBD_CDC_Setup+0xb4>
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	f040 809f 	bne.w	8006540 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	88db      	ldrh	r3, [r3, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d02e      	beq.n	8006468 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	b25b      	sxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	da16      	bge.n	8006442 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006420:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	88d2      	ldrh	r2, [r2, #6]
 8006426:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	88db      	ldrh	r3, [r3, #6]
 800642c:	2b07      	cmp	r3, #7
 800642e:	bf28      	it	cs
 8006430:	2307      	movcs	r3, #7
 8006432:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	89fa      	ldrh	r2, [r7, #14]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fb33 	bl	8007aa6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006440:	e085      	b.n	800654e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785a      	ldrb	r2, [r3, #1]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	88db      	ldrh	r3, [r3, #6]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006458:	6939      	ldr	r1, [r7, #16]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	461a      	mov	r2, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fb4c 	bl	8007afe <USBD_CtlPrepareRx>
      break;
 8006466:	e072      	b.n	800654e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	7850      	ldrb	r0, [r2, #1]
 8006474:	2200      	movs	r2, #0
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	4798      	blx	r3
      break;
 800647a:	e068      	b.n	800654e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b0b      	cmp	r3, #11
 8006482:	d852      	bhi.n	800652a <USBD_CDC_Setup+0x162>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <USBD_CDC_Setup+0xc4>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064bd 	.word	0x080064bd
 8006490:	08006539 	.word	0x08006539
 8006494:	0800652b 	.word	0x0800652b
 8006498:	0800652b 	.word	0x0800652b
 800649c:	0800652b 	.word	0x0800652b
 80064a0:	0800652b 	.word	0x0800652b
 80064a4:	0800652b 	.word	0x0800652b
 80064a8:	0800652b 	.word	0x0800652b
 80064ac:	0800652b 	.word	0x0800652b
 80064b0:	0800652b 	.word	0x0800652b
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	08006511 	.word	0x08006511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d107      	bne.n	80064d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064c8:	f107 030a 	add.w	r3, r7, #10
 80064cc:	2202      	movs	r2, #2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fae8 	bl	8007aa6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d6:	e032      	b.n	800653e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fa72 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	75fb      	strb	r3, [r7, #23]
          break;
 80064e4:	e02b      	b.n	800653e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f2:	f107 030d 	add.w	r3, r7, #13
 80064f6:	2201      	movs	r2, #1
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fad3 	bl	8007aa6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006500:	e01d      	b.n	800653e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fa5d 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800650a:	2303      	movs	r3, #3
 800650c:	75fb      	strb	r3, [r7, #23]
          break;
 800650e:	e016      	b.n	800653e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d00f      	beq.n	800653c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fa50 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006528:	e008      	b.n	800653c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fa49 	bl	80079c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	75fb      	strb	r3, [r7, #23]
          break;
 8006536:	e002      	b.n	800653e <USBD_CDC_Setup+0x176>
          break;
 8006538:	bf00      	nop
 800653a:	e008      	b.n	800654e <USBD_CDC_Setup+0x186>
          break;
 800653c:	bf00      	nop
      }
      break;
 800653e:	e006      	b.n	800654e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fa3e 	bl	80079c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006548:	2303      	movs	r3, #3
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	bf00      	nop
  }

  return (uint8_t)ret;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800656a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006576:	2303      	movs	r3, #3
 8006578:	e04f      	b.n	800661a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006580:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3318      	adds	r3, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d029      	beq.n	80065ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3318      	adds	r3, #24
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	78f9      	ldrb	r1, [r7, #3]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	460b      	mov	r3, r1
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4403      	add	r3, r0
 80065b8:	3344      	adds	r3, #68	; 0x44
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d110      	bne.n	80065ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3318      	adds	r3, #24
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065de:	78f9      	ldrb	r1, [r7, #3]
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 ff60 	bl	80084aa <USBD_LL_Transmit>
 80065ea:	e015      	b.n	8006618 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006634:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	e015      	b.n	8006670 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 ff70 	bl	800852e <USBD_LL_GetRxDataSize>
 800664e:	4602      	mov	r2, r0
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800666a:	4611      	mov	r1, r2
 800666c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006686:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	e01b      	b.n	80066ca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d015      	beq.n	80066c8 <USBD_CDC_EP0_RxReady+0x50>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066a2:	2bff      	cmp	r3, #255	; 0xff
 80066a4:	d010      	beq.n	80066c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80066b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066bc:	b292      	uxth	r2, r2
 80066be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2243      	movs	r2, #67	; 0x43
 80066e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80066e2:	4b03      	ldr	r3, [pc, #12]	; (80066f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	200000d8 	.word	0x200000d8

080066f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2243      	movs	r2, #67	; 0x43
 8006700:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006702:	4b03      	ldr	r3, [pc, #12]	; (8006710 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000094 	.word	0x20000094

08006714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2243      	movs	r2, #67	; 0x43
 8006720:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	2000011c 	.word	0x2000011c

08006734 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	220a      	movs	r2, #10
 8006740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006742:	4b03      	ldr	r3, [pc, #12]	; (8006750 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000050 	.word	0x20000050

08006754 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e004      	b.n	8006772 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800677e:	b480      	push	{r7}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006790:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	e008      	b.n	80067ae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e004      	b.n	80067e0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800680a:	2303      	movs	r3, #3
 800680c:	e01a      	b.n	8006844 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006814:	2b00      	cmp	r3, #0
 8006816:	d114      	bne.n	8006842 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2201      	movs	r2, #1
 800681c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006836:	2181      	movs	r1, #129	; 0x81
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fe36 	bl	80084aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006842:	7bfb      	ldrb	r3, [r7, #15]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	e016      	b.n	8006898 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7c1b      	ldrb	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687c:	2101      	movs	r1, #1
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fe34 	bl	80084ec <USBD_LL_PrepareReceive>
 8006884:	e007      	b.n	8006896 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	2101      	movs	r1, #1
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 fe2b 	bl	80084ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80068b4:	4817      	ldr	r0, [pc, #92]	; (8006914 <USBD_Init+0x74>)
 80068b6:	f001 fec3 	bl	8008640 <iprintf>
 80068ba:	4817      	ldr	r0, [pc, #92]	; (8006918 <USBD_Init+0x78>)
 80068bc:	f001 fec0 	bl	8008640 <iprintf>
 80068c0:	200a      	movs	r0, #10
 80068c2:	f001 fed5 	bl	8008670 <putchar>
#endif
    return USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e01f      	b.n	800690a <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	79fa      	ldrb	r2, [r7, #7]
 80068fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fc9e 	bl	8008240 <USBD_LL_Init>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08009a28 	.word	0x08009a28
 8006918:	08009a30 	.word	0x08009a30

0800691c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006930:	4812      	ldr	r0, [pc, #72]	; (800697c <USBD_RegisterClass+0x60>)
 8006932:	f001 fe85 	bl	8008640 <iprintf>
 8006936:	4812      	ldr	r0, [pc, #72]	; (8006980 <USBD_RegisterClass+0x64>)
 8006938:	f001 fe82 	bl	8008640 <iprintf>
 800693c:	200a      	movs	r0, #10
 800693e:	f001 fe97 	bl	8008670 <putchar>
#endif
    return USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	e016      	b.n	8006974 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f107 020e 	add.w	r2, r7, #14
 8006966:	4610      	mov	r0, r2
 8006968:	4798      	blx	r3
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	08009a28 	.word	0x08009a28
 8006980:	08009a48 	.word	0x08009a48

08006984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fca3 	bl	80082d8 <USBD_LL_Start>
 8006992:	4603      	mov	r3, r0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	4611      	mov	r1, r2
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 ff8f 	bl	8007950 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a40:	461a      	mov	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d01a      	beq.n	8006a8c <USBD_LL_SetupStage+0x72>
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d822      	bhi.n	8006aa0 <USBD_LL_SetupStage+0x86>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <USBD_LL_SetupStage+0x4a>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d00a      	beq.n	8006a78 <USBD_LL_SetupStage+0x5e>
 8006a62:	e01d      	b.n	8006aa0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa61 	bl	8006f34 <USBD_StdDevReq>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
      break;
 8006a76:	e020      	b.n	8006aba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fac5 	bl	8007010 <USBD_StdItfReq>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8a:	e016      	b.n	8006aba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb04 	bl	80070a2 <USBD_StdEPReq>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9e:	e00c      	b.n	8006aba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fc72 	bl	8008398 <USBD_LL_StallEP>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab8:	bf00      	nop
  }

  return ret;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d138      	bne.n	8006b4a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ade:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d14a      	bne.n	8006b80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d913      	bls.n	8006b1e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bf28      	it	cs
 8006b10:	4613      	movcs	r3, r2
 8006b12:	461a      	mov	r2, r3
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 f80e 	bl	8007b38 <USBD_CtlContinueRx>
 8006b1c:	e030      	b.n	8006b80 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d10b      	bne.n	8006b42 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f809 	bl	8007b5a <USBD_CtlSendStatus>
 8006b48:	e01a      	b.n	8006b80 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d114      	bne.n	8006b80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	7afa      	ldrb	r2, [r7, #11]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	4798      	blx	r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	e000      	b.n	8006b82 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	460b      	mov	r3, r1
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d16b      	bne.n	8006c76 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d156      	bne.n	8006c5c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d914      	bls.n	8006be4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 ff83 	bl	8007adc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f001 fc85 	bl	80084ec <USBD_LL_PrepareReceive>
 8006be2:	e03b      	b.n	8006c5c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d11c      	bne.n	8006c2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d316      	bcc.n	8006c2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d20f      	bcs.n	8006c2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 ff64 	bl	8007adc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f001 fc62 	bl	80084ec <USBD_LL_PrepareReceive>
 8006c28:	e018      	b.n	8006c5c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d10b      	bne.n	8006c4e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f001 fba1 	bl	8008398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 ff92 	bl	8007b80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d122      	bne.n	8006cac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fe98 	bl	800699c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c74:	e01a      	b.n	8006cac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d114      	bne.n	8006cac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	7afa      	ldrb	r2, [r7, #11]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	e000      	b.n	8006cae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e02f      	b.n	8006d4a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00f      	beq.n	8006d14 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6852      	ldr	r2, [r2, #4]
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	4611      	mov	r1, r2
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 faf7 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2240      	movs	r2, #64	; 0x40
 8006d2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	2200      	movs	r2, #0
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fae9 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2240      	movs	r2, #64	; 0x40
 8006d46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d106      	bne.n	8006dc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e012      	b.n	8006e0a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d10b      	bne.n	8006e08 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e014      	b.n	8006e56 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d10d      	bne.n	8006e54 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e014      	b.n	8006ea2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d10d      	bne.n	8006ea0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6852      	ldr	r2, [r2, #4]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	4611      	mov	r1, r2
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
  }

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f16:	8a3b      	ldrh	r3, [r7, #16]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b21a      	sxth	r2, r3
 8006f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f26:	89fb      	ldrh	r3, [r7, #14]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d005      	beq.n	8006f5a <USBD_StdDevReq+0x26>
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d853      	bhi.n	8006ffa <USBD_StdDevReq+0xc6>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <USBD_StdDevReq+0x3a>
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d14f      	bne.n	8006ffa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e04a      	b.n	8007004 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	d83b      	bhi.n	8006fee <USBD_StdDevReq+0xba>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <USBD_StdDevReq+0x48>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006fe5 	.word	0x08006fe5
 8006f84:	08006fef 	.word	0x08006fef
 8006f88:	08006fdb 	.word	0x08006fdb
 8006f8c:	08006fef 	.word	0x08006fef
 8006f90:	08006faf 	.word	0x08006faf
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006fef 	.word	0x08006fef
 8006f9c:	08006fc7 	.word	0x08006fc7
 8006fa0:	08006fb9 	.word	0x08006fb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9de 	bl	8007368 <USBD_GetDescriptor>
          break;
 8006fac:	e024      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb43 	bl	800763c <USBD_SetAddress>
          break;
 8006fb6:	e01f      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb82 	bl	80076c4 <USBD_SetConfig>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fc4:	e018      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc21 	bl	8007810 <USBD_GetConfig>
          break;
 8006fce:	e013      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc52 	bl	800787c <USBD_GetStatus>
          break;
 8006fd8:	e00e      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc81 	bl	80078e4 <USBD_SetFeature>
          break;
 8006fe2:	e009      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fc90 	bl	800790c <USBD_ClrFeature>
          break;
 8006fec:	e004      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fce7 	bl	80079c4 <USBD_CtlError>
          break;
 8006ff6:	bf00      	nop
      }
      break;
 8006ff8:	e004      	b.n	8007004 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fce1 	bl	80079c4 <USBD_CtlError>
      break;
 8007002:	bf00      	nop
  }

  return ret;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d005      	beq.n	8007036 <USBD_StdItfReq+0x26>
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d82f      	bhi.n	800708e <USBD_StdItfReq+0x7e>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <USBD_StdItfReq+0x26>
 8007032:	2b20      	cmp	r3, #32
 8007034:	d12b      	bne.n	800708e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703c:	b2db      	uxtb	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	2b02      	cmp	r3, #2
 8007042:	d81d      	bhi.n	8007080 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	889b      	ldrh	r3, [r3, #4]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d813      	bhi.n	8007076 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	88db      	ldrh	r3, [r3, #6]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d110      	bne.n	800708a <USBD_StdItfReq+0x7a>
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fd73 	bl	8007b5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007074:	e009      	b.n	800708a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fca3 	bl	80079c4 <USBD_CtlError>
          break;
 800707e:	e004      	b.n	800708a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc9e 	bl	80079c4 <USBD_CtlError>
          break;
 8007088:	e000      	b.n	800708c <USBD_StdItfReq+0x7c>
          break;
 800708a:	bf00      	nop
      }
      break;
 800708c:	e004      	b.n	8007098 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc97 	bl	80079c4 <USBD_CtlError>
      break;
 8007096:	bf00      	nop
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	889b      	ldrh	r3, [r3, #4]
 80070b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d007      	beq.n	80070d2 <USBD_StdEPReq+0x30>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	f200 8145 	bhi.w	8007352 <USBD_StdEPReq+0x2b0>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <USBD_StdEPReq+0x44>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	f040 8140 	bne.w	8007352 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
      break;
 80070e4:	e13a      	b.n	800735c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	785b      	ldrb	r3, [r3, #1]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d007      	beq.n	80070fe <USBD_StdEPReq+0x5c>
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f300 8129 	bgt.w	8007346 <USBD_StdEPReq+0x2a4>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d07f      	beq.n	80071f8 <USBD_StdEPReq+0x156>
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d03c      	beq.n	8007176 <USBD_StdEPReq+0xd4>
 80070fc:	e123      	b.n	8007346 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d002      	beq.n	8007110 <USBD_StdEPReq+0x6e>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d016      	beq.n	800713c <USBD_StdEPReq+0x9a>
 800710e:	e02c      	b.n	800716a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <USBD_StdEPReq+0x90>
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d00a      	beq.n	8007132 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f939 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f935 	bl	8008398 <USBD_LL_StallEP>
 800712e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007130:	e020      	b.n	8007174 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc45 	bl	80079c4 <USBD_CtlError>
              break;
 800713a:	e01b      	b.n	8007174 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	885b      	ldrh	r3, [r3, #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10e      	bne.n	8007162 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <USBD_StdEPReq+0xc0>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d008      	beq.n	8007162 <USBD_StdEPReq+0xc0>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	88db      	ldrh	r3, [r3, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f91b 	bl	8008398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fcf9 	bl	8007b5a <USBD_CtlSendStatus>

              break;
 8007168:	e004      	b.n	8007174 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc29 	bl	80079c4 <USBD_CtlError>
              break;
 8007172:	bf00      	nop
          }
          break;
 8007174:	e0ec      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d002      	beq.n	8007188 <USBD_StdEPReq+0xe6>
 8007182:	2b03      	cmp	r3, #3
 8007184:	d016      	beq.n	80071b4 <USBD_StdEPReq+0x112>
 8007186:	e030      	b.n	80071ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <USBD_StdEPReq+0x108>
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b80      	cmp	r3, #128	; 0x80
 8007192:	d00a      	beq.n	80071aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f8fd 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f8f9 	bl	8008398 <USBD_LL_StallEP>
 80071a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a8:	e025      	b.n	80071f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc09 	bl	80079c4 <USBD_CtlError>
              break;
 80071b2:	e020      	b.n	80071f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11b      	bne.n	80071f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f903 	bl	80083d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fcc2 	bl	8007b5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbe9 	bl	80079c4 <USBD_CtlError>
              break;
 80071f2:	e000      	b.n	80071f6 <USBD_StdEPReq+0x154>
              break;
 80071f4:	bf00      	nop
          }
          break;
 80071f6:	e0ab      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d002      	beq.n	800720a <USBD_StdEPReq+0x168>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d032      	beq.n	800726e <USBD_StdEPReq+0x1cc>
 8007208:	e097      	b.n	800733a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <USBD_StdEPReq+0x17e>
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b80      	cmp	r3, #128	; 0x80
 8007214:	d004      	beq.n	8007220 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fbd3 	bl	80079c4 <USBD_CtlError>
                break;
 800721e:	e091      	b.n	8007344 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da0b      	bge.n	8007240 <USBD_StdEPReq+0x19e>
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	3310      	adds	r3, #16
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	3304      	adds	r3, #4
 800723e:	e00b      	b.n	8007258 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4413      	add	r3, r2
 8007256:	3304      	adds	r3, #4
 8007258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2202      	movs	r2, #2
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc1d 	bl	8007aa6 <USBD_CtlSendData>
              break;
 800726c:	e06a      	b.n	8007344 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800726e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da11      	bge.n	800729a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3324      	adds	r3, #36	; 0x24
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d117      	bne.n	80072c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb96 	bl	80079c4 <USBD_CtlError>
                  break;
 8007298:	e054      	b.n	8007344 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb83 	bl	80079c4 <USBD_CtlError>
                  break;
 80072be:	e041      	b.n	8007344 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da0b      	bge.n	80072e0 <USBD_StdEPReq+0x23e>
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	3310      	adds	r3, #16
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	3304      	adds	r3, #4
 80072de:	e00b      	b.n	80072f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	3304      	adds	r3, #4
 80072f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <USBD_StdEPReq+0x264>
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d103      	bne.n	800730e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e00e      	b.n	800732c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 f87e 	bl	8008414 <USBD_LL_IsStallEP>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e002      	b.n	800732c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2202      	movs	r2, #2
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fbb7 	bl	8007aa6 <USBD_CtlSendData>
              break;
 8007338:	e004      	b.n	8007344 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb41 	bl	80079c4 <USBD_CtlError>
              break;
 8007342:	bf00      	nop
          }
          break;
 8007344:	e004      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb3b 	bl	80079c4 <USBD_CtlError>
          break;
 800734e:	bf00      	nop
      }
      break;
 8007350:	e004      	b.n	800735c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb35 	bl	80079c4 <USBD_CtlError>
      break;
 800735a:	bf00      	nop
  }

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	2b06      	cmp	r3, #6
 800738a:	f200 8128 	bhi.w	80075de <USBD_GetDescriptor+0x276>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <USBD_GetDescriptor+0x2c>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b1 	.word	0x080073b1
 8007398:	080073c9 	.word	0x080073c9
 800739c:	08007409 	.word	0x08007409
 80073a0:	080075df 	.word	0x080075df
 80073a4:	080075df 	.word	0x080075df
 80073a8:	0800757f 	.word	0x0800757f
 80073ac:	080075ab 	.word	0x080075ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	7c12      	ldrb	r2, [r2, #16]
 80073bc:	f107 0108 	add.w	r1, r7, #8
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	60f8      	str	r0, [r7, #12]
      break;
 80073c6:	e112      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	7c1b      	ldrb	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f107 0208 	add.w	r2, r7, #8
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
 80073e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	2202      	movs	r2, #2
 80073e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073ea:	e100      	b.n	80075ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f107 0208 	add.w	r2, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3301      	adds	r3, #1
 8007402:	2202      	movs	r2, #2
 8007404:	701a      	strb	r2, [r3, #0]
      break;
 8007406:	e0f2      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	885b      	ldrh	r3, [r3, #2]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b05      	cmp	r3, #5
 8007410:	f200 80ac 	bhi.w	800756c <USBD_GetDescriptor+0x204>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBD_GetDescriptor+0xb4>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007435 	.word	0x08007435
 8007420:	08007469 	.word	0x08007469
 8007424:	0800749d 	.word	0x0800749d
 8007428:	080074d1 	.word	0x080074d1
 800742c:	08007505 	.word	0x08007505
 8007430:	08007539 	.word	0x08007539
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007456:	e091      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fab2 	bl	80079c4 <USBD_CtlError>
            err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
          break;
 8007466:	e089      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748a:	e077      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa98 	bl	80079c4 <USBD_CtlError>
            err++;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	3301      	adds	r3, #1
 8007498:	72fb      	strb	r3, [r7, #11]
          break;
 800749a:	e06f      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7c12      	ldrb	r2, [r2, #16]
 80074b4:	f107 0108 	add.w	r1, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074be:	e05d      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa7e 	bl	80079c4 <USBD_CtlError>
            err++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	3301      	adds	r3, #1
 80074cc:	72fb      	strb	r3, [r7, #11]
          break;
 80074ce:	e055      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7c12      	ldrb	r2, [r2, #16]
 80074e8:	f107 0108 	add.w	r1, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f2:	e043      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa64 	bl	80079c4 <USBD_CtlError>
            err++;
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	3301      	adds	r3, #1
 8007500:	72fb      	strb	r3, [r7, #11]
          break;
 8007502:	e03b      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007526:	e029      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa4a 	bl	80079c4 <USBD_CtlError>
            err++;
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	3301      	adds	r3, #1
 8007534:	72fb      	strb	r3, [r7, #11]
          break;
 8007536:	e021      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755a:	e00f      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa30 	bl	80079c4 <USBD_CtlError>
            err++;
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	3301      	adds	r3, #1
 8007568:	72fb      	strb	r3, [r7, #11]
          break;
 800756a:	e007      	b.n	800757c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa28 	bl	80079c4 <USBD_CtlError>
          err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800757a:	bf00      	nop
      }
      break;
 800757c:	e037      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7c1b      	ldrb	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	f107 0208 	add.w	r2, r7, #8
 8007592:	4610      	mov	r0, r2
 8007594:	4798      	blx	r3
 8007596:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007598:	e029      	b.n	80075ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa11 	bl	80079c4 <USBD_CtlError>
        err++;
 80075a2:	7afb      	ldrb	r3, [r7, #11]
 80075a4:	3301      	adds	r3, #1
 80075a6:	72fb      	strb	r3, [r7, #11]
      break;
 80075a8:	e021      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7c1b      	ldrb	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f107 0208 	add.w	r2, r7, #8
 80075be:	4610      	mov	r0, r2
 80075c0:	4798      	blx	r3
 80075c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	2207      	movs	r2, #7
 80075ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075cc:	e00f      	b.n	80075ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9f7 	bl	80079c4 <USBD_CtlError>
        err++;
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	3301      	adds	r3, #1
 80075da:	72fb      	strb	r3, [r7, #11]
      break;
 80075dc:	e007      	b.n	80075ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9ef 	bl	80079c4 <USBD_CtlError>
      err++;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	3301      	adds	r3, #1
 80075ea:	72fb      	strb	r3, [r7, #11]
      break;
 80075ec:	bf00      	nop
  }

  if (err != 0U)
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11e      	bne.n	8007632 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d016      	beq.n	800762a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075fc:	893b      	ldrh	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88da      	ldrh	r2, [r3, #6]
 8007606:	893b      	ldrh	r3, [r7, #8]
 8007608:	4293      	cmp	r3, r2
 800760a:	bf28      	it	cs
 800760c:	4613      	movcs	r3, r2
 800760e:	b29b      	uxth	r3, r3
 8007610:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007612:	893b      	ldrh	r3, [r7, #8]
 8007614:	461a      	mov	r2, r3
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa44 	bl	8007aa6 <USBD_CtlSendData>
 800761e:	e009      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9ce 	bl	80079c4 <USBD_CtlError>
 8007628:	e004      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa95 	bl	8007b5a <USBD_CtlSendStatus>
 8007630:	e000      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    return;
 8007632:	bf00      	nop
  }
}
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop

0800763c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	889b      	ldrh	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d131      	bne.n	80076b2 <USBD_SetAddress+0x76>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d12d      	bne.n	80076b2 <USBD_SetAddress+0x76>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	885b      	ldrh	r3, [r3, #2]
 800765a:	2b7f      	cmp	r3, #127	; 0x7f
 800765c:	d829      	bhi.n	80076b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007668:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d104      	bne.n	8007680 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9a3 	bl	80079c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	e01d      	b.n	80076bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 feed 	bl	800846c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa61 	bl	8007b5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	e009      	b.n	80076bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b0:	e004      	b.n	80076bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f985 	bl	80079c4 <USBD_CtlError>
  }
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	4b4c      	ldr	r3, [pc, #304]	; (800780c <USBD_SetConfig+0x148>)
 80076da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076dc:	4b4b      	ldr	r3, [pc, #300]	; (800780c <USBD_SetConfig+0x148>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d905      	bls.n	80076f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f96c 	bl	80079c4 <USBD_CtlError>
    return USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e088      	b.n	8007802 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d002      	beq.n	8007702 <USBD_SetConfig+0x3e>
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d025      	beq.n	800774c <USBD_SetConfig+0x88>
 8007700:	e071      	b.n	80077e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007702:	4b42      	ldr	r3, [pc, #264]	; (800780c <USBD_SetConfig+0x148>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01c      	beq.n	8007744 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800770a:	4b40      	ldr	r3, [pc, #256]	; (800780c <USBD_SetConfig+0x148>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007714:	4b3d      	ldr	r3, [pc, #244]	; (800780c <USBD_SetConfig+0x148>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff f949 	bl	80069b2 <USBD_SetClassConfig>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f949 	bl	80079c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007732:	e065      	b.n	8007800 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa10 	bl	8007b5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2203      	movs	r2, #3
 800773e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007742:	e05d      	b.n	8007800 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fa08 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 800774a:	e059      	b.n	8007800 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800774c:	4b2f      	ldr	r3, [pc, #188]	; (800780c <USBD_SetConfig+0x148>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d112      	bne.n	800777a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800775c:	4b2b      	ldr	r3, [pc, #172]	; (800780c <USBD_SetConfig+0x148>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007766:	4b29      	ldr	r3, [pc, #164]	; (800780c <USBD_SetConfig+0x148>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff f93c 	bl	80069ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9f1 	bl	8007b5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007778:	e042      	b.n	8007800 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <USBD_SetConfig+0x148>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d02a      	beq.n	80077de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff f92a 	bl	80069ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <USBD_SetConfig+0x148>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <USBD_SetConfig+0x148>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff f903 	bl	80069b2 <USBD_SetClassConfig>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00f      	beq.n	80077d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f903 	bl	80079c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff f90f 	bl	80069ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077d4:	e014      	b.n	8007800 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9bf 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 80077dc:	e010      	b.n	8007800 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9bb 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 80077e4:	e00c      	b.n	8007800 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8eb 	bl	80079c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <USBD_SetConfig+0x148>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff f8f8 	bl	80069ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	73fb      	strb	r3, [r7, #15]
      break;
 80077fe:	bf00      	nop
  }

  return ret;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	2000075c 	.word	0x2000075c

08007810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d004      	beq.n	800782c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8cd 	bl	80079c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800782a:	e023      	b.n	8007874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	dc02      	bgt.n	800783e <USBD_GetConfig+0x2e>
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc03      	bgt.n	8007844 <USBD_GetConfig+0x34>
 800783c:	e015      	b.n	800786a <USBD_GetConfig+0x5a>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d00b      	beq.n	800785a <USBD_GetConfig+0x4a>
 8007842:	e012      	b.n	800786a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3308      	adds	r3, #8
 800784e:	2201      	movs	r2, #1
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f927 	bl	8007aa6 <USBD_CtlSendData>
        break;
 8007858:	e00c      	b.n	8007874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	2201      	movs	r2, #1
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f91f 	bl	8007aa6 <USBD_CtlSendData>
        break;
 8007868:	e004      	b.n	8007874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8a9 	bl	80079c4 <USBD_CtlError>
        break;
 8007872:	bf00      	nop
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	2b02      	cmp	r3, #2
 8007892:	d81e      	bhi.n	80078d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d004      	beq.n	80078a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f890 	bl	80079c4 <USBD_CtlError>
        break;
 80078a4:	e01a      	b.n	80078dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 0202 	orr.w	r2, r3, #2
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	330c      	adds	r3, #12
 80078c6:	2202      	movs	r2, #2
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8eb 	bl	8007aa6 <USBD_CtlSendData>
      break;
 80078d0:	e004      	b.n	80078dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f875 	bl	80079c4 <USBD_CtlError>
      break;
 80078da:	bf00      	nop
  }
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d106      	bne.n	8007904 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f92b 	bl	8007b5a <USBD_CtlSendStatus>
  }
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	2b02      	cmp	r3, #2
 8007922:	d80b      	bhi.n	800793c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	885b      	ldrh	r3, [r3, #2]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10c      	bne.n	8007946 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f910 	bl	8007b5a <USBD_CtlSendStatus>
      }
      break;
 800793a:	e004      	b.n	8007946 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f840 	bl	80079c4 <USBD_CtlError>
      break;
 8007944:	e000      	b.n	8007948 <USBD_ClrFeature+0x3c>
      break;
 8007946:	bf00      	nop
  }
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fabc 	bl	8006ef8 <SWAPBYTE>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff faaf 	bl	8006ef8 <SWAPBYTE>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff faa2 	bl	8006ef8 <SWAPBYTE>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	80da      	strh	r2, [r3, #6]
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fce1 	bl	8008398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fcdd 	bl	8008398 <USBD_LL_StallEP>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d036      	beq.n	8007a6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a00:	6938      	ldr	r0, [r7, #16]
 8007a02:	f000 f836 	bl	8007a72 <USBD_GetLen>
 8007a06:	4603      	mov	r3, r0
 8007a08:	3301      	adds	r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	3301      	adds	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	3301      	adds	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a36:	e013      	b.n	8007a60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3301      	adds	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
    idx++;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e7      	bne.n	8007a38 <USBD_GetString+0x52>
 8007a68:	e000      	b.n	8007a6c <USBD_GetString+0x86>
    return;
 8007a6a:	bf00      	nop
  }
}
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a82:	e005      	b.n	8007a90 <USBD_GetLen+0x1e>
  {
    len++;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	3301      	adds	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f5      	bne.n	8007a84 <USBD_GetLen+0x12>
  }

  return len;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	2100      	movs	r1, #0
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fcec 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	2100      	movs	r1, #0
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fcdb 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	2100      	movs	r1, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fcdf 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fcce 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2204      	movs	r2, #4
 8007b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc9a 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b90:	2300      	movs	r3, #0
 8007b92:	2200      	movs	r2, #0
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fca8 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4912      	ldr	r1, [pc, #72]	; (8007bf8 <MX_USB_DEVICE_Init+0x50>)
 8007bb0:	4812      	ldr	r0, [pc, #72]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bb2:	f7fe fe75 	bl	80068a0 <USBD_Init>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bbc:	f7f9 f824 	bl	8000c08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007bc0:	490f      	ldr	r1, [pc, #60]	; (8007c00 <MX_USB_DEVICE_Init+0x58>)
 8007bc2:	480e      	ldr	r0, [pc, #56]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bc4:	f7fe feaa 	bl	800691c <USBD_RegisterClass>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bce:	f7f9 f81b 	bl	8000c08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bd2:	490c      	ldr	r1, [pc, #48]	; (8007c04 <MX_USB_DEVICE_Init+0x5c>)
 8007bd4:	4809      	ldr	r0, [pc, #36]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bd6:	f7fe fdbd 	bl	8006754 <USBD_CDC_RegisterInterface>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007be0:	f7f9 f812 	bl	8000c08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007be4:	4805      	ldr	r0, [pc, #20]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007be6:	f7fe fecd 	bl	8006984 <USBD_Start>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bf0:	f7f9 f80a 	bl	8000c08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000174 	.word	0x20000174
 8007bfc:	20000760 	.word	0x20000760
 8007c00:	2000005c 	.word	0x2000005c
 8007c04:	20000160 	.word	0x20000160

08007c08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4905      	ldr	r1, [pc, #20]	; (8007c24 <CDC_Init_FS+0x1c>)
 8007c10:	4805      	ldr	r0, [pc, #20]	; (8007c28 <CDC_Init_FS+0x20>)
 8007c12:	f7fe fdb4 	bl	800677e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c16:	4905      	ldr	r1, [pc, #20]	; (8007c2c <CDC_Init_FS+0x24>)
 8007c18:	4803      	ldr	r0, [pc, #12]	; (8007c28 <CDC_Init_FS+0x20>)
 8007c1a:	f7fe fdce 	bl	80067ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001230 	.word	0x20001230
 8007c28:	20000760 	.word	0x20000760
 8007c2c:	20000a30 	.word	0x20000a30

08007c30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b23      	cmp	r3, #35	; 0x23
 8007c54:	d84a      	bhi.n	8007cec <CDC_Control_FS+0xac>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <CDC_Control_FS+0x1c>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007ced 	.word	0x08007ced
 8007c60:	08007ced 	.word	0x08007ced
 8007c64:	08007ced 	.word	0x08007ced
 8007c68:	08007ced 	.word	0x08007ced
 8007c6c:	08007ced 	.word	0x08007ced
 8007c70:	08007ced 	.word	0x08007ced
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007ced 	.word	0x08007ced
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007ced 	.word	0x08007ced
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007ced 	.word	0x08007ced
 8007ca4:	08007ced 	.word	0x08007ced
 8007ca8:	08007ced 	.word	0x08007ced
 8007cac:	08007ced 	.word	0x08007ced
 8007cb0:	08007ced 	.word	0x08007ced
 8007cb4:	08007ced 	.word	0x08007ced
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	08007ced 	.word	0x08007ced
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007ced 	.word	0x08007ced
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007ced 	.word	0x08007ced
 8007ce4:	08007ced 	.word	0x08007ced
 8007ce8:	08007ced 	.word	0x08007ced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cec:	bf00      	nop
  }

  return (USBD_OK);
 8007cee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4805      	ldr	r0, [pc, #20]	; (8007d20 <CDC_Receive_FS+0x24>)
 8007d0a:	f7fe fd56 	bl	80067ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d0e:	4804      	ldr	r0, [pc, #16]	; (8007d20 <CDC_Receive_FS+0x24>)
 8007d10:	f7fe fd9c 	bl	800684c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000760 	.word	0x20000760

08007d24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d34:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e00b      	b.n	8007d62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4806      	ldr	r0, [pc, #24]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d52:	f7fe fd14 	bl	800677e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d56:	4805      	ldr	r0, [pc, #20]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d58:	f7fe fd48 	bl	80067ec <USBD_CDC_TransmitPacket>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000760 	.word	0x20000760

08007d70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2212      	movs	r2, #18
 8007da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000190 	.word	0x20000190

08007db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	6039      	str	r1, [r7, #0]
 8007dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	200001a4 	.word	0x200001a4

08007ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4907      	ldr	r1, [pc, #28]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007df2:	4808      	ldr	r0, [pc, #32]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007df4:	f7ff fdf7 	bl	80079e6 <USBD_GetString>
 8007df8:	e004      	b.n	8007e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4904      	ldr	r1, [pc, #16]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dfe:	4805      	ldr	r0, [pc, #20]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e00:	f7ff fdf1 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e04:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20001a30 	.word	0x20001a30
 8007e14:	08009a60 	.word	0x08009a60

08007e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	4904      	ldr	r1, [pc, #16]	; (8007e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e2a:	f7ff fddc 	bl	80079e6 <USBD_GetString>
  return USBD_StrDesc;
 8007e2e:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20001a30 	.word	0x20001a30
 8007e3c:	08009a78 	.word	0x08009a78

08007e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	221a      	movs	r2, #26
 8007e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e52:	f000 f843 	bl	8007edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e56:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	200001a8 	.word	0x200001a8

08007e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4907      	ldr	r1, [pc, #28]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e7a:	4808      	ldr	r0, [pc, #32]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e7c:	f7ff fdb3 	bl	80079e6 <USBD_GetString>
 8007e80:	e004      	b.n	8007e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4904      	ldr	r1, [pc, #16]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e86:	4805      	ldr	r0, [pc, #20]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e88:	f7ff fdad 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20001a30 	.word	0x20001a30
 8007e9c:	08009a8c 	.word	0x08009a8c

08007ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4907      	ldr	r1, [pc, #28]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007eb6:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007eb8:	f7ff fd95 	bl	80079e6 <USBD_GetString>
 8007ebc:	e004      	b.n	8007ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4904      	ldr	r1, [pc, #16]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ec2:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ec4:	f7ff fd8f 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001a30 	.word	0x20001a30
 8007ed8:	08009a98 	.word	0x08009a98

08007edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <Get_SerialNum+0x44>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <Get_SerialNum+0x48>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <Get_SerialNum+0x4c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f02:	2208      	movs	r2, #8
 8007f04:	4909      	ldr	r1, [pc, #36]	; (8007f2c <Get_SerialNum+0x50>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f814 	bl	8007f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	4908      	ldr	r1, [pc, #32]	; (8007f30 <Get_SerialNum+0x54>)
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f000 f80f 	bl	8007f34 <IntToUnicode>
  }
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	1fff7a10 	.word	0x1fff7a10
 8007f24:	1fff7a14 	.word	0x1fff7a14
 8007f28:	1fff7a18 	.word	0x1fff7a18
 8007f2c:	200001aa 	.word	0x200001aa
 8007f30:	200001ba 	.word	0x200001ba

08007f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]
 8007f4a:	e027      	b.n	8007f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	0f1b      	lsrs	r3, r3, #28
 8007f50:	2b09      	cmp	r3, #9
 8007f52:	d80b      	bhi.n	8007f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0f1b      	lsrs	r3, r3, #28
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	440b      	add	r3, r1
 8007f64:	3230      	adds	r2, #48	; 0x30
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e00a      	b.n	8007f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4619      	mov	r1, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3237      	adds	r2, #55	; 0x37
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
 8007f9c:	7dfa      	ldrb	r2, [r7, #23]
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3d3      	bcc.n	8007f4c <IntToUnicode+0x18>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fd4:	d13a      	bne.n	800804c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008000:	2303      	movs	r3, #3
 8008002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008004:	230a      	movs	r3, #10
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4619      	mov	r1, r3
 800800e:	4812      	ldr	r0, [pc, #72]	; (8008058 <HAL_PCD_MspInit+0xa4>)
 8008010:	f7f9 fc54 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008018:	4a0e      	ldr	r2, [pc, #56]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801e:	6353      	str	r3, [r2, #52]	; 0x34
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800802a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802e:	6453      	str	r3, [r2, #68]	; 0x44
 8008030:	4b08      	ldr	r3, [pc, #32]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	2043      	movs	r0, #67	; 0x43
 8008042:	f7f9 fc04 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008046:	2043      	movs	r0, #67	; 0x43
 8008048:	f7f9 fc1d 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800804c:	bf00      	nop
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	40020000 	.word	0x40020000

0800805c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe fcd1 	bl	8006a1a <USBD_LL_SetupStage>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7fe fd0b 	bl	8006ac4 <USBD_LL_DataOutStage>
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3348      	adds	r3, #72	; 0x48
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	4619      	mov	r1, r3
 80080de:	f7fe fd54 	bl	8006b8a <USBD_LL_DataInStage>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fe68 	bl	8006dce <USBD_LL_SOF>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800810e:	2301      	movs	r3, #1
 8008110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	e008      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d102      	bne.n	800812e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
 800812c:	e001      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800812e:	f7f8 fd6b 	bl	8000c08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008138:	7bfa      	ldrb	r2, [r7, #15]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fe08 	bl	8006d52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fdb4 	bl	8006cb6 <USBD_LL_Reset>
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fe03 	bl	8006d72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800818c:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4a03      	ldr	r2, [pc, #12]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 8008192:	f043 0306 	orr.w	r3, r3, #6
 8008196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fdf3 	bl	8006d9e <USBD_LL_Resume>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fe41 	bl	8006e5e <USBD_LL_IsoOUTIncomplete>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fe09 	bl	8006e12 <USBD_LL_IsoINIncomplete>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fe47 	bl	8006eaa <USBD_LL_DevConnected>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fe44 	bl	8006ec0 <USBD_LL_DevDisconnected>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d13c      	bne.n	80082ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008250:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <USBD_LL_Init+0x94>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1e      	ldr	r2, [pc, #120]	; (80082d4 <USBD_LL_Init+0x94>)
 800825c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <USBD_LL_Init+0x94>)
 8008262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008268:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <USBD_LL_Init+0x94>)
 800826a:	2204      	movs	r2, #4
 800826c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <USBD_LL_Init+0x94>)
 8008270:	2202      	movs	r2, #2
 8008272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <USBD_LL_Init+0x94>)
 8008276:	2200      	movs	r2, #0
 8008278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <USBD_LL_Init+0x94>)
 800827c:	2202      	movs	r2, #2
 800827e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008280:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <USBD_LL_Init+0x94>)
 8008282:	2200      	movs	r2, #0
 8008284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <USBD_LL_Init+0x94>)
 8008288:	2200      	movs	r2, #0
 800828a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <USBD_LL_Init+0x94>)
 800828e:	2200      	movs	r2, #0
 8008290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <USBD_LL_Init+0x94>)
 8008294:	2200      	movs	r2, #0
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008298:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <USBD_LL_Init+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800829e:	480d      	ldr	r0, [pc, #52]	; (80082d4 <USBD_LL_Init+0x94>)
 80082a0:	f7fa fdd1 	bl	8002e46 <HAL_PCD_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082aa:	f7f8 fcad 	bl	8000c08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082ae:	2180      	movs	r1, #128	; 0x80
 80082b0:	4808      	ldr	r0, [pc, #32]	; (80082d4 <USBD_LL_Init+0x94>)
 80082b2:	f7fb ff2e 	bl	8004112 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	2100      	movs	r1, #0
 80082ba:	4806      	ldr	r0, [pc, #24]	; (80082d4 <USBD_LL_Init+0x94>)
 80082bc:	f7fb fee2 	bl	8004084 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	2101      	movs	r1, #1
 80082c4:	4803      	ldr	r0, [pc, #12]	; (80082d4 <USBD_LL_Init+0x94>)
 80082c6:	f7fb fedd 	bl	8004084 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20001c30 	.word	0x20001c30

080082d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa fec6 	bl	8003080 <HAL_PCD_Start>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f942 	bl	8008584 <USBD_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	461a      	mov	r2, r3
 800831c:	4603      	mov	r3, r0
 800831e:	70fb      	strb	r3, [r7, #3]
 8008320:	460b      	mov	r3, r1
 8008322:	70bb      	strb	r3, [r7, #2]
 8008324:	4613      	mov	r3, r2
 8008326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008336:	78bb      	ldrb	r3, [r7, #2]
 8008338:	883a      	ldrh	r2, [r7, #0]
 800833a:	78f9      	ldrb	r1, [r7, #3]
 800833c:	f7fb faaa 	bl	8003894 <HAL_PCD_EP_Open>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f91c 	bl	8008584 <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7fb faf3 	bl	8003964 <HAL_PCD_EP_Close>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f8fd 	bl	8008584 <USBD_Get_USB_Status>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	4611      	mov	r1, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fb fbcb 	bl	8003b52 <HAL_PCD_EP_SetStall>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f8de 	bl	8008584 <USBD_Get_USB_Status>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fb fc10 	bl	8003c1a <HAL_PCD_EP_ClrStall>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f8bf 	bl	8008584 <USBD_Get_USB_Status>
 8008406:	4603      	mov	r3, r0
 8008408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840a:	7bbb      	ldrb	r3, [r7, #14]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da0b      	bge.n	8008448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	333e      	adds	r3, #62	; 0x3e
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	e00b      	b.n	8008460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800845e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fb f9dd 	bl	800384a <HAL_PCD_SetAddress>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f874 	bl	8008584 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084c8:	7af9      	ldrb	r1, [r7, #11]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f7fb faf6 	bl	8003abe <HAL_PCD_EP_Transmit>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f853 	bl	8008584 <USBD_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	460b      	mov	r3, r1
 80084fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800850a:	7af9      	ldrb	r1, [r7, #11]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	f7fb fa72 	bl	80039f8 <HAL_PCD_EP_Receive>
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f832 	bl	8008584 <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008524:	7dbb      	ldrb	r3, [r7, #22]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7fb faa2 	bl	8003a8e <HAL_PCD_EP_GetRxCount>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800855c:	4b03      	ldr	r3, [pc, #12]	; (800856c <USBD_static_malloc+0x18>)
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20002038 	.word	0x20002038

08008570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]

}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d817      	bhi.n	80085c8 <USBD_Get_USB_Status+0x44>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBD_Get_USB_Status+0x1c>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085b7 	.word	0x080085b7
 80085a8:	080085bd 	.word	0x080085bd
 80085ac:	080085c3 	.word	0x080085c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
    break;
 80085b4:	e00b      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	73fb      	strb	r3, [r7, #15]
    break;
 80085ba:	e008      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
    break;
 80085c0:	e005      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085c2:	2303      	movs	r3, #3
 80085c4:	73fb      	strb	r3, [r7, #15]
    break;
 80085c6:	e002      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	73fb      	strb	r3, [r7, #15]
    break;
 80085cc:	bf00      	nop
  }
  return usb_status;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <__errno>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	; (80085e4 <__errno+0x8>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	200001c4 	.word	0x200001c4

080085e8 <__libc_init_array>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	4d0d      	ldr	r5, [pc, #52]	; (8008620 <__libc_init_array+0x38>)
 80085ec:	4c0d      	ldr	r4, [pc, #52]	; (8008624 <__libc_init_array+0x3c>)
 80085ee:	1b64      	subs	r4, r4, r5
 80085f0:	10a4      	asrs	r4, r4, #2
 80085f2:	2600      	movs	r6, #0
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	d109      	bne.n	800860c <__libc_init_array+0x24>
 80085f8:	4d0b      	ldr	r5, [pc, #44]	; (8008628 <__libc_init_array+0x40>)
 80085fa:	4c0c      	ldr	r4, [pc, #48]	; (800862c <__libc_init_array+0x44>)
 80085fc:	f001 f9e8 	bl	80099d0 <_init>
 8008600:	1b64      	subs	r4, r4, r5
 8008602:	10a4      	asrs	r4, r4, #2
 8008604:	2600      	movs	r6, #0
 8008606:	42a6      	cmp	r6, r4
 8008608:	d105      	bne.n	8008616 <__libc_init_array+0x2e>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008610:	4798      	blx	r3
 8008612:	3601      	adds	r6, #1
 8008614:	e7ee      	b.n	80085f4 <__libc_init_array+0xc>
 8008616:	f855 3b04 	ldr.w	r3, [r5], #4
 800861a:	4798      	blx	r3
 800861c:	3601      	adds	r6, #1
 800861e:	e7f2      	b.n	8008606 <__libc_init_array+0x1e>
 8008620:	0800b028 	.word	0x0800b028
 8008624:	0800b028 	.word	0x0800b028
 8008628:	0800b028 	.word	0x0800b028
 800862c:	0800b02c 	.word	0x0800b02c

08008630 <memset>:
 8008630:	4402      	add	r2, r0
 8008632:	4603      	mov	r3, r0
 8008634:	4293      	cmp	r3, r2
 8008636:	d100      	bne.n	800863a <memset+0xa>
 8008638:	4770      	bx	lr
 800863a:	f803 1b01 	strb.w	r1, [r3], #1
 800863e:	e7f9      	b.n	8008634 <memset+0x4>

08008640 <iprintf>:
 8008640:	b40f      	push	{r0, r1, r2, r3}
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <iprintf+0x2c>)
 8008644:	b513      	push	{r0, r1, r4, lr}
 8008646:	681c      	ldr	r4, [r3, #0]
 8008648:	b124      	cbz	r4, 8008654 <iprintf+0x14>
 800864a:	69a3      	ldr	r3, [r4, #24]
 800864c:	b913      	cbnz	r3, 8008654 <iprintf+0x14>
 800864e:	4620      	mov	r0, r4
 8008650:	f000 f89c 	bl	800878c <__sinit>
 8008654:	ab05      	add	r3, sp, #20
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	68a1      	ldr	r1, [r4, #8]
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fb4f 	bl	8008d00 <_vfiprintf_r>
 8008662:	b002      	add	sp, #8
 8008664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008668:	b004      	add	sp, #16
 800866a:	4770      	bx	lr
 800866c:	200001c4 	.word	0x200001c4

08008670 <putchar>:
 8008670:	4b09      	ldr	r3, [pc, #36]	; (8008698 <putchar+0x28>)
 8008672:	b513      	push	{r0, r1, r4, lr}
 8008674:	681c      	ldr	r4, [r3, #0]
 8008676:	4601      	mov	r1, r0
 8008678:	b134      	cbz	r4, 8008688 <putchar+0x18>
 800867a:	69a3      	ldr	r3, [r4, #24]
 800867c:	b923      	cbnz	r3, 8008688 <putchar+0x18>
 800867e:	9001      	str	r0, [sp, #4]
 8008680:	4620      	mov	r0, r4
 8008682:	f000 f883 	bl	800878c <__sinit>
 8008686:	9901      	ldr	r1, [sp, #4]
 8008688:	68a2      	ldr	r2, [r4, #8]
 800868a:	4620      	mov	r0, r4
 800868c:	b002      	add	sp, #8
 800868e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008692:	f000 bdf9 	b.w	8009288 <_putc_r>
 8008696:	bf00      	nop
 8008698:	200001c4 	.word	0x200001c4

0800869c <siprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b500      	push	{lr}
 80086a0:	b09c      	sub	sp, #112	; 0x70
 80086a2:	ab1d      	add	r3, sp, #116	; 0x74
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	9006      	str	r0, [sp, #24]
 80086a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <siprintf+0x38>)
 80086ae:	9107      	str	r1, [sp, #28]
 80086b0:	9104      	str	r1, [sp, #16]
 80086b2:	4909      	ldr	r1, [pc, #36]	; (80086d8 <siprintf+0x3c>)
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	a902      	add	r1, sp, #8
 80086c0:	f000 f9f4 	bl	8008aac <_svfiprintf_r>
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	b01c      	add	sp, #112	; 0x70
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b003      	add	sp, #12
 80086d2:	4770      	bx	lr
 80086d4:	200001c4 	.word	0x200001c4
 80086d8:	ffff0208 	.word	0xffff0208

080086dc <std>:
 80086dc:	2300      	movs	r3, #0
 80086de:	b510      	push	{r4, lr}
 80086e0:	4604      	mov	r4, r0
 80086e2:	e9c0 3300 	strd	r3, r3, [r0]
 80086e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ea:	6083      	str	r3, [r0, #8]
 80086ec:	8181      	strh	r1, [r0, #12]
 80086ee:	6643      	str	r3, [r0, #100]	; 0x64
 80086f0:	81c2      	strh	r2, [r0, #14]
 80086f2:	6183      	str	r3, [r0, #24]
 80086f4:	4619      	mov	r1, r3
 80086f6:	2208      	movs	r2, #8
 80086f8:	305c      	adds	r0, #92	; 0x5c
 80086fa:	f7ff ff99 	bl	8008630 <memset>
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <std+0x38>)
 8008700:	6263      	str	r3, [r4, #36]	; 0x24
 8008702:	4b05      	ldr	r3, [pc, #20]	; (8008718 <std+0x3c>)
 8008704:	62a3      	str	r3, [r4, #40]	; 0x28
 8008706:	4b05      	ldr	r3, [pc, #20]	; (800871c <std+0x40>)
 8008708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <std+0x44>)
 800870c:	6224      	str	r4, [r4, #32]
 800870e:	6323      	str	r3, [r4, #48]	; 0x30
 8008710:	bd10      	pop	{r4, pc}
 8008712:	bf00      	nop
 8008714:	08009339 	.word	0x08009339
 8008718:	0800935b 	.word	0x0800935b
 800871c:	08009393 	.word	0x08009393
 8008720:	080093b7 	.word	0x080093b7

08008724 <_cleanup_r>:
 8008724:	4901      	ldr	r1, [pc, #4]	; (800872c <_cleanup_r+0x8>)
 8008726:	f000 b8af 	b.w	8008888 <_fwalk_reent>
 800872a:	bf00      	nop
 800872c:	08009691 	.word	0x08009691

08008730 <__sfmoreglue>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	2268      	movs	r2, #104	; 0x68
 8008734:	1e4d      	subs	r5, r1, #1
 8008736:	4355      	muls	r5, r2
 8008738:	460e      	mov	r6, r1
 800873a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800873e:	f000 f8e5 	bl	800890c <_malloc_r>
 8008742:	4604      	mov	r4, r0
 8008744:	b140      	cbz	r0, 8008758 <__sfmoreglue+0x28>
 8008746:	2100      	movs	r1, #0
 8008748:	e9c0 1600 	strd	r1, r6, [r0]
 800874c:	300c      	adds	r0, #12
 800874e:	60a0      	str	r0, [r4, #8]
 8008750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008754:	f7ff ff6c 	bl	8008630 <memset>
 8008758:	4620      	mov	r0, r4
 800875a:	bd70      	pop	{r4, r5, r6, pc}

0800875c <__sfp_lock_acquire>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__sfp_lock_acquire+0x8>)
 800875e:	f000 b8b3 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 8008762:	bf00      	nop
 8008764:	20002259 	.word	0x20002259

08008768 <__sfp_lock_release>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__sfp_lock_release+0x8>)
 800876a:	f000 b8ae 	b.w	80088ca <__retarget_lock_release_recursive>
 800876e:	bf00      	nop
 8008770:	20002259 	.word	0x20002259

08008774 <__sinit_lock_acquire>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__sinit_lock_acquire+0x8>)
 8008776:	f000 b8a7 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 800877a:	bf00      	nop
 800877c:	2000225a 	.word	0x2000225a

08008780 <__sinit_lock_release>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__sinit_lock_release+0x8>)
 8008782:	f000 b8a2 	b.w	80088ca <__retarget_lock_release_recursive>
 8008786:	bf00      	nop
 8008788:	2000225a 	.word	0x2000225a

0800878c <__sinit>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	f7ff fff0 	bl	8008774 <__sinit_lock_acquire>
 8008794:	69a3      	ldr	r3, [r4, #24]
 8008796:	b11b      	cbz	r3, 80087a0 <__sinit+0x14>
 8008798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879c:	f7ff bff0 	b.w	8008780 <__sinit_lock_release>
 80087a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087a4:	6523      	str	r3, [r4, #80]	; 0x50
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <__sinit+0x68>)
 80087a8:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <__sinit+0x6c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	bf04      	itt	eq
 80087b2:	2301      	moveq	r3, #1
 80087b4:	61a3      	streq	r3, [r4, #24]
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 f820 	bl	80087fc <__sfp>
 80087bc:	6060      	str	r0, [r4, #4]
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f81c 	bl	80087fc <__sfp>
 80087c4:	60a0      	str	r0, [r4, #8]
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 f818 	bl	80087fc <__sfp>
 80087cc:	2200      	movs	r2, #0
 80087ce:	60e0      	str	r0, [r4, #12]
 80087d0:	2104      	movs	r1, #4
 80087d2:	6860      	ldr	r0, [r4, #4]
 80087d4:	f7ff ff82 	bl	80086dc <std>
 80087d8:	68a0      	ldr	r0, [r4, #8]
 80087da:	2201      	movs	r2, #1
 80087dc:	2109      	movs	r1, #9
 80087de:	f7ff ff7d 	bl	80086dc <std>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	2202      	movs	r2, #2
 80087e6:	2112      	movs	r1, #18
 80087e8:	f7ff ff78 	bl	80086dc <std>
 80087ec:	2301      	movs	r3, #1
 80087ee:	61a3      	str	r3, [r4, #24]
 80087f0:	e7d2      	b.n	8008798 <__sinit+0xc>
 80087f2:	bf00      	nop
 80087f4:	0800af88 	.word	0x0800af88
 80087f8:	08008725 	.word	0x08008725

080087fc <__sfp>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	4607      	mov	r7, r0
 8008800:	f7ff ffac 	bl	800875c <__sfp_lock_acquire>
 8008804:	4b1e      	ldr	r3, [pc, #120]	; (8008880 <__sfp+0x84>)
 8008806:	681e      	ldr	r6, [r3, #0]
 8008808:	69b3      	ldr	r3, [r6, #24]
 800880a:	b913      	cbnz	r3, 8008812 <__sfp+0x16>
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff ffbd 	bl	800878c <__sinit>
 8008812:	3648      	adds	r6, #72	; 0x48
 8008814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008818:	3b01      	subs	r3, #1
 800881a:	d503      	bpl.n	8008824 <__sfp+0x28>
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	b30b      	cbz	r3, 8008864 <__sfp+0x68>
 8008820:	6836      	ldr	r6, [r6, #0]
 8008822:	e7f7      	b.n	8008814 <__sfp+0x18>
 8008824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008828:	b9d5      	cbnz	r5, 8008860 <__sfp+0x64>
 800882a:	4b16      	ldr	r3, [pc, #88]	; (8008884 <__sfp+0x88>)
 800882c:	60e3      	str	r3, [r4, #12]
 800882e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008832:	6665      	str	r5, [r4, #100]	; 0x64
 8008834:	f000 f847 	bl	80088c6 <__retarget_lock_init_recursive>
 8008838:	f7ff ff96 	bl	8008768 <__sfp_lock_release>
 800883c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	61a5      	str	r5, [r4, #24]
 8008848:	2208      	movs	r2, #8
 800884a:	4629      	mov	r1, r5
 800884c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008850:	f7ff feee 	bl	8008630 <memset>
 8008854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800885c:	4620      	mov	r0, r4
 800885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008860:	3468      	adds	r4, #104	; 0x68
 8008862:	e7d9      	b.n	8008818 <__sfp+0x1c>
 8008864:	2104      	movs	r1, #4
 8008866:	4638      	mov	r0, r7
 8008868:	f7ff ff62 	bl	8008730 <__sfmoreglue>
 800886c:	4604      	mov	r4, r0
 800886e:	6030      	str	r0, [r6, #0]
 8008870:	2800      	cmp	r0, #0
 8008872:	d1d5      	bne.n	8008820 <__sfp+0x24>
 8008874:	f7ff ff78 	bl	8008768 <__sfp_lock_release>
 8008878:	230c      	movs	r3, #12
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	e7ee      	b.n	800885c <__sfp+0x60>
 800887e:	bf00      	nop
 8008880:	0800af88 	.word	0x0800af88
 8008884:	ffff0001 	.word	0xffff0001

08008888 <_fwalk_reent>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4606      	mov	r6, r0
 800888e:	4688      	mov	r8, r1
 8008890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008894:	2700      	movs	r7, #0
 8008896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800889a:	f1b9 0901 	subs.w	r9, r9, #1
 800889e:	d505      	bpl.n	80088ac <_fwalk_reent+0x24>
 80088a0:	6824      	ldr	r4, [r4, #0]
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	d1f7      	bne.n	8008896 <_fwalk_reent+0xe>
 80088a6:	4638      	mov	r0, r7
 80088a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ac:	89ab      	ldrh	r3, [r5, #12]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d907      	bls.n	80088c2 <_fwalk_reent+0x3a>
 80088b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b6:	3301      	adds	r3, #1
 80088b8:	d003      	beq.n	80088c2 <_fwalk_reent+0x3a>
 80088ba:	4629      	mov	r1, r5
 80088bc:	4630      	mov	r0, r6
 80088be:	47c0      	blx	r8
 80088c0:	4307      	orrs	r7, r0
 80088c2:	3568      	adds	r5, #104	; 0x68
 80088c4:	e7e9      	b.n	800889a <_fwalk_reent+0x12>

080088c6 <__retarget_lock_init_recursive>:
 80088c6:	4770      	bx	lr

080088c8 <__retarget_lock_acquire_recursive>:
 80088c8:	4770      	bx	lr

080088ca <__retarget_lock_release_recursive>:
 80088ca:	4770      	bx	lr

080088cc <sbrk_aligned>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4e0e      	ldr	r6, [pc, #56]	; (8008908 <sbrk_aligned+0x3c>)
 80088d0:	460c      	mov	r4, r1
 80088d2:	6831      	ldr	r1, [r6, #0]
 80088d4:	4605      	mov	r5, r0
 80088d6:	b911      	cbnz	r1, 80088de <sbrk_aligned+0x12>
 80088d8:	f000 fd1e 	bl	8009318 <_sbrk_r>
 80088dc:	6030      	str	r0, [r6, #0]
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 fd19 	bl	8009318 <_sbrk_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d00a      	beq.n	8008900 <sbrk_aligned+0x34>
 80088ea:	1cc4      	adds	r4, r0, #3
 80088ec:	f024 0403 	bic.w	r4, r4, #3
 80088f0:	42a0      	cmp	r0, r4
 80088f2:	d007      	beq.n	8008904 <sbrk_aligned+0x38>
 80088f4:	1a21      	subs	r1, r4, r0
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 fd0e 	bl	8009318 <_sbrk_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	d101      	bne.n	8008904 <sbrk_aligned+0x38>
 8008900:	f04f 34ff 	mov.w	r4, #4294967295
 8008904:	4620      	mov	r0, r4
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	20002260 	.word	0x20002260

0800890c <_malloc_r>:
 800890c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008910:	1ccd      	adds	r5, r1, #3
 8008912:	f025 0503 	bic.w	r5, r5, #3
 8008916:	3508      	adds	r5, #8
 8008918:	2d0c      	cmp	r5, #12
 800891a:	bf38      	it	cc
 800891c:	250c      	movcc	r5, #12
 800891e:	2d00      	cmp	r5, #0
 8008920:	4607      	mov	r7, r0
 8008922:	db01      	blt.n	8008928 <_malloc_r+0x1c>
 8008924:	42a9      	cmp	r1, r5
 8008926:	d905      	bls.n	8008934 <_malloc_r+0x28>
 8008928:	230c      	movs	r3, #12
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	2600      	movs	r6, #0
 800892e:	4630      	mov	r0, r6
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	4e2e      	ldr	r6, [pc, #184]	; (80089f0 <_malloc_r+0xe4>)
 8008936:	f000 ff87 	bl	8009848 <__malloc_lock>
 800893a:	6833      	ldr	r3, [r6, #0]
 800893c:	461c      	mov	r4, r3
 800893e:	bb34      	cbnz	r4, 800898e <_malloc_r+0x82>
 8008940:	4629      	mov	r1, r5
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ffc2 	bl	80088cc <sbrk_aligned>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	4604      	mov	r4, r0
 800894c:	d14d      	bne.n	80089ea <_malloc_r+0xde>
 800894e:	6834      	ldr	r4, [r6, #0]
 8008950:	4626      	mov	r6, r4
 8008952:	2e00      	cmp	r6, #0
 8008954:	d140      	bne.n	80089d8 <_malloc_r+0xcc>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	4631      	mov	r1, r6
 800895a:	4638      	mov	r0, r7
 800895c:	eb04 0803 	add.w	r8, r4, r3
 8008960:	f000 fcda 	bl	8009318 <_sbrk_r>
 8008964:	4580      	cmp	r8, r0
 8008966:	d13a      	bne.n	80089de <_malloc_r+0xd2>
 8008968:	6821      	ldr	r1, [r4, #0]
 800896a:	3503      	adds	r5, #3
 800896c:	1a6d      	subs	r5, r5, r1
 800896e:	f025 0503 	bic.w	r5, r5, #3
 8008972:	3508      	adds	r5, #8
 8008974:	2d0c      	cmp	r5, #12
 8008976:	bf38      	it	cc
 8008978:	250c      	movcc	r5, #12
 800897a:	4629      	mov	r1, r5
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff ffa5 	bl	80088cc <sbrk_aligned>
 8008982:	3001      	adds	r0, #1
 8008984:	d02b      	beq.n	80089de <_malloc_r+0xd2>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	442b      	add	r3, r5
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	e00e      	b.n	80089ac <_malloc_r+0xa0>
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	1b52      	subs	r2, r2, r5
 8008992:	d41e      	bmi.n	80089d2 <_malloc_r+0xc6>
 8008994:	2a0b      	cmp	r2, #11
 8008996:	d916      	bls.n	80089c6 <_malloc_r+0xba>
 8008998:	1961      	adds	r1, r4, r5
 800899a:	42a3      	cmp	r3, r4
 800899c:	6025      	str	r5, [r4, #0]
 800899e:	bf18      	it	ne
 80089a0:	6059      	strne	r1, [r3, #4]
 80089a2:	6863      	ldr	r3, [r4, #4]
 80089a4:	bf08      	it	eq
 80089a6:	6031      	streq	r1, [r6, #0]
 80089a8:	5162      	str	r2, [r4, r5]
 80089aa:	604b      	str	r3, [r1, #4]
 80089ac:	4638      	mov	r0, r7
 80089ae:	f104 060b 	add.w	r6, r4, #11
 80089b2:	f000 ff4f 	bl	8009854 <__malloc_unlock>
 80089b6:	f026 0607 	bic.w	r6, r6, #7
 80089ba:	1d23      	adds	r3, r4, #4
 80089bc:	1af2      	subs	r2, r6, r3
 80089be:	d0b6      	beq.n	800892e <_malloc_r+0x22>
 80089c0:	1b9b      	subs	r3, r3, r6
 80089c2:	50a3      	str	r3, [r4, r2]
 80089c4:	e7b3      	b.n	800892e <_malloc_r+0x22>
 80089c6:	6862      	ldr	r2, [r4, #4]
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	bf0c      	ite	eq
 80089cc:	6032      	streq	r2, [r6, #0]
 80089ce:	605a      	strne	r2, [r3, #4]
 80089d0:	e7ec      	b.n	80089ac <_malloc_r+0xa0>
 80089d2:	4623      	mov	r3, r4
 80089d4:	6864      	ldr	r4, [r4, #4]
 80089d6:	e7b2      	b.n	800893e <_malloc_r+0x32>
 80089d8:	4634      	mov	r4, r6
 80089da:	6876      	ldr	r6, [r6, #4]
 80089dc:	e7b9      	b.n	8008952 <_malloc_r+0x46>
 80089de:	230c      	movs	r3, #12
 80089e0:	603b      	str	r3, [r7, #0]
 80089e2:	4638      	mov	r0, r7
 80089e4:	f000 ff36 	bl	8009854 <__malloc_unlock>
 80089e8:	e7a1      	b.n	800892e <_malloc_r+0x22>
 80089ea:	6025      	str	r5, [r4, #0]
 80089ec:	e7de      	b.n	80089ac <_malloc_r+0xa0>
 80089ee:	bf00      	nop
 80089f0:	2000225c 	.word	0x2000225c

080089f4 <__ssputs_r>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	688e      	ldr	r6, [r1, #8]
 80089fa:	429e      	cmp	r6, r3
 80089fc:	4682      	mov	sl, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4690      	mov	r8, r2
 8008a02:	461f      	mov	r7, r3
 8008a04:	d838      	bhi.n	8008a78 <__ssputs_r+0x84>
 8008a06:	898a      	ldrh	r2, [r1, #12]
 8008a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a0c:	d032      	beq.n	8008a74 <__ssputs_r+0x80>
 8008a0e:	6825      	ldr	r5, [r4, #0]
 8008a10:	6909      	ldr	r1, [r1, #16]
 8008a12:	eba5 0901 	sub.w	r9, r5, r1
 8008a16:	6965      	ldr	r5, [r4, #20]
 8008a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a20:	3301      	adds	r3, #1
 8008a22:	444b      	add	r3, r9
 8008a24:	106d      	asrs	r5, r5, #1
 8008a26:	429d      	cmp	r5, r3
 8008a28:	bf38      	it	cc
 8008a2a:	461d      	movcc	r5, r3
 8008a2c:	0553      	lsls	r3, r2, #21
 8008a2e:	d531      	bpl.n	8008a94 <__ssputs_r+0xa0>
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7ff ff6b 	bl	800890c <_malloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	b950      	cbnz	r0, 8008a50 <__ssputs_r+0x5c>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	f8ca 3000 	str.w	r3, [sl]
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a50:	6921      	ldr	r1, [r4, #16]
 8008a52:	464a      	mov	r2, r9
 8008a54:	f000 fed0 	bl	80097f8 <memcpy>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	6126      	str	r6, [r4, #16]
 8008a66:	6165      	str	r5, [r4, #20]
 8008a68:	444e      	add	r6, r9
 8008a6a:	eba5 0509 	sub.w	r5, r5, r9
 8008a6e:	6026      	str	r6, [r4, #0]
 8008a70:	60a5      	str	r5, [r4, #8]
 8008a72:	463e      	mov	r6, r7
 8008a74:	42be      	cmp	r6, r7
 8008a76:	d900      	bls.n	8008a7a <__ssputs_r+0x86>
 8008a78:	463e      	mov	r6, r7
 8008a7a:	6820      	ldr	r0, [r4, #0]
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	4641      	mov	r1, r8
 8008a80:	f000 fec8 	bl	8009814 <memmove>
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	1b9b      	subs	r3, r3, r6
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	4433      	add	r3, r6
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7db      	b.n	8008a4c <__ssputs_r+0x58>
 8008a94:	462a      	mov	r2, r5
 8008a96:	f000 ff2f 	bl	80098f8 <_realloc_r>
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d1e1      	bne.n	8008a64 <__ssputs_r+0x70>
 8008aa0:	6921      	ldr	r1, [r4, #16]
 8008aa2:	4650      	mov	r0, sl
 8008aa4:	f000 fedc 	bl	8009860 <_free_r>
 8008aa8:	e7c7      	b.n	8008a3a <__ssputs_r+0x46>
	...

08008aac <_svfiprintf_r>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	898b      	ldrh	r3, [r1, #12]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	b09d      	sub	sp, #116	; 0x74
 8008ab8:	4607      	mov	r7, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	d50e      	bpl.n	8008ade <_svfiprintf_r+0x32>
 8008ac0:	690b      	ldr	r3, [r1, #16]
 8008ac2:	b963      	cbnz	r3, 8008ade <_svfiprintf_r+0x32>
 8008ac4:	2140      	movs	r1, #64	; 0x40
 8008ac6:	f7ff ff21 	bl	800890c <_malloc_r>
 8008aca:	6028      	str	r0, [r5, #0]
 8008acc:	6128      	str	r0, [r5, #16]
 8008ace:	b920      	cbnz	r0, 8008ada <_svfiprintf_r+0x2e>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	e0d1      	b.n	8008c7e <_svfiprintf_r+0x1d2>
 8008ada:	2340      	movs	r3, #64	; 0x40
 8008adc:	616b      	str	r3, [r5, #20]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aec:	2330      	movs	r3, #48	; 0x30
 8008aee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c98 <_svfiprintf_r+0x1ec>
 8008af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af6:	f04f 0901 	mov.w	r9, #1
 8008afa:	4623      	mov	r3, r4
 8008afc:	469a      	mov	sl, r3
 8008afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b02:	b10a      	cbz	r2, 8008b08 <_svfiprintf_r+0x5c>
 8008b04:	2a25      	cmp	r2, #37	; 0x25
 8008b06:	d1f9      	bne.n	8008afc <_svfiprintf_r+0x50>
 8008b08:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0c:	d00b      	beq.n	8008b26 <_svfiprintf_r+0x7a>
 8008b0e:	465b      	mov	r3, fp
 8008b10:	4622      	mov	r2, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ff6d 	bl	80089f4 <__ssputs_r>
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f000 80aa 	beq.w	8008c74 <_svfiprintf_r+0x1c8>
 8008b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b22:	445a      	add	r2, fp
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80a2 	beq.w	8008c74 <_svfiprintf_r+0x1c8>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3a:	f10a 0a01 	add.w	sl, sl, #1
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b46:	931a      	str	r3, [sp, #104]	; 0x68
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b50:	4851      	ldr	r0, [pc, #324]	; (8008c98 <_svfiprintf_r+0x1ec>)
 8008b52:	f7f7 fb45 	bl	80001e0 <memchr>
 8008b56:	9a04      	ldr	r2, [sp, #16]
 8008b58:	b9d8      	cbnz	r0, 8008b92 <_svfiprintf_r+0xe6>
 8008b5a:	06d0      	lsls	r0, r2, #27
 8008b5c:	bf44      	itt	mi
 8008b5e:	2320      	movmi	r3, #32
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b64:	0711      	lsls	r1, r2, #28
 8008b66:	bf44      	itt	mi
 8008b68:	232b      	movmi	r3, #43	; 0x2b
 8008b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b2a      	cmp	r3, #42	; 0x2a
 8008b74:	d015      	beq.n	8008ba2 <_svfiprintf_r+0xf6>
 8008b76:	9a07      	ldr	r2, [sp, #28]
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4621      	mov	r1, r4
 8008b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b86:	3b30      	subs	r3, #48	; 0x30
 8008b88:	2b09      	cmp	r3, #9
 8008b8a:	d94e      	bls.n	8008c2a <_svfiprintf_r+0x17e>
 8008b8c:	b1b0      	cbz	r0, 8008bbc <_svfiprintf_r+0x110>
 8008b8e:	9207      	str	r2, [sp, #28]
 8008b90:	e014      	b.n	8008bbc <_svfiprintf_r+0x110>
 8008b92:	eba0 0308 	sub.w	r3, r0, r8
 8008b96:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	46a2      	mov	sl, r4
 8008ba0:	e7d2      	b.n	8008b48 <_svfiprintf_r+0x9c>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	1d19      	adds	r1, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	9103      	str	r1, [sp, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbb      	ittet	lt
 8008bae:	425b      	neglt	r3, r3
 8008bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb4:	9307      	strge	r3, [sp, #28]
 8008bb6:	9307      	strlt	r3, [sp, #28]
 8008bb8:	bfb8      	it	lt
 8008bba:	9204      	strlt	r2, [sp, #16]
 8008bbc:	7823      	ldrb	r3, [r4, #0]
 8008bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc0:	d10c      	bne.n	8008bdc <_svfiprintf_r+0x130>
 8008bc2:	7863      	ldrb	r3, [r4, #1]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d135      	bne.n	8008c34 <_svfiprintf_r+0x188>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	9203      	str	r2, [sp, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bfb8      	it	lt
 8008bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bd8:	3402      	adds	r4, #2
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ca8 <_svfiprintf_r+0x1fc>
 8008be0:	7821      	ldrb	r1, [r4, #0]
 8008be2:	2203      	movs	r2, #3
 8008be4:	4650      	mov	r0, sl
 8008be6:	f7f7 fafb 	bl	80001e0 <memchr>
 8008bea:	b140      	cbz	r0, 8008bfe <_svfiprintf_r+0x152>
 8008bec:	2340      	movs	r3, #64	; 0x40
 8008bee:	eba0 000a 	sub.w	r0, r0, sl
 8008bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	4303      	orrs	r3, r0
 8008bfa:	3401      	adds	r4, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c02:	4826      	ldr	r0, [pc, #152]	; (8008c9c <_svfiprintf_r+0x1f0>)
 8008c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c08:	2206      	movs	r2, #6
 8008c0a:	f7f7 fae9 	bl	80001e0 <memchr>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d038      	beq.n	8008c84 <_svfiprintf_r+0x1d8>
 8008c12:	4b23      	ldr	r3, [pc, #140]	; (8008ca0 <_svfiprintf_r+0x1f4>)
 8008c14:	bb1b      	cbnz	r3, 8008c5e <_svfiprintf_r+0x1b2>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	4433      	add	r3, r6
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	e767      	b.n	8008afa <_svfiprintf_r+0x4e>
 8008c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2e:	460c      	mov	r4, r1
 8008c30:	2001      	movs	r0, #1
 8008c32:	e7a5      	b.n	8008b80 <_svfiprintf_r+0xd4>
 8008c34:	2300      	movs	r3, #0
 8008c36:	3401      	adds	r4, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 0c0a 	mov.w	ip, #10
 8008c40:	4620      	mov	r0, r4
 8008c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c46:	3a30      	subs	r2, #48	; 0x30
 8008c48:	2a09      	cmp	r2, #9
 8008c4a:	d903      	bls.n	8008c54 <_svfiprintf_r+0x1a8>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0c5      	beq.n	8008bdc <_svfiprintf_r+0x130>
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	e7c3      	b.n	8008bdc <_svfiprintf_r+0x130>
 8008c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c58:	4604      	mov	r4, r0
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e7f0      	b.n	8008c40 <_svfiprintf_r+0x194>
 8008c5e:	ab03      	add	r3, sp, #12
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	462a      	mov	r2, r5
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <_svfiprintf_r+0x1f8>)
 8008c66:	a904      	add	r1, sp, #16
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f3af 8000 	nop.w
 8008c6e:	1c42      	adds	r2, r0, #1
 8008c70:	4606      	mov	r6, r0
 8008c72:	d1d6      	bne.n	8008c22 <_svfiprintf_r+0x176>
 8008c74:	89ab      	ldrh	r3, [r5, #12]
 8008c76:	065b      	lsls	r3, r3, #25
 8008c78:	f53f af2c 	bmi.w	8008ad4 <_svfiprintf_r+0x28>
 8008c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7e:	b01d      	add	sp, #116	; 0x74
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	ab03      	add	r3, sp, #12
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <_svfiprintf_r+0x1f8>)
 8008c8c:	a904      	add	r1, sp, #16
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f000 f9d4 	bl	800903c <_printf_i>
 8008c94:	e7eb      	b.n	8008c6e <_svfiprintf_r+0x1c2>
 8008c96:	bf00      	nop
 8008c98:	0800afec 	.word	0x0800afec
 8008c9c:	0800aff6 	.word	0x0800aff6
 8008ca0:	00000000 	.word	0x00000000
 8008ca4:	080089f5 	.word	0x080089f5
 8008ca8:	0800aff2 	.word	0x0800aff2

08008cac <__sfputc_r>:
 8008cac:	6893      	ldr	r3, [r2, #8]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	b410      	push	{r4}
 8008cb4:	6093      	str	r3, [r2, #8]
 8008cb6:	da08      	bge.n	8008cca <__sfputc_r+0x1e>
 8008cb8:	6994      	ldr	r4, [r2, #24]
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	db01      	blt.n	8008cc2 <__sfputc_r+0x16>
 8008cbe:	290a      	cmp	r1, #10
 8008cc0:	d103      	bne.n	8008cca <__sfputc_r+0x1e>
 8008cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc6:	f000 bb7b 	b.w	80093c0 <__swbuf_r>
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	1c58      	adds	r0, r3, #1
 8008cce:	6010      	str	r0, [r2, #0]
 8008cd0:	7019      	strb	r1, [r3, #0]
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <__sfputs_r>:
 8008cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	18d5      	adds	r5, r2, r3
 8008ce4:	42ac      	cmp	r4, r5
 8008ce6:	d101      	bne.n	8008cec <__sfputs_r+0x12>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e007      	b.n	8008cfc <__sfputs_r+0x22>
 8008cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf0:	463a      	mov	r2, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ffda 	bl	8008cac <__sfputc_r>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d1f3      	bne.n	8008ce4 <__sfputs_r+0xa>
 8008cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d00 <_vfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	460d      	mov	r5, r1
 8008d06:	b09d      	sub	sp, #116	; 0x74
 8008d08:	4614      	mov	r4, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	b118      	cbz	r0, 8008d18 <_vfiprintf_r+0x18>
 8008d10:	6983      	ldr	r3, [r0, #24]
 8008d12:	b90b      	cbnz	r3, 8008d18 <_vfiprintf_r+0x18>
 8008d14:	f7ff fd3a 	bl	800878c <__sinit>
 8008d18:	4b89      	ldr	r3, [pc, #548]	; (8008f40 <_vfiprintf_r+0x240>)
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	d11b      	bne.n	8008d56 <_vfiprintf_r+0x56>
 8008d1e:	6875      	ldr	r5, [r6, #4]
 8008d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d22:	07d9      	lsls	r1, r3, #31
 8008d24:	d405      	bmi.n	8008d32 <_vfiprintf_r+0x32>
 8008d26:	89ab      	ldrh	r3, [r5, #12]
 8008d28:	059a      	lsls	r2, r3, #22
 8008d2a:	d402      	bmi.n	8008d32 <_vfiprintf_r+0x32>
 8008d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d2e:	f7ff fdcb 	bl	80088c8 <__retarget_lock_acquire_recursive>
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	071b      	lsls	r3, r3, #28
 8008d36:	d501      	bpl.n	8008d3c <_vfiprintf_r+0x3c>
 8008d38:	692b      	ldr	r3, [r5, #16]
 8008d3a:	b9eb      	cbnz	r3, 8008d78 <_vfiprintf_r+0x78>
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f000 fba2 	bl	8009488 <__swsetup_r>
 8008d44:	b1c0      	cbz	r0, 8008d78 <_vfiprintf_r+0x78>
 8008d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d48:	07dc      	lsls	r4, r3, #31
 8008d4a:	d50e      	bpl.n	8008d6a <_vfiprintf_r+0x6a>
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	b01d      	add	sp, #116	; 0x74
 8008d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	4b7b      	ldr	r3, [pc, #492]	; (8008f44 <_vfiprintf_r+0x244>)
 8008d58:	429d      	cmp	r5, r3
 8008d5a:	d101      	bne.n	8008d60 <_vfiprintf_r+0x60>
 8008d5c:	68b5      	ldr	r5, [r6, #8]
 8008d5e:	e7df      	b.n	8008d20 <_vfiprintf_r+0x20>
 8008d60:	4b79      	ldr	r3, [pc, #484]	; (8008f48 <_vfiprintf_r+0x248>)
 8008d62:	429d      	cmp	r5, r3
 8008d64:	bf08      	it	eq
 8008d66:	68f5      	ldreq	r5, [r6, #12]
 8008d68:	e7da      	b.n	8008d20 <_vfiprintf_r+0x20>
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	0598      	lsls	r0, r3, #22
 8008d6e:	d4ed      	bmi.n	8008d4c <_vfiprintf_r+0x4c>
 8008d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d72:	f7ff fdaa 	bl	80088ca <__retarget_lock_release_recursive>
 8008d76:	e7e9      	b.n	8008d4c <_vfiprintf_r+0x4c>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d86:	2330      	movs	r3, #48	; 0x30
 8008d88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f4c <_vfiprintf_r+0x24c>
 8008d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d90:	f04f 0901 	mov.w	r9, #1
 8008d94:	4623      	mov	r3, r4
 8008d96:	469a      	mov	sl, r3
 8008d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9c:	b10a      	cbz	r2, 8008da2 <_vfiprintf_r+0xa2>
 8008d9e:	2a25      	cmp	r2, #37	; 0x25
 8008da0:	d1f9      	bne.n	8008d96 <_vfiprintf_r+0x96>
 8008da2:	ebba 0b04 	subs.w	fp, sl, r4
 8008da6:	d00b      	beq.n	8008dc0 <_vfiprintf_r+0xc0>
 8008da8:	465b      	mov	r3, fp
 8008daa:	4622      	mov	r2, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ff93 	bl	8008cda <__sfputs_r>
 8008db4:	3001      	adds	r0, #1
 8008db6:	f000 80aa 	beq.w	8008f0e <_vfiprintf_r+0x20e>
 8008dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbc:	445a      	add	r2, fp
 8008dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80a2 	beq.w	8008f0e <_vfiprintf_r+0x20e>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd4:	f10a 0a01 	add.w	sl, sl, #1
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	9307      	str	r3, [sp, #28]
 8008ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de0:	931a      	str	r3, [sp, #104]	; 0x68
 8008de2:	4654      	mov	r4, sl
 8008de4:	2205      	movs	r2, #5
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	4858      	ldr	r0, [pc, #352]	; (8008f4c <_vfiprintf_r+0x24c>)
 8008dec:	f7f7 f9f8 	bl	80001e0 <memchr>
 8008df0:	9a04      	ldr	r2, [sp, #16]
 8008df2:	b9d8      	cbnz	r0, 8008e2c <_vfiprintf_r+0x12c>
 8008df4:	06d1      	lsls	r1, r2, #27
 8008df6:	bf44      	itt	mi
 8008df8:	2320      	movmi	r3, #32
 8008dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfe:	0713      	lsls	r3, r2, #28
 8008e00:	bf44      	itt	mi
 8008e02:	232b      	movmi	r3, #43	; 0x2b
 8008e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e08:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0e:	d015      	beq.n	8008e3c <_vfiprintf_r+0x13c>
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	4654      	mov	r4, sl
 8008e14:	2000      	movs	r0, #0
 8008e16:	f04f 0c0a 	mov.w	ip, #10
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e20:	3b30      	subs	r3, #48	; 0x30
 8008e22:	2b09      	cmp	r3, #9
 8008e24:	d94e      	bls.n	8008ec4 <_vfiprintf_r+0x1c4>
 8008e26:	b1b0      	cbz	r0, 8008e56 <_vfiprintf_r+0x156>
 8008e28:	9207      	str	r2, [sp, #28]
 8008e2a:	e014      	b.n	8008e56 <_vfiprintf_r+0x156>
 8008e2c:	eba0 0308 	sub.w	r3, r0, r8
 8008e30:	fa09 f303 	lsl.w	r3, r9, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	46a2      	mov	sl, r4
 8008e3a:	e7d2      	b.n	8008de2 <_vfiprintf_r+0xe2>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	1d19      	adds	r1, r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	9103      	str	r1, [sp, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bfbb      	ittet	lt
 8008e48:	425b      	neglt	r3, r3
 8008e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4e:	9307      	strge	r3, [sp, #28]
 8008e50:	9307      	strlt	r3, [sp, #28]
 8008e52:	bfb8      	it	lt
 8008e54:	9204      	strlt	r2, [sp, #16]
 8008e56:	7823      	ldrb	r3, [r4, #0]
 8008e58:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5a:	d10c      	bne.n	8008e76 <_vfiprintf_r+0x176>
 8008e5c:	7863      	ldrb	r3, [r4, #1]
 8008e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e60:	d135      	bne.n	8008ece <_vfiprintf_r+0x1ce>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	1d1a      	adds	r2, r3, #4
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	9203      	str	r2, [sp, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bfb8      	it	lt
 8008e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e72:	3402      	adds	r4, #2
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f5c <_vfiprintf_r+0x25c>
 8008e7a:	7821      	ldrb	r1, [r4, #0]
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	4650      	mov	r0, sl
 8008e80:	f7f7 f9ae 	bl	80001e0 <memchr>
 8008e84:	b140      	cbz	r0, 8008e98 <_vfiprintf_r+0x198>
 8008e86:	2340      	movs	r3, #64	; 0x40
 8008e88:	eba0 000a 	sub.w	r0, r0, sl
 8008e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	4303      	orrs	r3, r0
 8008e94:	3401      	adds	r4, #1
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9c:	482c      	ldr	r0, [pc, #176]	; (8008f50 <_vfiprintf_r+0x250>)
 8008e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea2:	2206      	movs	r2, #6
 8008ea4:	f7f7 f99c 	bl	80001e0 <memchr>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d03f      	beq.n	8008f2c <_vfiprintf_r+0x22c>
 8008eac:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <_vfiprintf_r+0x254>)
 8008eae:	bb1b      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x1f8>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	3307      	adds	r3, #7
 8008eb4:	f023 0307 	bic.w	r3, r3, #7
 8008eb8:	3308      	adds	r3, #8
 8008eba:	9303      	str	r3, [sp, #12]
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	443b      	add	r3, r7
 8008ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec2:	e767      	b.n	8008d94 <_vfiprintf_r+0x94>
 8008ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec8:	460c      	mov	r4, r1
 8008eca:	2001      	movs	r0, #1
 8008ecc:	e7a5      	b.n	8008e1a <_vfiprintf_r+0x11a>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9305      	str	r3, [sp, #20]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f04f 0c0a 	mov.w	ip, #10
 8008eda:	4620      	mov	r0, r4
 8008edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee0:	3a30      	subs	r2, #48	; 0x30
 8008ee2:	2a09      	cmp	r2, #9
 8008ee4:	d903      	bls.n	8008eee <_vfiprintf_r+0x1ee>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0c5      	beq.n	8008e76 <_vfiprintf_r+0x176>
 8008eea:	9105      	str	r1, [sp, #20]
 8008eec:	e7c3      	b.n	8008e76 <_vfiprintf_r+0x176>
 8008eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e7f0      	b.n	8008eda <_vfiprintf_r+0x1da>
 8008ef8:	ab03      	add	r3, sp, #12
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	462a      	mov	r2, r5
 8008efe:	4b16      	ldr	r3, [pc, #88]	; (8008f58 <_vfiprintf_r+0x258>)
 8008f00:	a904      	add	r1, sp, #16
 8008f02:	4630      	mov	r0, r6
 8008f04:	f3af 8000 	nop.w
 8008f08:	4607      	mov	r7, r0
 8008f0a:	1c78      	adds	r0, r7, #1
 8008f0c:	d1d6      	bne.n	8008ebc <_vfiprintf_r+0x1bc>
 8008f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f10:	07d9      	lsls	r1, r3, #31
 8008f12:	d405      	bmi.n	8008f20 <_vfiprintf_r+0x220>
 8008f14:	89ab      	ldrh	r3, [r5, #12]
 8008f16:	059a      	lsls	r2, r3, #22
 8008f18:	d402      	bmi.n	8008f20 <_vfiprintf_r+0x220>
 8008f1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1c:	f7ff fcd5 	bl	80088ca <__retarget_lock_release_recursive>
 8008f20:	89ab      	ldrh	r3, [r5, #12]
 8008f22:	065b      	lsls	r3, r3, #25
 8008f24:	f53f af12 	bmi.w	8008d4c <_vfiprintf_r+0x4c>
 8008f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f2a:	e711      	b.n	8008d50 <_vfiprintf_r+0x50>
 8008f2c:	ab03      	add	r3, sp, #12
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	462a      	mov	r2, r5
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <_vfiprintf_r+0x258>)
 8008f34:	a904      	add	r1, sp, #16
 8008f36:	4630      	mov	r0, r6
 8008f38:	f000 f880 	bl	800903c <_printf_i>
 8008f3c:	e7e4      	b.n	8008f08 <_vfiprintf_r+0x208>
 8008f3e:	bf00      	nop
 8008f40:	0800afac 	.word	0x0800afac
 8008f44:	0800afcc 	.word	0x0800afcc
 8008f48:	0800af8c 	.word	0x0800af8c
 8008f4c:	0800afec 	.word	0x0800afec
 8008f50:	0800aff6 	.word	0x0800aff6
 8008f54:	00000000 	.word	0x00000000
 8008f58:	08008cdb 	.word	0x08008cdb
 8008f5c:	0800aff2 	.word	0x0800aff2

08008f60 <_printf_common>:
 8008f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f64:	4616      	mov	r6, r2
 8008f66:	4699      	mov	r9, r3
 8008f68:	688a      	ldr	r2, [r1, #8]
 8008f6a:	690b      	ldr	r3, [r1, #16]
 8008f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	bfb8      	it	lt
 8008f74:	4613      	movlt	r3, r2
 8008f76:	6033      	str	r3, [r6, #0]
 8008f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	b10a      	cbz	r2, 8008f86 <_printf_common+0x26>
 8008f82:	3301      	adds	r3, #1
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	0699      	lsls	r1, r3, #26
 8008f8a:	bf42      	ittt	mi
 8008f8c:	6833      	ldrmi	r3, [r6, #0]
 8008f8e:	3302      	addmi	r3, #2
 8008f90:	6033      	strmi	r3, [r6, #0]
 8008f92:	6825      	ldr	r5, [r4, #0]
 8008f94:	f015 0506 	ands.w	r5, r5, #6
 8008f98:	d106      	bne.n	8008fa8 <_printf_common+0x48>
 8008f9a:	f104 0a19 	add.w	sl, r4, #25
 8008f9e:	68e3      	ldr	r3, [r4, #12]
 8008fa0:	6832      	ldr	r2, [r6, #0]
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	42ab      	cmp	r3, r5
 8008fa6:	dc26      	bgt.n	8008ff6 <_printf_common+0x96>
 8008fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fac:	1e13      	subs	r3, r2, #0
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	bf18      	it	ne
 8008fb2:	2301      	movne	r3, #1
 8008fb4:	0692      	lsls	r2, r2, #26
 8008fb6:	d42b      	bmi.n	8009010 <_printf_common+0xb0>
 8008fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	47c0      	blx	r8
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d01e      	beq.n	8009004 <_printf_common+0xa4>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	68e5      	ldr	r5, [r4, #12]
 8008fca:	6832      	ldr	r2, [r6, #0]
 8008fcc:	f003 0306 	and.w	r3, r3, #6
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	bf08      	it	eq
 8008fd4:	1aad      	subeq	r5, r5, r2
 8008fd6:	68a3      	ldr	r3, [r4, #8]
 8008fd8:	6922      	ldr	r2, [r4, #16]
 8008fda:	bf0c      	ite	eq
 8008fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fe0:	2500      	movne	r5, #0
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	bfc4      	itt	gt
 8008fe6:	1a9b      	subgt	r3, r3, r2
 8008fe8:	18ed      	addgt	r5, r5, r3
 8008fea:	2600      	movs	r6, #0
 8008fec:	341a      	adds	r4, #26
 8008fee:	42b5      	cmp	r5, r6
 8008ff0:	d11a      	bne.n	8009028 <_printf_common+0xc8>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e008      	b.n	8009008 <_printf_common+0xa8>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4652      	mov	r2, sl
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	47c0      	blx	r8
 8009000:	3001      	adds	r0, #1
 8009002:	d103      	bne.n	800900c <_printf_common+0xac>
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900c:	3501      	adds	r5, #1
 800900e:	e7c6      	b.n	8008f9e <_printf_common+0x3e>
 8009010:	18e1      	adds	r1, r4, r3
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	2030      	movs	r0, #48	; 0x30
 8009016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800901a:	4422      	add	r2, r4
 800901c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009024:	3302      	adds	r3, #2
 8009026:	e7c7      	b.n	8008fb8 <_printf_common+0x58>
 8009028:	2301      	movs	r3, #1
 800902a:	4622      	mov	r2, r4
 800902c:	4649      	mov	r1, r9
 800902e:	4638      	mov	r0, r7
 8009030:	47c0      	blx	r8
 8009032:	3001      	adds	r0, #1
 8009034:	d0e6      	beq.n	8009004 <_printf_common+0xa4>
 8009036:	3601      	adds	r6, #1
 8009038:	e7d9      	b.n	8008fee <_printf_common+0x8e>
	...

0800903c <_printf_i>:
 800903c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	7e0f      	ldrb	r7, [r1, #24]
 8009042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009044:	2f78      	cmp	r7, #120	; 0x78
 8009046:	4691      	mov	r9, r2
 8009048:	4680      	mov	r8, r0
 800904a:	460c      	mov	r4, r1
 800904c:	469a      	mov	sl, r3
 800904e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009052:	d807      	bhi.n	8009064 <_printf_i+0x28>
 8009054:	2f62      	cmp	r7, #98	; 0x62
 8009056:	d80a      	bhi.n	800906e <_printf_i+0x32>
 8009058:	2f00      	cmp	r7, #0
 800905a:	f000 80d8 	beq.w	800920e <_printf_i+0x1d2>
 800905e:	2f58      	cmp	r7, #88	; 0x58
 8009060:	f000 80a3 	beq.w	80091aa <_printf_i+0x16e>
 8009064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800906c:	e03a      	b.n	80090e4 <_printf_i+0xa8>
 800906e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009072:	2b15      	cmp	r3, #21
 8009074:	d8f6      	bhi.n	8009064 <_printf_i+0x28>
 8009076:	a101      	add	r1, pc, #4	; (adr r1, 800907c <_printf_i+0x40>)
 8009078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090e9 	.word	0x080090e9
 8009084:	08009065 	.word	0x08009065
 8009088:	08009065 	.word	0x08009065
 800908c:	08009065 	.word	0x08009065
 8009090:	08009065 	.word	0x08009065
 8009094:	080090e9 	.word	0x080090e9
 8009098:	08009065 	.word	0x08009065
 800909c:	08009065 	.word	0x08009065
 80090a0:	08009065 	.word	0x08009065
 80090a4:	08009065 	.word	0x08009065
 80090a8:	080091f5 	.word	0x080091f5
 80090ac:	08009119 	.word	0x08009119
 80090b0:	080091d7 	.word	0x080091d7
 80090b4:	08009065 	.word	0x08009065
 80090b8:	08009065 	.word	0x08009065
 80090bc:	08009217 	.word	0x08009217
 80090c0:	08009065 	.word	0x08009065
 80090c4:	08009119 	.word	0x08009119
 80090c8:	08009065 	.word	0x08009065
 80090cc:	08009065 	.word	0x08009065
 80090d0:	080091df 	.word	0x080091df
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	602a      	str	r2, [r5, #0]
 80090dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0a3      	b.n	8009230 <_printf_i+0x1f4>
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	6829      	ldr	r1, [r5, #0]
 80090ec:	0606      	lsls	r6, r0, #24
 80090ee:	f101 0304 	add.w	r3, r1, #4
 80090f2:	d50a      	bpl.n	800910a <_printf_i+0xce>
 80090f4:	680e      	ldr	r6, [r1, #0]
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	2e00      	cmp	r6, #0
 80090fa:	da03      	bge.n	8009104 <_printf_i+0xc8>
 80090fc:	232d      	movs	r3, #45	; 0x2d
 80090fe:	4276      	negs	r6, r6
 8009100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009104:	485e      	ldr	r0, [pc, #376]	; (8009280 <_printf_i+0x244>)
 8009106:	230a      	movs	r3, #10
 8009108:	e019      	b.n	800913e <_printf_i+0x102>
 800910a:	680e      	ldr	r6, [r1, #0]
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009112:	bf18      	it	ne
 8009114:	b236      	sxthne	r6, r6
 8009116:	e7ef      	b.n	80090f8 <_printf_i+0xbc>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	1d19      	adds	r1, r3, #4
 800911e:	6029      	str	r1, [r5, #0]
 8009120:	0601      	lsls	r1, r0, #24
 8009122:	d501      	bpl.n	8009128 <_printf_i+0xec>
 8009124:	681e      	ldr	r6, [r3, #0]
 8009126:	e002      	b.n	800912e <_printf_i+0xf2>
 8009128:	0646      	lsls	r6, r0, #25
 800912a:	d5fb      	bpl.n	8009124 <_printf_i+0xe8>
 800912c:	881e      	ldrh	r6, [r3, #0]
 800912e:	4854      	ldr	r0, [pc, #336]	; (8009280 <_printf_i+0x244>)
 8009130:	2f6f      	cmp	r7, #111	; 0x6f
 8009132:	bf0c      	ite	eq
 8009134:	2308      	moveq	r3, #8
 8009136:	230a      	movne	r3, #10
 8009138:	2100      	movs	r1, #0
 800913a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800913e:	6865      	ldr	r5, [r4, #4]
 8009140:	60a5      	str	r5, [r4, #8]
 8009142:	2d00      	cmp	r5, #0
 8009144:	bfa2      	ittt	ge
 8009146:	6821      	ldrge	r1, [r4, #0]
 8009148:	f021 0104 	bicge.w	r1, r1, #4
 800914c:	6021      	strge	r1, [r4, #0]
 800914e:	b90e      	cbnz	r6, 8009154 <_printf_i+0x118>
 8009150:	2d00      	cmp	r5, #0
 8009152:	d04d      	beq.n	80091f0 <_printf_i+0x1b4>
 8009154:	4615      	mov	r5, r2
 8009156:	fbb6 f1f3 	udiv	r1, r6, r3
 800915a:	fb03 6711 	mls	r7, r3, r1, r6
 800915e:	5dc7      	ldrb	r7, [r0, r7]
 8009160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009164:	4637      	mov	r7, r6
 8009166:	42bb      	cmp	r3, r7
 8009168:	460e      	mov	r6, r1
 800916a:	d9f4      	bls.n	8009156 <_printf_i+0x11a>
 800916c:	2b08      	cmp	r3, #8
 800916e:	d10b      	bne.n	8009188 <_printf_i+0x14c>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07de      	lsls	r6, r3, #31
 8009174:	d508      	bpl.n	8009188 <_printf_i+0x14c>
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	6861      	ldr	r1, [r4, #4]
 800917a:	4299      	cmp	r1, r3
 800917c:	bfde      	ittt	le
 800917e:	2330      	movle	r3, #48	; 0x30
 8009180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009188:	1b52      	subs	r2, r2, r5
 800918a:	6122      	str	r2, [r4, #16]
 800918c:	f8cd a000 	str.w	sl, [sp]
 8009190:	464b      	mov	r3, r9
 8009192:	aa03      	add	r2, sp, #12
 8009194:	4621      	mov	r1, r4
 8009196:	4640      	mov	r0, r8
 8009198:	f7ff fee2 	bl	8008f60 <_printf_common>
 800919c:	3001      	adds	r0, #1
 800919e:	d14c      	bne.n	800923a <_printf_i+0x1fe>
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	b004      	add	sp, #16
 80091a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091aa:	4835      	ldr	r0, [pc, #212]	; (8009280 <_printf_i+0x244>)
 80091ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091b0:	6829      	ldr	r1, [r5, #0]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80091b8:	6029      	str	r1, [r5, #0]
 80091ba:	061d      	lsls	r5, r3, #24
 80091bc:	d514      	bpl.n	80091e8 <_printf_i+0x1ac>
 80091be:	07df      	lsls	r7, r3, #31
 80091c0:	bf44      	itt	mi
 80091c2:	f043 0320 	orrmi.w	r3, r3, #32
 80091c6:	6023      	strmi	r3, [r4, #0]
 80091c8:	b91e      	cbnz	r6, 80091d2 <_printf_i+0x196>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	f023 0320 	bic.w	r3, r3, #32
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	2310      	movs	r3, #16
 80091d4:	e7b0      	b.n	8009138 <_printf_i+0xfc>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	f043 0320 	orr.w	r3, r3, #32
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	2378      	movs	r3, #120	; 0x78
 80091e0:	4828      	ldr	r0, [pc, #160]	; (8009284 <_printf_i+0x248>)
 80091e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091e6:	e7e3      	b.n	80091b0 <_printf_i+0x174>
 80091e8:	0659      	lsls	r1, r3, #25
 80091ea:	bf48      	it	mi
 80091ec:	b2b6      	uxthmi	r6, r6
 80091ee:	e7e6      	b.n	80091be <_printf_i+0x182>
 80091f0:	4615      	mov	r5, r2
 80091f2:	e7bb      	b.n	800916c <_printf_i+0x130>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	6826      	ldr	r6, [r4, #0]
 80091f8:	6961      	ldr	r1, [r4, #20]
 80091fa:	1d18      	adds	r0, r3, #4
 80091fc:	6028      	str	r0, [r5, #0]
 80091fe:	0635      	lsls	r5, r6, #24
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	d501      	bpl.n	8009208 <_printf_i+0x1cc>
 8009204:	6019      	str	r1, [r3, #0]
 8009206:	e002      	b.n	800920e <_printf_i+0x1d2>
 8009208:	0670      	lsls	r0, r6, #25
 800920a:	d5fb      	bpl.n	8009204 <_printf_i+0x1c8>
 800920c:	8019      	strh	r1, [r3, #0]
 800920e:	2300      	movs	r3, #0
 8009210:	6123      	str	r3, [r4, #16]
 8009212:	4615      	mov	r5, r2
 8009214:	e7ba      	b.n	800918c <_printf_i+0x150>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	602a      	str	r2, [r5, #0]
 800921c:	681d      	ldr	r5, [r3, #0]
 800921e:	6862      	ldr	r2, [r4, #4]
 8009220:	2100      	movs	r1, #0
 8009222:	4628      	mov	r0, r5
 8009224:	f7f6 ffdc 	bl	80001e0 <memchr>
 8009228:	b108      	cbz	r0, 800922e <_printf_i+0x1f2>
 800922a:	1b40      	subs	r0, r0, r5
 800922c:	6060      	str	r0, [r4, #4]
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	6123      	str	r3, [r4, #16]
 8009232:	2300      	movs	r3, #0
 8009234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009238:	e7a8      	b.n	800918c <_printf_i+0x150>
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	462a      	mov	r2, r5
 800923e:	4649      	mov	r1, r9
 8009240:	4640      	mov	r0, r8
 8009242:	47d0      	blx	sl
 8009244:	3001      	adds	r0, #1
 8009246:	d0ab      	beq.n	80091a0 <_printf_i+0x164>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	079b      	lsls	r3, r3, #30
 800924c:	d413      	bmi.n	8009276 <_printf_i+0x23a>
 800924e:	68e0      	ldr	r0, [r4, #12]
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	4298      	cmp	r0, r3
 8009254:	bfb8      	it	lt
 8009256:	4618      	movlt	r0, r3
 8009258:	e7a4      	b.n	80091a4 <_printf_i+0x168>
 800925a:	2301      	movs	r3, #1
 800925c:	4632      	mov	r2, r6
 800925e:	4649      	mov	r1, r9
 8009260:	4640      	mov	r0, r8
 8009262:	47d0      	blx	sl
 8009264:	3001      	adds	r0, #1
 8009266:	d09b      	beq.n	80091a0 <_printf_i+0x164>
 8009268:	3501      	adds	r5, #1
 800926a:	68e3      	ldr	r3, [r4, #12]
 800926c:	9903      	ldr	r1, [sp, #12]
 800926e:	1a5b      	subs	r3, r3, r1
 8009270:	42ab      	cmp	r3, r5
 8009272:	dcf2      	bgt.n	800925a <_printf_i+0x21e>
 8009274:	e7eb      	b.n	800924e <_printf_i+0x212>
 8009276:	2500      	movs	r5, #0
 8009278:	f104 0619 	add.w	r6, r4, #25
 800927c:	e7f5      	b.n	800926a <_printf_i+0x22e>
 800927e:	bf00      	nop
 8009280:	0800affd 	.word	0x0800affd
 8009284:	0800b00e 	.word	0x0800b00e

08009288 <_putc_r>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	460d      	mov	r5, r1
 800928c:	4614      	mov	r4, r2
 800928e:	4606      	mov	r6, r0
 8009290:	b118      	cbz	r0, 800929a <_putc_r+0x12>
 8009292:	6983      	ldr	r3, [r0, #24]
 8009294:	b90b      	cbnz	r3, 800929a <_putc_r+0x12>
 8009296:	f7ff fa79 	bl	800878c <__sinit>
 800929a:	4b1c      	ldr	r3, [pc, #112]	; (800930c <_putc_r+0x84>)
 800929c:	429c      	cmp	r4, r3
 800929e:	d124      	bne.n	80092ea <_putc_r+0x62>
 80092a0:	6874      	ldr	r4, [r6, #4]
 80092a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a4:	07d8      	lsls	r0, r3, #31
 80092a6:	d405      	bmi.n	80092b4 <_putc_r+0x2c>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	0599      	lsls	r1, r3, #22
 80092ac:	d402      	bmi.n	80092b4 <_putc_r+0x2c>
 80092ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092b0:	f7ff fb0a 	bl	80088c8 <__retarget_lock_acquire_recursive>
 80092b4:	68a3      	ldr	r3, [r4, #8]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	60a3      	str	r3, [r4, #8]
 80092bc:	da05      	bge.n	80092ca <_putc_r+0x42>
 80092be:	69a2      	ldr	r2, [r4, #24]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	db1c      	blt.n	80092fe <_putc_r+0x76>
 80092c4:	b2eb      	uxtb	r3, r5
 80092c6:	2b0a      	cmp	r3, #10
 80092c8:	d019      	beq.n	80092fe <_putc_r+0x76>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	6022      	str	r2, [r4, #0]
 80092d0:	701d      	strb	r5, [r3, #0]
 80092d2:	b2ed      	uxtb	r5, r5
 80092d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092d6:	07da      	lsls	r2, r3, #31
 80092d8:	d405      	bmi.n	80092e6 <_putc_r+0x5e>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	059b      	lsls	r3, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_putc_r+0x5e>
 80092e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e2:	f7ff faf2 	bl	80088ca <__retarget_lock_release_recursive>
 80092e6:	4628      	mov	r0, r5
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <_putc_r+0x88>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d101      	bne.n	80092f4 <_putc_r+0x6c>
 80092f0:	68b4      	ldr	r4, [r6, #8]
 80092f2:	e7d6      	b.n	80092a2 <_putc_r+0x1a>
 80092f4:	4b07      	ldr	r3, [pc, #28]	; (8009314 <_putc_r+0x8c>)
 80092f6:	429c      	cmp	r4, r3
 80092f8:	bf08      	it	eq
 80092fa:	68f4      	ldreq	r4, [r6, #12]
 80092fc:	e7d1      	b.n	80092a2 <_putc_r+0x1a>
 80092fe:	4629      	mov	r1, r5
 8009300:	4622      	mov	r2, r4
 8009302:	4630      	mov	r0, r6
 8009304:	f000 f85c 	bl	80093c0 <__swbuf_r>
 8009308:	4605      	mov	r5, r0
 800930a:	e7e3      	b.n	80092d4 <_putc_r+0x4c>
 800930c:	0800afac 	.word	0x0800afac
 8009310:	0800afcc 	.word	0x0800afcc
 8009314:	0800af8c 	.word	0x0800af8c

08009318 <_sbrk_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	; (8009334 <_sbrk_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 f8b0 	bl	8001488 <_sbrk>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_sbrk_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_sbrk_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20002264 	.word	0x20002264

08009338 <__sread>:
 8009338:	b510      	push	{r4, lr}
 800933a:	460c      	mov	r4, r1
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	f000 fb0a 	bl	8009958 <_read_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	bfab      	itete	ge
 8009348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800934a:	89a3      	ldrhlt	r3, [r4, #12]
 800934c:	181b      	addge	r3, r3, r0
 800934e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009352:	bfac      	ite	ge
 8009354:	6563      	strge	r3, [r4, #84]	; 0x54
 8009356:	81a3      	strhlt	r3, [r4, #12]
 8009358:	bd10      	pop	{r4, pc}

0800935a <__swrite>:
 800935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	461f      	mov	r7, r3
 8009360:	898b      	ldrh	r3, [r1, #12]
 8009362:	05db      	lsls	r3, r3, #23
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4616      	mov	r6, r2
 800936a:	d505      	bpl.n	8009378 <__swrite+0x1e>
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2302      	movs	r3, #2
 8009372:	2200      	movs	r2, #0
 8009374:	f000 f9c8 	bl	8009708 <_lseek_r>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	4632      	mov	r2, r6
 8009386:	463b      	mov	r3, r7
 8009388:	4628      	mov	r0, r5
 800938a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938e:	f000 b869 	b.w	8009464 <_write_r>

08009392 <__sseek>:
 8009392:	b510      	push	{r4, lr}
 8009394:	460c      	mov	r4, r1
 8009396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939a:	f000 f9b5 	bl	8009708 <_lseek_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	bf15      	itete	ne
 80093a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ae:	81a3      	strheq	r3, [r4, #12]
 80093b0:	bf18      	it	ne
 80093b2:	81a3      	strhne	r3, [r4, #12]
 80093b4:	bd10      	pop	{r4, pc}

080093b6 <__sclose>:
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 b8d3 	b.w	8009564 <_close_r>
	...

080093c0 <__swbuf_r>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	460e      	mov	r6, r1
 80093c4:	4614      	mov	r4, r2
 80093c6:	4605      	mov	r5, r0
 80093c8:	b118      	cbz	r0, 80093d2 <__swbuf_r+0x12>
 80093ca:	6983      	ldr	r3, [r0, #24]
 80093cc:	b90b      	cbnz	r3, 80093d2 <__swbuf_r+0x12>
 80093ce:	f7ff f9dd 	bl	800878c <__sinit>
 80093d2:	4b21      	ldr	r3, [pc, #132]	; (8009458 <__swbuf_r+0x98>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d12b      	bne.n	8009430 <__swbuf_r+0x70>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	69a3      	ldr	r3, [r4, #24]
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	071a      	lsls	r2, r3, #28
 80093e2:	d52f      	bpl.n	8009444 <__swbuf_r+0x84>
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	b36b      	cbz	r3, 8009444 <__swbuf_r+0x84>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	6820      	ldr	r0, [r4, #0]
 80093ec:	1ac0      	subs	r0, r0, r3
 80093ee:	6963      	ldr	r3, [r4, #20]
 80093f0:	b2f6      	uxtb	r6, r6
 80093f2:	4283      	cmp	r3, r0
 80093f4:	4637      	mov	r7, r6
 80093f6:	dc04      	bgt.n	8009402 <__swbuf_r+0x42>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 f948 	bl	8009690 <_fflush_r>
 8009400:	bb30      	cbnz	r0, 8009450 <__swbuf_r+0x90>
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	3b01      	subs	r3, #1
 8009406:	60a3      	str	r3, [r4, #8]
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	701e      	strb	r6, [r3, #0]
 8009410:	6963      	ldr	r3, [r4, #20]
 8009412:	3001      	adds	r0, #1
 8009414:	4283      	cmp	r3, r0
 8009416:	d004      	beq.n	8009422 <__swbuf_r+0x62>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	07db      	lsls	r3, r3, #31
 800941c:	d506      	bpl.n	800942c <__swbuf_r+0x6c>
 800941e:	2e0a      	cmp	r6, #10
 8009420:	d104      	bne.n	800942c <__swbuf_r+0x6c>
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f933 	bl	8009690 <_fflush_r>
 800942a:	b988      	cbnz	r0, 8009450 <__swbuf_r+0x90>
 800942c:	4638      	mov	r0, r7
 800942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <__swbuf_r+0x9c>)
 8009432:	429c      	cmp	r4, r3
 8009434:	d101      	bne.n	800943a <__swbuf_r+0x7a>
 8009436:	68ac      	ldr	r4, [r5, #8]
 8009438:	e7cf      	b.n	80093da <__swbuf_r+0x1a>
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <__swbuf_r+0xa0>)
 800943c:	429c      	cmp	r4, r3
 800943e:	bf08      	it	eq
 8009440:	68ec      	ldreq	r4, [r5, #12]
 8009442:	e7ca      	b.n	80093da <__swbuf_r+0x1a>
 8009444:	4621      	mov	r1, r4
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f81e 	bl	8009488 <__swsetup_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0cb      	beq.n	80093e8 <__swbuf_r+0x28>
 8009450:	f04f 37ff 	mov.w	r7, #4294967295
 8009454:	e7ea      	b.n	800942c <__swbuf_r+0x6c>
 8009456:	bf00      	nop
 8009458:	0800afac 	.word	0x0800afac
 800945c:	0800afcc 	.word	0x0800afcc
 8009460:	0800af8c 	.word	0x0800af8c

08009464 <_write_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_write_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f7 f8cb 	bl	800060e <_write>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_write_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_write_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20002264 	.word	0x20002264

08009488 <__swsetup_r>:
 8009488:	4b32      	ldr	r3, [pc, #200]	; (8009554 <__swsetup_r+0xcc>)
 800948a:	b570      	push	{r4, r5, r6, lr}
 800948c:	681d      	ldr	r5, [r3, #0]
 800948e:	4606      	mov	r6, r0
 8009490:	460c      	mov	r4, r1
 8009492:	b125      	cbz	r5, 800949e <__swsetup_r+0x16>
 8009494:	69ab      	ldr	r3, [r5, #24]
 8009496:	b913      	cbnz	r3, 800949e <__swsetup_r+0x16>
 8009498:	4628      	mov	r0, r5
 800949a:	f7ff f977 	bl	800878c <__sinit>
 800949e:	4b2e      	ldr	r3, [pc, #184]	; (8009558 <__swsetup_r+0xd0>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	d10f      	bne.n	80094c4 <__swsetup_r+0x3c>
 80094a4:	686c      	ldr	r4, [r5, #4]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ac:	0719      	lsls	r1, r3, #28
 80094ae:	d42c      	bmi.n	800950a <__swsetup_r+0x82>
 80094b0:	06dd      	lsls	r5, r3, #27
 80094b2:	d411      	bmi.n	80094d8 <__swsetup_r+0x50>
 80094b4:	2309      	movs	r3, #9
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	e03e      	b.n	8009542 <__swsetup_r+0xba>
 80094c4:	4b25      	ldr	r3, [pc, #148]	; (800955c <__swsetup_r+0xd4>)
 80094c6:	429c      	cmp	r4, r3
 80094c8:	d101      	bne.n	80094ce <__swsetup_r+0x46>
 80094ca:	68ac      	ldr	r4, [r5, #8]
 80094cc:	e7eb      	b.n	80094a6 <__swsetup_r+0x1e>
 80094ce:	4b24      	ldr	r3, [pc, #144]	; (8009560 <__swsetup_r+0xd8>)
 80094d0:	429c      	cmp	r4, r3
 80094d2:	bf08      	it	eq
 80094d4:	68ec      	ldreq	r4, [r5, #12]
 80094d6:	e7e6      	b.n	80094a6 <__swsetup_r+0x1e>
 80094d8:	0758      	lsls	r0, r3, #29
 80094da:	d512      	bpl.n	8009502 <__swsetup_r+0x7a>
 80094dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094de:	b141      	cbz	r1, 80094f2 <__swsetup_r+0x6a>
 80094e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e4:	4299      	cmp	r1, r3
 80094e6:	d002      	beq.n	80094ee <__swsetup_r+0x66>
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 f9b9 	bl	8009860 <_free_r>
 80094ee:	2300      	movs	r3, #0
 80094f0:	6363      	str	r3, [r4, #52]	; 0x34
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	2300      	movs	r3, #0
 80094fc:	6063      	str	r3, [r4, #4]
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f043 0308 	orr.w	r3, r3, #8
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	6923      	ldr	r3, [r4, #16]
 800950c:	b94b      	cbnz	r3, 8009522 <__swsetup_r+0x9a>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009518:	d003      	beq.n	8009522 <__swsetup_r+0x9a>
 800951a:	4621      	mov	r1, r4
 800951c:	4630      	mov	r0, r6
 800951e:	f000 f92b 	bl	8009778 <__smakebuf_r>
 8009522:	89a0      	ldrh	r0, [r4, #12]
 8009524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009528:	f010 0301 	ands.w	r3, r0, #1
 800952c:	d00a      	beq.n	8009544 <__swsetup_r+0xbc>
 800952e:	2300      	movs	r3, #0
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	425b      	negs	r3, r3
 8009536:	61a3      	str	r3, [r4, #24]
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	b943      	cbnz	r3, 800954e <__swsetup_r+0xc6>
 800953c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009540:	d1ba      	bne.n	80094b8 <__swsetup_r+0x30>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	0781      	lsls	r1, r0, #30
 8009546:	bf58      	it	pl
 8009548:	6963      	ldrpl	r3, [r4, #20]
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	e7f4      	b.n	8009538 <__swsetup_r+0xb0>
 800954e:	2000      	movs	r0, #0
 8009550:	e7f7      	b.n	8009542 <__swsetup_r+0xba>
 8009552:	bf00      	nop
 8009554:	200001c4 	.word	0x200001c4
 8009558:	0800afac 	.word	0x0800afac
 800955c:	0800afcc 	.word	0x0800afcc
 8009560:	0800af8c 	.word	0x0800af8c

08009564 <_close_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	; (8009580 <_close_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f7 ff55 	bl	800141e <_close>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_close_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_close_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20002264 	.word	0x20002264

08009584 <__sflush_r>:
 8009584:	898a      	ldrh	r2, [r1, #12]
 8009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958a:	4605      	mov	r5, r0
 800958c:	0710      	lsls	r0, r2, #28
 800958e:	460c      	mov	r4, r1
 8009590:	d458      	bmi.n	8009644 <__sflush_r+0xc0>
 8009592:	684b      	ldr	r3, [r1, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc05      	bgt.n	80095a4 <__sflush_r+0x20>
 8009598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	dc02      	bgt.n	80095a4 <__sflush_r+0x20>
 800959e:	2000      	movs	r0, #0
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d0f9      	beq.n	800959e <__sflush_r+0x1a>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095b0:	682f      	ldr	r7, [r5, #0]
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	d032      	beq.n	800961c <__sflush_r+0x98>
 80095b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	075a      	lsls	r2, r3, #29
 80095bc:	d505      	bpl.n	80095ca <__sflush_r+0x46>
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	1ac0      	subs	r0, r0, r3
 80095c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095c4:	b10b      	cbz	r3, 80095ca <__sflush_r+0x46>
 80095c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095c8:	1ac0      	subs	r0, r0, r3
 80095ca:	2300      	movs	r3, #0
 80095cc:	4602      	mov	r2, r0
 80095ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b0      	blx	r6
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	d106      	bne.n	80095ea <__sflush_r+0x66>
 80095dc:	6829      	ldr	r1, [r5, #0]
 80095de:	291d      	cmp	r1, #29
 80095e0:	d82c      	bhi.n	800963c <__sflush_r+0xb8>
 80095e2:	4a2a      	ldr	r2, [pc, #168]	; (800968c <__sflush_r+0x108>)
 80095e4:	40ca      	lsrs	r2, r1
 80095e6:	07d6      	lsls	r6, r2, #31
 80095e8:	d528      	bpl.n	800963c <__sflush_r+0xb8>
 80095ea:	2200      	movs	r2, #0
 80095ec:	6062      	str	r2, [r4, #4]
 80095ee:	04d9      	lsls	r1, r3, #19
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	d504      	bpl.n	8009600 <__sflush_r+0x7c>
 80095f6:	1c42      	adds	r2, r0, #1
 80095f8:	d101      	bne.n	80095fe <__sflush_r+0x7a>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	b903      	cbnz	r3, 8009600 <__sflush_r+0x7c>
 80095fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009602:	602f      	str	r7, [r5, #0]
 8009604:	2900      	cmp	r1, #0
 8009606:	d0ca      	beq.n	800959e <__sflush_r+0x1a>
 8009608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800960c:	4299      	cmp	r1, r3
 800960e:	d002      	beq.n	8009616 <__sflush_r+0x92>
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f925 	bl	8009860 <_free_r>
 8009616:	2000      	movs	r0, #0
 8009618:	6360      	str	r0, [r4, #52]	; 0x34
 800961a:	e7c1      	b.n	80095a0 <__sflush_r+0x1c>
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	2301      	movs	r3, #1
 8009620:	4628      	mov	r0, r5
 8009622:	47b0      	blx	r6
 8009624:	1c41      	adds	r1, r0, #1
 8009626:	d1c7      	bne.n	80095b8 <__sflush_r+0x34>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0c4      	beq.n	80095b8 <__sflush_r+0x34>
 800962e:	2b1d      	cmp	r3, #29
 8009630:	d001      	beq.n	8009636 <__sflush_r+0xb2>
 8009632:	2b16      	cmp	r3, #22
 8009634:	d101      	bne.n	800963a <__sflush_r+0xb6>
 8009636:	602f      	str	r7, [r5, #0]
 8009638:	e7b1      	b.n	800959e <__sflush_r+0x1a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	e7ad      	b.n	80095a0 <__sflush_r+0x1c>
 8009644:	690f      	ldr	r7, [r1, #16]
 8009646:	2f00      	cmp	r7, #0
 8009648:	d0a9      	beq.n	800959e <__sflush_r+0x1a>
 800964a:	0793      	lsls	r3, r2, #30
 800964c:	680e      	ldr	r6, [r1, #0]
 800964e:	bf08      	it	eq
 8009650:	694b      	ldreq	r3, [r1, #20]
 8009652:	600f      	str	r7, [r1, #0]
 8009654:	bf18      	it	ne
 8009656:	2300      	movne	r3, #0
 8009658:	eba6 0807 	sub.w	r8, r6, r7
 800965c:	608b      	str	r3, [r1, #8]
 800965e:	f1b8 0f00 	cmp.w	r8, #0
 8009662:	dd9c      	ble.n	800959e <__sflush_r+0x1a>
 8009664:	6a21      	ldr	r1, [r4, #32]
 8009666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009668:	4643      	mov	r3, r8
 800966a:	463a      	mov	r2, r7
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	2800      	cmp	r0, #0
 8009672:	dc06      	bgt.n	8009682 <__sflush_r+0xfe>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	e78e      	b.n	80095a0 <__sflush_r+0x1c>
 8009682:	4407      	add	r7, r0
 8009684:	eba8 0800 	sub.w	r8, r8, r0
 8009688:	e7e9      	b.n	800965e <__sflush_r+0xda>
 800968a:	bf00      	nop
 800968c:	20400001 	.word	0x20400001

08009690 <_fflush_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	4605      	mov	r5, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b913      	cbnz	r3, 80096a0 <_fflush_r+0x10>
 800969a:	2500      	movs	r5, #0
 800969c:	4628      	mov	r0, r5
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	b118      	cbz	r0, 80096aa <_fflush_r+0x1a>
 80096a2:	6983      	ldr	r3, [r0, #24]
 80096a4:	b90b      	cbnz	r3, 80096aa <_fflush_r+0x1a>
 80096a6:	f7ff f871 	bl	800878c <__sinit>
 80096aa:	4b14      	ldr	r3, [pc, #80]	; (80096fc <_fflush_r+0x6c>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	d11b      	bne.n	80096e8 <_fflush_r+0x58>
 80096b0:	686c      	ldr	r4, [r5, #4]
 80096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0ef      	beq.n	800969a <_fflush_r+0xa>
 80096ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096bc:	07d0      	lsls	r0, r2, #31
 80096be:	d404      	bmi.n	80096ca <_fflush_r+0x3a>
 80096c0:	0599      	lsls	r1, r3, #22
 80096c2:	d402      	bmi.n	80096ca <_fflush_r+0x3a>
 80096c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c6:	f7ff f8ff 	bl	80088c8 <__retarget_lock_acquire_recursive>
 80096ca:	4628      	mov	r0, r5
 80096cc:	4621      	mov	r1, r4
 80096ce:	f7ff ff59 	bl	8009584 <__sflush_r>
 80096d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d4:	07da      	lsls	r2, r3, #31
 80096d6:	4605      	mov	r5, r0
 80096d8:	d4e0      	bmi.n	800969c <_fflush_r+0xc>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	059b      	lsls	r3, r3, #22
 80096de:	d4dd      	bmi.n	800969c <_fflush_r+0xc>
 80096e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096e2:	f7ff f8f2 	bl	80088ca <__retarget_lock_release_recursive>
 80096e6:	e7d9      	b.n	800969c <_fflush_r+0xc>
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <_fflush_r+0x70>)
 80096ea:	429c      	cmp	r4, r3
 80096ec:	d101      	bne.n	80096f2 <_fflush_r+0x62>
 80096ee:	68ac      	ldr	r4, [r5, #8]
 80096f0:	e7df      	b.n	80096b2 <_fflush_r+0x22>
 80096f2:	4b04      	ldr	r3, [pc, #16]	; (8009704 <_fflush_r+0x74>)
 80096f4:	429c      	cmp	r4, r3
 80096f6:	bf08      	it	eq
 80096f8:	68ec      	ldreq	r4, [r5, #12]
 80096fa:	e7da      	b.n	80096b2 <_fflush_r+0x22>
 80096fc:	0800afac 	.word	0x0800afac
 8009700:	0800afcc 	.word	0x0800afcc
 8009704:	0800af8c 	.word	0x0800af8c

08009708 <_lseek_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d07      	ldr	r5, [pc, #28]	; (8009728 <_lseek_r+0x20>)
 800970c:	4604      	mov	r4, r0
 800970e:	4608      	mov	r0, r1
 8009710:	4611      	mov	r1, r2
 8009712:	2200      	movs	r2, #0
 8009714:	602a      	str	r2, [r5, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	f7f7 fea8 	bl	800146c <_lseek>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_lseek_r+0x1e>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_lseek_r+0x1e>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20002264 	.word	0x20002264

0800972c <__swhatbuf_r>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	460e      	mov	r6, r1
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2900      	cmp	r1, #0
 8009736:	b096      	sub	sp, #88	; 0x58
 8009738:	4614      	mov	r4, r2
 800973a:	461d      	mov	r5, r3
 800973c:	da08      	bge.n	8009750 <__swhatbuf_r+0x24>
 800973e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	061a      	lsls	r2, r3, #24
 8009748:	d410      	bmi.n	800976c <__swhatbuf_r+0x40>
 800974a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800974e:	e00e      	b.n	800976e <__swhatbuf_r+0x42>
 8009750:	466a      	mov	r2, sp
 8009752:	f000 f913 	bl	800997c <_fstat_r>
 8009756:	2800      	cmp	r0, #0
 8009758:	dbf1      	blt.n	800973e <__swhatbuf_r+0x12>
 800975a:	9a01      	ldr	r2, [sp, #4]
 800975c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009764:	425a      	negs	r2, r3
 8009766:	415a      	adcs	r2, r3
 8009768:	602a      	str	r2, [r5, #0]
 800976a:	e7ee      	b.n	800974a <__swhatbuf_r+0x1e>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	2000      	movs	r0, #0
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	b016      	add	sp, #88	; 0x58
 8009774:	bd70      	pop	{r4, r5, r6, pc}
	...

08009778 <__smakebuf_r>:
 8009778:	898b      	ldrh	r3, [r1, #12]
 800977a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800977c:	079d      	lsls	r5, r3, #30
 800977e:	4606      	mov	r6, r0
 8009780:	460c      	mov	r4, r1
 8009782:	d507      	bpl.n	8009794 <__smakebuf_r+0x1c>
 8009784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	6123      	str	r3, [r4, #16]
 800978c:	2301      	movs	r3, #1
 800978e:	6163      	str	r3, [r4, #20]
 8009790:	b002      	add	sp, #8
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	ab01      	add	r3, sp, #4
 8009796:	466a      	mov	r2, sp
 8009798:	f7ff ffc8 	bl	800972c <__swhatbuf_r>
 800979c:	9900      	ldr	r1, [sp, #0]
 800979e:	4605      	mov	r5, r0
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff f8b3 	bl	800890c <_malloc_r>
 80097a6:	b948      	cbnz	r0, 80097bc <__smakebuf_r+0x44>
 80097a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ac:	059a      	lsls	r2, r3, #22
 80097ae:	d4ef      	bmi.n	8009790 <__smakebuf_r+0x18>
 80097b0:	f023 0303 	bic.w	r3, r3, #3
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	e7e3      	b.n	8009784 <__smakebuf_r+0xc>
 80097bc:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <__smakebuf_r+0x7c>)
 80097be:	62b3      	str	r3, [r6, #40]	; 0x28
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	6163      	str	r3, [r4, #20]
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	6120      	str	r0, [r4, #16]
 80097d2:	b15b      	cbz	r3, 80097ec <__smakebuf_r+0x74>
 80097d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 f8e1 	bl	80099a0 <_isatty_r>
 80097de:	b128      	cbz	r0, 80097ec <__smakebuf_r+0x74>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	89a0      	ldrh	r0, [r4, #12]
 80097ee:	4305      	orrs	r5, r0
 80097f0:	81a5      	strh	r5, [r4, #12]
 80097f2:	e7cd      	b.n	8009790 <__smakebuf_r+0x18>
 80097f4:	08008725 	.word	0x08008725

080097f8 <memcpy>:
 80097f8:	440a      	add	r2, r1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009800:	d100      	bne.n	8009804 <memcpy+0xc>
 8009802:	4770      	bx	lr
 8009804:	b510      	push	{r4, lr}
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800980e:	4291      	cmp	r1, r2
 8009810:	d1f9      	bne.n	8009806 <memcpy+0xe>
 8009812:	bd10      	pop	{r4, pc}

08009814 <memmove>:
 8009814:	4288      	cmp	r0, r1
 8009816:	b510      	push	{r4, lr}
 8009818:	eb01 0402 	add.w	r4, r1, r2
 800981c:	d902      	bls.n	8009824 <memmove+0x10>
 800981e:	4284      	cmp	r4, r0
 8009820:	4623      	mov	r3, r4
 8009822:	d807      	bhi.n	8009834 <memmove+0x20>
 8009824:	1e43      	subs	r3, r0, #1
 8009826:	42a1      	cmp	r1, r4
 8009828:	d008      	beq.n	800983c <memmove+0x28>
 800982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009832:	e7f8      	b.n	8009826 <memmove+0x12>
 8009834:	4402      	add	r2, r0
 8009836:	4601      	mov	r1, r0
 8009838:	428a      	cmp	r2, r1
 800983a:	d100      	bne.n	800983e <memmove+0x2a>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009846:	e7f7      	b.n	8009838 <memmove+0x24>

08009848 <__malloc_lock>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__malloc_lock+0x8>)
 800984a:	f7ff b83d 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 800984e:	bf00      	nop
 8009850:	20002258 	.word	0x20002258

08009854 <__malloc_unlock>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__malloc_unlock+0x8>)
 8009856:	f7ff b838 	b.w	80088ca <__retarget_lock_release_recursive>
 800985a:	bf00      	nop
 800985c:	20002258 	.word	0x20002258

08009860 <_free_r>:
 8009860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009862:	2900      	cmp	r1, #0
 8009864:	d044      	beq.n	80098f0 <_free_r+0x90>
 8009866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986a:	9001      	str	r0, [sp, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f1a1 0404 	sub.w	r4, r1, #4
 8009872:	bfb8      	it	lt
 8009874:	18e4      	addlt	r4, r4, r3
 8009876:	f7ff ffe7 	bl	8009848 <__malloc_lock>
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <_free_r+0x94>)
 800987c:	9801      	ldr	r0, [sp, #4]
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	b933      	cbnz	r3, 8009890 <_free_r+0x30>
 8009882:	6063      	str	r3, [r4, #4]
 8009884:	6014      	str	r4, [r2, #0]
 8009886:	b003      	add	sp, #12
 8009888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988c:	f7ff bfe2 	b.w	8009854 <__malloc_unlock>
 8009890:	42a3      	cmp	r3, r4
 8009892:	d908      	bls.n	80098a6 <_free_r+0x46>
 8009894:	6825      	ldr	r5, [r4, #0]
 8009896:	1961      	adds	r1, r4, r5
 8009898:	428b      	cmp	r3, r1
 800989a:	bf01      	itttt	eq
 800989c:	6819      	ldreq	r1, [r3, #0]
 800989e:	685b      	ldreq	r3, [r3, #4]
 80098a0:	1949      	addeq	r1, r1, r5
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	e7ed      	b.n	8009882 <_free_r+0x22>
 80098a6:	461a      	mov	r2, r3
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	b10b      	cbz	r3, 80098b0 <_free_r+0x50>
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	d9fa      	bls.n	80098a6 <_free_r+0x46>
 80098b0:	6811      	ldr	r1, [r2, #0]
 80098b2:	1855      	adds	r5, r2, r1
 80098b4:	42a5      	cmp	r5, r4
 80098b6:	d10b      	bne.n	80098d0 <_free_r+0x70>
 80098b8:	6824      	ldr	r4, [r4, #0]
 80098ba:	4421      	add	r1, r4
 80098bc:	1854      	adds	r4, r2, r1
 80098be:	42a3      	cmp	r3, r4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	d1e0      	bne.n	8009886 <_free_r+0x26>
 80098c4:	681c      	ldr	r4, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	6053      	str	r3, [r2, #4]
 80098ca:	4421      	add	r1, r4
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	e7da      	b.n	8009886 <_free_r+0x26>
 80098d0:	d902      	bls.n	80098d8 <_free_r+0x78>
 80098d2:	230c      	movs	r3, #12
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	e7d6      	b.n	8009886 <_free_r+0x26>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf04      	itt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	bf04      	itt	eq
 80098e8:	1949      	addeq	r1, r1, r5
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	6054      	str	r4, [r2, #4]
 80098ee:	e7ca      	b.n	8009886 <_free_r+0x26>
 80098f0:	b003      	add	sp, #12
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	2000225c 	.word	0x2000225c

080098f8 <_realloc_r>:
 80098f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	4680      	mov	r8, r0
 80098fe:	4614      	mov	r4, r2
 8009900:	460e      	mov	r6, r1
 8009902:	b921      	cbnz	r1, 800990e <_realloc_r+0x16>
 8009904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	4611      	mov	r1, r2
 800990a:	f7fe bfff 	b.w	800890c <_malloc_r>
 800990e:	b92a      	cbnz	r2, 800991c <_realloc_r+0x24>
 8009910:	f7ff ffa6 	bl	8009860 <_free_r>
 8009914:	4625      	mov	r5, r4
 8009916:	4628      	mov	r0, r5
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991c:	f000 f850 	bl	80099c0 <_malloc_usable_size_r>
 8009920:	4284      	cmp	r4, r0
 8009922:	4607      	mov	r7, r0
 8009924:	d802      	bhi.n	800992c <_realloc_r+0x34>
 8009926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800992a:	d812      	bhi.n	8009952 <_realloc_r+0x5a>
 800992c:	4621      	mov	r1, r4
 800992e:	4640      	mov	r0, r8
 8009930:	f7fe ffec 	bl	800890c <_malloc_r>
 8009934:	4605      	mov	r5, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d0ed      	beq.n	8009916 <_realloc_r+0x1e>
 800993a:	42bc      	cmp	r4, r7
 800993c:	4622      	mov	r2, r4
 800993e:	4631      	mov	r1, r6
 8009940:	bf28      	it	cs
 8009942:	463a      	movcs	r2, r7
 8009944:	f7ff ff58 	bl	80097f8 <memcpy>
 8009948:	4631      	mov	r1, r6
 800994a:	4640      	mov	r0, r8
 800994c:	f7ff ff88 	bl	8009860 <_free_r>
 8009950:	e7e1      	b.n	8009916 <_realloc_r+0x1e>
 8009952:	4635      	mov	r5, r6
 8009954:	e7df      	b.n	8009916 <_realloc_r+0x1e>
	...

08009958 <_read_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_read_r+0x20>)
 800995c:	4604      	mov	r4, r0
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f7f7 fd3c 	bl	80013e4 <_read>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_read_r+0x1e>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_read_r+0x1e>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	20002264 	.word	0x20002264

0800997c <_fstat_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_fstat_r+0x20>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	f7f7 fd54 	bl	8001436 <_fstat>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d102      	bne.n	8009998 <_fstat_r+0x1c>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b103      	cbz	r3, 8009998 <_fstat_r+0x1c>
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	bf00      	nop
 800999c:	20002264 	.word	0x20002264

080099a0 <_isatty_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d06      	ldr	r5, [pc, #24]	; (80099bc <_isatty_r+0x1c>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	f7f7 fd53 	bl	8001456 <_isatty>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_isatty_r+0x1a>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_isatty_r+0x1a>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	20002264 	.word	0x20002264

080099c0 <_malloc_usable_size_r>:
 80099c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c4:	1f18      	subs	r0, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bfbc      	itt	lt
 80099ca:	580b      	ldrlt	r3, [r1, r0]
 80099cc:	18c0      	addlt	r0, r0, r3
 80099ce:	4770      	bx	lr

080099d0 <_init>:
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d2:	bf00      	nop
 80099d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d6:	bc08      	pop	{r3}
 80099d8:	469e      	mov	lr, r3
 80099da:	4770      	bx	lr

080099dc <_fini>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	bf00      	nop
 80099e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e2:	bc08      	pop	{r3}
 80099e4:	469e      	mov	lr, r3
 80099e6:	4770      	bx	lr

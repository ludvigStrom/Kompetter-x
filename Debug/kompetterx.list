
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b124  0800b124  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b12c  0800b12c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b130  0800b130  0001b130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800b134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  20000228  0800b35c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002268  0800b35c  00022268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f96  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a9  00000000  00000000  000351ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00038998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230ca  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173a3  00000000  00000000  0005dca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf345  00000000  00000000  00075045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013438a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  001343dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ab8 	.word	0x08009ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08009ab8 	.word	0x08009ab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9302      	str	r3, [sp, #8]
 8000590:	2302      	movs	r3, #2
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	220e      	movs	r2, #14
 800059e:	216c      	movs	r1, #108	; 0x6c
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f001 fe29 	bl	80021f8 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	7b7b      	ldrb	r3, [r7, #13]
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005b6:	89fb      	ldrh	r3, [r7, #14]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <AS5600_ReadStatus>:

uint8_t AS5600_ReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	f107 030f 	add.w	r3, r7, #15
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	220b      	movs	r2, #11
 80005da:	216c      	movs	r1, #108	; 0x6c
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 fe0b 	bl	80021f8 <HAL_I2C_Mem_Read>

    return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <AS5600_IsMagnetPresent>:

uint8_t AS5600_IsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t status = AS5600_ReadStatus(hi2c);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe3 	bl	80005c0 <AS5600_ReadStatus>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d104      	bne.n	8000612 <AS5600_IsMagnetPresent+0x26>
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <AS5600_IsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <AS5600_IsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 8000616:	2301      	movs	r3, #1
    }
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000628:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d013      	beq.n	8000660 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000638:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800063c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000640:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00b      	beq.n	8000660 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000648:	e000      	b.n	800064c <ITM_SendChar+0x2c>
    {
      __NOP();
 800064a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f9      	beq.n	800064a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000656:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_write>:
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */


int _write(int file, char *ptr, int len){
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
	int i = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e009      	b.n	8000698 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffc7 	bl	8000620 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbf1      	blt.n	8000684 <_write+0x16>
	return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	; 0x70
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 ffcf 	bl	8001654 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f9b3 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 faad 	bl	8000c18 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006be:	f000 fa19 	bl	8000af4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006c2:	f000 fa45 	bl	8000b50 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80006c6:	f007 fae3 	bl	8007c90 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80006ca:	f000 fa6f 	bl	8000bac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 80006ce:	2104      	movs	r1, #4
 80006d0:	48bd      	ldr	r0, [pc, #756]	; (80009c8 <main+0x31c>)
 80006d2:	f001 fb34 	bl	8001d3e <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f001 f82e 	bl	8001738 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 80006dc:	f000 fb0e 	bl	8000cfc <SSD1306_Init>

  HAL_Delay(50);
 80006e0:	2032      	movs	r0, #50	; 0x32
 80006e2:	f001 f829 	bl	8001738 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fc71 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	49b6      	ldr	r1, [pc, #728]	; (80009cc <main+0x320>)
 80006f2:	48b7      	ldr	r0, [pc, #732]	; (80009d0 <main+0x324>)
 80006f4:	f000 fd02 	bl	80010fc <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 80006f8:	2114      	movs	r1, #20
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fc68 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts ("v.02", &Font_7x10, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	49b4      	ldr	r1, [pc, #720]	; (80009d4 <main+0x328>)
 8000704:	48b4      	ldr	r0, [pc, #720]	; (80009d8 <main+0x32c>)
 8000706:	f000 fcf9 	bl	80010fc <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800070a:	f000 fbbb 	bl	8000e84 <SSD1306_UpdateScreen>

  sprintf(txBuf, "Kompetter-X\r\nv.02");
 800070e:	49b3      	ldr	r1, [pc, #716]	; (80009dc <main+0x330>)
 8000710:	48b3      	ldr	r0, [pc, #716]	; (80009e0 <main+0x334>)
 8000712:	f008 f837 	bl	8008784 <siprintf>
  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000716:	48b2      	ldr	r0, [pc, #712]	; (80009e0 <main+0x334>)
 8000718:	f7ff fd5a 	bl	80001d0 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29b      	uxth	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	48af      	ldr	r0, [pc, #700]	; (80009e0 <main+0x334>)
 8000724:	f007 fb72 	bl	8007e0c <CDC_Transmit_FS>


  HAL_Delay(1500);
 8000728:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800072c:	f001 f804 	bl	8001738 <HAL_Delay>

  SSD1306_Clear();
 8000730:	f000 fd09 	bl	8001146 <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000734:	2104      	movs	r1, #4
 8000736:	48a4      	ldr	r0, [pc, #656]	; (80009c8 <main+0x31c>)
 8000738:	f001 fb01 	bl	8001d3e <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 800073c:	211e      	movs	r1, #30
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fc46 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	49a3      	ldr	r1, [pc, #652]	; (80009d4 <main+0x328>)
 8000748:	48a6      	ldr	r0, [pc, #664]	; (80009e4 <main+0x338>)
 800074a:	f000 fcd7 	bl	80010fc <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 800074e:	2128      	movs	r1, #40	; 0x28
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fc3d 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	499c      	ldr	r1, [pc, #624]	; (80009cc <main+0x320>)
 800075a:	48a3      	ldr	r0, [pc, #652]	; (80009e8 <main+0x33c>)
 800075c:	f000 fcce 	bl	80010fc <SSD1306_Puts>

  SSD1306_GotoXY(40, 30);
 8000760:	211e      	movs	r1, #30
 8000762:	2028      	movs	r0, #40	; 0x28
 8000764:	f000 fc34 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	499a      	ldr	r1, [pc, #616]	; (80009d4 <main+0x328>)
 800076c:	489f      	ldr	r0, [pc, #636]	; (80009ec <main+0x340>)
 800076e:	f000 fcc5 	bl	80010fc <SSD1306_Puts>
  SSD1306_GotoXY(40, 40);
 8000772:	2128      	movs	r1, #40	; 0x28
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f000 fc2b 	bl	8000fd0 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	4993      	ldr	r1, [pc, #588]	; (80009cc <main+0x320>)
 800077e:	489a      	ldr	r0, [pc, #616]	; (80009e8 <main+0x33c>)
 8000780:	f000 fcbc 	bl	80010fc <SSD1306_Puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	sprintf(txBuf, "%u\r\n", count);
 8000784:	4b9a      	ldr	r3, [pc, #616]	; (80009f0 <main+0x344>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	499a      	ldr	r1, [pc, #616]	; (80009f4 <main+0x348>)
 800078c:	4894      	ldr	r0, [pc, #592]	; (80009e0 <main+0x334>)
 800078e:	f007 fff9 	bl	8008784 <siprintf>
	count++;
 8000792:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <main+0x344>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b95      	ldr	r3, [pc, #596]	; (80009f0 <main+0x344>)
 800079c:	701a      	strb	r2, [r3, #0]
	if(count > 100){
 800079e:	4b94      	ldr	r3, [pc, #592]	; (80009f0 <main+0x344>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b64      	cmp	r3, #100	; 0x64
 80007a4:	d902      	bls.n	80007ac <main+0x100>
		count = 1;
 80007a6:	4b92      	ldr	r3, [pc, #584]	; (80009f0 <main+0x344>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 80007ac:	488c      	ldr	r0, [pc, #560]	; (80009e0 <main+0x334>)
 80007ae:	f7ff fd0f 	bl	80001d0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	4889      	ldr	r0, [pc, #548]	; (80009e0 <main+0x334>)
 80007ba:	f007 fb27 	bl	8007e0c <CDC_Transmit_FS>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 80007be:	488e      	ldr	r0, [pc, #568]	; (80009f8 <main+0x34c>)
 80007c0:	f7ff fee0 	bl	8000584 <AS5600_ReadAngle>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t magnetPresent = AS5600_IsMagnetPresent(&hi2c2);
 80007ca:	488b      	ldr	r0, [pc, #556]	; (80009f8 <main+0x34c>)
 80007cc:	f7ff ff0e 	bl	80005ec <AS5600_IsMagnetPresent>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	//Magnet status
	if( magnetPresent == 1){
 80007d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d125      	bne.n	800082a <main+0x17e>

		SSD1306_GotoXY(40, 40);
 80007de:	2128      	movs	r1, #40	; 0x28
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fbf5 	bl	8000fd0 <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	4978      	ldr	r1, [pc, #480]	; (80009cc <main+0x320>)
 80007ea:	4884      	ldr	r0, [pc, #528]	; (80009fc <main+0x350>)
 80007ec:	f000 fc86 	bl	80010fc <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

	    //Convert to a string with leading spaces
	    sprintf(angle_str, "%4u", angle);
 80007f0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80007f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f8:	4981      	ldr	r1, [pc, #516]	; (8000a00 <main+0x354>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f007 ffc2 	bl	8008784 <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fbe4 	bl	8000fd0 <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	4972      	ldr	r1, [pc, #456]	; (80009d4 <main+0x328>)
 800080c:	487d      	ldr	r0, [pc, #500]	; (8000a04 <main+0x358>)
 800080e:	f000 fc75 	bl	80010fc <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000812:	210c      	movs	r1, #12
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fbdb 	bl	8000fd0 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 800081a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800081e:	2201      	movs	r2, #1
 8000820:	496a      	ldr	r1, [pc, #424]	; (80009cc <main+0x320>)
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fc6a 	bl	80010fc <SSD1306_Puts>
 8000828:	e008      	b.n	800083c <main+0x190>

	} else {
		SSD1306_GotoXY(40, 40);
 800082a:	2128      	movs	r1, #40	; 0x28
 800082c:	2028      	movs	r0, #40	; 0x28
 800082e:	f000 fbcf 	bl	8000fd0 <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	4965      	ldr	r1, [pc, #404]	; (80009cc <main+0x320>)
 8000836:	4874      	ldr	r0, [pc, #464]	; (8000a08 <main+0x35c>)
 8000838:	f000 fc60 	bl	80010fc <SSD1306_Puts>

	//debounce scan:
	enum KeyState { IDLE, PRESSED };
	enum KeyState key_state[NUM_ROWS][NUM_COLS];  // Declare the array of states

	for(int i = 0; i < NUM_ROWS; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000840:	e014      	b.n	800086c <main+0x1c0>
	    for(int j = 0; j < NUM_COLS; j++) {
 8000842:	2300      	movs	r3, #0
 8000844:	66bb      	str	r3, [r7, #104]	; 0x68
 8000846:	e00b      	b.n	8000860 <main+0x1b4>
	        key_state[i][j] = IDLE;  // Initialize each state to IDLE
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	3370      	adds	r3, #112	; 0x70
 800084e:	19da      	adds	r2, r3, r7
 8000850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000852:	4413      	add	r3, r2
 8000854:	3b24      	subs	r3, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 800085a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800085c:	3301      	adds	r3, #1
 800085e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000862:	2b03      	cmp	r3, #3
 8000864:	ddf0      	ble.n	8000848 <main+0x19c>
	for(int i = 0; i < NUM_ROWS; i++) {
 8000866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000868:	3301      	adds	r3, #1
 800086a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800086c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086e:	2b03      	cmp	r3, #3
 8000870:	dde7      	ble.n	8000842 <main+0x196>
	    }
	}

	uint32_t last_key_time[NUM_ROWS][NUM_COLS] = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f007 ff4d 	bl	8008718 <memset>

	for(int i = 0; i < NUM_ROWS; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
 8000882:	e099      	b.n	80009b8 <main+0x30c>
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 8000884:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <main+0x360>)
 8000886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800088c:	4a60      	ldr	r2, [pc, #384]	; (8000a10 <main+0x364>)
 800088e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	f001 fa38 	bl	8001d0c <HAL_GPIO_WritePin>

	    for(int j = 0; j < NUM_COLS; j++) {
 800089c:	2300      	movs	r3, #0
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
 80008a0:	e078      	b.n	8000994 <main+0x2e8>
	        uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 80008a2:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <main+0x368>)
 80008a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008aa:	495b      	ldr	r1, [pc, #364]	; (8000a18 <main+0x36c>)
 80008ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f001 fa11 	bl	8001cdc <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	        if (is_pressed && key_state[i][j] == IDLE) {
 80008ca:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d037      	beq.n	8000942 <main+0x296>
 80008d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	3370      	adds	r3, #112	; 0x70
 80008d8:	19da      	adds	r2, r3, r7
 80008da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008dc:	4413      	add	r3, r2
 80008de:	3b24      	subs	r3, #36	; 0x24
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d12d      	bne.n	8000942 <main+0x296>
	            // Key was just pressed, change state and record time
	            key_state[i][j] = PRESSED;
 80008e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	3370      	adds	r3, #112	; 0x70
 80008ec:	19da      	adds	r2, r3, r7
 80008ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	3b24      	subs	r3, #36	; 0x24
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
	            last_key_time[i][j] = HAL_GetTick();
 80008f8:	f000 ff12 	bl	8001720 <HAL_GetTick>
 80008fc:	4601      	mov	r1, r0
 80008fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000900:	009a      	lsls	r2, r3, #2
 8000902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	3370      	adds	r3, #112	; 0x70
 800090a:	443b      	add	r3, r7
 800090c:	f843 1c70 	str.w	r1, [r3, #-112]

	            // Format the key string
	            char key_str[3];
	            sprintf(key_str, "%d%d", i+1, j+1);
 8000910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000916:	3301      	adds	r3, #1
 8000918:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800091c:	493f      	ldr	r1, [pc, #252]	; (8000a1c <main+0x370>)
 800091e:	f007 ff31 	bl	8008784 <siprintf>

	            // Display the key on the OLED display
	            SSD1306_GotoXY(0, 40);
 8000922:	2128      	movs	r1, #40	; 0x28
 8000924:	2000      	movs	r0, #0
 8000926:	f000 fb53 	bl	8000fd0 <SSD1306_GotoXY>
	            SSD1306_Puts(key_str, &Font_11x18, 1);
 800092a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092e:	2201      	movs	r2, #1
 8000930:	4926      	ldr	r1, [pc, #152]	; (80009cc <main+0x320>)
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fbe2 	bl	80010fc <SSD1306_Puts>

	            // Light up led:
	            HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000938:	2104      	movs	r1, #4
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <main+0x31c>)
 800093c:	f001 f9ff 	bl	8001d3e <HAL_GPIO_TogglePin>
	        if (is_pressed && key_state[i][j] == IDLE) {
 8000940:	e025      	b.n	800098e <main+0x2e2>
	        } else if (!is_pressed && key_state[i][j] == PRESSED && HAL_GetTick() - last_key_time[i][j] > DEBOUNCE_DELAY) {
 8000942:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000946:	2b00      	cmp	r3, #0
 8000948:	d121      	bne.n	800098e <main+0x2e2>
 800094a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	3370      	adds	r3, #112	; 0x70
 8000950:	19da      	adds	r2, r3, r7
 8000952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000954:	4413      	add	r3, r2
 8000956:	3b24      	subs	r3, #36	; 0x24
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d117      	bne.n	800098e <main+0x2e2>
 800095e:	f000 fedf 	bl	8001720 <HAL_GetTick>
 8000962:	4601      	mov	r1, r0
 8000964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000966:	009a      	lsls	r2, r3, #2
 8000968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	3370      	adds	r3, #112	; 0x70
 8000970:	443b      	add	r3, r7
 8000972:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000976:	1acb      	subs	r3, r1, r3
 8000978:	2b96      	cmp	r3, #150	; 0x96
 800097a:	d908      	bls.n	800098e <main+0x2e2>
	            // Key was released and debounce delay passed, go back to idle
	            key_state[i][j] = IDLE;
 800097c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	3370      	adds	r3, #112	; 0x70
 8000982:	19da      	adds	r2, r3, r7
 8000984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000986:	4413      	add	r3, r2
 8000988:	3b24      	subs	r3, #36	; 0x24
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 800098e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000990:	3301      	adds	r3, #1
 8000992:	663b      	str	r3, [r7, #96]	; 0x60
 8000994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000996:	2b03      	cmp	r3, #3
 8000998:	dd83      	ble.n	80008a2 <main+0x1f6>
	        }
	    }

	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <main+0x360>)
 800099c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800099e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009a2:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <main+0x364>)
 80009a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	f001 f9ad 	bl	8001d0c <HAL_GPIO_WritePin>
	for(int i = 0; i < NUM_ROWS; i++) {
 80009b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b4:	3301      	adds	r3, #1
 80009b6:	667b      	str	r3, [r7, #100]	; 0x64
 80009b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	f77f af62 	ble.w	8000884 <main+0x1d8>
	}
	//Debounce scan END

  	// Update the OLED display
	SSD1306_UpdateScreen();
 80009c0:	f000 fa60 	bl	8000e84 <SSD1306_UpdateScreen>
  {
 80009c4:	e6de      	b.n	8000784 <main+0xd8>
 80009c6:	bf00      	nop
 80009c8:	40020000 	.word	0x40020000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	08009ad0 	.word	0x08009ad0
 80009d4:	20000000 	.word	0x20000000
 80009d8:	08009adc 	.word	0x08009adc
 80009dc:	08009ae4 	.word	0x08009ae4
 80009e0:	20000344 	.word	0x20000344
 80009e4:	08009af8 	.word	0x08009af8
 80009e8:	08009b00 	.word	0x08009b00
 80009ec:	08009b08 	.word	0x08009b08
 80009f0:	20000040 	.word	0x20000040
 80009f4:	08009b14 	.word	0x08009b14
 80009f8:	20000298 	.word	0x20000298
 80009fc:	08009b1c 	.word	0x08009b1c
 8000a00:	08009b24 	.word	0x08009b24
 8000a04:	08009b28 	.word	0x08009b28
 8000a08:	08009b30 	.word	0x08009b30
 8000a0c:	20000010 	.word	0x20000010
 8000a10:	20000020 	.word	0x20000020
 8000a14:	20000028 	.word	0x20000028
 8000a18:	20000038 	.word	0x20000038
 8000a1c:	08009b38 	.word	0x08009b38

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 fe72 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a90:	2308      	movs	r3, #8
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a94:	23a8      	movs	r3, #168	; 0xa8
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fbc5 	bl	8004234 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab0:	f000 f91e 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fe26 	bl	8004724 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ade:	f000 f907 	bl	8000cf0 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 f91f 	bl	8001d74 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 f8d8 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000244 	.word	0x20000244
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	00061a80 	.word	0x00061a80

08000b50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C2_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C2_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C2_Init+0x50>)
 8000b8e:	f001 f8f1 	bl	8001d74 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f8aa 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000298 	.word	0x20000298
 8000ba4:	40005800 	.word	0x40005800
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <MX_SPI2_Init+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bf8:	220a      	movs	r2, #10
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_SPI2_Init+0x64>)
 8000bfe:	f003 ff9b 	bl	8004b38 <HAL_SPI_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c08:	f000 f872 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002ec 	.word	0x200002ec
 8000c14:	40003800 	.word	0x40003800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0xcc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	21f4      	movs	r1, #244	; 0xf4
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000ca4:	f001 f832 	bl	8001d0c <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0xd4>)
 8000cbc:	f000 fe72 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000cc0:	23f4      	movs	r3, #244	; 0xf4
 8000cc2:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000cd8:	f000 fe64 	bl	80019a4 <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020800 	.word	0x40020800

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d02:	f000 fa29 	bl	8001158 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d06:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2178      	movs	r1, #120	; 0x78
 8000d0e:	485b      	ldr	r0, [pc, #364]	; (8000e7c <SSD1306_Init+0x180>)
 8000d10:	f001 fc98 	bl	8002644 <HAL_I2C_IsDeviceReady>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e0a9      	b.n	8000e72 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000d1e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d24:	e002      	b.n	8000d2c <SSD1306_Init+0x30>
		p--;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f9      	bne.n	8000d26 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d32:	22ae      	movs	r2, #174	; 0xae
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 fa8a 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 fa85 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d46:	2210      	movs	r2, #16
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 fa80 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d50:	22b0      	movs	r2, #176	; 0xb0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 fa7b 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d5a:	22c8      	movs	r2, #200	; 0xc8
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 fa76 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 fa71 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d6e:	2210      	movs	r2, #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fa6c 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fa67 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d82:	2281      	movs	r2, #129	; 0x81
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 fa62 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 fa5d 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d96:	22a1      	movs	r2, #161	; 0xa1
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 fa58 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000da0:	22a6      	movs	r2, #166	; 0xa6
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 fa53 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000daa:	22a8      	movs	r2, #168	; 0xa8
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 fa4e 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000db4:	223f      	movs	r2, #63	; 0x3f
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 fa49 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dbe:	22a4      	movs	r2, #164	; 0xa4
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 fa44 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000dc8:	22d3      	movs	r2, #211	; 0xd3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	; 0x78
 8000dce:	f000 fa3f 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 fa3a 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ddc:	22d5      	movs	r2, #213	; 0xd5
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 fa35 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000de6:	22f0      	movs	r2, #240	; 0xf0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 fa30 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000df0:	22d9      	movs	r2, #217	; 0xd9
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	; 0x78
 8000df6:	f000 fa2b 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dfa:	2222      	movs	r2, #34	; 0x22
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	; 0x78
 8000e00:	f000 fa26 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e04:	22da      	movs	r2, #218	; 0xda
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	; 0x78
 8000e0a:	f000 fa21 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e0e:	2212      	movs	r2, #18
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f000 fa1c 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e18:	22db      	movs	r2, #219	; 0xdb
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	; 0x78
 8000e1e:	f000 fa17 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e22:	2220      	movs	r2, #32
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	; 0x78
 8000e28:	f000 fa12 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e2c:	228d      	movs	r2, #141	; 0x8d
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	f000 fa0d 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e36:	2214      	movs	r2, #20
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	; 0x78
 8000e3c:	f000 fa08 	bl	8001250 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e40:	22af      	movs	r2, #175	; 0xaf
 8000e42:	2100      	movs	r1, #0
 8000e44:	2078      	movs	r0, #120	; 0x78
 8000e46:	f000 fa03 	bl	8001250 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e4a:	222e      	movs	r2, #46	; 0x2e
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	; 0x78
 8000e50:	f000 f9fe 	bl	8001250 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f843 	bl	8000ee0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000e5a:	f000 f813 	bl	8000e84 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SSD1306_Init+0x184>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SSD1306_Init+0x184>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SSD1306_Init+0x184>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000244 	.word	0x20000244
 8000e80:	2000074c 	.word	0x2000074c

08000e84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e01d      	b.n	8000ecc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3b50      	subs	r3, #80	; 0x50
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2078      	movs	r0, #120	; 0x78
 8000e9c:	f000 f9d8 	bl	8001250 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2078      	movs	r0, #120	; 0x78
 8000ea6:	f000 f9d3 	bl	8001250 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000eaa:	2210      	movs	r2, #16
 8000eac:	2100      	movs	r1, #0
 8000eae:	2078      	movs	r0, #120	; 0x78
 8000eb0:	f000 f9ce 	bl	8001250 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <SSD1306_UpdateScreen+0x58>)
 8000eba:	441a      	add	r2, r3
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	2140      	movs	r1, #64	; 0x40
 8000ec0:	2078      	movs	r0, #120	; 0x78
 8000ec2:	f000 f95f 	bl	8001184 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d9de      	bls.n	8000e90 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000034c 	.word	0x2000034c

08000ee0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <SSD1306_Fill+0x14>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <SSD1306_Fill+0x16>
 8000ef4:	23ff      	movs	r3, #255	; 0xff
 8000ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efa:	4619      	mov	r1, r3
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <SSD1306_Fill+0x2c>)
 8000efe:	f007 fc0b 	bl	8008718 <memset>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000034c 	.word	0x2000034c

08000f10 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	70fb      	strb	r3, [r7, #3]
	if (
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	2b7f      	cmp	r3, #127	; 0x7f
 8000f26:	d848      	bhi.n	8000fba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f2c:	d845      	bhi.n	8000fba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <SSD1306_DrawPixel+0xb8>)
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d11a      	bne.n	8000f80 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f4a:	88fa      	ldrh	r2, [r7, #6]
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	b298      	uxth	r0, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	01db      	lsls	r3, r3, #7
 8000f56:	4413      	add	r3, r2
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <SSD1306_DrawPixel+0xbc>)
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	b25a      	sxtb	r2, r3
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b259      	sxtb	r1, r3
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	4603      	mov	r3, r0
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	4413      	add	r3, r2
 8000f78:	b2c9      	uxtb	r1, r1
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <SSD1306_DrawPixel+0xbc>)
 8000f7c:	54d1      	strb	r1, [r2, r3]
 8000f7e:	e01d      	b.n	8000fbc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	b298      	uxth	r0, r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	01db      	lsls	r3, r3, #7
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <SSD1306_DrawPixel+0xbc>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b259      	sxtb	r1, r3
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	4603      	mov	r3, r0
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2c9      	uxtb	r1, r1
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SSD1306_DrawPixel+0xbc>)
 8000fb6:	54d1      	strb	r1, [r2, r3]
 8000fb8:	e000      	b.n	8000fbc <SSD1306_DrawPixel+0xac>
		return;
 8000fba:	bf00      	nop
	}
}
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000074c 	.word	0x2000074c
 8000fcc:	2000034c 	.word	0x2000034c

08000fd0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	80fb      	strh	r3, [r7, #6]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SSD1306_GotoXY+0x28>)
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <SSD1306_GotoXY+0x28>)
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	8053      	strh	r3, [r2, #2]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	2000074c 	.word	0x2000074c

08000ffc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <SSD1306_Putc+0xfc>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
	if (
 8001018:	2b7f      	cmp	r3, #127	; 0x7f
 800101a:	dc07      	bgt.n	800102c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <SSD1306_Putc+0xfc>)
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	461a      	mov	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001028:	2b3f      	cmp	r3, #63	; 0x3f
 800102a:	dd01      	ble.n	8001030 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800102c:	2300      	movs	r3, #0
 800102e:	e05e      	b.n	80010ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e04b      	b.n	80010ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	3b20      	subs	r3, #32
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	7849      	ldrb	r1, [r1, #1]
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4619      	mov	r1, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	440b      	add	r3, r1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	e030      	b.n	80010bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d010      	beq.n	800108c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <SSD1306_Putc+0xfc>)
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4413      	add	r3, r2
 8001074:	b298      	uxth	r0, r3
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <SSD1306_Putc+0xfc>)
 8001078:	885a      	ldrh	r2, [r3, #2]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	79ba      	ldrb	r2, [r7, #6]
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff ff43 	bl	8000f10 <SSD1306_DrawPixel>
 800108a:	e014      	b.n	80010b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <SSD1306_Putc+0xfc>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b298      	uxth	r0, r3
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <SSD1306_Putc+0xfc>)
 800109a:	885a      	ldrh	r2, [r3, #2]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	b299      	uxth	r1, r3
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	f7ff ff2d 	bl	8000f10 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	3301      	adds	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d3c8      	bcc.n	800105a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	461a      	mov	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d3ad      	bcc.n	8001036 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <SSD1306_Putc+0xfc>)
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <SSD1306_Putc+0xfc>)
 80010ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000074c 	.word	0x2000074c

080010fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800110a:	e012      	b.n	8001132 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff71 	bl	8000ffc <SSD1306_Putc>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d002      	beq.n	800112c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	e008      	b.n	800113e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e8      	bne.n	800110c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	781b      	ldrb	r3, [r3, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fec8 	bl	8000ee0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001150:	f7ff fe98 	bl	8000e84 <SSD1306_UpdateScreen>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <ssd1306_I2C_Init+0x28>)
 8001160:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001162:	e002      	b.n	800116a <ssd1306_I2C_Init+0x12>
		p--;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
	while(p>0)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f9      	bne.n	8001164 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	0003d090 	.word	0x0003d090

08001184 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b0c7      	sub	sp, #284	; 0x11c
 8001188:	af02      	add	r7, sp, #8
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001192:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001196:	600a      	str	r2, [r1, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800119e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80011a2:	4622      	mov	r2, r4
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011aa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80011ae:	4602      	mov	r2, r0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ba:	460a      	mov	r2, r1
 80011bc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011ca:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011d8:	e015      	b.n	8001206 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80011da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	441a      	add	r2, r3
 80011ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011ee:	3301      	adds	r3, #1
 80011f0:	7811      	ldrb	r1, [r2, #0]
 80011f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011f6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80011fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001200:	3301      	adds	r3, #1
 8001202:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001206:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800120a:	b29b      	uxth	r3, r3
 800120c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001210:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d8df      	bhi.n	80011da <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800121a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800121e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b299      	uxth	r1, r3
 8001226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800122a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	200a      	movs	r0, #10
 800123a:	9000      	str	r0, [sp, #0]
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <ssd1306_I2C_WriteMulti+0xc8>)
 800123e:	f000 fedd 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 8001242:	bf00      	nop
 8001244:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	20000244 	.word	0x20000244

08001250 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	b299      	uxth	r1, r3
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	230a      	movs	r3, #10
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ssd1306_I2C_Write+0x38>)
 800127a:	f000 febf 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000244 	.word	0x20000244

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_MspInit+0x4c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <HAL_I2C_MspInit+0xe8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12c      	bne.n	8001358 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131a:	23c0      	movs	r3, #192	; 0xc0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131e:	2312      	movs	r3, #18
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4825      	ldr	r0, [pc, #148]	; (80013cc <HAL_I2C_MspInit+0xf0>)
 8001336:	f000 fb35 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001356:	e031      	b.n	80013bc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_I2C_MspInit+0xf4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800137e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001390:	2304      	movs	r3, #4
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <HAL_I2C_MspInit+0xf0>)
 800139c:	f000 fb02 	bl	80019a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 80013aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_I2C_MspInit+0xec>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40005800 	.word	0x40005800

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_SPI_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_SPI_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_SPI_MspInit+0x88>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800142e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001440:	2305      	movs	r3, #5
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_SPI_MspInit+0x8c>)
 800144c:	f000 faaa 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40003800 	.word	0x40003800
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f922 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <OTG_FS_IRQHandler+0x10>)
 80014be:	f001 fe86 	bl	80031ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20001c30 	.word	0x20001c30

080014cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e00a      	b.n	80014f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014de:	f3af 8000 	nop.w
 80014e2:	4601      	mov	r1, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf0      	blt.n	80014de <_read+0x12>
	}

return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	605a      	str	r2, [r3, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_isatty>:

int _isatty(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f007 f890 	bl	80086c4 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000754 	.word	0x20000754
 80015d8:	20002268 	.word	0x20002268

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
  ldr r2, =_sbss
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800161c:	4c0b      	ldr	r4, [pc, #44]	; (800164c <LoopFillZerobss+0x26>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800162a:	f7ff ffd7 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f007 f84f 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f83b 	bl	80006ac <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001644:	0800b134 	.word	0x0800b134
  ldr r2, =_sbss
 8001648:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800164c:	20002268 	.word	0x20002268

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f94f 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fe00 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f967 	bl	800198a <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f92f 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000044 	.word	0x20000044
 80016f0:	2000004c 	.word	0x2000004c
 80016f4:	20000048 	.word	0x20000048

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000004c 	.word	0x2000004c
 800171c:	20000758 	.word	0x20000758

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000758 	.word	0x20000758

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000004c 	.word	0x2000004c

08001780 <__NVIC_SetPriorityGrouping>:
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e16b      	b.n	8001c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 815a 	bne.w	8001c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d130      	bne.n	8001a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 0201 	and.w	r2, r3, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d017      	beq.n	8001a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80b4 	beq.w	8001c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a5f      	ldr	r2, [pc, #380]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b46:	4a5b      	ldr	r2, [pc, #364]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_GPIO_Init+0x314>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x318>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x31c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x320>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x328>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x32c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x20a>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00e      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bae:	2308      	movs	r3, #8
 8001bb0:	e00c      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e00a      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0e:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f ae90 	bls.w	80019c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	400b      	ands	r3, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fa9e 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f002 fe9a 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fb86 	bl	8001720 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80e0 	bne.w	80021e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4970      	ldr	r1, [pc, #448]	; (80021f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fda0 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e0d3      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Transmit+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	; 0x21
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fbf0 	bl	80028a0 <I2C_MasterRequestWrite>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08d      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e0:	e066      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fe1a 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x188>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fe0a 	bl	8002da2 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d194      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	; 0x30
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002212:	f7ff fa85 	bl	8001720 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	f040 8208 	bne.w	8002636 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	497b      	ldr	r1, [pc, #492]	; (800241c <HAL_I2C_Mem_Read+0x224>)
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fc9f 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800223c:	2302      	movs	r3, #2
 800223e:	e1fb      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_I2C_Mem_Read+0x56>
 800224a:	2302      	movs	r3, #2
 800224c:	e1f4      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d007      	beq.n	8002274 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2222      	movs	r2, #34	; 0x22
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_I2C_Mem_Read+0x228>)
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b6:	88f8      	ldrh	r0, [r7, #6]
 80022b8:	893a      	ldrh	r2, [r7, #8]
 80022ba:	8979      	ldrh	r1, [r7, #10]
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	4603      	mov	r3, r0
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fb6c 	bl	80029a4 <I2C_RequestMemoryRead>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1b0      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d113      	bne.n	8002306 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e184      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b01      	cmp	r3, #1
 800230c:	d11b      	bne.n	8002346 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e164      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b02      	cmp	r3, #2
 800234c:	d11b      	bne.n	8002386 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	e144      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800239c:	e138      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	f200 80f1 	bhi.w	800258a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d123      	bne.n	80023f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fd35 	bl	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e139      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f6:	e10b      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d14e      	bne.n	800249e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	2200      	movs	r2, #0
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_I2C_Mem_Read+0x22c>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fbb2 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e10e      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
 800241a:	bf00      	nop
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000
 8002424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800249c:	e0b8      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	2200      	movs	r2, #0
 80024a6:	4966      	ldr	r1, [pc, #408]	; (8002640 <HAL_I2C_Mem_Read+0x448>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fb63 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0bf      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	2200      	movs	r2, #0
 8002502:	494f      	ldr	r1, [pc, #316]	; (8002640 <HAL_I2C_Mem_Read+0x448>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fb35 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e091      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002588:	e042      	b.n	8002610 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fc48 	bl	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e04c      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d118      	bne.n	8002610 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f aec2 	bne.w	800239e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	00010004 	.word	0x00010004

08002644 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	460b      	mov	r3, r1
 8002652:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff f864 	bl	8001720 <HAL_GetTick>
 8002658:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800265a:	2301      	movs	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	f040 8111 	bne.w	800288e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2319      	movs	r3, #25
 8002672:	2201      	movs	r2, #1
 8002674:	4988      	ldr	r1, [pc, #544]	; (8002898 <HAL_I2C_IsDeviceReady+0x254>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa7c 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	e104      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_I2C_IsDeviceReady+0x50>
 8002690:	2302      	movs	r3, #2
 8002692:	e0fd      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d007      	beq.n	80026ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a70      	ldr	r2, [pc, #448]	; (800289c <HAL_I2C_IsDeviceReady+0x258>)
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa3a 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002714:	d103      	bne.n	800271e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0b6      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002730:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fff5 	bl	8001720 <HAL_GetTick>
 8002736:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002766:	e025      	b.n	80027b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002768:	f7fe ffda 	bl	8001720 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <HAL_I2C_IsDeviceReady+0x13a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	22a0      	movs	r2, #160	; 0xa0
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2ba0      	cmp	r3, #160	; 0xa0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_IsDeviceReady+0x188>
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_I2C_IsDeviceReady+0x188>
 80027c6:	7dbb      	ldrb	r3, [r7, #22]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0cd      	beq.n	8002768 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d129      	bne.n	8002836 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2319      	movs	r3, #25
 800280e:	2201      	movs	r2, #1
 8002810:	4921      	ldr	r1, [pc, #132]	; (8002898 <HAL_I2C_IsDeviceReady+0x254>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f9ae 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e036      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e02c      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002844:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800284e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2319      	movs	r3, #25
 8002856:	2201      	movs	r2, #1
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <HAL_I2C_IsDeviceReady+0x254>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f98a 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e012      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3301      	adds	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	f4ff af32 	bcc.w	80026de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	00100002 	.word	0x00100002
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	460b      	mov	r3, r1
 80028ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d006      	beq.n	80028ca <I2C_MasterRequestWrite+0x2a>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <I2C_MasterRequestWrite+0x2a>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e00b      	b.n	80028f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d107      	bne.n	80028f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f937 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d103      	bne.n	8002924 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e035      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002930:	d108      	bne.n	8002944 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e01b      	b.n	800297c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	11db      	asrs	r3, r3, #7
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f063 030f 	orn	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <I2C_MasterRequestWrite+0xfc>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f95d 	bl	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e010      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <I2C_MasterRequestWrite+0x100>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f94d 	bl	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00010008 	.word	0x00010008
 80029a0:	00010002 	.word	0x00010002

080029a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f8c2 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a04:	d103      	bne.n	8002a0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0aa      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	4952      	ldr	r1, [pc, #328]	; (8002b70 <I2C_RequestMemoryRead+0x1cc>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f8fa 	bl	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e097      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6a39      	ldr	r1, [r7, #32]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f964 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d107      	bne.n	8002a76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e076      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	e021      	b.n	8002ad0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	6a39      	ldr	r1, [r7, #32]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f93e 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d107      	bne.n	8002ac2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e050      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	6a39      	ldr	r1, [r7, #32]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f923 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d107      	bne.n	8002af8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e035      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f82b 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b32:	d103      	bne.n	8002b3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e013      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <I2C_RequestMemoryRead+0x1cc>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f863 	bl	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	00010002 	.word	0x00010002

08002b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b84:	e025      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d021      	beq.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7fe fdc7 	bl	8001720 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e023      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10d      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4013      	ands	r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	e00c      	b.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d0b6      	beq.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c30:	e051      	b.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d123      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e046      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d021      	beq.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fd45 	bl	8001720 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e020      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e00b      	b.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d18d      	bne.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e02d      	b.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8ce 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e02d      	b.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d021      	beq.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fceb 	bl	8001720 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e007      	b.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d1ca      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dae:	e02d      	b.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f88d 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e02d      	b.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d021      	beq.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc8:	f7fe fcaa 	bl	8001720 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d1ca      	bne.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e30:	e042      	b.n	8002eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d119      	bne.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0210 	mvn.w	r2, #16
 8002e48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e029      	b.n	8002ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	f7fe fc54 	bl	8001720 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d1b5      	bne.n	8002e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d11b      	bne.n	8002f20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f30:	b08f      	sub	sp, #60	; 0x3c
 8002f32:	af0a      	add	r7, sp, #40	; 0x28
 8002f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e10f      	b.n	8003160 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f005 f89e 	bl	800809c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 ff77 	bl	8004e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	687e      	ldr	r6, [r7, #4]
 8002f8c:	466d      	mov	r5, sp
 8002f8e:	f106 0410 	add.w	r4, r6, #16
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa2:	1d33      	adds	r3, r6, #4
 8002fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa6:	6838      	ldr	r0, [r7, #0]
 8002fa8:	f001 fe4f 	bl	8004c4a <USB_CoreInit>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0d0      	b.n	8003160 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 ff65 	bl	8004e94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e04a      	b.n	8003066 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	333d      	adds	r3, #61	; 0x3d
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	b298      	uxth	r0, r3
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3342      	adds	r3, #66	; 0x42
 800300c:	4602      	mov	r2, r0
 800300e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	333f      	adds	r3, #63	; 0x3f
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3344      	adds	r3, #68	; 0x44
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3348      	adds	r3, #72	; 0x48
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3350      	adds	r3, #80	; 0x50
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	3301      	adds	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d3af      	bcc.n	8002fd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e044      	b.n	8003100 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	3301      	adds	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d3b5      	bcc.n	8003076 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	687e      	ldr	r6, [r7, #4]
 8003112:	466d      	mov	r5, sp
 8003114:	f106 0410 	add.w	r4, r6, #16
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003124:	e885 0003 	stmia.w	r5, {r0, r1}
 8003128:	1d33      	adds	r3, r6, #4
 800312a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312c:	6838      	ldr	r0, [r7, #0]
 800312e:	f001 fefd 	bl	8004f2c <USB_DevInit>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e00d      	b.n	8003160 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 ff79 	bl	8006050 <USB_DevDisconnect>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003168 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_PCD_Start+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e020      	b.n	80031c6 <HAL_PCD_Start+0x5e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	2b01      	cmp	r3, #1
 8003192:	d109      	bne.n	80031a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003198:	2b01      	cmp	r3, #1
 800319a:	d005      	beq.n	80031a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fe4f 	bl	8004e50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 ff29 	bl	800600e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031ce:	b590      	push	{r4, r7, lr}
 80031d0:	b08d      	sub	sp, #52	; 0x34
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 ffe7 	bl	80061b8 <USB_GetMode>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 839d 	bne.w	800392c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 ff4b 	bl	8006092 <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8393 	beq.w	800392a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f002 ff42 	bl	8006092 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d107      	bne.n	8003228 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f002 0202 	and.w	r2, r2, #2
 8003226:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f002 ff30 	bl	8006092 <USB_ReadInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d161      	bne.n	8003300 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0210 	bic.w	r2, r2, #16
 800324a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	3304      	adds	r3, #4
 800326a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	0c5b      	lsrs	r3, r3, #17
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	2b02      	cmp	r3, #2
 8003276:	d124      	bne.n	80032c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d035      	beq.n	80032f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	6a38      	ldr	r0, [r7, #32]
 8003298:	f002 fd67 	bl	8005d6a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a8:	441a      	add	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ba:	441a      	add	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	619a      	str	r2, [r3, #24]
 80032c0:	e016      	b.n	80032f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	0c5b      	lsrs	r3, r3, #17
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d110      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d4:	2208      	movs	r2, #8
 80032d6:	4619      	mov	r1, r3
 80032d8:	6a38      	ldr	r0, [r7, #32]
 80032da:	f002 fd46 	bl	8005d6a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ea:	441a      	add	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0210 	orr.w	r2, r2, #16
 80032fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fec4 	bl	8006092 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003314:	d16e      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f002 feca 	bl	80060b8 <USB_ReadDevAllOutEpInterrupt>
 8003324:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003326:	e062      	b.n	80033ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d057      	beq.n	80033e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f002 feef 	bl	8006120 <USB_ReadDevOutEPInterrupt>
 8003342:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	461a      	mov	r2, r3
 800335c:	2301      	movs	r3, #1
 800335e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fdb0 	bl	8003ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337e:	461a      	mov	r2, r3
 8003380:	2308      	movs	r3, #8
 8003382:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 feaa 	bl	80040e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	461a      	mov	r2, r3
 80033a4:	2310      	movs	r3, #16
 80033a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2320      	movs	r3, #32
 80033c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d199      	bne.n	8003328 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fe4a 	bl	8006092 <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003408:	f040 80c0 	bne.w	800358c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f002 fe6b 	bl	80060ec <USB_ReadDevAllInEpInterrupt>
 8003416:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800341c:	e0b2      	b.n	8003584 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a7 	beq.w	8003578 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f002 fe91 	bl	800615c <USB_ReadDevInEPInterrupt>
 800343a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d057      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2201      	movs	r2, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003466:	4013      	ands	r3, r2
 8003468:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	461a      	mov	r2, r3
 8003478:	2301      	movs	r3, #1
 800347a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d132      	bne.n	80034ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3348      	adds	r3, #72	; 0x48
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	3344      	adds	r3, #68	; 0x44
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4419      	add	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3348      	adds	r3, #72	; 0x48
 80034ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_PCD_IRQHandler+0x31c>
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3350      	adds	r3, #80	; 0x50
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	f002 fe99 	bl	800621c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f004 fe54 	bl	800819e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2308      	movs	r3, #8
 8003510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	461a      	mov	r2, r3
 800352a:	2310      	movs	r3, #16
 800352c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	461a      	mov	r2, r3
 8003562:	2302      	movs	r3, #2
 8003564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fc1b 	bl	8003dae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	3301      	adds	r3, #1
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	f47f af49 	bne.w	800341e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fd7e 	bl	8006092 <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800359c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a0:	d122      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035c8:	2100      	movs	r1, #0
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fe26 	bl	800421c <HAL_PCDEx_LPM_Callback>
 80035d0:	e002      	b.n	80035d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 fe5a 	bl	800828c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 fd50 	bl	8006092 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fc:	d112      	bne.n	8003624 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 fe16 	bl	8008240 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003622:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f002 fd32 	bl	8006092 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	f040 80c7 	bne.w	80037ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2110      	movs	r1, #16
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fdcc 	bl	80051f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	e056      	b.n	8003710 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	461a      	mov	r2, r3
 8003670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003674:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003686:	0151      	lsls	r1, r2, #5
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	440a      	add	r2, r1
 800368c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003694:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	461a      	mov	r2, r3
 80036c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003708:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	3301      	adds	r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003716:	429a      	cmp	r2, r3
 8003718:	d3a3      	bcc.n	8003662 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800372c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003746:	f043 030b 	orr.w	r3, r3, #11
 800374a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375c:	f043 030b 	orr.w	r3, r3, #11
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
 8003762:	e015      	b.n	8003790 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003776:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800377a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378a:	f043 030b 	orr.w	r3, r3, #11
 800378e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b4:	461a      	mov	r2, r3
 80037b6:	f002 fd31 	bl	800621c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 fc5f 	bl	8006092 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037de:	d124      	bne.n	800382a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 fcf5 	bl	80061d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fd5d 	bl	80052ae <USB_GetDevSpeed>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	f001 f97a 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8003804:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	4620      	mov	r0, r4
 8003810:	f001 fa7c 	bl	8004d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f004 fcea 	bl	80081ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003828:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fc2f 	bl	8006092 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d10a      	bne.n	8003854 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f004 fcc7 	bl	80081d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 0208 	and.w	r2, r2, #8
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fc1a 	bl	8006092 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003868:	d10f      	bne.n	800388a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f004 fd29 	bl	80082cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fbff 	bl	8006092 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389e:	d10f      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f004 fcfc 	bl	80082a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fbe4 	bl	8006092 <USB_ReadInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d10a      	bne.n	80038ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f004 fd0a 	bl	80082f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f002 fbce 	bl	8006092 <USB_ReadInterrupts>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d115      	bne.n	800392c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f004 fcfa 	bl	800830c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	e000      	b.n	800392c <HAL_PCD_IRQHandler+0x75e>
      return;
 800392a:	bf00      	nop
    }
  }
}
 800392c:	3734      	adds	r7, #52	; 0x34
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_PCD_SetAddress+0x1a>
 8003948:	2302      	movs	r3, #2
 800394a:	e013      	b.n	8003974 <HAL_PCD_SetAddress+0x42>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fb2c 	bl	8005fc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	70fb      	strb	r3, [r7, #3]
 800398e:	460b      	mov	r3, r1
 8003990:	803b      	strh	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800399a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da0f      	bge.n	80039c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	3338      	adds	r3, #56	; 0x38
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	3304      	adds	r3, #4
 80039b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	705a      	strb	r2, [r3, #1]
 80039c0:	e00f      	b.n	80039e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ee:	883a      	ldrh	r2, [r7, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	78ba      	ldrb	r2, [r7, #2]
 80039f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d102      	bne.n	8003a18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_PCD_EP_Open+0xaa>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e00e      	b.n	8003a44 <HAL_PCD_EP_Open+0xc8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fc5f 	bl	80052f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a42:	7afb      	ldrb	r3, [r7, #11]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da0f      	bge.n	8003a80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	3338      	adds	r3, #56	; 0x38
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	3304      	adds	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	705a      	strb	r2, [r3, #1]
 8003a7e:	e00f      	b.n	8003aa0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_PCD_EP_Close+0x6e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e00e      	b.n	8003ad8 <HAL_PCD_EP_Close+0x8c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fc9d 	bl	8005408 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	f003 020f 	and.w	r2, r3, #15
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	3304      	adds	r3, #4
 8003b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	f001 ff78 	bl	8005a48 <USB_EP0StartXfer>
 8003b58:	e008      	b.n	8003b6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	f001 fd2a 	bl	80055c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 020f 	and.w	r2, r3, #15
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b98:	681b      	ldr	r3, [r3, #0]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
 8003bb8:	f003 020f 	and.w	r2, r3, #15
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	3338      	adds	r3, #56	; 0x38
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	3304      	adds	r3, #4
 8003bcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2201      	movs	r2, #1
 8003be4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d102      	bne.n	8003c00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c00:	7afb      	ldrb	r3, [r7, #11]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6979      	ldr	r1, [r7, #20]
 8003c18:	f001 ff16 	bl	8005a48 <USB_EP0StartXfer>
 8003c1c:	e008      	b.n	8003c30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	f001 fcc8 	bl	80055c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d901      	bls.n	8003c58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e050      	b.n	8003cfa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da0f      	bge.n	8003c80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	3338      	adds	r3, #56	; 0x38
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	3304      	adds	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	705a      	strb	r2, [r3, #1]
 8003c7e:	e00d      	b.n	8003c9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_EP_SetStall+0x82>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e01e      	b.n	8003cfa <HAL_PCD_EP_SetStall+0xc0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 f8a5 	bl	8005e1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	b2d9      	uxtb	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cea:	461a      	mov	r2, r3
 8003cec:	f002 fa96 	bl	800621c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d901      	bls.n	8003d20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e042      	b.n	8003da6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	da0f      	bge.n	8003d48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3338      	adds	r3, #56	; 0x38
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	705a      	strb	r2, [r3, #1]
 8003d46:	e00f      	b.n	8003d68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3304      	adds	r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_PCD_EP_ClrStall+0x86>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e00e      	b.n	8003da6 <HAL_PCD_EP_ClrStall+0xa4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68f9      	ldr	r1, [r7, #12]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 f8ad 	bl	8005ef6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b08a      	sub	sp, #40	; 0x28
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	3338      	adds	r3, #56	; 0x38
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d901      	bls.n	8003de6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06c      	b.n	8003ec0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d902      	bls.n	8003e02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3303      	adds	r3, #3
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e0a:	e02b      	b.n	8003e64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d902      	bls.n	8003e28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3303      	adds	r3, #3
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4603      	mov	r3, r0
 8003e46:	6978      	ldr	r0, [r7, #20]
 8003e48:	f001 ff51 	bl	8005cee <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	441a      	add	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d809      	bhi.n	8003e8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d203      	bcs.n	8003e8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1be      	bne.n	8003e0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d811      	bhi.n	8003ebe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	6939      	ldr	r1, [r7, #16]
 8003eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eba:	4013      	ands	r3, r2
 8003ebc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	333c      	adds	r3, #60	; 0x3c
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 80a0 	bne.w	8004040 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f240 80dd 	bls.w	80040ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80d7 	beq.w	80040ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	e0cb      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d009      	beq.n	8003f54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2320      	movs	r3, #32
 8003f50:	6093      	str	r3, [r2, #8]
 8003f52:	e0bc      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 80b7 	bne.w	80040ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a5d      	ldr	r2, [pc, #372]	; (80040d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d90f      	bls.n	8003f88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f84:	6093      	str	r3, [r2, #8]
 8003f86:	e0a2      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	0159      	lsls	r1, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003fae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4403      	add	r3, r0
 8003fbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4419      	add	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4403      	add	r3, r0
 8003ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004000:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d114      	bne.n	8004032 <PCD_EP_OutXfrComplete_int+0x16a>
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d108      	bne.n	8004032 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800402a:	461a      	mov	r2, r3
 800402c:	2101      	movs	r1, #1
 800402e:	f002 f8f5 	bl	800621c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f004 f895 	bl	8008168 <HAL_PCD_DataOutStageCallback>
 800403e:	e046      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a26      	ldr	r2, [pc, #152]	; (80040dc <PCD_EP_OutXfrComplete_int+0x214>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d124      	bne.n	8004092 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e032      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2320      	movs	r3, #32
 8004082:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f004 f86c 	bl	8008168 <HAL_PCD_DataOutStageCallback>
 8004090:	e01d      	b.n	80040ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d114      	bne.n	80040c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d108      	bne.n	80040c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040ba:	461a      	mov	r2, r3
 80040bc:	2100      	movs	r1, #0
 80040be:	f002 f8ad 	bl	800621c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f004 f84d 	bl	8008168 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	4f54300a 	.word	0x4f54300a
 80040dc:	4f54310a 	.word	0x4f54310a

080040e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	333c      	adds	r3, #60	; 0x3c
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <PCD_EP_OutSetupPacket_int+0x88>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d90e      	bls.n	8004134 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f004 f805 	bl	8008144 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <PCD_EP_OutSetupPacket_int+0x88>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d90c      	bls.n	800415c <PCD_EP_OutSetupPacket_int+0x7c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d108      	bne.n	800415c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004154:	461a      	mov	r2, r3
 8004156:	2101      	movs	r1, #1
 8004158:	f002 f860 	bl	800621c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	4f54300a 	.word	0x4f54300a

0800416c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
 8004178:	4613      	mov	r3, r2
 800417a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800418a:	883b      	ldrh	r3, [r7, #0]
 800418c:	0419      	lsls	r1, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	430a      	orrs	r2, r1
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
 8004198:	e028      	b.n	80041ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e00d      	b.n	80041ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	3340      	adds	r3, #64	; 0x40
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	3301      	adds	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3ec      	bcc.n	80041ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041d4:	883b      	ldrh	r3, [r7, #0]
 80041d6:	0418      	lsls	r0, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	3b01      	subs	r3, #1
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4302      	orrs	r2, r0
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e267      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d075      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4b85      	ldr	r3, [pc, #532]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d112      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4b82      	ldr	r3, [pc, #520]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e242      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x74>
 800429a:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a75      	ldr	r2, [pc, #468]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x98>
 80042b2:	4b70      	ldr	r3, [pc, #448]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a6f      	ldr	r2, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6c      	ldr	r2, [pc, #432]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042cc:	4b69      	ldr	r3, [pc, #420]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a68      	ldr	r2, [pc, #416]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fd fa18 	bl	8001720 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fa14 	bl	8001720 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e207      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd fa04 	bl	8001720 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fa00 	bl	8001720 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1f3      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d063      	beq.n	8004412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434a:	4b4a      	ldr	r3, [pc, #296]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d11c      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004362:	4b44      	ldr	r3, [pc, #272]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d116      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e1c7      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4937      	ldr	r1, [pc, #220]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	e03a      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCC_OscConfig+0x244>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fd f9b9 	bl	8001720 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b2:	f7fd f9b5 	bl	8001720 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1a8      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b28      	ldr	r3, [pc, #160]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4925      	ldr	r1, [pc, #148]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	e015      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x244>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd f998 	bl	8001720 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fd f994 	bl	8001720 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e187      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d036      	beq.n	800448c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_RCC_OscConfig+0x248>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd f978 	bl	8001720 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004434:	f7fd f974 	bl	8001720 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e167      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
 8004452:	e01b      	b.n	800448c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_OscConfig+0x248>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fd f961 	bl	8001720 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004460:	e00e      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004462:	f7fd f95d 	bl	8001720 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d907      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e150      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
 8004474:	40023800 	.word	0x40023800
 8004478:	42470000 	.word	0x42470000
 800447c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	4b88      	ldr	r3, [pc, #544]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ea      	bne.n	8004462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8097 	beq.w	80045c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a7c      	ldr	r2, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b77      	ldr	r3, [pc, #476]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d6:	4b74      	ldr	r3, [pc, #464]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a73      	ldr	r2, [pc, #460]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e2:	f7fd f91d 	bl	8001720 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fd f919 	bl	8001720 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e10c      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x2ea>
 8004510:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a63      	ldr	r2, [pc, #396]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	e01c      	b.n	8004558 <HAL_RCC_OscConfig+0x324>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x30c>
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
 8004532:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0x324>
 8004540:	4b58      	ldr	r3, [pc, #352]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a57      	ldr	r2, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a54      	ldr	r2, [pc, #336]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004552:	f023 0304 	bic.w	r3, r3, #4
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d015      	beq.n	800458c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fd f8de 	bl	8001720 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd f8da 	bl	8001720 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0cb      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	4b49      	ldr	r3, [pc, #292]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <HAL_RCC_OscConfig+0x334>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458c:	f7fd f8c8 	bl	8001720 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fd f8c4 	bl	8001720 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0b5      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ee      	bne.n	8004594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a1 	beq.w	8004714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d2:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d05c      	beq.n	8004698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d141      	bne.n	800466a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd f898 	bl	8001720 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd f894 	bl	8001720 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e087      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	3b01      	subs	r3, #1
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	491b      	ldr	r1, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fd f86d 	bl	8001720 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd f869 	bl	8001720 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e05c      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x416>
 8004668:	e054      	b.n	8004714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fd f856 	bl	8001720 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd f852 	bl	8001720 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e045      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x444>
 8004696:	e03d      	b.n	8004714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e038      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x4ec>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d028      	beq.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d121      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d11a      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d111      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0cc      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90c      	bls.n	8004760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d044      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d119      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e067      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4934      	ldr	r1, [pc, #208]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7fc ff84 	bl	8001720 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fc ff80 	bl	8001720 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e04f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d20c      	bcs.n	800486c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490a      	ldr	r1, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fee4 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023c00 	.word	0x40023c00
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800b074 	.word	0x0800b074
 80048e8:	20000044 	.word	0x20000044
 80048ec:	20000048 	.word	0x20000048

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b094      	sub	sp, #80	; 0x50
 80048f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
 80048fc:	2300      	movs	r3, #0
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	2300      	movs	r3, #0
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004908:	4b79      	ldr	r3, [pc, #484]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b08      	cmp	r3, #8
 8004912:	d00d      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x40>
 8004914:	2b08      	cmp	r3, #8
 8004916:	f200 80e1 	bhi.w	8004adc <HAL_RCC_GetSysClockFreq+0x1ec>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x34>
 800491e:	2b04      	cmp	r3, #4
 8004920:	d003      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x3a>
 8004922:	e0db      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004928:	e0db      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492a:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x204>)
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800492e:	e0d8      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004930:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d063      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	2200      	movs	r2, #0
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004950:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004958:	633b      	str	r3, [r7, #48]	; 0x30
 800495a:	2300      	movs	r3, #0
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
 800495e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004962:	4622      	mov	r2, r4
 8004964:	462b      	mov	r3, r5
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	0159      	lsls	r1, r3, #5
 8004970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004974:	0150      	lsls	r0, r2, #5
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4621      	mov	r1, r4
 800497c:	1a51      	subs	r1, r2, r1
 800497e:	6139      	str	r1, [r7, #16]
 8004980:	4629      	mov	r1, r5
 8004982:	eb63 0301 	sbc.w	r3, r3, r1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004994:	4659      	mov	r1, fp
 8004996:	018b      	lsls	r3, r1, #6
 8004998:	4651      	mov	r1, sl
 800499a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800499e:	4651      	mov	r1, sl
 80049a0:	018a      	lsls	r2, r1, #6
 80049a2:	4651      	mov	r1, sl
 80049a4:	ebb2 0801 	subs.w	r8, r2, r1
 80049a8:	4659      	mov	r1, fp
 80049aa:	eb63 0901 	sbc.w	r9, r3, r1
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c2:	4690      	mov	r8, r2
 80049c4:	4699      	mov	r9, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	eb18 0303 	adds.w	r3, r8, r3
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	462b      	mov	r3, r5
 80049d0:	eb49 0303 	adc.w	r3, r9, r3
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049e2:	4629      	mov	r1, r5
 80049e4:	028b      	lsls	r3, r1, #10
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ec:	4621      	mov	r1, r4
 80049ee:	028a      	lsls	r2, r1, #10
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	2200      	movs	r2, #0
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a00:	f7fb fc3e 	bl	8000280 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a0c:	e058      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0e:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	2200      	movs	r2, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	4611      	mov	r1, r2
 8004a1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
 8004a24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	f04f 0000 	mov.w	r0, #0
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	0159      	lsls	r1, r3, #5
 8004a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a3a:	0150      	lsls	r0, r2, #5
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4641      	mov	r1, r8
 8004a42:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a46:	4649      	mov	r1, r9
 8004a48:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a60:	ebb2 040a 	subs.w	r4, r2, sl
 8004a64:	eb63 050b 	sbc.w	r5, r3, fp
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	00eb      	lsls	r3, r5, #3
 8004a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a76:	00e2      	lsls	r2, r4, #3
 8004a78:	4614      	mov	r4, r2
 8004a7a:	461d      	mov	r5, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	18e3      	adds	r3, r4, r3
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	464b      	mov	r3, r9
 8004a84:	eb45 0303 	adc.w	r3, r5, r3
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a96:	4629      	mov	r1, r5
 8004a98:	028b      	lsls	r3, r1, #10
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	028a      	lsls	r2, r1, #10
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	61fa      	str	r2, [r7, #28]
 8004ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab4:	f7fb fbe4 	bl	8000280 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4613      	mov	r3, r2
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	3301      	adds	r3, #1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ada:	e002      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ade:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3750      	adds	r7, #80	; 0x50
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000044 	.word	0x20000044

08004b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b14:	f7ff fff0 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0a9b      	lsrs	r3, r3, #10
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	0800b084 	.word	0x0800b084

08004b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07b      	b.n	8004c42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d009      	beq.n	8004b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc fc22 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0104 	and.w	r1, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0210 	and.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	f107 001c 	add.w	r0, r7, #28
 8004c58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d122      	bne.n	8004ca8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 fb1b 	bl	80062d8 <USB_CoreReset>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e01a      	b.n	8004cde <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 fb0f 	bl	80062d8 <USB_CoreReset>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd0:	e005      	b.n	8004cde <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10b      	bne.n	8004cfc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f043 0206 	orr.w	r2, r3, #6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d08:	b004      	add	sp, #16
 8004d0a:	4770      	bx	lr

08004d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d165      	bne.n	8004dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4a41      	ldr	r2, [pc, #260]	; (8004e28 <USB_SetTurnaroundTime+0x11c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d906      	bls.n	8004d36 <USB_SetTurnaroundTime+0x2a>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d202      	bcs.n	8004d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d30:	230f      	movs	r3, #15
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e062      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a3c      	ldr	r2, [pc, #240]	; (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d306      	bcc.n	8004d4c <USB_SetTurnaroundTime+0x40>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d202      	bcs.n	8004d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d46:	230e      	movs	r3, #14
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e057      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d306      	bcc.n	8004d62 <USB_SetTurnaroundTime+0x56>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a37      	ldr	r2, [pc, #220]	; (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d202      	bcs.n	8004d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d5c:	230d      	movs	r3, #13
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e04c      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d306      	bcc.n	8004d78 <USB_SetTurnaroundTime+0x6c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d72:	230c      	movs	r3, #12
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e041      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d906      	bls.n	8004d8e <USB_SetTurnaroundTime+0x82>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d802      	bhi.n	8004d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d88:	230b      	movs	r3, #11
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e036      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <USB_SetTurnaroundTime+0x98>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d9e:	230a      	movs	r3, #10
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e02b      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0xae>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d202      	bcs.n	8004dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004db4:	2309      	movs	r3, #9
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e020      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d306      	bcc.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e015      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0xda>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <USB_SetTurnaroundTime+0x140>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d202      	bcs.n	8004de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004de0:	2307      	movs	r3, #7
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e00a      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004de6:	2306      	movs	r3, #6
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e007      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004df2:	2309      	movs	r3, #9
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e001      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004df8:	2309      	movs	r3, #9
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00d8acbf 	.word	0x00d8acbf
 8004e2c:	00e4e1c0 	.word	0x00e4e1c0
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	01067380 	.word	0x01067380
 8004e38:	011a499f 	.word	0x011a499f
 8004e3c:	01312cff 	.word	0x01312cff
 8004e40:	014ca43f 	.word	0x014ca43f
 8004e44:	016e3600 	.word	0x016e3600
 8004e48:	01a6ab1f 	.word	0x01a6ab1f
 8004e4c:	01e84800 	.word	0x01e84800

08004e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d115      	bne.n	8004ee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f7fc fc38 	bl	8001738 <HAL_Delay>
      ms++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f972 	bl	80061b8 <USB_GetMode>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d01e      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b31      	cmp	r3, #49	; 0x31
 8004ede:	d9f0      	bls.n	8004ec2 <USB_SetCurrentMode+0x2e>
 8004ee0:	e01a      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d115      	bne.n	8004f14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	f7fc fc1f 	bl	8001738 <HAL_Delay>
      ms++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f959 	bl	80061b8 <USB_GetMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b31      	cmp	r3, #49	; 0x31
 8004f10:	d9f0      	bls.n	8004ef4 <USB_SetCurrentMode+0x60>
 8004f12:	e001      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e005      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b32      	cmp	r3, #50	; 0x32
 8004f1c:	d101      	bne.n	8004f22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e009      	b.n	8004f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3340      	adds	r3, #64	; 0x40
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b0e      	cmp	r3, #14
 8004f64:	d9f2      	bls.n	8004f4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d11c      	bne.n	8004fa6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8004fa4:	e00b      	b.n	8004fbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd8:	461a      	mov	r2, r3
 8004fda:	680b      	ldr	r3, [r1, #0]
 8004fdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d10c      	bne.n	8004ffe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f945 	bl	800527c <USB_SetDevSpeed>
 8004ff2:	e008      	b.n	8005006 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f940 	bl	800527c <USB_SetDevSpeed>
 8004ffc:	e003      	b.n	8005006 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ffe:	2103      	movs	r1, #3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f93b 	bl	800527c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005006:	2110      	movs	r1, #16
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8f3 	bl	80051f4 <USB_FlushTxFifo>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f90f 	bl	800523c <USB_FlushRxFifo>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	461a      	mov	r2, r3
 8005030:	2300      	movs	r3, #0
 8005032:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	461a      	mov	r2, r3
 8005048:	2300      	movs	r3, #0
 800504a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e043      	b.n	80050da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005068:	d118      	bne.n	800509c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	461a      	mov	r2, r3
 800507e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e013      	b.n	80050ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	461a      	mov	r2, r3
 8005094:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e008      	b.n	80050ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	461a      	mov	r2, r3
 80050bc:	2300      	movs	r3, #0
 80050be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	461a      	mov	r2, r3
 80050ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3301      	adds	r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d3b7      	bcc.n	8005052 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e043      	b.n	8005170 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fe:	d118      	bne.n	8005132 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e013      	b.n	8005144 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	461a      	mov	r2, r3
 800512a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e008      	b.n	8005144 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005168:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3301      	adds	r3, #1
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d3b7      	bcc.n	80050e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005198:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f043 0210 	orr.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <USB_DevInit+0x2c4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f043 0208 	orr.w	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ec:	b004      	add	sp, #16
 80051ee:	4770      	bx	lr
 80051f0:	803c3800 	.word	0x803c3800

080051f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	019b      	lsls	r3, r3, #6
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	4a08      	ldr	r2, [pc, #32]	; (8005238 <USB_FlushTxFifo+0x44>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e006      	b.n	800522c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d0f1      	beq.n	800520e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	00030d40 	.word	0x00030d40

0800523c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2210      	movs	r2, #16
 800524c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <USB_FlushRxFifo+0x3c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e006      	b.n	800526c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b10      	cmp	r3, #16
 8005268:	d0f1      	beq.n	800524e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	00030d40 	.word	0x00030d40

0800527c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0306 	and.w	r3, r3, #6
 80052c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
 80052d2:	e00a      	b.n	80052ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d002      	beq.n	80052e0 <USB_GetDevSpeed+0x32>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d102      	bne.n	80052e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052e0:	2302      	movs	r3, #2
 80052e2:	75fb      	strb	r3, [r7, #23]
 80052e4:	e001      	b.n	80052ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052e6:	230f      	movs	r3, #15
 80052e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d13a      	bne.n	800538a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005332:	4313      	orrs	r3, r2
 8005334:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d155      	bne.n	80053f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005368:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	059b      	lsls	r3, r3, #22
 800536e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005370:	4313      	orrs	r3, r2
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e036      	b.n	80053f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	2101      	movs	r1, #1
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	041b      	lsls	r3, r3, #16
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11a      	bne.n	80053f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053de:	430b      	orrs	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d161      	bne.n	80054e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543a:	d11f      	bne.n	800547c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800545a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800547a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	b29b      	uxth	r3, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4013      	ands	r3, r2
 800549e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c0:	4013      	ands	r3, r2
 80054c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	0159      	lsls	r1, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	440b      	add	r3, r1
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	4619      	mov	r1, r3
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <USB_DeactivateEndpoint+0x1b0>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
 80054e6:	e060      	b.n	80055aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fe:	d11f      	bne.n	8005540 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800551e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	43db      	mvns	r3, r3
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005560:	4013      	ands	r3, r2
 8005562:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	2101      	movs	r1, #1
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	43db      	mvns	r3, r3
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005584:	4013      	ands	r3, r2
 8005586:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	0159      	lsls	r1, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	440b      	add	r3, r1
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	4619      	mov	r1, r3
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <USB_DeactivateEndpoint+0x1b4>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	ec337800 	.word	0xec337800
 80055bc:	eff37800 	.word	0xeff37800

080055c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 815c 	bne.w	800589a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d132      	bne.n	8005650 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800560c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800562c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	0cdb      	lsrs	r3, r3, #19
 800564a:	04db      	lsls	r3, r3, #19
 800564c:	6113      	str	r3, [r2, #16]
 800564e:	e074      	b.n	800573a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	0cdb      	lsrs	r3, r3, #19
 800566c:	04db      	lsls	r3, r3, #19
 800566e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800568e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	440b      	add	r3, r1
 80056ac:	1e59      	subs	r1, r3, #1
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80056b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056b8:	4b9d      	ldr	r3, [pc, #628]	; (8005930 <USB_EPStartXfer+0x370>)
 80056ba:	400b      	ands	r3, r1
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	0148      	lsls	r0, r1, #5
 80056c0:	69f9      	ldr	r1, [r7, #28]
 80056c2:	4401      	add	r1, r0
 80056c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056c8:	4313      	orrs	r3, r2
 80056ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	0148      	lsls	r0, r1, #5
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	4401      	add	r1, r0
 80056ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	78db      	ldrb	r3, [r3, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11f      	bne.n	800573a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005718:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005738:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d14b      	bne.n	80057d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	78db      	ldrb	r3, [r3, #3]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d128      	bne.n	80057b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d110      	bne.n	8005796 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e00f      	b.n	80057b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e12f      	b.n	8005a38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	78db      	ldrb	r3, [r3, #3]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d015      	beq.n	800582c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8117 	beq.w	8005a38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005826:	4313      	orrs	r3, r2
 8005828:	634b      	str	r3, [r1, #52]	; 0x34
 800582a:	e105      	b.n	8005a38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d110      	bne.n	800585e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	e00f      	b.n	800587e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	b298      	uxth	r0, r3
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4603      	mov	r3, r0
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fa2b 	bl	8005cee <USB_WritePacket>
 8005898:	e0ce      	b.n	8005a38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b4:	0cdb      	lsrs	r3, r3, #19
 80058b6:	04db      	lsls	r3, r3, #19
 80058b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d126      	bne.n	8005934 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	4401      	add	r1, r0
 8005904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592a:	6113      	str	r3, [r2, #16]
 800592c:	e036      	b.n	800599c <USB_EPStartXfer+0x3dc>
 800592e:	bf00      	nop
 8005930:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4413      	add	r3, r2
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	8afb      	ldrh	r3, [r7, #22]
 800595a:	04d9      	lsls	r1, r3, #19
 800595c:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <USB_EPStartXfer+0x484>)
 800595e:	400b      	ands	r3, r1
 8005960:	69b9      	ldr	r1, [r7, #24]
 8005962:	0148      	lsls	r0, r1, #5
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	4401      	add	r1, r0
 8005968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	8af9      	ldrh	r1, [r7, #22]
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	0148      	lsls	r0, r1, #5
 8005990:	69f9      	ldr	r1, [r7, #28]
 8005992:	4401      	add	r1, r0
 8005994:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005998:	4313      	orrs	r3, r2
 800599a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10d      	bne.n	80059be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	68d9      	ldr	r1, [r3, #12]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	460a      	mov	r2, r1
 80059bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d128      	bne.n	8005a18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d110      	bne.n	80059f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e00f      	b.n	8005a18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	1ff80000 	.word	0x1ff80000

08005a48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f040 80cd 	bne.w	8005c04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d132      	bne.n	8005ad8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	0cdb      	lsrs	r3, r3, #19
 8005ad2:	04db      	lsls	r3, r3, #19
 8005ad4:	6113      	str	r3, [r2, #16]
 8005ad6:	e04e      	b.n	8005b76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	0cdb      	lsrs	r3, r3, #19
 8005af4:	04db      	lsls	r3, r3, #19
 8005af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d903      	bls.n	8005b30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b66:	6939      	ldr	r1, [r7, #16]
 8005b68:	0148      	lsls	r0, r1, #5
 8005b6a:	6979      	ldr	r1, [r7, #20]
 8005b6c:	4401      	add	r1, r0
 8005b6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b72:	4313      	orrs	r3, r2
 8005b74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d11e      	bne.n	8005bba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e092      	b.n	8005ce0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d07e      	beq.n	8005ce0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	6979      	ldr	r1, [r7, #20]
 8005bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	634b      	str	r3, [r1, #52]	; 0x34
 8005c02:	e06d      	b.n	8005ce0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	0cdb      	lsrs	r3, r3, #19
 8005c20:	04db      	lsls	r3, r3, #19
 8005c22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8e:	6939      	ldr	r1, [r7, #16]
 8005c90:	0148      	lsls	r0, r1, #5
 8005c92:	6979      	ldr	r1, [r7, #20]
 8005c94:	4401      	add	r1, r0
 8005c96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10d      	bne.n	8005cc0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	68d9      	ldr	r1, [r3, #12]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b089      	sub	sp, #36	; 0x24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	71fb      	strb	r3, [r7, #7]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d123      	bne.n	8005d5c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d14:	88bb      	ldrh	r3, [r7, #4]
 8005d16:	3303      	adds	r3, #3
 8005d18:	089b      	lsrs	r3, r3, #2
 8005d1a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	e018      	b.n	8005d54 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	031a      	lsls	r2, r3, #12
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2e:	461a      	mov	r2, r3
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3301      	adds	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3e2      	bcc.n	8005d22 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3724      	adds	r7, #36	; 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b08b      	sub	sp, #44	; 0x2c
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	4613      	mov	r3, r2
 8005d76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	e014      	b.n	8005dc0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	3301      	adds	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	3301      	adds	r3, #1
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	3301      	adds	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	3301      	adds	r3, #1
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	623b      	str	r3, [r7, #32]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d3e6      	bcc.n	8005d96 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dc8:	8bfb      	ldrh	r3, [r7, #30]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01e      	beq.n	8005e0c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f107 0310 	add.w	r3, r7, #16
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	fa22 f303 	lsr.w	r3, r2, r3
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	701a      	strb	r2, [r3, #0]
      i++;
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	3301      	adds	r3, #1
 8005df8:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e00:	8bfb      	ldrh	r3, [r7, #30]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e06:	8bfb      	ldrh	r3, [r7, #30]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ea      	bne.n	8005de2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	372c      	adds	r7, #44	; 0x2c
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d12c      	bne.n	8005e90 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	db12      	blt.n	8005e6e <USB_EPSetStall+0x54>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e6c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e02b      	b.n	8005ee8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db12      	blt.n	8005ec8 <USB_EPSetStall+0xae>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ec6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d128      	bne.n	8005f64 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	78db      	ldrb	r3, [r3, #3]
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d003      	beq.n	8005f42 <USB_EPClearStall+0x4c>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	78db      	ldrb	r3, [r3, #3]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d138      	bne.n	8005fb4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e027      	b.n	8005fb4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	78db      	ldrb	r3, [r3, #3]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d003      	beq.n	8005f94 <USB_EPClearStall+0x9e>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d10f      	bne.n	8005fb4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fe4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006028:	f023 0303 	bic.w	r3, r3, #3
 800602c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603c:	f023 0302 	bic.w	r3, r3, #2
 8006040:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800607e:	f043 0302 	orr.w	r3, r3, #2
 8006082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	0c1b      	lsrs	r3, r3, #16
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	b29b      	uxth	r3, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800614e:	68bb      	ldr	r3, [r7, #8]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	b2db      	uxtb	r3, r3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4013      	ands	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061aa:	68bb      	ldr	r3, [r7, #8]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f003 0301 	and.w	r3, r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	333c      	adds	r3, #60	; 0x3c
 8006232:	3304      	adds	r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <USB_EP0_OutStart+0xb8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d90a      	bls.n	8006256 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006250:	d101      	bne.n	8006256 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e037      	b.n	80062c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f043 0318 	orr.w	r3, r3, #24
 8006288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800629c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10f      	bne.n	80062c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	4f54300a 	.word	0x4f54300a

080062d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	4a13      	ldr	r2, [pc, #76]	; (8006338 <USB_CoreReset+0x60>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e01a      	b.n	800632a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	daf3      	bge.n	80062e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <USB_CoreReset+0x60>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e006      	b.n	800632a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d0f1      	beq.n	800630c <USB_CoreReset+0x34>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	00030d40 	.word	0x00030d40

0800633c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006348:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800634c:	f002 f976 	bl	800863c <USBD_static_malloc>
 8006350:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006360:	2302      	movs	r3, #2
 8006362:	e066      	b.n	8006432 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7c1b      	ldrb	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d119      	bne.n	80063a8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2202      	movs	r2, #2
 800637a:	2181      	movs	r1, #129	; 0x81
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f002 f83a 	bl	80083f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638c:	2202      	movs	r2, #2
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 f830 	bl	80083f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2210      	movs	r2, #16
 80063a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80063a6:	e016      	b.n	80063d6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	2202      	movs	r2, #2
 80063ac:	2181      	movs	r1, #129	; 0x81
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 f821 	bl	80083f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ba:	2340      	movs	r3, #64	; 0x40
 80063bc:	2202      	movs	r2, #2
 80063be:	2101      	movs	r1, #1
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 f818 	bl	80083f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2210      	movs	r2, #16
 80063d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063d6:	2308      	movs	r3, #8
 80063d8:	2203      	movs	r2, #3
 80063da:	2182      	movs	r1, #130	; 0x82
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f002 f80a 	bl	80083f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7c1b      	ldrb	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	2101      	movs	r1, #1
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f002 f8db 	bl	80085d4 <USBD_LL_PrepareReceive>
 800641e:	e007      	b.n	8006430 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	2101      	movs	r1, #1
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 f8d2 	bl	80085d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006446:	2181      	movs	r1, #129	; 0x81
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fffa 	bl	8008442 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006454:	2101      	movs	r1, #1
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fff3 	bl	8008442 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006464:	2182      	movs	r1, #130	; 0x82
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 ffeb 	bl	8008442 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006496:	4618      	mov	r0, r3
 8006498:	f002 f8de 	bl	8008658 <USBD_static_free>
    pdev->pClassData = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e0af      	b.n	8006638 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d03f      	beq.n	8006564 <USBD_CDC_Setup+0xb4>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	f040 809f 	bne.w	8006628 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	88db      	ldrh	r3, [r3, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d02e      	beq.n	8006550 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da16      	bge.n	800652a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006508:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	88d2      	ldrh	r2, [r2, #6]
 800650e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	88db      	ldrh	r3, [r3, #6]
 8006514:	2b07      	cmp	r3, #7
 8006516:	bf28      	it	cs
 8006518:	2307      	movcs	r3, #7
 800651a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	89fa      	ldrh	r2, [r7, #14]
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fb33 	bl	8007b8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006528:	e085      	b.n	8006636 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	785a      	ldrb	r2, [r3, #1]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006540:	6939      	ldr	r1, [r7, #16]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	88db      	ldrh	r3, [r3, #6]
 8006546:	461a      	mov	r2, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fb4c 	bl	8007be6 <USBD_CtlPrepareRx>
      break;
 800654e:	e072      	b.n	8006636 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	7850      	ldrb	r0, [r2, #1]
 800655c:	2200      	movs	r2, #0
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	4798      	blx	r3
      break;
 8006562:	e068      	b.n	8006636 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b0b      	cmp	r3, #11
 800656a:	d852      	bhi.n	8006612 <USBD_CDC_Setup+0x162>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <USBD_CDC_Setup+0xc4>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065a5 	.word	0x080065a5
 8006578:	08006621 	.word	0x08006621
 800657c:	08006613 	.word	0x08006613
 8006580:	08006613 	.word	0x08006613
 8006584:	08006613 	.word	0x08006613
 8006588:	08006613 	.word	0x08006613
 800658c:	08006613 	.word	0x08006613
 8006590:	08006613 	.word	0x08006613
 8006594:	08006613 	.word	0x08006613
 8006598:	08006613 	.word	0x08006613
 800659c:	080065cf 	.word	0x080065cf
 80065a0:	080065f9 	.word	0x080065f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d107      	bne.n	80065c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065b0:	f107 030a 	add.w	r3, r7, #10
 80065b4:	2202      	movs	r2, #2
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fae8 	bl	8007b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065be:	e032      	b.n	8006626 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fa72 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	75fb      	strb	r3, [r7, #23]
          break;
 80065cc:	e02b      	b.n	8006626 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d107      	bne.n	80065ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065da:	f107 030d 	add.w	r3, r7, #13
 80065de:	2201      	movs	r2, #1
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fad3 	bl	8007b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065e8:	e01d      	b.n	8006626 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fa5d 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 80065f2:	2303      	movs	r3, #3
 80065f4:	75fb      	strb	r3, [r7, #23]
          break;
 80065f6:	e016      	b.n	8006626 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b03      	cmp	r3, #3
 8006602:	d00f      	beq.n	8006624 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fa50 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006610:	e008      	b.n	8006624 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fa49 	bl	8007aac <USBD_CtlError>
          ret = USBD_FAIL;
 800661a:	2303      	movs	r3, #3
 800661c:	75fb      	strb	r3, [r7, #23]
          break;
 800661e:	e002      	b.n	8006626 <USBD_CDC_Setup+0x176>
          break;
 8006620:	bf00      	nop
 8006622:	e008      	b.n	8006636 <USBD_CDC_Setup+0x186>
          break;
 8006624:	bf00      	nop
      }
      break;
 8006626:	e006      	b.n	8006636 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fa3e 	bl	8007aac <USBD_CtlError>
      ret = USBD_FAIL;
 8006630:	2303      	movs	r3, #3
 8006632:	75fb      	strb	r3, [r7, #23]
      break;
 8006634:	bf00      	nop
  }

  return (uint8_t)ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	e04f      	b.n	8006702 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006668:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3318      	adds	r3, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d029      	beq.n	80066d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3318      	adds	r3, #24
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	78f9      	ldrb	r1, [r7, #3]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	460b      	mov	r3, r1
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4403      	add	r3, r0
 80066a0:	3344      	adds	r3, #68	; 0x44
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d110      	bne.n	80066d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	3318      	adds	r3, #24
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066c6:	78f9      	ldrb	r1, [r7, #3]
 80066c8:	2300      	movs	r3, #0
 80066ca:	2200      	movs	r2, #0
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ff60 	bl	8008592 <USBD_LL_Transmit>
 80066d2:	e015      	b.n	8006700 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066fc:	78fa      	ldrb	r2, [r7, #3]
 80066fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006728:	2303      	movs	r3, #3
 800672a:	e015      	b.n	8006758 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 ff70 	bl	8008616 <USBD_LL_GetRxDataSize>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006752:	4611      	mov	r1, r2
 8006754:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800676e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006776:	2303      	movs	r3, #3
 8006778:	e01b      	b.n	80067b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d015      	beq.n	80067b0 <USBD_CDC_EP0_RxReady+0x50>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d010      	beq.n	80067b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800679c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067a4:	b292      	uxth	r2, r2
 80067a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	22ff      	movs	r2, #255	; 0xff
 80067ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2243      	movs	r2, #67	; 0x43
 80067c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200000d8 	.word	0x200000d8

080067dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2243      	movs	r2, #67	; 0x43
 80067e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80067ea:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	20000094 	.word	0x20000094

080067fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2243      	movs	r2, #67	; 0x43
 8006808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800680a:	4b03      	ldr	r3, [pc, #12]	; (8006818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	2000011c 	.word	0x2000011c

0800681c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	220a      	movs	r2, #10
 8006828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800682a:	4b03      	ldr	r3, [pc, #12]	; (8006838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000050 	.word	0x20000050

0800683c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	e004      	b.n	800685a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006866:	b480      	push	{r7}
 8006868:	b087      	sub	sp, #28
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006878:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e008      	b.n	8006896 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e004      	b.n	80068c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e01a      	b.n	800692c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d114      	bne.n	800692a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2201      	movs	r2, #1
 8006904:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800691e:	2181      	movs	r1, #129	; 0x81
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fe36 	bl	8008592 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006942:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e016      	b.n	8006980 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7c1b      	ldrb	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006964:	2101      	movs	r1, #1
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fe34 	bl	80085d4 <USBD_LL_PrepareReceive>
 800696c:	e007      	b.n	800697e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	2101      	movs	r1, #1
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe2b 	bl	80085d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800699c:	4817      	ldr	r0, [pc, #92]	; (80069fc <USBD_Init+0x74>)
 800699e:	f001 fec3 	bl	8008728 <iprintf>
 80069a2:	4817      	ldr	r0, [pc, #92]	; (8006a00 <USBD_Init+0x78>)
 80069a4:	f001 fec0 	bl	8008728 <iprintf>
 80069a8:	200a      	movs	r0, #10
 80069aa:	f001 fed5 	bl	8008758 <putchar>
#endif
    return USBD_FAIL;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e01f      	b.n	80069f2 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	79fa      	ldrb	r2, [r7, #7]
 80069e4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f001 fc9e 	bl	8008328 <USBD_LL_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	08009b40 	.word	0x08009b40
 8006a00:	08009b48 	.word	0x08009b48

08006a04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006a18:	4812      	ldr	r0, [pc, #72]	; (8006a64 <USBD_RegisterClass+0x60>)
 8006a1a:	f001 fe85 	bl	8008728 <iprintf>
 8006a1e:	4812      	ldr	r0, [pc, #72]	; (8006a68 <USBD_RegisterClass+0x64>)
 8006a20:	f001 fe82 	bl	8008728 <iprintf>
 8006a24:	200a      	movs	r0, #10
 8006a26:	f001 fe97 	bl	8008758 <putchar>
#endif
    return USBD_FAIL;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e016      	b.n	8006a5c <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	f107 020e 	add.w	r2, r7, #14
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4798      	blx	r3
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	08009b40 	.word	0x08009b40
 8006a68:	08009b60 	.word	0x08009b60

08006a6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fca3 	bl	80083c0 <USBD_LL_Start>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	4611      	mov	r1, r2
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	4611      	mov	r1, r2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
  }

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ff8f 	bl	8007a38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d01a      	beq.n	8006b74 <USBD_LL_SetupStage+0x72>
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d822      	bhi.n	8006b88 <USBD_LL_SetupStage+0x86>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <USBD_LL_SetupStage+0x4a>
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d00a      	beq.n	8006b60 <USBD_LL_SetupStage+0x5e>
 8006b4a:	e01d      	b.n	8006b88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa61 	bl	800701c <USBD_StdDevReq>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5e:	e020      	b.n	8006ba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fac5 	bl	80070f8 <USBD_StdItfReq>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
      break;
 8006b72:	e016      	b.n	8006ba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb04 	bl	800718a <USBD_StdEPReq>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
      break;
 8006b86:	e00c      	b.n	8006ba2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fc72 	bl	8008480 <USBD_LL_StallEP>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	bf00      	nop
  }

  return ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d138      	bne.n	8006c32 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d14a      	bne.n	8006c68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d913      	bls.n	8006c06 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	bf28      	it	cs
 8006bf8:	4613      	movcs	r3, r2
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f001 f80e 	bl	8007c20 <USBD_CtlContinueRx>
 8006c04:	e030      	b.n	8006c68 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d10b      	bne.n	8006c2a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f001 f809 	bl	8007c42 <USBD_CtlSendStatus>
 8006c30:	e01a      	b.n	8006c68 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d114      	bne.n	8006c68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	7afa      	ldrb	r2, [r7, #11]
 8006c54:	4611      	mov	r1, r2
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	e000      	b.n	8006c6a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d16b      	bne.n	8006d5e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d156      	bne.n	8006d44 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d914      	bls.n	8006ccc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 ff83 	bl	8007bc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 fc85 	bl	80085d4 <USBD_LL_PrepareReceive>
 8006cca:	e03b      	b.n	8006d44 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d11c      	bne.n	8006d12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d316      	bcc.n	8006d12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d20f      	bcs.n	8006d12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 ff64 	bl	8007bc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d04:	2300      	movs	r3, #0
 8006d06:	2200      	movs	r2, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 fc62 	bl	80085d4 <USBD_LL_PrepareReceive>
 8006d10:	e018      	b.n	8006d44 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d10b      	bne.n	8006d36 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f001 fba1 	bl	8008480 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 ff92 	bl	8007c68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d122      	bne.n	8006d94 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff fe98 	bl	8006a84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d5c:	e01a      	b.n	8006d94 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d114      	bne.n	8006d94 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	7afa      	ldrb	r2, [r7, #11]
 8006d80:	4611      	mov	r1, r2
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	4798      	blx	r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	e000      	b.n	8006d96 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e02f      	b.n	8006e32 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00f      	beq.n	8006dfc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d009      	beq.n	8006dfc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6852      	ldr	r2, [r2, #4]
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	4611      	mov	r1, r2
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dfc:	2340      	movs	r3, #64	; 0x40
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 faf7 	bl	80083f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2240      	movs	r2, #64	; 0x40
 8006e14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fae9 	bl	80083f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2240      	movs	r2, #64	; 0x40
 8006e2e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2204      	movs	r2, #4
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d106      	bne.n	8006ea8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e012      	b.n	8006ef2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d10b      	bne.n	8006ef0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e014      	b.n	8006f3e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d10d      	bne.n	8006f3c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4611      	mov	r1, r2
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e014      	b.n	8006f8a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d10d      	bne.n	8006f88 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	4611      	mov	r1, r2
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6852      	ldr	r2, [r2, #4]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
  }

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ffe:	8a3b      	ldrh	r3, [r7, #16]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	b21a      	sxth	r2, r3
 8007004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007008:	4313      	orrs	r3, r2
 800700a:	b21b      	sxth	r3, r3
 800700c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800700e:	89fb      	ldrh	r3, [r7, #14]
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d005      	beq.n	8007042 <USBD_StdDevReq+0x26>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d853      	bhi.n	80070e2 <USBD_StdDevReq+0xc6>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <USBD_StdDevReq+0x3a>
 800703e:	2b20      	cmp	r3, #32
 8007040:	d14f      	bne.n	80070e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	e04a      	b.n	80070ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b09      	cmp	r3, #9
 800705c:	d83b      	bhi.n	80070d6 <USBD_StdDevReq+0xba>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBD_StdDevReq+0x48>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b9 	.word	0x080070b9
 8007068:	080070cd 	.word	0x080070cd
 800706c:	080070d7 	.word	0x080070d7
 8007070:	080070c3 	.word	0x080070c3
 8007074:	080070d7 	.word	0x080070d7
 8007078:	08007097 	.word	0x08007097
 800707c:	0800708d 	.word	0x0800708d
 8007080:	080070d7 	.word	0x080070d7
 8007084:	080070af 	.word	0x080070af
 8007088:	080070a1 	.word	0x080070a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9de 	bl	8007450 <USBD_GetDescriptor>
          break;
 8007094:	e024      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb43 	bl	8007724 <USBD_SetAddress>
          break;
 800709e:	e01f      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb82 	bl	80077ac <USBD_SetConfig>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
          break;
 80070ac:	e018      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc21 	bl	80078f8 <USBD_GetConfig>
          break;
 80070b6:	e013      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc52 	bl	8007964 <USBD_GetStatus>
          break;
 80070c0:	e00e      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc81 	bl	80079cc <USBD_SetFeature>
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc90 	bl	80079f4 <USBD_ClrFeature>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fce7 	bl	8007aac <USBD_CtlError>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fce1 	bl	8007aac <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d005      	beq.n	800711e <USBD_StdItfReq+0x26>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d82f      	bhi.n	8007176 <USBD_StdItfReq+0x7e>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <USBD_StdItfReq+0x26>
 800711a:	2b20      	cmp	r3, #32
 800711c:	d12b      	bne.n	8007176 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d81d      	bhi.n	8007168 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	889b      	ldrh	r3, [r3, #4]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	d813      	bhi.n	800715e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	88db      	ldrh	r3, [r3, #6]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d110      	bne.n	8007172 <USBD_StdItfReq+0x7a>
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10d      	bne.n	8007172 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fd73 	bl	8007c42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715c:	e009      	b.n	8007172 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fca3 	bl	8007aac <USBD_CtlError>
          break;
 8007166:	e004      	b.n	8007172 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc9e 	bl	8007aac <USBD_CtlError>
          break;
 8007170:	e000      	b.n	8007174 <USBD_StdItfReq+0x7c>
          break;
 8007172:	bf00      	nop
      }
      break;
 8007174:	e004      	b.n	8007180 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc97 	bl	8007aac <USBD_CtlError>
      break;
 800717e:	bf00      	nop
  }

  return ret;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	889b      	ldrh	r3, [r3, #4]
 800719c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d007      	beq.n	80071ba <USBD_StdEPReq+0x30>
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	f200 8145 	bhi.w	800743a <USBD_StdEPReq+0x2b0>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00c      	beq.n	80071ce <USBD_StdEPReq+0x44>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	f040 8140 	bne.w	800743a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e13a      	b.n	8007444 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d007      	beq.n	80071e6 <USBD_StdEPReq+0x5c>
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f300 8129 	bgt.w	800742e <USBD_StdEPReq+0x2a4>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d07f      	beq.n	80072e0 <USBD_StdEPReq+0x156>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d03c      	beq.n	800725e <USBD_StdEPReq+0xd4>
 80071e4:	e123      	b.n	800742e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d002      	beq.n	80071f8 <USBD_StdEPReq+0x6e>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d016      	beq.n	8007224 <USBD_StdEPReq+0x9a>
 80071f6:	e02c      	b.n	8007252 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <USBD_StdEPReq+0x90>
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b80      	cmp	r3, #128	; 0x80
 8007202:	d00a      	beq.n	800721a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f939 	bl	8008480 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f935 	bl	8008480 <USBD_LL_StallEP>
 8007216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007218:	e020      	b.n	800725c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc45 	bl	8007aac <USBD_CtlError>
              break;
 8007222:	e01b      	b.n	800725c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10e      	bne.n	800724a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <USBD_StdEPReq+0xc0>
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d008      	beq.n	800724a <USBD_StdEPReq+0xc0>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f91b 	bl	8008480 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fcf9 	bl	8007c42 <USBD_CtlSendStatus>

              break;
 8007250:	e004      	b.n	800725c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc29 	bl	8007aac <USBD_CtlError>
              break;
 800725a:	bf00      	nop
          }
          break;
 800725c:	e0ec      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d002      	beq.n	8007270 <USBD_StdEPReq+0xe6>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d016      	beq.n	800729c <USBD_StdEPReq+0x112>
 800726e:	e030      	b.n	80072d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <USBD_StdEPReq+0x108>
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d00a      	beq.n	8007292 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f8fd 	bl	8008480 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f8f9 	bl	8008480 <USBD_LL_StallEP>
 800728e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007290:	e025      	b.n	80072de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc09 	bl	8007aac <USBD_CtlError>
              break;
 800729a:	e020      	b.n	80072de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	885b      	ldrh	r3, [r3, #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11b      	bne.n	80072dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f903 	bl	80084be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fcc2 	bl	8007c42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbe9 	bl	8007aac <USBD_CtlError>
              break;
 80072da:	e000      	b.n	80072de <USBD_StdEPReq+0x154>
              break;
 80072dc:	bf00      	nop
          }
          break;
 80072de:	e0ab      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x168>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d032      	beq.n	8007356 <USBD_StdEPReq+0x1cc>
 80072f0:	e097      	b.n	8007422 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <USBD_StdEPReq+0x17e>
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d004      	beq.n	8007308 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbd3 	bl	8007aac <USBD_CtlError>
                break;
 8007306:	e091      	b.n	800742c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da0b      	bge.n	8007328 <USBD_StdEPReq+0x19e>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3310      	adds	r3, #16
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	e00b      	b.n	8007340 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	3304      	adds	r3, #4
 8007340:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fc1d 	bl	8007b8e <USBD_CtlSendData>
              break;
 8007354:	e06a      	b.n	800742c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da11      	bge.n	8007382 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	3324      	adds	r3, #36	; 0x24
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d117      	bne.n	80073a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb96 	bl	8007aac <USBD_CtlError>
                  break;
 8007380:	e054      	b.n	800742c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb83 	bl	8007aac <USBD_CtlError>
                  break;
 80073a6:	e041      	b.n	800742c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da0b      	bge.n	80073c8 <USBD_StdEPReq+0x23e>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	3310      	adds	r3, #16
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	e00b      	b.n	80073e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	3304      	adds	r3, #4
 80073e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <USBD_StdEPReq+0x264>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d103      	bne.n	80073f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e00e      	b.n	8007414 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f87e 	bl	80084fc <USBD_LL_IsStallEP>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e002      	b.n	8007414 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fbb7 	bl	8007b8e <USBD_CtlSendData>
              break;
 8007420:	e004      	b.n	800742c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb41 	bl	8007aac <USBD_CtlError>
              break;
 800742a:	bf00      	nop
          }
          break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb3b 	bl	8007aac <USBD_CtlError>
          break;
 8007436:	bf00      	nop
      }
      break;
 8007438:	e004      	b.n	8007444 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb35 	bl	8007aac <USBD_CtlError>
      break;
 8007442:	bf00      	nop
  }

  return ret;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	2b06      	cmp	r3, #6
 8007472:	f200 8128 	bhi.w	80076c6 <USBD_GetDescriptor+0x276>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBD_GetDescriptor+0x2c>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007499 	.word	0x08007499
 8007480:	080074b1 	.word	0x080074b1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080076c7 	.word	0x080076c7
 800748c:	080076c7 	.word	0x080076c7
 8007490:	08007667 	.word	0x08007667
 8007494:	08007693 	.word	0x08007693
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7c12      	ldrb	r2, [r2, #16]
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      break;
 80074ae:	e112      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7c1b      	ldrb	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074d2:	e100      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e0f2      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	f200 80ac 	bhi.w	8007654 <USBD_GetDescriptor+0x204>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_GetDescriptor+0xb4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007551 	.word	0x08007551
 800750c:	08007585 	.word	0x08007585
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075ed 	.word	0x080075ed
 8007518:	08007621 	.word	0x08007621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e091      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fab2 	bl	8007aac <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e089      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e077      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa98 	bl	8007aac <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e06f      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e05d      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa7e 	bl	8007aac <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e055      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e043      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa64 	bl	8007aac <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e03b      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e029      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa4a 	bl	8007aac <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e021      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e00f      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa30 	bl	8007aac <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e007      	b.n	8007664 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa28 	bl	8007aac <USBD_CtlError>
          err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007662:	bf00      	nop
      }
      break;
 8007664:	e037      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7c1b      	ldrb	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f107 0208 	add.w	r2, r7, #8
 800767a:	4610      	mov	r0, r2
 800767c:	4798      	blx	r3
 800767e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007680:	e029      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa11 	bl	8007aac <USBD_CtlError>
        err++;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	3301      	adds	r3, #1
 800768e:	72fb      	strb	r3, [r7, #11]
      break;
 8007690:	e021      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7c1b      	ldrb	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	f107 0208 	add.w	r2, r7, #8
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
 80076aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	2207      	movs	r2, #7
 80076b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b4:	e00f      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9f7 	bl	8007aac <USBD_CtlError>
        err++;
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	3301      	adds	r3, #1
 80076c2:	72fb      	strb	r3, [r7, #11]
      break;
 80076c4:	e007      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9ef 	bl	8007aac <USBD_CtlError>
      err++;
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	3301      	adds	r3, #1
 80076d2:	72fb      	strb	r3, [r7, #11]
      break;
 80076d4:	bf00      	nop
  }

  if (err != 0U)
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11e      	bne.n	800771a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	88db      	ldrh	r3, [r3, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d016      	beq.n	8007712 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	88da      	ldrh	r2, [r3, #6]
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bf28      	it	cs
 80076f4:	4613      	movcs	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	461a      	mov	r2, r3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa44 	bl	8007b8e <USBD_CtlSendData>
 8007706:	e009      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9ce 	bl	8007aac <USBD_CtlError>
 8007710:	e004      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa95 	bl	8007c42 <USBD_CtlSendStatus>
 8007718:	e000      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    return;
 800771a:	bf00      	nop
  }
}
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop

08007724 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d131      	bne.n	800779a <USBD_SetAddress+0x76>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d12d      	bne.n	800779a <USBD_SetAddress+0x76>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	2b7f      	cmp	r3, #127	; 0x7f
 8007744:	d829      	bhi.n	800779a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d104      	bne.n	8007768 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f9a3 	bl	8007aac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007766:	e01d      	b.n	80077a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7bfa      	ldrb	r2, [r7, #15]
 800776c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 feed 	bl	8008554 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa61 	bl	8007c42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	e009      	b.n	80077a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007798:	e004      	b.n	80077a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f985 	bl	8007aac <USBD_CtlError>
  }
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	885b      	ldrh	r3, [r3, #2]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <USBD_SetConfig+0x148>)
 80077c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077c4:	4b4b      	ldr	r3, [pc, #300]	; (80078f4 <USBD_SetConfig+0x148>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d905      	bls.n	80077d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f96c 	bl	8007aac <USBD_CtlError>
    return USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e088      	b.n	80078ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d002      	beq.n	80077ea <USBD_SetConfig+0x3e>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d025      	beq.n	8007834 <USBD_SetConfig+0x88>
 80077e8:	e071      	b.n	80078ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ea:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <USBD_SetConfig+0x148>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01c      	beq.n	800782c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077f2:	4b40      	ldr	r3, [pc, #256]	; (80078f4 <USBD_SetConfig+0x148>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077fc:	4b3d      	ldr	r3, [pc, #244]	; (80078f4 <USBD_SetConfig+0x148>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f949 	bl	8006a9a <USBD_SetClassConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f949 	bl	8007aac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800781a:	e065      	b.n	80078e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa10 	bl	8007c42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2203      	movs	r2, #3
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800782a:	e05d      	b.n	80078e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa08 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 8007832:	e059      	b.n	80078e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007834:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <USBD_SetConfig+0x148>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d112      	bne.n	8007862 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <USBD_SetConfig+0x148>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800784e:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <USBD_SetConfig+0x148>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff f93c 	bl	8006ad2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9f1 	bl	8007c42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007860:	e042      	b.n	80078e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <USBD_SetConfig+0x148>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d02a      	beq.n	80078c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff f92a 	bl	8006ad2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800787e:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <USBD_SetConfig+0x148>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <USBD_SetConfig+0x148>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f903 	bl	8006a9a <USBD_SetClassConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f903 	bl	8007aac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff f90f 	bl	8006ad2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078bc:	e014      	b.n	80078e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9bf 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 80078c4:	e010      	b.n	80078e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9bb 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 80078cc:	e00c      	b.n	80078e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8eb 	bl	8007aac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <USBD_SetConfig+0x148>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff f8f8 	bl	8006ad2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	bf00      	nop
  }

  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	2000075c 	.word	0x2000075c

080078f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d004      	beq.n	8007914 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8cd 	bl	8007aac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007912:	e023      	b.n	800795c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	dc02      	bgt.n	8007926 <USBD_GetConfig+0x2e>
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc03      	bgt.n	800792c <USBD_GetConfig+0x34>
 8007924:	e015      	b.n	8007952 <USBD_GetConfig+0x5a>
 8007926:	2b03      	cmp	r3, #3
 8007928:	d00b      	beq.n	8007942 <USBD_GetConfig+0x4a>
 800792a:	e012      	b.n	8007952 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3308      	adds	r3, #8
 8007936:	2201      	movs	r2, #1
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f927 	bl	8007b8e <USBD_CtlSendData>
        break;
 8007940:	e00c      	b.n	800795c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	2201      	movs	r2, #1
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f91f 	bl	8007b8e <USBD_CtlSendData>
        break;
 8007950:	e004      	b.n	800795c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8a9 	bl	8007aac <USBD_CtlError>
        break;
 800795a:	bf00      	nop
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007974:	b2db      	uxtb	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	2b02      	cmp	r3, #2
 800797a:	d81e      	bhi.n	80079ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	88db      	ldrh	r3, [r3, #6]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d004      	beq.n	800798e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f890 	bl	8007aac <USBD_CtlError>
        break;
 800798c:	e01a      	b.n	80079c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f043 0202 	orr.w	r2, r3, #2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	330c      	adds	r3, #12
 80079ae:	2202      	movs	r2, #2
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8eb 	bl	8007b8e <USBD_CtlSendData>
      break;
 80079b8:	e004      	b.n	80079c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f875 	bl	8007aac <USBD_CtlError>
      break;
 80079c2:	bf00      	nop
  }
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d106      	bne.n	80079ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f92b 	bl	8007c42 <USBD_CtlSendStatus>
  }
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d80b      	bhi.n	8007a24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	885b      	ldrh	r3, [r3, #2]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d10c      	bne.n	8007a2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f910 	bl	8007c42 <USBD_CtlSendStatus>
      }
      break;
 8007a22:	e004      	b.n	8007a2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f840 	bl	8007aac <USBD_CtlError>
      break;
 8007a2c:	e000      	b.n	8007a30 <USBD_ClrFeature+0x3c>
      break;
 8007a2e:	bf00      	nop
  }
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fabc 	bl	8006fe0 <SWAPBYTE>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff faaf 	bl	8006fe0 <SWAPBYTE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff faa2 	bl	8006fe0 <SWAPBYTE>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	80da      	strh	r2, [r3, #6]
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ab6:	2180      	movs	r1, #128	; 0x80
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fce1 	bl	8008480 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fcdd 	bl	8008480 <USBD_LL_StallEP>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d036      	beq.n	8007b52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ae8:	6938      	ldr	r0, [r7, #16]
 8007aea:	f000 f836 	bl	8007b5a <USBD_GetLen>
 8007aee:	4603      	mov	r3, r0
 8007af0:	3301      	adds	r3, #1
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	2203      	movs	r2, #3
 8007b16:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b1e:	e013      	b.n	8007b48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
    idx++;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	3301      	adds	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	3301      	adds	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e7      	bne.n	8007b20 <USBD_GetString+0x52>
 8007b50:	e000      	b.n	8007b54 <USBD_GetString+0x86>
    return;
 8007b52:	bf00      	nop
  }
}
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b6a:	e005      	b.n	8007b78 <USBD_GetLen+0x1e>
  {
    len++;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <USBD_GetLen+0x12>
  }

  return len;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fcec 	bl	8008592 <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fcdb 	bl	8008592 <USBD_LL_Transmit>

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fcdf 	bl	80085d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	2100      	movs	r1, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fcce 	bl	80085d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c52:	2300      	movs	r3, #0
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fc9a 	bl	8008592 <USBD_LL_Transmit>

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2205      	movs	r2, #5
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fca8 	bl	80085d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c94:	2200      	movs	r2, #0
 8007c96:	4912      	ldr	r1, [pc, #72]	; (8007ce0 <MX_USB_DEVICE_Init+0x50>)
 8007c98:	4812      	ldr	r0, [pc, #72]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007c9a:	f7fe fe75 	bl	8006988 <USBD_Init>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ca4:	f7f9 f824 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ca8:	490f      	ldr	r1, [pc, #60]	; (8007ce8 <MX_USB_DEVICE_Init+0x58>)
 8007caa:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cac:	f7fe feaa 	bl	8006a04 <USBD_RegisterClass>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cb6:	f7f9 f81b 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cba:	490c      	ldr	r1, [pc, #48]	; (8007cec <MX_USB_DEVICE_Init+0x5c>)
 8007cbc:	4809      	ldr	r0, [pc, #36]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cbe:	f7fe fdbd 	bl	800683c <USBD_CDC_RegisterInterface>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cc8:	f7f9 f812 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ccc:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cce:	f7fe fecd 	bl	8006a6c <USBD_Start>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cd8:	f7f9 f80a 	bl	8000cf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cdc:	bf00      	nop
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000174 	.word	0x20000174
 8007ce4:	20000760 	.word	0x20000760
 8007ce8:	2000005c 	.word	0x2000005c
 8007cec:	20000160 	.word	0x20000160

08007cf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4905      	ldr	r1, [pc, #20]	; (8007d0c <CDC_Init_FS+0x1c>)
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <CDC_Init_FS+0x20>)
 8007cfa:	f7fe fdb4 	bl	8006866 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cfe:	4905      	ldr	r1, [pc, #20]	; (8007d14 <CDC_Init_FS+0x24>)
 8007d00:	4803      	ldr	r0, [pc, #12]	; (8007d10 <CDC_Init_FS+0x20>)
 8007d02:	f7fe fdce 	bl	80068a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001230 	.word	0x20001230
 8007d10:	20000760 	.word	0x20000760
 8007d14:	20000a30 	.word	0x20000a30

08007d18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
 8007d34:	4613      	mov	r3, r2
 8007d36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b23      	cmp	r3, #35	; 0x23
 8007d3c:	d84a      	bhi.n	8007dd4 <CDC_Control_FS+0xac>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <CDC_Control_FS+0x1c>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007dd5 	.word	0x08007dd5
 8007d48:	08007dd5 	.word	0x08007dd5
 8007d4c:	08007dd5 	.word	0x08007dd5
 8007d50:	08007dd5 	.word	0x08007dd5
 8007d54:	08007dd5 	.word	0x08007dd5
 8007d58:	08007dd5 	.word	0x08007dd5
 8007d5c:	08007dd5 	.word	0x08007dd5
 8007d60:	08007dd5 	.word	0x08007dd5
 8007d64:	08007dd5 	.word	0x08007dd5
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	08007dd5 	.word	0x08007dd5
 8007d70:	08007dd5 	.word	0x08007dd5
 8007d74:	08007dd5 	.word	0x08007dd5
 8007d78:	08007dd5 	.word	0x08007dd5
 8007d7c:	08007dd5 	.word	0x08007dd5
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007dd5 	.word	0x08007dd5
 8007d88:	08007dd5 	.word	0x08007dd5
 8007d8c:	08007dd5 	.word	0x08007dd5
 8007d90:	08007dd5 	.word	0x08007dd5
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	08007dd5 	.word	0x08007dd5
 8007d9c:	08007dd5 	.word	0x08007dd5
 8007da0:	08007dd5 	.word	0x08007dd5
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007dd5 	.word	0x08007dd5
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007dd5 	.word	0x08007dd5
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007dd5 	.word	0x08007dd5
 8007dc8:	08007dd5 	.word	0x08007dd5
 8007dcc:	08007dd5 	.word	0x08007dd5
 8007dd0:	08007dd5 	.word	0x08007dd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dd4:	bf00      	nop
  }

  return (USBD_OK);
 8007dd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4805      	ldr	r0, [pc, #20]	; (8007e08 <CDC_Receive_FS+0x24>)
 8007df2:	f7fe fd56 	bl	80068a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007df6:	4804      	ldr	r0, [pc, #16]	; (8007e08 <CDC_Receive_FS+0x24>)
 8007df8:	f7fe fd9c 	bl	8006934 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000760 	.word	0x20000760

08007e0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e00b      	b.n	8007e4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4806      	ldr	r0, [pc, #24]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e3a:	f7fe fd14 	bl	8006866 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e40:	f7fe fd48 	bl	80068d4 <USBD_CDC_TransmitPacket>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000760 	.word	0x20000760

08007e58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2212      	movs	r2, #18
 8007e8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e8e:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000190 	.word	0x20000190

08007ea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	200001a4 	.word	0x200001a4

08007ec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d105      	bne.n	8007ee2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4907      	ldr	r1, [pc, #28]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eda:	4808      	ldr	r0, [pc, #32]	; (8007efc <USBD_FS_ProductStrDescriptor+0x38>)
 8007edc:	f7ff fdf7 	bl	8007ace <USBD_GetString>
 8007ee0:	e004      	b.n	8007eec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4805      	ldr	r0, [pc, #20]	; (8007efc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fdf1 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001a30 	.word	0x20001a30
 8007efc:	08009b78 	.word	0x08009b78

08007f00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	4904      	ldr	r1, [pc, #16]	; (8007f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f10:	4804      	ldr	r0, [pc, #16]	; (8007f24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f12:	f7ff fddc 	bl	8007ace <USBD_GetString>
  return USBD_StrDesc;
 8007f16:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20001a30 	.word	0x20001a30
 8007f24:	08009b84 	.word	0x08009b84

08007f28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	221a      	movs	r2, #26
 8007f38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f3a:	f000 f843 	bl	8007fc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f3e:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200001a8 	.word	0x200001a8

08007f4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	4907      	ldr	r1, [pc, #28]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f62:	4808      	ldr	r0, [pc, #32]	; (8007f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f64:	f7ff fdb3 	bl	8007ace <USBD_GetString>
 8007f68:	e004      	b.n	8007f74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4904      	ldr	r1, [pc, #16]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4805      	ldr	r0, [pc, #20]	; (8007f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fdad 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20001a30 	.word	0x20001a30
 8007f84:	08009b90 	.word	0x08009b90

08007f88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4907      	ldr	r1, [pc, #28]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f9e:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa0:	f7ff fd95 	bl	8007ace <USBD_GetString>
 8007fa4:	e004      	b.n	8007fb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fd8f 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20001a30 	.word	0x20001a30
 8007fc0:	08009b9c 	.word	0x08009b9c

08007fc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <Get_SerialNum+0x44>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <Get_SerialNum+0x48>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <Get_SerialNum+0x4c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fea:	2208      	movs	r2, #8
 8007fec:	4909      	ldr	r1, [pc, #36]	; (8008014 <Get_SerialNum+0x50>)
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f814 	bl	800801c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	4908      	ldr	r1, [pc, #32]	; (8008018 <Get_SerialNum+0x54>)
 8007ff8:	68b8      	ldr	r0, [r7, #8]
 8007ffa:	f000 f80f 	bl	800801c <IntToUnicode>
  }
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	1fff7a10 	.word	0x1fff7a10
 800800c:	1fff7a14 	.word	0x1fff7a14
 8008010:	1fff7a18 	.word	0x1fff7a18
 8008014:	200001aa 	.word	0x200001aa
 8008018:	200001ba 	.word	0x200001ba

0800801c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
 8008032:	e027      	b.n	8008084 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	2b09      	cmp	r3, #9
 800803a:	d80b      	bhi.n	8008054 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	b2da      	uxtb	r2, r3
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4619      	mov	r1, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	440b      	add	r3, r1
 800804c:	3230      	adds	r2, #48	; 0x30
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	e00a      	b.n	800806a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	0f1b      	lsrs	r3, r3, #28
 8008058:	b2da      	uxtb	r2, r3
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	4619      	mov	r1, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	440b      	add	r3, r1
 8008064:	3237      	adds	r2, #55	; 0x37
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	3301      	adds	r3, #1
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4413      	add	r3, r2
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	3301      	adds	r3, #1
 8008082:	75fb      	strb	r3, [r7, #23]
 8008084:	7dfa      	ldrb	r2, [r7, #23]
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d3d3      	bcc.n	8008034 <IntToUnicode+0x18>
  }
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	f107 0314 	add.w	r3, r7, #20
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080bc:	d13a      	bne.n	8008134 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	4b1e      	ldr	r3, [pc, #120]	; (800813c <HAL_PCD_MspInit+0xa0>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	4a1d      	ldr	r2, [pc, #116]	; (800813c <HAL_PCD_MspInit+0xa0>)
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	6313      	str	r3, [r2, #48]	; 0x30
 80080ce:	4b1b      	ldr	r3, [pc, #108]	; (800813c <HAL_PCD_MspInit+0xa0>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e0:	2302      	movs	r3, #2
 80080e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e8:	2303      	movs	r3, #3
 80080ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080ec:	230a      	movs	r3, #10
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4619      	mov	r1, r3
 80080f6:	4812      	ldr	r0, [pc, #72]	; (8008140 <HAL_PCD_MspInit+0xa4>)
 80080f8:	f7f9 fc54 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <HAL_PCD_MspInit+0xa0>)
 80080fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008100:	4a0e      	ldr	r2, [pc, #56]	; (800813c <HAL_PCD_MspInit+0xa0>)
 8008102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008106:	6353      	str	r3, [r2, #52]	; 0x34
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	4b0b      	ldr	r3, [pc, #44]	; (800813c <HAL_PCD_MspInit+0xa0>)
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	4a0a      	ldr	r2, [pc, #40]	; (800813c <HAL_PCD_MspInit+0xa0>)
 8008112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008116:	6453      	str	r3, [r2, #68]	; 0x44
 8008118:	4b08      	ldr	r3, [pc, #32]	; (800813c <HAL_PCD_MspInit+0xa0>)
 800811a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	2043      	movs	r0, #67	; 0x43
 800812a:	f7f9 fc04 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800812e:	2043      	movs	r0, #67	; 0x43
 8008130:	f7f9 fc1d 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008134:	bf00      	nop
 8008136:	3728      	adds	r7, #40	; 0x28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40023800 	.word	0x40023800
 8008140:	40020000 	.word	0x40020000

08008144 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe fcd1 	bl	8006b02 <USBD_LL_SetupStage>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	4619      	mov	r1, r3
 8008192:	f7fe fd0b 	bl	8006bac <USBD_LL_DataOutStage>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	3348      	adds	r3, #72	; 0x48
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7fe fd54 	bl	8006c72 <USBD_LL_DataInStage>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fe68 	bl	8006eb6 <USBD_LL_SOF>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
 8008206:	e008      	b.n	800821a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d102      	bne.n	8008216 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	e001      	b.n	800821a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008216:	f7f8 fd6b 	bl	8000cf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fe08 	bl	8006e3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fdb4 	bl	8006d9e <USBD_LL_Reset>
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fe03 	bl	8006e5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008274:	4b04      	ldr	r3, [pc, #16]	; (8008288 <HAL_PCD_SuspendCallback+0x48>)
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	4a03      	ldr	r2, [pc, #12]	; (8008288 <HAL_PCD_SuspendCallback+0x48>)
 800827a:	f043 0306 	orr.w	r3, r3, #6
 800827e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	e000ed00 	.word	0xe000ed00

0800828c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fdf3 	bl	8006e86 <USBD_LL_Resume>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fe41 	bl	8006f46 <USBD_LL_IsoOUTIncomplete>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fe09 	bl	8006efa <USBD_LL_IsoINIncomplete>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fe47 	bl	8006f92 <USBD_LL_DevConnected>
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fe44 	bl	8006fa8 <USBD_LL_DevDisconnected>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d13c      	bne.n	80083b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008338:	4a20      	ldr	r2, [pc, #128]	; (80083bc <USBD_LL_Init+0x94>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a1e      	ldr	r2, [pc, #120]	; (80083bc <USBD_LL_Init+0x94>)
 8008344:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008348:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <USBD_LL_Init+0x94>)
 800834a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800834e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <USBD_LL_Init+0x94>)
 8008352:	2204      	movs	r2, #4
 8008354:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008356:	4b19      	ldr	r3, [pc, #100]	; (80083bc <USBD_LL_Init+0x94>)
 8008358:	2202      	movs	r2, #2
 800835a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800835c:	4b17      	ldr	r3, [pc, #92]	; (80083bc <USBD_LL_Init+0x94>)
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <USBD_LL_Init+0x94>)
 8008364:	2202      	movs	r2, #2
 8008366:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008368:	4b14      	ldr	r3, [pc, #80]	; (80083bc <USBD_LL_Init+0x94>)
 800836a:	2200      	movs	r2, #0
 800836c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <USBD_LL_Init+0x94>)
 8008370:	2200      	movs	r2, #0
 8008372:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008374:	4b11      	ldr	r3, [pc, #68]	; (80083bc <USBD_LL_Init+0x94>)
 8008376:	2200      	movs	r2, #0
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800837a:	4b10      	ldr	r3, [pc, #64]	; (80083bc <USBD_LL_Init+0x94>)
 800837c:	2200      	movs	r2, #0
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <USBD_LL_Init+0x94>)
 8008382:	2200      	movs	r2, #0
 8008384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008386:	480d      	ldr	r0, [pc, #52]	; (80083bc <USBD_LL_Init+0x94>)
 8008388:	f7fa fdd1 	bl	8002f2e <HAL_PCD_Init>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008392:	f7f8 fcad 	bl	8000cf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	4808      	ldr	r0, [pc, #32]	; (80083bc <USBD_LL_Init+0x94>)
 800839a:	f7fb ff2e 	bl	80041fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800839e:	2240      	movs	r2, #64	; 0x40
 80083a0:	2100      	movs	r1, #0
 80083a2:	4806      	ldr	r0, [pc, #24]	; (80083bc <USBD_LL_Init+0x94>)
 80083a4:	f7fb fee2 	bl	800416c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083a8:	2280      	movs	r2, #128	; 0x80
 80083aa:	2101      	movs	r1, #1
 80083ac:	4803      	ldr	r0, [pc, #12]	; (80083bc <USBD_LL_Init+0x94>)
 80083ae:	f7fb fedd 	bl	800416c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20001c30 	.word	0x20001c30

080083c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fa fec6 	bl	8003168 <HAL_PCD_Start>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f942 	bl	800866c <USBD_Get_USB_Status>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	461a      	mov	r2, r3
 8008404:	4603      	mov	r3, r0
 8008406:	70fb      	strb	r3, [r7, #3]
 8008408:	460b      	mov	r3, r1
 800840a:	70bb      	strb	r3, [r7, #2]
 800840c:	4613      	mov	r3, r2
 800840e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800841e:	78bb      	ldrb	r3, [r7, #2]
 8008420:	883a      	ldrh	r2, [r7, #0]
 8008422:	78f9      	ldrb	r1, [r7, #3]
 8008424:	f7fb faaa 	bl	800397c <HAL_PCD_EP_Open>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f91c 	bl	800866c <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008438:	7bbb      	ldrb	r3, [r7, #14]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f7fb faf3 	bl	8003a4c <HAL_PCD_EP_Close>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 f8fd 	bl	800866c <USBD_Get_USB_Status>
 8008472:	4603      	mov	r3, r0
 8008474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008476:	7bbb      	ldrb	r3, [r7, #14]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fb fbcb 	bl	8003c3a <HAL_PCD_EP_SetStall>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f8de 	bl	800866c <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fb fc10 	bl	8003d02 <HAL_PCD_EP_ClrStall>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f8bf 	bl	800866c <USBD_Get_USB_Status>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800850e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	da0b      	bge.n	8008530 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	333e      	adds	r3, #62	; 0x3e
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	e00b      	b.n	8008548 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	4613      	mov	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008546:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7fb f9dd 	bl	8003932 <HAL_PCD_SetAddress>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f874 	bl	800866c <USBD_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008588:	7bbb      	ldrb	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	460b      	mov	r3, r1
 80085a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085b0:	7af9      	ldrb	r1, [r7, #11]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	f7fb faf6 	bl	8003ba6 <HAL_PCD_EP_Transmit>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f853 	bl	800866c <USBD_Get_USB_Status>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	460b      	mov	r3, r1
 80085e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085f2:	7af9      	ldrb	r1, [r7, #11]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	f7fb fa72 	bl	8003ae0 <HAL_PCD_EP_Receive>
 80085fc:	4603      	mov	r3, r0
 80085fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f832 	bl	800866c <USBD_Get_USB_Status>
 8008608:	4603      	mov	r3, r0
 800860a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800860c:	7dbb      	ldrb	r3, [r7, #22]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7fb faa2 	bl	8003b76 <HAL_PCD_EP_GetRxCount>
 8008632:	4603      	mov	r3, r0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <USBD_static_malloc+0x18>)
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20002038 	.word	0x20002038

08008658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	2b03      	cmp	r3, #3
 800867e:	d817      	bhi.n	80086b0 <USBD_Get_USB_Status+0x44>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <USBD_Get_USB_Status+0x1c>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	08008699 	.word	0x08008699
 800868c:	0800869f 	.word	0x0800869f
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086ab 	.word	0x080086ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
    break;
 800869c:	e00b      	b.n	80086b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	73fb      	strb	r3, [r7, #15]
    break;
 80086a2:	e008      	b.n	80086b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
    break;
 80086a8:	e005      	b.n	80086b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086aa:	2303      	movs	r3, #3
 80086ac:	73fb      	strb	r3, [r7, #15]
    break;
 80086ae:	e002      	b.n	80086b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	73fb      	strb	r3, [r7, #15]
    break;
 80086b4:	bf00      	nop
  }
  return usb_status;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	; (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	200001c4 	.word	0x200001c4

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	; (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	; (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	; (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	; (8008714 <__libc_init_array+0x44>)
 80086e4:	f001 f9e8 	bl	8009ab8 <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	0800b12c 	.word	0x0800b12c
 800870c:	0800b12c 	.word	0x0800b12c
 8008710:	0800b12c 	.word	0x0800b12c
 8008714:	0800b130 	.word	0x0800b130

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <iprintf>:
 8008728:	b40f      	push	{r0, r1, r2, r3}
 800872a:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <iprintf+0x2c>)
 800872c:	b513      	push	{r0, r1, r4, lr}
 800872e:	681c      	ldr	r4, [r3, #0]
 8008730:	b124      	cbz	r4, 800873c <iprintf+0x14>
 8008732:	69a3      	ldr	r3, [r4, #24]
 8008734:	b913      	cbnz	r3, 800873c <iprintf+0x14>
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f89c 	bl	8008874 <__sinit>
 800873c:	ab05      	add	r3, sp, #20
 800873e:	9a04      	ldr	r2, [sp, #16]
 8008740:	68a1      	ldr	r1, [r4, #8]
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	4620      	mov	r0, r4
 8008746:	f000 fb4f 	bl	8008de8 <_vfiprintf_r>
 800874a:	b002      	add	sp, #8
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	b004      	add	sp, #16
 8008752:	4770      	bx	lr
 8008754:	200001c4 	.word	0x200001c4

08008758 <putchar>:
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <putchar+0x28>)
 800875a:	b513      	push	{r0, r1, r4, lr}
 800875c:	681c      	ldr	r4, [r3, #0]
 800875e:	4601      	mov	r1, r0
 8008760:	b134      	cbz	r4, 8008770 <putchar+0x18>
 8008762:	69a3      	ldr	r3, [r4, #24]
 8008764:	b923      	cbnz	r3, 8008770 <putchar+0x18>
 8008766:	9001      	str	r0, [sp, #4]
 8008768:	4620      	mov	r0, r4
 800876a:	f000 f883 	bl	8008874 <__sinit>
 800876e:	9901      	ldr	r1, [sp, #4]
 8008770:	68a2      	ldr	r2, [r4, #8]
 8008772:	4620      	mov	r0, r4
 8008774:	b002      	add	sp, #8
 8008776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877a:	f000 bdf9 	b.w	8009370 <_putc_r>
 800877e:	bf00      	nop
 8008780:	200001c4 	.word	0x200001c4

08008784 <siprintf>:
 8008784:	b40e      	push	{r1, r2, r3}
 8008786:	b500      	push	{lr}
 8008788:	b09c      	sub	sp, #112	; 0x70
 800878a:	ab1d      	add	r3, sp, #116	; 0x74
 800878c:	9002      	str	r0, [sp, #8]
 800878e:	9006      	str	r0, [sp, #24]
 8008790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008794:	4809      	ldr	r0, [pc, #36]	; (80087bc <siprintf+0x38>)
 8008796:	9107      	str	r1, [sp, #28]
 8008798:	9104      	str	r1, [sp, #16]
 800879a:	4909      	ldr	r1, [pc, #36]	; (80087c0 <siprintf+0x3c>)
 800879c:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a0:	9105      	str	r1, [sp, #20]
 80087a2:	6800      	ldr	r0, [r0, #0]
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	a902      	add	r1, sp, #8
 80087a8:	f000 f9f4 	bl	8008b94 <_svfiprintf_r>
 80087ac:	9b02      	ldr	r3, [sp, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	b01c      	add	sp, #112	; 0x70
 80087b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b8:	b003      	add	sp, #12
 80087ba:	4770      	bx	lr
 80087bc:	200001c4 	.word	0x200001c4
 80087c0:	ffff0208 	.word	0xffff0208

080087c4 <std>:
 80087c4:	2300      	movs	r3, #0
 80087c6:	b510      	push	{r4, lr}
 80087c8:	4604      	mov	r4, r0
 80087ca:	e9c0 3300 	strd	r3, r3, [r0]
 80087ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087d2:	6083      	str	r3, [r0, #8]
 80087d4:	8181      	strh	r1, [r0, #12]
 80087d6:	6643      	str	r3, [r0, #100]	; 0x64
 80087d8:	81c2      	strh	r2, [r0, #14]
 80087da:	6183      	str	r3, [r0, #24]
 80087dc:	4619      	mov	r1, r3
 80087de:	2208      	movs	r2, #8
 80087e0:	305c      	adds	r0, #92	; 0x5c
 80087e2:	f7ff ff99 	bl	8008718 <memset>
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <std+0x38>)
 80087e8:	6263      	str	r3, [r4, #36]	; 0x24
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <std+0x3c>)
 80087ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <std+0x40>)
 80087f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <std+0x44>)
 80087f4:	6224      	str	r4, [r4, #32]
 80087f6:	6323      	str	r3, [r4, #48]	; 0x30
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	08009421 	.word	0x08009421
 8008800:	08009443 	.word	0x08009443
 8008804:	0800947b 	.word	0x0800947b
 8008808:	0800949f 	.word	0x0800949f

0800880c <_cleanup_r>:
 800880c:	4901      	ldr	r1, [pc, #4]	; (8008814 <_cleanup_r+0x8>)
 800880e:	f000 b8af 	b.w	8008970 <_fwalk_reent>
 8008812:	bf00      	nop
 8008814:	08009779 	.word	0x08009779

08008818 <__sfmoreglue>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	2268      	movs	r2, #104	; 0x68
 800881c:	1e4d      	subs	r5, r1, #1
 800881e:	4355      	muls	r5, r2
 8008820:	460e      	mov	r6, r1
 8008822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008826:	f000 f8e5 	bl	80089f4 <_malloc_r>
 800882a:	4604      	mov	r4, r0
 800882c:	b140      	cbz	r0, 8008840 <__sfmoreglue+0x28>
 800882e:	2100      	movs	r1, #0
 8008830:	e9c0 1600 	strd	r1, r6, [r0]
 8008834:	300c      	adds	r0, #12
 8008836:	60a0      	str	r0, [r4, #8]
 8008838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800883c:	f7ff ff6c 	bl	8008718 <memset>
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}

08008844 <__sfp_lock_acquire>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_acquire+0x8>)
 8008846:	f000 b8b3 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	20002259 	.word	0x20002259

08008850 <__sfp_lock_release>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sfp_lock_release+0x8>)
 8008852:	f000 b8ae 	b.w	80089b2 <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	20002259 	.word	0x20002259

0800885c <__sinit_lock_acquire>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_acquire+0x8>)
 800885e:	f000 b8a7 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	2000225a 	.word	0x2000225a

08008868 <__sinit_lock_release>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__sinit_lock_release+0x8>)
 800886a:	f000 b8a2 	b.w	80089b2 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	2000225a 	.word	0x2000225a

08008874 <__sinit>:
 8008874:	b510      	push	{r4, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	f7ff fff0 	bl	800885c <__sinit_lock_acquire>
 800887c:	69a3      	ldr	r3, [r4, #24]
 800887e:	b11b      	cbz	r3, 8008888 <__sinit+0x14>
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f7ff bff0 	b.w	8008868 <__sinit_lock_release>
 8008888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800888c:	6523      	str	r3, [r4, #80]	; 0x50
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <__sinit+0x68>)
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <__sinit+0x6c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	62a2      	str	r2, [r4, #40]	; 0x28
 8008896:	42a3      	cmp	r3, r4
 8008898:	bf04      	itt	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	61a3      	streq	r3, [r4, #24]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f820 	bl	80088e4 <__sfp>
 80088a4:	6060      	str	r0, [r4, #4]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f81c 	bl	80088e4 <__sfp>
 80088ac:	60a0      	str	r0, [r4, #8]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f818 	bl	80088e4 <__sfp>
 80088b4:	2200      	movs	r2, #0
 80088b6:	60e0      	str	r0, [r4, #12]
 80088b8:	2104      	movs	r1, #4
 80088ba:	6860      	ldr	r0, [r4, #4]
 80088bc:	f7ff ff82 	bl	80087c4 <std>
 80088c0:	68a0      	ldr	r0, [r4, #8]
 80088c2:	2201      	movs	r2, #1
 80088c4:	2109      	movs	r1, #9
 80088c6:	f7ff ff7d 	bl	80087c4 <std>
 80088ca:	68e0      	ldr	r0, [r4, #12]
 80088cc:	2202      	movs	r2, #2
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff ff78 	bl	80087c4 <std>
 80088d4:	2301      	movs	r3, #1
 80088d6:	61a3      	str	r3, [r4, #24]
 80088d8:	e7d2      	b.n	8008880 <__sinit+0xc>
 80088da:	bf00      	nop
 80088dc:	0800b08c 	.word	0x0800b08c
 80088e0:	0800880d 	.word	0x0800880d

080088e4 <__sfp>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	4607      	mov	r7, r0
 80088e8:	f7ff ffac 	bl	8008844 <__sfp_lock_acquire>
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <__sfp+0x84>)
 80088ee:	681e      	ldr	r6, [r3, #0]
 80088f0:	69b3      	ldr	r3, [r6, #24]
 80088f2:	b913      	cbnz	r3, 80088fa <__sfp+0x16>
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff ffbd 	bl	8008874 <__sinit>
 80088fa:	3648      	adds	r6, #72	; 0x48
 80088fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008900:	3b01      	subs	r3, #1
 8008902:	d503      	bpl.n	800890c <__sfp+0x28>
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	b30b      	cbz	r3, 800894c <__sfp+0x68>
 8008908:	6836      	ldr	r6, [r6, #0]
 800890a:	e7f7      	b.n	80088fc <__sfp+0x18>
 800890c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008910:	b9d5      	cbnz	r5, 8008948 <__sfp+0x64>
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <__sfp+0x88>)
 8008914:	60e3      	str	r3, [r4, #12]
 8008916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800891a:	6665      	str	r5, [r4, #100]	; 0x64
 800891c:	f000 f847 	bl	80089ae <__retarget_lock_init_recursive>
 8008920:	f7ff ff96 	bl	8008850 <__sfp_lock_release>
 8008924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800892c:	6025      	str	r5, [r4, #0]
 800892e:	61a5      	str	r5, [r4, #24]
 8008930:	2208      	movs	r2, #8
 8008932:	4629      	mov	r1, r5
 8008934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008938:	f7ff feee 	bl	8008718 <memset>
 800893c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008944:	4620      	mov	r0, r4
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	3468      	adds	r4, #104	; 0x68
 800894a:	e7d9      	b.n	8008900 <__sfp+0x1c>
 800894c:	2104      	movs	r1, #4
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ff62 	bl	8008818 <__sfmoreglue>
 8008954:	4604      	mov	r4, r0
 8008956:	6030      	str	r0, [r6, #0]
 8008958:	2800      	cmp	r0, #0
 800895a:	d1d5      	bne.n	8008908 <__sfp+0x24>
 800895c:	f7ff ff78 	bl	8008850 <__sfp_lock_release>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	e7ee      	b.n	8008944 <__sfp+0x60>
 8008966:	bf00      	nop
 8008968:	0800b08c 	.word	0x0800b08c
 800896c:	ffff0001 	.word	0xffff0001

08008970 <_fwalk_reent>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4606      	mov	r6, r0
 8008976:	4688      	mov	r8, r1
 8008978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800897c:	2700      	movs	r7, #0
 800897e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008982:	f1b9 0901 	subs.w	r9, r9, #1
 8008986:	d505      	bpl.n	8008994 <_fwalk_reent+0x24>
 8008988:	6824      	ldr	r4, [r4, #0]
 800898a:	2c00      	cmp	r4, #0
 800898c:	d1f7      	bne.n	800897e <_fwalk_reent+0xe>
 800898e:	4638      	mov	r0, r7
 8008990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d907      	bls.n	80089aa <_fwalk_reent+0x3a>
 800899a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800899e:	3301      	adds	r3, #1
 80089a0:	d003      	beq.n	80089aa <_fwalk_reent+0x3a>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	47c0      	blx	r8
 80089a8:	4307      	orrs	r7, r0
 80089aa:	3568      	adds	r5, #104	; 0x68
 80089ac:	e7e9      	b.n	8008982 <_fwalk_reent+0x12>

080089ae <__retarget_lock_init_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <__retarget_lock_acquire_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <__retarget_lock_release_recursive>:
 80089b2:	4770      	bx	lr

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0e      	ldr	r6, [pc, #56]	; (80089f0 <sbrk_aligned+0x3c>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	4605      	mov	r5, r0
 80089be:	b911      	cbnz	r1, 80089c6 <sbrk_aligned+0x12>
 80089c0:	f000 fd1e 	bl	8009400 <_sbrk_r>
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 fd19 	bl	8009400 <_sbrk_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d00a      	beq.n	80089e8 <sbrk_aligned+0x34>
 80089d2:	1cc4      	adds	r4, r0, #3
 80089d4:	f024 0403 	bic.w	r4, r4, #3
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d007      	beq.n	80089ec <sbrk_aligned+0x38>
 80089dc:	1a21      	subs	r1, r4, r0
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 fd0e 	bl	8009400 <_sbrk_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d101      	bne.n	80089ec <sbrk_aligned+0x38>
 80089e8:	f04f 34ff 	mov.w	r4, #4294967295
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	20002260 	.word	0x20002260

080089f4 <_malloc_r>:
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	1ccd      	adds	r5, r1, #3
 80089fa:	f025 0503 	bic.w	r5, r5, #3
 80089fe:	3508      	adds	r5, #8
 8008a00:	2d0c      	cmp	r5, #12
 8008a02:	bf38      	it	cc
 8008a04:	250c      	movcc	r5, #12
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	4607      	mov	r7, r0
 8008a0a:	db01      	blt.n	8008a10 <_malloc_r+0x1c>
 8008a0c:	42a9      	cmp	r1, r5
 8008a0e:	d905      	bls.n	8008a1c <_malloc_r+0x28>
 8008a10:	230c      	movs	r3, #12
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	2600      	movs	r6, #0
 8008a16:	4630      	mov	r0, r6
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	4e2e      	ldr	r6, [pc, #184]	; (8008ad8 <_malloc_r+0xe4>)
 8008a1e:	f000 ff87 	bl	8009930 <__malloc_lock>
 8008a22:	6833      	ldr	r3, [r6, #0]
 8008a24:	461c      	mov	r4, r3
 8008a26:	bb34      	cbnz	r4, 8008a76 <_malloc_r+0x82>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7ff ffc2 	bl	80089b4 <sbrk_aligned>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	4604      	mov	r4, r0
 8008a34:	d14d      	bne.n	8008ad2 <_malloc_r+0xde>
 8008a36:	6834      	ldr	r4, [r6, #0]
 8008a38:	4626      	mov	r6, r4
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	d140      	bne.n	8008ac0 <_malloc_r+0xcc>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4631      	mov	r1, r6
 8008a42:	4638      	mov	r0, r7
 8008a44:	eb04 0803 	add.w	r8, r4, r3
 8008a48:	f000 fcda 	bl	8009400 <_sbrk_r>
 8008a4c:	4580      	cmp	r8, r0
 8008a4e:	d13a      	bne.n	8008ac6 <_malloc_r+0xd2>
 8008a50:	6821      	ldr	r1, [r4, #0]
 8008a52:	3503      	adds	r5, #3
 8008a54:	1a6d      	subs	r5, r5, r1
 8008a56:	f025 0503 	bic.w	r5, r5, #3
 8008a5a:	3508      	adds	r5, #8
 8008a5c:	2d0c      	cmp	r5, #12
 8008a5e:	bf38      	it	cc
 8008a60:	250c      	movcc	r5, #12
 8008a62:	4629      	mov	r1, r5
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff ffa5 	bl	80089b4 <sbrk_aligned>
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d02b      	beq.n	8008ac6 <_malloc_r+0xd2>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	442b      	add	r3, r5
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	e00e      	b.n	8008a94 <_malloc_r+0xa0>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	1b52      	subs	r2, r2, r5
 8008a7a:	d41e      	bmi.n	8008aba <_malloc_r+0xc6>
 8008a7c:	2a0b      	cmp	r2, #11
 8008a7e:	d916      	bls.n	8008aae <_malloc_r+0xba>
 8008a80:	1961      	adds	r1, r4, r5
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6025      	str	r5, [r4, #0]
 8008a86:	bf18      	it	ne
 8008a88:	6059      	strne	r1, [r3, #4]
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	bf08      	it	eq
 8008a8e:	6031      	streq	r1, [r6, #0]
 8008a90:	5162      	str	r2, [r4, r5]
 8008a92:	604b      	str	r3, [r1, #4]
 8008a94:	4638      	mov	r0, r7
 8008a96:	f104 060b 	add.w	r6, r4, #11
 8008a9a:	f000 ff4f 	bl	800993c <__malloc_unlock>
 8008a9e:	f026 0607 	bic.w	r6, r6, #7
 8008aa2:	1d23      	adds	r3, r4, #4
 8008aa4:	1af2      	subs	r2, r6, r3
 8008aa6:	d0b6      	beq.n	8008a16 <_malloc_r+0x22>
 8008aa8:	1b9b      	subs	r3, r3, r6
 8008aaa:	50a3      	str	r3, [r4, r2]
 8008aac:	e7b3      	b.n	8008a16 <_malloc_r+0x22>
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	bf0c      	ite	eq
 8008ab4:	6032      	streq	r2, [r6, #0]
 8008ab6:	605a      	strne	r2, [r3, #4]
 8008ab8:	e7ec      	b.n	8008a94 <_malloc_r+0xa0>
 8008aba:	4623      	mov	r3, r4
 8008abc:	6864      	ldr	r4, [r4, #4]
 8008abe:	e7b2      	b.n	8008a26 <_malloc_r+0x32>
 8008ac0:	4634      	mov	r4, r6
 8008ac2:	6876      	ldr	r6, [r6, #4]
 8008ac4:	e7b9      	b.n	8008a3a <_malloc_r+0x46>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	603b      	str	r3, [r7, #0]
 8008aca:	4638      	mov	r0, r7
 8008acc:	f000 ff36 	bl	800993c <__malloc_unlock>
 8008ad0:	e7a1      	b.n	8008a16 <_malloc_r+0x22>
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	e7de      	b.n	8008a94 <_malloc_r+0xa0>
 8008ad6:	bf00      	nop
 8008ad8:	2000225c 	.word	0x2000225c

08008adc <__ssputs_r>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	688e      	ldr	r6, [r1, #8]
 8008ae2:	429e      	cmp	r6, r3
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4690      	mov	r8, r2
 8008aea:	461f      	mov	r7, r3
 8008aec:	d838      	bhi.n	8008b60 <__ssputs_r+0x84>
 8008aee:	898a      	ldrh	r2, [r1, #12]
 8008af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af4:	d032      	beq.n	8008b5c <__ssputs_r+0x80>
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	6909      	ldr	r1, [r1, #16]
 8008afa:	eba5 0901 	sub.w	r9, r5, r1
 8008afe:	6965      	ldr	r5, [r4, #20]
 8008b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b08:	3301      	adds	r3, #1
 8008b0a:	444b      	add	r3, r9
 8008b0c:	106d      	asrs	r5, r5, #1
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf38      	it	cc
 8008b12:	461d      	movcc	r5, r3
 8008b14:	0553      	lsls	r3, r2, #21
 8008b16:	d531      	bpl.n	8008b7c <__ssputs_r+0xa0>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7ff ff6b 	bl	80089f4 <_malloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b950      	cbnz	r0, 8008b38 <__ssputs_r+0x5c>
 8008b22:	230c      	movs	r3, #12
 8008b24:	f8ca 3000 	str.w	r3, [sl]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	6921      	ldr	r1, [r4, #16]
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	f000 fed0 	bl	80098e0 <memcpy>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	6126      	str	r6, [r4, #16]
 8008b4e:	6165      	str	r5, [r4, #20]
 8008b50:	444e      	add	r6, r9
 8008b52:	eba5 0509 	sub.w	r5, r5, r9
 8008b56:	6026      	str	r6, [r4, #0]
 8008b58:	60a5      	str	r5, [r4, #8]
 8008b5a:	463e      	mov	r6, r7
 8008b5c:	42be      	cmp	r6, r7
 8008b5e:	d900      	bls.n	8008b62 <__ssputs_r+0x86>
 8008b60:	463e      	mov	r6, r7
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	4632      	mov	r2, r6
 8008b66:	4641      	mov	r1, r8
 8008b68:	f000 fec8 	bl	80098fc <memmove>
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	1b9b      	subs	r3, r3, r6
 8008b70:	60a3      	str	r3, [r4, #8]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	4433      	add	r3, r6
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e7db      	b.n	8008b34 <__ssputs_r+0x58>
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	f000 ff2f 	bl	80099e0 <_realloc_r>
 8008b82:	4606      	mov	r6, r0
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d1e1      	bne.n	8008b4c <__ssputs_r+0x70>
 8008b88:	6921      	ldr	r1, [r4, #16]
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f000 fedc 	bl	8009948 <_free_r>
 8008b90:	e7c7      	b.n	8008b22 <__ssputs_r+0x46>
	...

08008b94 <_svfiprintf_r>:
 8008b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	4698      	mov	r8, r3
 8008b9a:	898b      	ldrh	r3, [r1, #12]
 8008b9c:	061b      	lsls	r3, r3, #24
 8008b9e:	b09d      	sub	sp, #116	; 0x74
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	d50e      	bpl.n	8008bc6 <_svfiprintf_r+0x32>
 8008ba8:	690b      	ldr	r3, [r1, #16]
 8008baa:	b963      	cbnz	r3, 8008bc6 <_svfiprintf_r+0x32>
 8008bac:	2140      	movs	r1, #64	; 0x40
 8008bae:	f7ff ff21 	bl	80089f4 <_malloc_r>
 8008bb2:	6028      	str	r0, [r5, #0]
 8008bb4:	6128      	str	r0, [r5, #16]
 8008bb6:	b920      	cbnz	r0, 8008bc2 <_svfiprintf_r+0x2e>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e0d1      	b.n	8008d66 <_svfiprintf_r+0x1d2>
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	616b      	str	r3, [r5, #20]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bca:	2320      	movs	r3, #32
 8008bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd4:	2330      	movs	r3, #48	; 0x30
 8008bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d80 <_svfiprintf_r+0x1ec>
 8008bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bde:	f04f 0901 	mov.w	r9, #1
 8008be2:	4623      	mov	r3, r4
 8008be4:	469a      	mov	sl, r3
 8008be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bea:	b10a      	cbz	r2, 8008bf0 <_svfiprintf_r+0x5c>
 8008bec:	2a25      	cmp	r2, #37	; 0x25
 8008bee:	d1f9      	bne.n	8008be4 <_svfiprintf_r+0x50>
 8008bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf4:	d00b      	beq.n	8008c0e <_svfiprintf_r+0x7a>
 8008bf6:	465b      	mov	r3, fp
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff ff6d 	bl	8008adc <__ssputs_r>
 8008c02:	3001      	adds	r0, #1
 8008c04:	f000 80aa 	beq.w	8008d5c <_svfiprintf_r+0x1c8>
 8008c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0a:	445a      	add	r2, fp
 8008c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80a2 	beq.w	8008d5c <_svfiprintf_r+0x1c8>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c22:	f10a 0a01 	add.w	sl, sl, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	9307      	str	r3, [sp, #28]
 8008c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c30:	4654      	mov	r4, sl
 8008c32:	2205      	movs	r2, #5
 8008c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c38:	4851      	ldr	r0, [pc, #324]	; (8008d80 <_svfiprintf_r+0x1ec>)
 8008c3a:	f7f7 fad1 	bl	80001e0 <memchr>
 8008c3e:	9a04      	ldr	r2, [sp, #16]
 8008c40:	b9d8      	cbnz	r0, 8008c7a <_svfiprintf_r+0xe6>
 8008c42:	06d0      	lsls	r0, r2, #27
 8008c44:	bf44      	itt	mi
 8008c46:	2320      	movmi	r3, #32
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	0711      	lsls	r1, r2, #28
 8008c4e:	bf44      	itt	mi
 8008c50:	232b      	movmi	r3, #43	; 0x2b
 8008c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c56:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d015      	beq.n	8008c8a <_svfiprintf_r+0xf6>
 8008c5e:	9a07      	ldr	r2, [sp, #28]
 8008c60:	4654      	mov	r4, sl
 8008c62:	2000      	movs	r0, #0
 8008c64:	f04f 0c0a 	mov.w	ip, #10
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6e:	3b30      	subs	r3, #48	; 0x30
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d94e      	bls.n	8008d12 <_svfiprintf_r+0x17e>
 8008c74:	b1b0      	cbz	r0, 8008ca4 <_svfiprintf_r+0x110>
 8008c76:	9207      	str	r2, [sp, #28]
 8008c78:	e014      	b.n	8008ca4 <_svfiprintf_r+0x110>
 8008c7a:	eba0 0308 	sub.w	r3, r0, r8
 8008c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	9304      	str	r3, [sp, #16]
 8008c86:	46a2      	mov	sl, r4
 8008c88:	e7d2      	b.n	8008c30 <_svfiprintf_r+0x9c>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	1d19      	adds	r1, r3, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	9103      	str	r1, [sp, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfbb      	ittet	lt
 8008c96:	425b      	neglt	r3, r3
 8008c98:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9c:	9307      	strge	r3, [sp, #28]
 8008c9e:	9307      	strlt	r3, [sp, #28]
 8008ca0:	bfb8      	it	lt
 8008ca2:	9204      	strlt	r2, [sp, #16]
 8008ca4:	7823      	ldrb	r3, [r4, #0]
 8008ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca8:	d10c      	bne.n	8008cc4 <_svfiprintf_r+0x130>
 8008caa:	7863      	ldrb	r3, [r4, #1]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d135      	bne.n	8008d1c <_svfiprintf_r+0x188>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	1d1a      	adds	r2, r3, #4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	9203      	str	r2, [sp, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfb8      	it	lt
 8008cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc0:	3402      	adds	r4, #2
 8008cc2:	9305      	str	r3, [sp, #20]
 8008cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d90 <_svfiprintf_r+0x1fc>
 8008cc8:	7821      	ldrb	r1, [r4, #0]
 8008cca:	2203      	movs	r2, #3
 8008ccc:	4650      	mov	r0, sl
 8008cce:	f7f7 fa87 	bl	80001e0 <memchr>
 8008cd2:	b140      	cbz	r0, 8008ce6 <_svfiprintf_r+0x152>
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	eba0 000a 	sub.w	r0, r0, sl
 8008cda:	fa03 f000 	lsl.w	r0, r3, r0
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	4303      	orrs	r3, r0
 8008ce2:	3401      	adds	r4, #1
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cea:	4826      	ldr	r0, [pc, #152]	; (8008d84 <_svfiprintf_r+0x1f0>)
 8008cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf0:	2206      	movs	r2, #6
 8008cf2:	f7f7 fa75 	bl	80001e0 <memchr>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d038      	beq.n	8008d6c <_svfiprintf_r+0x1d8>
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <_svfiprintf_r+0x1f4>)
 8008cfc:	bb1b      	cbnz	r3, 8008d46 <_svfiprintf_r+0x1b2>
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	3307      	adds	r3, #7
 8008d02:	f023 0307 	bic.w	r3, r3, #7
 8008d06:	3308      	adds	r3, #8
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0c:	4433      	add	r3, r6
 8008d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d10:	e767      	b.n	8008be2 <_svfiprintf_r+0x4e>
 8008d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d16:	460c      	mov	r4, r1
 8008d18:	2001      	movs	r0, #1
 8008d1a:	e7a5      	b.n	8008c68 <_svfiprintf_r+0xd4>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	3401      	adds	r4, #1
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	4619      	mov	r1, r3
 8008d24:	f04f 0c0a 	mov.w	ip, #10
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2e:	3a30      	subs	r2, #48	; 0x30
 8008d30:	2a09      	cmp	r2, #9
 8008d32:	d903      	bls.n	8008d3c <_svfiprintf_r+0x1a8>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0c5      	beq.n	8008cc4 <_svfiprintf_r+0x130>
 8008d38:	9105      	str	r1, [sp, #20]
 8008d3a:	e7c3      	b.n	8008cc4 <_svfiprintf_r+0x130>
 8008d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d40:	4604      	mov	r4, r0
 8008d42:	2301      	movs	r3, #1
 8008d44:	e7f0      	b.n	8008d28 <_svfiprintf_r+0x194>
 8008d46:	ab03      	add	r3, sp, #12
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <_svfiprintf_r+0x1f8>)
 8008d4e:	a904      	add	r1, sp, #16
 8008d50:	4638      	mov	r0, r7
 8008d52:	f3af 8000 	nop.w
 8008d56:	1c42      	adds	r2, r0, #1
 8008d58:	4606      	mov	r6, r0
 8008d5a:	d1d6      	bne.n	8008d0a <_svfiprintf_r+0x176>
 8008d5c:	89ab      	ldrh	r3, [r5, #12]
 8008d5e:	065b      	lsls	r3, r3, #25
 8008d60:	f53f af2c 	bmi.w	8008bbc <_svfiprintf_r+0x28>
 8008d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d66:	b01d      	add	sp, #116	; 0x74
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	ab03      	add	r3, sp, #12
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	462a      	mov	r2, r5
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <_svfiprintf_r+0x1f8>)
 8008d74:	a904      	add	r1, sp, #16
 8008d76:	4638      	mov	r0, r7
 8008d78:	f000 f9d4 	bl	8009124 <_printf_i>
 8008d7c:	e7eb      	b.n	8008d56 <_svfiprintf_r+0x1c2>
 8008d7e:	bf00      	nop
 8008d80:	0800b0f0 	.word	0x0800b0f0
 8008d84:	0800b0fa 	.word	0x0800b0fa
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	08008add 	.word	0x08008add
 8008d90:	0800b0f6 	.word	0x0800b0f6

08008d94 <__sfputc_r>:
 8008d94:	6893      	ldr	r3, [r2, #8]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	b410      	push	{r4}
 8008d9c:	6093      	str	r3, [r2, #8]
 8008d9e:	da08      	bge.n	8008db2 <__sfputc_r+0x1e>
 8008da0:	6994      	ldr	r4, [r2, #24]
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	db01      	blt.n	8008daa <__sfputc_r+0x16>
 8008da6:	290a      	cmp	r1, #10
 8008da8:	d103      	bne.n	8008db2 <__sfputc_r+0x1e>
 8008daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dae:	f000 bb7b 	b.w	80094a8 <__swbuf_r>
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	1c58      	adds	r0, r3, #1
 8008db6:	6010      	str	r0, [r2, #0]
 8008db8:	7019      	strb	r1, [r3, #0]
 8008dba:	4608      	mov	r0, r1
 8008dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <__sfputs_r>:
 8008dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	18d5      	adds	r5, r2, r3
 8008dcc:	42ac      	cmp	r4, r5
 8008dce:	d101      	bne.n	8008dd4 <__sfputs_r+0x12>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e007      	b.n	8008de4 <__sfputs_r+0x22>
 8008dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ffda 	bl	8008d94 <__sfputc_r>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d1f3      	bne.n	8008dcc <__sfputs_r+0xa>
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008de8 <_vfiprintf_r>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	460d      	mov	r5, r1
 8008dee:	b09d      	sub	sp, #116	; 0x74
 8008df0:	4614      	mov	r4, r2
 8008df2:	4698      	mov	r8, r3
 8008df4:	4606      	mov	r6, r0
 8008df6:	b118      	cbz	r0, 8008e00 <_vfiprintf_r+0x18>
 8008df8:	6983      	ldr	r3, [r0, #24]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <_vfiprintf_r+0x18>
 8008dfc:	f7ff fd3a 	bl	8008874 <__sinit>
 8008e00:	4b89      	ldr	r3, [pc, #548]	; (8009028 <_vfiprintf_r+0x240>)
 8008e02:	429d      	cmp	r5, r3
 8008e04:	d11b      	bne.n	8008e3e <_vfiprintf_r+0x56>
 8008e06:	6875      	ldr	r5, [r6, #4]
 8008e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e0a:	07d9      	lsls	r1, r3, #31
 8008e0c:	d405      	bmi.n	8008e1a <_vfiprintf_r+0x32>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	059a      	lsls	r2, r3, #22
 8008e12:	d402      	bmi.n	8008e1a <_vfiprintf_r+0x32>
 8008e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e16:	f7ff fdcb 	bl	80089b0 <__retarget_lock_acquire_recursive>
 8008e1a:	89ab      	ldrh	r3, [r5, #12]
 8008e1c:	071b      	lsls	r3, r3, #28
 8008e1e:	d501      	bpl.n	8008e24 <_vfiprintf_r+0x3c>
 8008e20:	692b      	ldr	r3, [r5, #16]
 8008e22:	b9eb      	cbnz	r3, 8008e60 <_vfiprintf_r+0x78>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 fba2 	bl	8009570 <__swsetup_r>
 8008e2c:	b1c0      	cbz	r0, 8008e60 <_vfiprintf_r+0x78>
 8008e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e30:	07dc      	lsls	r4, r3, #31
 8008e32:	d50e      	bpl.n	8008e52 <_vfiprintf_r+0x6a>
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	b01d      	add	sp, #116	; 0x74
 8008e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3e:	4b7b      	ldr	r3, [pc, #492]	; (800902c <_vfiprintf_r+0x244>)
 8008e40:	429d      	cmp	r5, r3
 8008e42:	d101      	bne.n	8008e48 <_vfiprintf_r+0x60>
 8008e44:	68b5      	ldr	r5, [r6, #8]
 8008e46:	e7df      	b.n	8008e08 <_vfiprintf_r+0x20>
 8008e48:	4b79      	ldr	r3, [pc, #484]	; (8009030 <_vfiprintf_r+0x248>)
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	bf08      	it	eq
 8008e4e:	68f5      	ldreq	r5, [r6, #12]
 8008e50:	e7da      	b.n	8008e08 <_vfiprintf_r+0x20>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	0598      	lsls	r0, r3, #22
 8008e56:	d4ed      	bmi.n	8008e34 <_vfiprintf_r+0x4c>
 8008e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5a:	f7ff fdaa 	bl	80089b2 <__retarget_lock_release_recursive>
 8008e5e:	e7e9      	b.n	8008e34 <_vfiprintf_r+0x4c>
 8008e60:	2300      	movs	r3, #0
 8008e62:	9309      	str	r3, [sp, #36]	; 0x24
 8008e64:	2320      	movs	r3, #32
 8008e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e6e:	2330      	movs	r3, #48	; 0x30
 8008e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009034 <_vfiprintf_r+0x24c>
 8008e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e78:	f04f 0901 	mov.w	r9, #1
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	469a      	mov	sl, r3
 8008e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e84:	b10a      	cbz	r2, 8008e8a <_vfiprintf_r+0xa2>
 8008e86:	2a25      	cmp	r2, #37	; 0x25
 8008e88:	d1f9      	bne.n	8008e7e <_vfiprintf_r+0x96>
 8008e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e8e:	d00b      	beq.n	8008ea8 <_vfiprintf_r+0xc0>
 8008e90:	465b      	mov	r3, fp
 8008e92:	4622      	mov	r2, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ff93 	bl	8008dc2 <__sfputs_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f000 80aa 	beq.w	8008ff6 <_vfiprintf_r+0x20e>
 8008ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea4:	445a      	add	r2, fp
 8008ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80a2 	beq.w	8008ff6 <_vfiprintf_r+0x20e>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ebc:	f10a 0a01 	add.w	sl, sl, #1
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eca:	4654      	mov	r4, sl
 8008ecc:	2205      	movs	r2, #5
 8008ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed2:	4858      	ldr	r0, [pc, #352]	; (8009034 <_vfiprintf_r+0x24c>)
 8008ed4:	f7f7 f984 	bl	80001e0 <memchr>
 8008ed8:	9a04      	ldr	r2, [sp, #16]
 8008eda:	b9d8      	cbnz	r0, 8008f14 <_vfiprintf_r+0x12c>
 8008edc:	06d1      	lsls	r1, r2, #27
 8008ede:	bf44      	itt	mi
 8008ee0:	2320      	movmi	r3, #32
 8008ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee6:	0713      	lsls	r3, r2, #28
 8008ee8:	bf44      	itt	mi
 8008eea:	232b      	movmi	r3, #43	; 0x2b
 8008eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ef6:	d015      	beq.n	8008f24 <_vfiprintf_r+0x13c>
 8008ef8:	9a07      	ldr	r2, [sp, #28]
 8008efa:	4654      	mov	r4, sl
 8008efc:	2000      	movs	r0, #0
 8008efe:	f04f 0c0a 	mov.w	ip, #10
 8008f02:	4621      	mov	r1, r4
 8008f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f08:	3b30      	subs	r3, #48	; 0x30
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d94e      	bls.n	8008fac <_vfiprintf_r+0x1c4>
 8008f0e:	b1b0      	cbz	r0, 8008f3e <_vfiprintf_r+0x156>
 8008f10:	9207      	str	r2, [sp, #28]
 8008f12:	e014      	b.n	8008f3e <_vfiprintf_r+0x156>
 8008f14:	eba0 0308 	sub.w	r3, r0, r8
 8008f18:	fa09 f303 	lsl.w	r3, r9, r3
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	46a2      	mov	sl, r4
 8008f22:	e7d2      	b.n	8008eca <_vfiprintf_r+0xe2>
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	1d19      	adds	r1, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	9103      	str	r1, [sp, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbb      	ittet	lt
 8008f30:	425b      	neglt	r3, r3
 8008f32:	f042 0202 	orrlt.w	r2, r2, #2
 8008f36:	9307      	strge	r3, [sp, #28]
 8008f38:	9307      	strlt	r3, [sp, #28]
 8008f3a:	bfb8      	it	lt
 8008f3c:	9204      	strlt	r2, [sp, #16]
 8008f3e:	7823      	ldrb	r3, [r4, #0]
 8008f40:	2b2e      	cmp	r3, #46	; 0x2e
 8008f42:	d10c      	bne.n	8008f5e <_vfiprintf_r+0x176>
 8008f44:	7863      	ldrb	r3, [r4, #1]
 8008f46:	2b2a      	cmp	r3, #42	; 0x2a
 8008f48:	d135      	bne.n	8008fb6 <_vfiprintf_r+0x1ce>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d1a      	adds	r2, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9203      	str	r2, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfb8      	it	lt
 8008f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f5a:	3402      	adds	r4, #2
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009044 <_vfiprintf_r+0x25c>
 8008f62:	7821      	ldrb	r1, [r4, #0]
 8008f64:	2203      	movs	r2, #3
 8008f66:	4650      	mov	r0, sl
 8008f68:	f7f7 f93a 	bl	80001e0 <memchr>
 8008f6c:	b140      	cbz	r0, 8008f80 <_vfiprintf_r+0x198>
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	eba0 000a 	sub.w	r0, r0, sl
 8008f74:	fa03 f000 	lsl.w	r0, r3, r0
 8008f78:	9b04      	ldr	r3, [sp, #16]
 8008f7a:	4303      	orrs	r3, r0
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	482c      	ldr	r0, [pc, #176]	; (8009038 <_vfiprintf_r+0x250>)
 8008f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8a:	2206      	movs	r2, #6
 8008f8c:	f7f7 f928 	bl	80001e0 <memchr>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d03f      	beq.n	8009014 <_vfiprintf_r+0x22c>
 8008f94:	4b29      	ldr	r3, [pc, #164]	; (800903c <_vfiprintf_r+0x254>)
 8008f96:	bb1b      	cbnz	r3, 8008fe0 <_vfiprintf_r+0x1f8>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	3307      	adds	r3, #7
 8008f9c:	f023 0307 	bic.w	r3, r3, #7
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	443b      	add	r3, r7
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	e767      	b.n	8008e7c <_vfiprintf_r+0x94>
 8008fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	e7a5      	b.n	8008f02 <_vfiprintf_r+0x11a>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f04f 0c0a 	mov.w	ip, #10
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fc8:	3a30      	subs	r2, #48	; 0x30
 8008fca:	2a09      	cmp	r2, #9
 8008fcc:	d903      	bls.n	8008fd6 <_vfiprintf_r+0x1ee>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0c5      	beq.n	8008f5e <_vfiprintf_r+0x176>
 8008fd2:	9105      	str	r1, [sp, #20]
 8008fd4:	e7c3      	b.n	8008f5e <_vfiprintf_r+0x176>
 8008fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fda:	4604      	mov	r4, r0
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e7f0      	b.n	8008fc2 <_vfiprintf_r+0x1da>
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4b16      	ldr	r3, [pc, #88]	; (8009040 <_vfiprintf_r+0x258>)
 8008fe8:	a904      	add	r1, sp, #16
 8008fea:	4630      	mov	r0, r6
 8008fec:	f3af 8000 	nop.w
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	1c78      	adds	r0, r7, #1
 8008ff4:	d1d6      	bne.n	8008fa4 <_vfiprintf_r+0x1bc>
 8008ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff8:	07d9      	lsls	r1, r3, #31
 8008ffa:	d405      	bmi.n	8009008 <_vfiprintf_r+0x220>
 8008ffc:	89ab      	ldrh	r3, [r5, #12]
 8008ffe:	059a      	lsls	r2, r3, #22
 8009000:	d402      	bmi.n	8009008 <_vfiprintf_r+0x220>
 8009002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009004:	f7ff fcd5 	bl	80089b2 <__retarget_lock_release_recursive>
 8009008:	89ab      	ldrh	r3, [r5, #12]
 800900a:	065b      	lsls	r3, r3, #25
 800900c:	f53f af12 	bmi.w	8008e34 <_vfiprintf_r+0x4c>
 8009010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009012:	e711      	b.n	8008e38 <_vfiprintf_r+0x50>
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462a      	mov	r2, r5
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <_vfiprintf_r+0x258>)
 800901c:	a904      	add	r1, sp, #16
 800901e:	4630      	mov	r0, r6
 8009020:	f000 f880 	bl	8009124 <_printf_i>
 8009024:	e7e4      	b.n	8008ff0 <_vfiprintf_r+0x208>
 8009026:	bf00      	nop
 8009028:	0800b0b0 	.word	0x0800b0b0
 800902c:	0800b0d0 	.word	0x0800b0d0
 8009030:	0800b090 	.word	0x0800b090
 8009034:	0800b0f0 	.word	0x0800b0f0
 8009038:	0800b0fa 	.word	0x0800b0fa
 800903c:	00000000 	.word	0x00000000
 8009040:	08008dc3 	.word	0x08008dc3
 8009044:	0800b0f6 	.word	0x0800b0f6

08009048 <_printf_common>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4616      	mov	r6, r2
 800904e:	4699      	mov	r9, r3
 8009050:	688a      	ldr	r2, [r1, #8]
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009058:	4293      	cmp	r3, r2
 800905a:	bfb8      	it	lt
 800905c:	4613      	movlt	r3, r2
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009064:	4607      	mov	r7, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b10a      	cbz	r2, 800906e <_printf_common+0x26>
 800906a:	3301      	adds	r3, #1
 800906c:	6033      	str	r3, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	0699      	lsls	r1, r3, #26
 8009072:	bf42      	ittt	mi
 8009074:	6833      	ldrmi	r3, [r6, #0]
 8009076:	3302      	addmi	r3, #2
 8009078:	6033      	strmi	r3, [r6, #0]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d106      	bne.n	8009090 <_printf_common+0x48>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	6832      	ldr	r2, [r6, #0]
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc26      	bgt.n	80090de <_printf_common+0x96>
 8009090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009094:	1e13      	subs	r3, r2, #0
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	bf18      	it	ne
 800909a:	2301      	movne	r3, #1
 800909c:	0692      	lsls	r2, r2, #26
 800909e:	d42b      	bmi.n	80090f8 <_printf_common+0xb0>
 80090a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090a4:	4649      	mov	r1, r9
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c0      	blx	r8
 80090aa:	3001      	adds	r0, #1
 80090ac:	d01e      	beq.n	80090ec <_printf_common+0xa4>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	68e5      	ldr	r5, [r4, #12]
 80090b2:	6832      	ldr	r2, [r6, #0]
 80090b4:	f003 0306 	and.w	r3, r3, #6
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	bf08      	it	eq
 80090bc:	1aad      	subeq	r5, r5, r2
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	bf0c      	ite	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	2500      	movne	r5, #0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bfc4      	itt	gt
 80090ce:	1a9b      	subgt	r3, r3, r2
 80090d0:	18ed      	addgt	r5, r5, r3
 80090d2:	2600      	movs	r6, #0
 80090d4:	341a      	adds	r4, #26
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	d11a      	bne.n	8009110 <_printf_common+0xc8>
 80090da:	2000      	movs	r0, #0
 80090dc:	e008      	b.n	80090f0 <_printf_common+0xa8>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4649      	mov	r1, r9
 80090e4:	4638      	mov	r0, r7
 80090e6:	47c0      	blx	r8
 80090e8:	3001      	adds	r0, #1
 80090ea:	d103      	bne.n	80090f4 <_printf_common+0xac>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7c6      	b.n	8009086 <_printf_common+0x3e>
 80090f8:	18e1      	adds	r1, r4, r3
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	2030      	movs	r0, #48	; 0x30
 80090fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009102:	4422      	add	r2, r4
 8009104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800910c:	3302      	adds	r3, #2
 800910e:	e7c7      	b.n	80090a0 <_printf_common+0x58>
 8009110:	2301      	movs	r3, #1
 8009112:	4622      	mov	r2, r4
 8009114:	4649      	mov	r1, r9
 8009116:	4638      	mov	r0, r7
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d0e6      	beq.n	80090ec <_printf_common+0xa4>
 800911e:	3601      	adds	r6, #1
 8009120:	e7d9      	b.n	80090d6 <_printf_common+0x8e>
	...

08009124 <_printf_i>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	7e0f      	ldrb	r7, [r1, #24]
 800912a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800912c:	2f78      	cmp	r7, #120	; 0x78
 800912e:	4691      	mov	r9, r2
 8009130:	4680      	mov	r8, r0
 8009132:	460c      	mov	r4, r1
 8009134:	469a      	mov	sl, r3
 8009136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800913a:	d807      	bhi.n	800914c <_printf_i+0x28>
 800913c:	2f62      	cmp	r7, #98	; 0x62
 800913e:	d80a      	bhi.n	8009156 <_printf_i+0x32>
 8009140:	2f00      	cmp	r7, #0
 8009142:	f000 80d8 	beq.w	80092f6 <_printf_i+0x1d2>
 8009146:	2f58      	cmp	r7, #88	; 0x58
 8009148:	f000 80a3 	beq.w	8009292 <_printf_i+0x16e>
 800914c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009154:	e03a      	b.n	80091cc <_printf_i+0xa8>
 8009156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800915a:	2b15      	cmp	r3, #21
 800915c:	d8f6      	bhi.n	800914c <_printf_i+0x28>
 800915e:	a101      	add	r1, pc, #4	; (adr r1, 8009164 <_printf_i+0x40>)
 8009160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091d1 	.word	0x080091d1
 800916c:	0800914d 	.word	0x0800914d
 8009170:	0800914d 	.word	0x0800914d
 8009174:	0800914d 	.word	0x0800914d
 8009178:	0800914d 	.word	0x0800914d
 800917c:	080091d1 	.word	0x080091d1
 8009180:	0800914d 	.word	0x0800914d
 8009184:	0800914d 	.word	0x0800914d
 8009188:	0800914d 	.word	0x0800914d
 800918c:	0800914d 	.word	0x0800914d
 8009190:	080092dd 	.word	0x080092dd
 8009194:	08009201 	.word	0x08009201
 8009198:	080092bf 	.word	0x080092bf
 800919c:	0800914d 	.word	0x0800914d
 80091a0:	0800914d 	.word	0x0800914d
 80091a4:	080092ff 	.word	0x080092ff
 80091a8:	0800914d 	.word	0x0800914d
 80091ac:	08009201 	.word	0x08009201
 80091b0:	0800914d 	.word	0x0800914d
 80091b4:	0800914d 	.word	0x0800914d
 80091b8:	080092c7 	.word	0x080092c7
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	602a      	str	r2, [r5, #0]
 80091c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e0a3      	b.n	8009318 <_printf_i+0x1f4>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	6829      	ldr	r1, [r5, #0]
 80091d4:	0606      	lsls	r6, r0, #24
 80091d6:	f101 0304 	add.w	r3, r1, #4
 80091da:	d50a      	bpl.n	80091f2 <_printf_i+0xce>
 80091dc:	680e      	ldr	r6, [r1, #0]
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	da03      	bge.n	80091ec <_printf_i+0xc8>
 80091e4:	232d      	movs	r3, #45	; 0x2d
 80091e6:	4276      	negs	r6, r6
 80091e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ec:	485e      	ldr	r0, [pc, #376]	; (8009368 <_printf_i+0x244>)
 80091ee:	230a      	movs	r3, #10
 80091f0:	e019      	b.n	8009226 <_printf_i+0x102>
 80091f2:	680e      	ldr	r6, [r1, #0]
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091fa:	bf18      	it	ne
 80091fc:	b236      	sxthne	r6, r6
 80091fe:	e7ef      	b.n	80091e0 <_printf_i+0xbc>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	6820      	ldr	r0, [r4, #0]
 8009204:	1d19      	adds	r1, r3, #4
 8009206:	6029      	str	r1, [r5, #0]
 8009208:	0601      	lsls	r1, r0, #24
 800920a:	d501      	bpl.n	8009210 <_printf_i+0xec>
 800920c:	681e      	ldr	r6, [r3, #0]
 800920e:	e002      	b.n	8009216 <_printf_i+0xf2>
 8009210:	0646      	lsls	r6, r0, #25
 8009212:	d5fb      	bpl.n	800920c <_printf_i+0xe8>
 8009214:	881e      	ldrh	r6, [r3, #0]
 8009216:	4854      	ldr	r0, [pc, #336]	; (8009368 <_printf_i+0x244>)
 8009218:	2f6f      	cmp	r7, #111	; 0x6f
 800921a:	bf0c      	ite	eq
 800921c:	2308      	moveq	r3, #8
 800921e:	230a      	movne	r3, #10
 8009220:	2100      	movs	r1, #0
 8009222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009226:	6865      	ldr	r5, [r4, #4]
 8009228:	60a5      	str	r5, [r4, #8]
 800922a:	2d00      	cmp	r5, #0
 800922c:	bfa2      	ittt	ge
 800922e:	6821      	ldrge	r1, [r4, #0]
 8009230:	f021 0104 	bicge.w	r1, r1, #4
 8009234:	6021      	strge	r1, [r4, #0]
 8009236:	b90e      	cbnz	r6, 800923c <_printf_i+0x118>
 8009238:	2d00      	cmp	r5, #0
 800923a:	d04d      	beq.n	80092d8 <_printf_i+0x1b4>
 800923c:	4615      	mov	r5, r2
 800923e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009242:	fb03 6711 	mls	r7, r3, r1, r6
 8009246:	5dc7      	ldrb	r7, [r0, r7]
 8009248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800924c:	4637      	mov	r7, r6
 800924e:	42bb      	cmp	r3, r7
 8009250:	460e      	mov	r6, r1
 8009252:	d9f4      	bls.n	800923e <_printf_i+0x11a>
 8009254:	2b08      	cmp	r3, #8
 8009256:	d10b      	bne.n	8009270 <_printf_i+0x14c>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	07de      	lsls	r6, r3, #31
 800925c:	d508      	bpl.n	8009270 <_printf_i+0x14c>
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	6861      	ldr	r1, [r4, #4]
 8009262:	4299      	cmp	r1, r3
 8009264:	bfde      	ittt	le
 8009266:	2330      	movle	r3, #48	; 0x30
 8009268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800926c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009270:	1b52      	subs	r2, r2, r5
 8009272:	6122      	str	r2, [r4, #16]
 8009274:	f8cd a000 	str.w	sl, [sp]
 8009278:	464b      	mov	r3, r9
 800927a:	aa03      	add	r2, sp, #12
 800927c:	4621      	mov	r1, r4
 800927e:	4640      	mov	r0, r8
 8009280:	f7ff fee2 	bl	8009048 <_printf_common>
 8009284:	3001      	adds	r0, #1
 8009286:	d14c      	bne.n	8009322 <_printf_i+0x1fe>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	b004      	add	sp, #16
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	4835      	ldr	r0, [pc, #212]	; (8009368 <_printf_i+0x244>)
 8009294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009298:	6829      	ldr	r1, [r5, #0]
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	f851 6b04 	ldr.w	r6, [r1], #4
 80092a0:	6029      	str	r1, [r5, #0]
 80092a2:	061d      	lsls	r5, r3, #24
 80092a4:	d514      	bpl.n	80092d0 <_printf_i+0x1ac>
 80092a6:	07df      	lsls	r7, r3, #31
 80092a8:	bf44      	itt	mi
 80092aa:	f043 0320 	orrmi.w	r3, r3, #32
 80092ae:	6023      	strmi	r3, [r4, #0]
 80092b0:	b91e      	cbnz	r6, 80092ba <_printf_i+0x196>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f023 0320 	bic.w	r3, r3, #32
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	2310      	movs	r3, #16
 80092bc:	e7b0      	b.n	8009220 <_printf_i+0xfc>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f043 0320 	orr.w	r3, r3, #32
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	2378      	movs	r3, #120	; 0x78
 80092c8:	4828      	ldr	r0, [pc, #160]	; (800936c <_printf_i+0x248>)
 80092ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092ce:	e7e3      	b.n	8009298 <_printf_i+0x174>
 80092d0:	0659      	lsls	r1, r3, #25
 80092d2:	bf48      	it	mi
 80092d4:	b2b6      	uxthmi	r6, r6
 80092d6:	e7e6      	b.n	80092a6 <_printf_i+0x182>
 80092d8:	4615      	mov	r5, r2
 80092da:	e7bb      	b.n	8009254 <_printf_i+0x130>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	6826      	ldr	r6, [r4, #0]
 80092e0:	6961      	ldr	r1, [r4, #20]
 80092e2:	1d18      	adds	r0, r3, #4
 80092e4:	6028      	str	r0, [r5, #0]
 80092e6:	0635      	lsls	r5, r6, #24
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	d501      	bpl.n	80092f0 <_printf_i+0x1cc>
 80092ec:	6019      	str	r1, [r3, #0]
 80092ee:	e002      	b.n	80092f6 <_printf_i+0x1d2>
 80092f0:	0670      	lsls	r0, r6, #25
 80092f2:	d5fb      	bpl.n	80092ec <_printf_i+0x1c8>
 80092f4:	8019      	strh	r1, [r3, #0]
 80092f6:	2300      	movs	r3, #0
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	4615      	mov	r5, r2
 80092fc:	e7ba      	b.n	8009274 <_printf_i+0x150>
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	602a      	str	r2, [r5, #0]
 8009304:	681d      	ldr	r5, [r3, #0]
 8009306:	6862      	ldr	r2, [r4, #4]
 8009308:	2100      	movs	r1, #0
 800930a:	4628      	mov	r0, r5
 800930c:	f7f6 ff68 	bl	80001e0 <memchr>
 8009310:	b108      	cbz	r0, 8009316 <_printf_i+0x1f2>
 8009312:	1b40      	subs	r0, r0, r5
 8009314:	6060      	str	r0, [r4, #4]
 8009316:	6863      	ldr	r3, [r4, #4]
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	2300      	movs	r3, #0
 800931c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009320:	e7a8      	b.n	8009274 <_printf_i+0x150>
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	462a      	mov	r2, r5
 8009326:	4649      	mov	r1, r9
 8009328:	4640      	mov	r0, r8
 800932a:	47d0      	blx	sl
 800932c:	3001      	adds	r0, #1
 800932e:	d0ab      	beq.n	8009288 <_printf_i+0x164>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	079b      	lsls	r3, r3, #30
 8009334:	d413      	bmi.n	800935e <_printf_i+0x23a>
 8009336:	68e0      	ldr	r0, [r4, #12]
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	4298      	cmp	r0, r3
 800933c:	bfb8      	it	lt
 800933e:	4618      	movlt	r0, r3
 8009340:	e7a4      	b.n	800928c <_printf_i+0x168>
 8009342:	2301      	movs	r3, #1
 8009344:	4632      	mov	r2, r6
 8009346:	4649      	mov	r1, r9
 8009348:	4640      	mov	r0, r8
 800934a:	47d0      	blx	sl
 800934c:	3001      	adds	r0, #1
 800934e:	d09b      	beq.n	8009288 <_printf_i+0x164>
 8009350:	3501      	adds	r5, #1
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	9903      	ldr	r1, [sp, #12]
 8009356:	1a5b      	subs	r3, r3, r1
 8009358:	42ab      	cmp	r3, r5
 800935a:	dcf2      	bgt.n	8009342 <_printf_i+0x21e>
 800935c:	e7eb      	b.n	8009336 <_printf_i+0x212>
 800935e:	2500      	movs	r5, #0
 8009360:	f104 0619 	add.w	r6, r4, #25
 8009364:	e7f5      	b.n	8009352 <_printf_i+0x22e>
 8009366:	bf00      	nop
 8009368:	0800b101 	.word	0x0800b101
 800936c:	0800b112 	.word	0x0800b112

08009370 <_putc_r>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	460d      	mov	r5, r1
 8009374:	4614      	mov	r4, r2
 8009376:	4606      	mov	r6, r0
 8009378:	b118      	cbz	r0, 8009382 <_putc_r+0x12>
 800937a:	6983      	ldr	r3, [r0, #24]
 800937c:	b90b      	cbnz	r3, 8009382 <_putc_r+0x12>
 800937e:	f7ff fa79 	bl	8008874 <__sinit>
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <_putc_r+0x84>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d124      	bne.n	80093d2 <_putc_r+0x62>
 8009388:	6874      	ldr	r4, [r6, #4]
 800938a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800938c:	07d8      	lsls	r0, r3, #31
 800938e:	d405      	bmi.n	800939c <_putc_r+0x2c>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	0599      	lsls	r1, r3, #22
 8009394:	d402      	bmi.n	800939c <_putc_r+0x2c>
 8009396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009398:	f7ff fb0a 	bl	80089b0 <__retarget_lock_acquire_recursive>
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	da05      	bge.n	80093b2 <_putc_r+0x42>
 80093a6:	69a2      	ldr	r2, [r4, #24]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	db1c      	blt.n	80093e6 <_putc_r+0x76>
 80093ac:	b2eb      	uxtb	r3, r5
 80093ae:	2b0a      	cmp	r3, #10
 80093b0:	d019      	beq.n	80093e6 <_putc_r+0x76>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	6022      	str	r2, [r4, #0]
 80093b8:	701d      	strb	r5, [r3, #0]
 80093ba:	b2ed      	uxtb	r5, r5
 80093bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093be:	07da      	lsls	r2, r3, #31
 80093c0:	d405      	bmi.n	80093ce <_putc_r+0x5e>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	059b      	lsls	r3, r3, #22
 80093c6:	d402      	bmi.n	80093ce <_putc_r+0x5e>
 80093c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ca:	f7ff faf2 	bl	80089b2 <__retarget_lock_release_recursive>
 80093ce:	4628      	mov	r0, r5
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <_putc_r+0x88>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d101      	bne.n	80093dc <_putc_r+0x6c>
 80093d8:	68b4      	ldr	r4, [r6, #8]
 80093da:	e7d6      	b.n	800938a <_putc_r+0x1a>
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <_putc_r+0x8c>)
 80093de:	429c      	cmp	r4, r3
 80093e0:	bf08      	it	eq
 80093e2:	68f4      	ldreq	r4, [r6, #12]
 80093e4:	e7d1      	b.n	800938a <_putc_r+0x1a>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4622      	mov	r2, r4
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 f85c 	bl	80094a8 <__swbuf_r>
 80093f0:	4605      	mov	r5, r0
 80093f2:	e7e3      	b.n	80093bc <_putc_r+0x4c>
 80093f4:	0800b0b0 	.word	0x0800b0b0
 80093f8:	0800b0d0 	.word	0x0800b0d0
 80093fc:	0800b090 	.word	0x0800b090

08009400 <_sbrk_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	; (800941c <_sbrk_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f8 f8b0 	bl	8001570 <_sbrk>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_sbrk_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_sbrk_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	20002264 	.word	0x20002264

08009420 <__sread>:
 8009420:	b510      	push	{r4, lr}
 8009422:	460c      	mov	r4, r1
 8009424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009428:	f000 fb0a 	bl	8009a40 <_read_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	bfab      	itete	ge
 8009430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009432:	89a3      	ldrhlt	r3, [r4, #12]
 8009434:	181b      	addge	r3, r3, r0
 8009436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800943a:	bfac      	ite	ge
 800943c:	6563      	strge	r3, [r4, #84]	; 0x54
 800943e:	81a3      	strhlt	r3, [r4, #12]
 8009440:	bd10      	pop	{r4, pc}

08009442 <__swrite>:
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	461f      	mov	r7, r3
 8009448:	898b      	ldrh	r3, [r1, #12]
 800944a:	05db      	lsls	r3, r3, #23
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	4616      	mov	r6, r2
 8009452:	d505      	bpl.n	8009460 <__swrite+0x1e>
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	2302      	movs	r3, #2
 800945a:	2200      	movs	r2, #0
 800945c:	f000 f9c8 	bl	80097f0 <_lseek_r>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	4632      	mov	r2, r6
 800946e:	463b      	mov	r3, r7
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	f000 b869 	b.w	800954c <_write_r>

0800947a <__sseek>:
 800947a:	b510      	push	{r4, lr}
 800947c:	460c      	mov	r4, r1
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 f9b5 	bl	80097f0 <_lseek_r>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	bf15      	itete	ne
 800948c:	6560      	strne	r0, [r4, #84]	; 0x54
 800948e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009496:	81a3      	strheq	r3, [r4, #12]
 8009498:	bf18      	it	ne
 800949a:	81a3      	strhne	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}

0800949e <__sclose>:
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 b8d3 	b.w	800964c <_close_r>
	...

080094a8 <__swbuf_r>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	460e      	mov	r6, r1
 80094ac:	4614      	mov	r4, r2
 80094ae:	4605      	mov	r5, r0
 80094b0:	b118      	cbz	r0, 80094ba <__swbuf_r+0x12>
 80094b2:	6983      	ldr	r3, [r0, #24]
 80094b4:	b90b      	cbnz	r3, 80094ba <__swbuf_r+0x12>
 80094b6:	f7ff f9dd 	bl	8008874 <__sinit>
 80094ba:	4b21      	ldr	r3, [pc, #132]	; (8009540 <__swbuf_r+0x98>)
 80094bc:	429c      	cmp	r4, r3
 80094be:	d12b      	bne.n	8009518 <__swbuf_r+0x70>
 80094c0:	686c      	ldr	r4, [r5, #4]
 80094c2:	69a3      	ldr	r3, [r4, #24]
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	071a      	lsls	r2, r3, #28
 80094ca:	d52f      	bpl.n	800952c <__swbuf_r+0x84>
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	b36b      	cbz	r3, 800952c <__swbuf_r+0x84>
 80094d0:	6923      	ldr	r3, [r4, #16]
 80094d2:	6820      	ldr	r0, [r4, #0]
 80094d4:	1ac0      	subs	r0, r0, r3
 80094d6:	6963      	ldr	r3, [r4, #20]
 80094d8:	b2f6      	uxtb	r6, r6
 80094da:	4283      	cmp	r3, r0
 80094dc:	4637      	mov	r7, r6
 80094de:	dc04      	bgt.n	80094ea <__swbuf_r+0x42>
 80094e0:	4621      	mov	r1, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	f000 f948 	bl	8009778 <_fflush_r>
 80094e8:	bb30      	cbnz	r0, 8009538 <__swbuf_r+0x90>
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	60a3      	str	r3, [r4, #8]
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	6022      	str	r2, [r4, #0]
 80094f6:	701e      	strb	r6, [r3, #0]
 80094f8:	6963      	ldr	r3, [r4, #20]
 80094fa:	3001      	adds	r0, #1
 80094fc:	4283      	cmp	r3, r0
 80094fe:	d004      	beq.n	800950a <__swbuf_r+0x62>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	07db      	lsls	r3, r3, #31
 8009504:	d506      	bpl.n	8009514 <__swbuf_r+0x6c>
 8009506:	2e0a      	cmp	r6, #10
 8009508:	d104      	bne.n	8009514 <__swbuf_r+0x6c>
 800950a:	4621      	mov	r1, r4
 800950c:	4628      	mov	r0, r5
 800950e:	f000 f933 	bl	8009778 <_fflush_r>
 8009512:	b988      	cbnz	r0, 8009538 <__swbuf_r+0x90>
 8009514:	4638      	mov	r0, r7
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <__swbuf_r+0x9c>)
 800951a:	429c      	cmp	r4, r3
 800951c:	d101      	bne.n	8009522 <__swbuf_r+0x7a>
 800951e:	68ac      	ldr	r4, [r5, #8]
 8009520:	e7cf      	b.n	80094c2 <__swbuf_r+0x1a>
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <__swbuf_r+0xa0>)
 8009524:	429c      	cmp	r4, r3
 8009526:	bf08      	it	eq
 8009528:	68ec      	ldreq	r4, [r5, #12]
 800952a:	e7ca      	b.n	80094c2 <__swbuf_r+0x1a>
 800952c:	4621      	mov	r1, r4
 800952e:	4628      	mov	r0, r5
 8009530:	f000 f81e 	bl	8009570 <__swsetup_r>
 8009534:	2800      	cmp	r0, #0
 8009536:	d0cb      	beq.n	80094d0 <__swbuf_r+0x28>
 8009538:	f04f 37ff 	mov.w	r7, #4294967295
 800953c:	e7ea      	b.n	8009514 <__swbuf_r+0x6c>
 800953e:	bf00      	nop
 8009540:	0800b0b0 	.word	0x0800b0b0
 8009544:	0800b0d0 	.word	0x0800b0d0
 8009548:	0800b090 	.word	0x0800b090

0800954c <_write_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	; (800956c <_write_r+0x20>)
 8009550:	4604      	mov	r4, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7f7 f887 	bl	800066e <_write>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_write_r+0x1e>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_write_r+0x1e>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20002264 	.word	0x20002264

08009570 <__swsetup_r>:
 8009570:	4b32      	ldr	r3, [pc, #200]	; (800963c <__swsetup_r+0xcc>)
 8009572:	b570      	push	{r4, r5, r6, lr}
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	4606      	mov	r6, r0
 8009578:	460c      	mov	r4, r1
 800957a:	b125      	cbz	r5, 8009586 <__swsetup_r+0x16>
 800957c:	69ab      	ldr	r3, [r5, #24]
 800957e:	b913      	cbnz	r3, 8009586 <__swsetup_r+0x16>
 8009580:	4628      	mov	r0, r5
 8009582:	f7ff f977 	bl	8008874 <__sinit>
 8009586:	4b2e      	ldr	r3, [pc, #184]	; (8009640 <__swsetup_r+0xd0>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d10f      	bne.n	80095ac <__swsetup_r+0x3c>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009594:	0719      	lsls	r1, r3, #28
 8009596:	d42c      	bmi.n	80095f2 <__swsetup_r+0x82>
 8009598:	06dd      	lsls	r5, r3, #27
 800959a:	d411      	bmi.n	80095c0 <__swsetup_r+0x50>
 800959c:	2309      	movs	r3, #9
 800959e:	6033      	str	r3, [r6, #0]
 80095a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295
 80095aa:	e03e      	b.n	800962a <__swsetup_r+0xba>
 80095ac:	4b25      	ldr	r3, [pc, #148]	; (8009644 <__swsetup_r+0xd4>)
 80095ae:	429c      	cmp	r4, r3
 80095b0:	d101      	bne.n	80095b6 <__swsetup_r+0x46>
 80095b2:	68ac      	ldr	r4, [r5, #8]
 80095b4:	e7eb      	b.n	800958e <__swsetup_r+0x1e>
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <__swsetup_r+0xd8>)
 80095b8:	429c      	cmp	r4, r3
 80095ba:	bf08      	it	eq
 80095bc:	68ec      	ldreq	r4, [r5, #12]
 80095be:	e7e6      	b.n	800958e <__swsetup_r+0x1e>
 80095c0:	0758      	lsls	r0, r3, #29
 80095c2:	d512      	bpl.n	80095ea <__swsetup_r+0x7a>
 80095c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c6:	b141      	cbz	r1, 80095da <__swsetup_r+0x6a>
 80095c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095cc:	4299      	cmp	r1, r3
 80095ce:	d002      	beq.n	80095d6 <__swsetup_r+0x66>
 80095d0:	4630      	mov	r0, r6
 80095d2:	f000 f9b9 	bl	8009948 <_free_r>
 80095d6:	2300      	movs	r3, #0
 80095d8:	6363      	str	r3, [r4, #52]	; 0x34
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	2300      	movs	r3, #0
 80095e4:	6063      	str	r3, [r4, #4]
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	f043 0308 	orr.w	r3, r3, #8
 80095f0:	81a3      	strh	r3, [r4, #12]
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	b94b      	cbnz	r3, 800960a <__swsetup_r+0x9a>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009600:	d003      	beq.n	800960a <__swsetup_r+0x9a>
 8009602:	4621      	mov	r1, r4
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f92b 	bl	8009860 <__smakebuf_r>
 800960a:	89a0      	ldrh	r0, [r4, #12]
 800960c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009610:	f010 0301 	ands.w	r3, r0, #1
 8009614:	d00a      	beq.n	800962c <__swsetup_r+0xbc>
 8009616:	2300      	movs	r3, #0
 8009618:	60a3      	str	r3, [r4, #8]
 800961a:	6963      	ldr	r3, [r4, #20]
 800961c:	425b      	negs	r3, r3
 800961e:	61a3      	str	r3, [r4, #24]
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	b943      	cbnz	r3, 8009636 <__swsetup_r+0xc6>
 8009624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009628:	d1ba      	bne.n	80095a0 <__swsetup_r+0x30>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	0781      	lsls	r1, r0, #30
 800962e:	bf58      	it	pl
 8009630:	6963      	ldrpl	r3, [r4, #20]
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	e7f4      	b.n	8009620 <__swsetup_r+0xb0>
 8009636:	2000      	movs	r0, #0
 8009638:	e7f7      	b.n	800962a <__swsetup_r+0xba>
 800963a:	bf00      	nop
 800963c:	200001c4 	.word	0x200001c4
 8009640:	0800b0b0 	.word	0x0800b0b0
 8009644:	0800b0d0 	.word	0x0800b0d0
 8009648:	0800b090 	.word	0x0800b090

0800964c <_close_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_close_r+0x1c>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f7 ff55 	bl	8001506 <_close>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_close_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_close_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20002264 	.word	0x20002264

0800966c <__sflush_r>:
 800966c:	898a      	ldrh	r2, [r1, #12]
 800966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	4605      	mov	r5, r0
 8009674:	0710      	lsls	r0, r2, #28
 8009676:	460c      	mov	r4, r1
 8009678:	d458      	bmi.n	800972c <__sflush_r+0xc0>
 800967a:	684b      	ldr	r3, [r1, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	dc05      	bgt.n	800968c <__sflush_r+0x20>
 8009680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	dc02      	bgt.n	800968c <__sflush_r+0x20>
 8009686:	2000      	movs	r0, #0
 8009688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800968c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800968e:	2e00      	cmp	r6, #0
 8009690:	d0f9      	beq.n	8009686 <__sflush_r+0x1a>
 8009692:	2300      	movs	r3, #0
 8009694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009698:	682f      	ldr	r7, [r5, #0]
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	d032      	beq.n	8009704 <__sflush_r+0x98>
 800969e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	075a      	lsls	r2, r3, #29
 80096a4:	d505      	bpl.n	80096b2 <__sflush_r+0x46>
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	1ac0      	subs	r0, r0, r3
 80096aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096ac:	b10b      	cbz	r3, 80096b2 <__sflush_r+0x46>
 80096ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096b0:	1ac0      	subs	r0, r0, r3
 80096b2:	2300      	movs	r3, #0
 80096b4:	4602      	mov	r2, r0
 80096b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b8:	6a21      	ldr	r1, [r4, #32]
 80096ba:	4628      	mov	r0, r5
 80096bc:	47b0      	blx	r6
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	d106      	bne.n	80096d2 <__sflush_r+0x66>
 80096c4:	6829      	ldr	r1, [r5, #0]
 80096c6:	291d      	cmp	r1, #29
 80096c8:	d82c      	bhi.n	8009724 <__sflush_r+0xb8>
 80096ca:	4a2a      	ldr	r2, [pc, #168]	; (8009774 <__sflush_r+0x108>)
 80096cc:	40ca      	lsrs	r2, r1
 80096ce:	07d6      	lsls	r6, r2, #31
 80096d0:	d528      	bpl.n	8009724 <__sflush_r+0xb8>
 80096d2:	2200      	movs	r2, #0
 80096d4:	6062      	str	r2, [r4, #4]
 80096d6:	04d9      	lsls	r1, r3, #19
 80096d8:	6922      	ldr	r2, [r4, #16]
 80096da:	6022      	str	r2, [r4, #0]
 80096dc:	d504      	bpl.n	80096e8 <__sflush_r+0x7c>
 80096de:	1c42      	adds	r2, r0, #1
 80096e0:	d101      	bne.n	80096e6 <__sflush_r+0x7a>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	b903      	cbnz	r3, 80096e8 <__sflush_r+0x7c>
 80096e6:	6560      	str	r0, [r4, #84]	; 0x54
 80096e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ea:	602f      	str	r7, [r5, #0]
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d0ca      	beq.n	8009686 <__sflush_r+0x1a>
 80096f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096f4:	4299      	cmp	r1, r3
 80096f6:	d002      	beq.n	80096fe <__sflush_r+0x92>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f925 	bl	8009948 <_free_r>
 80096fe:	2000      	movs	r0, #0
 8009700:	6360      	str	r0, [r4, #52]	; 0x34
 8009702:	e7c1      	b.n	8009688 <__sflush_r+0x1c>
 8009704:	6a21      	ldr	r1, [r4, #32]
 8009706:	2301      	movs	r3, #1
 8009708:	4628      	mov	r0, r5
 800970a:	47b0      	blx	r6
 800970c:	1c41      	adds	r1, r0, #1
 800970e:	d1c7      	bne.n	80096a0 <__sflush_r+0x34>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0c4      	beq.n	80096a0 <__sflush_r+0x34>
 8009716:	2b1d      	cmp	r3, #29
 8009718:	d001      	beq.n	800971e <__sflush_r+0xb2>
 800971a:	2b16      	cmp	r3, #22
 800971c:	d101      	bne.n	8009722 <__sflush_r+0xb6>
 800971e:	602f      	str	r7, [r5, #0]
 8009720:	e7b1      	b.n	8009686 <__sflush_r+0x1a>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	e7ad      	b.n	8009688 <__sflush_r+0x1c>
 800972c:	690f      	ldr	r7, [r1, #16]
 800972e:	2f00      	cmp	r7, #0
 8009730:	d0a9      	beq.n	8009686 <__sflush_r+0x1a>
 8009732:	0793      	lsls	r3, r2, #30
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	bf08      	it	eq
 8009738:	694b      	ldreq	r3, [r1, #20]
 800973a:	600f      	str	r7, [r1, #0]
 800973c:	bf18      	it	ne
 800973e:	2300      	movne	r3, #0
 8009740:	eba6 0807 	sub.w	r8, r6, r7
 8009744:	608b      	str	r3, [r1, #8]
 8009746:	f1b8 0f00 	cmp.w	r8, #0
 800974a:	dd9c      	ble.n	8009686 <__sflush_r+0x1a>
 800974c:	6a21      	ldr	r1, [r4, #32]
 800974e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009750:	4643      	mov	r3, r8
 8009752:	463a      	mov	r2, r7
 8009754:	4628      	mov	r0, r5
 8009756:	47b0      	blx	r6
 8009758:	2800      	cmp	r0, #0
 800975a:	dc06      	bgt.n	800976a <__sflush_r+0xfe>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	e78e      	b.n	8009688 <__sflush_r+0x1c>
 800976a:	4407      	add	r7, r0
 800976c:	eba8 0800 	sub.w	r8, r8, r0
 8009770:	e7e9      	b.n	8009746 <__sflush_r+0xda>
 8009772:	bf00      	nop
 8009774:	20400001 	.word	0x20400001

08009778 <_fflush_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	690b      	ldr	r3, [r1, #16]
 800977c:	4605      	mov	r5, r0
 800977e:	460c      	mov	r4, r1
 8009780:	b913      	cbnz	r3, 8009788 <_fflush_r+0x10>
 8009782:	2500      	movs	r5, #0
 8009784:	4628      	mov	r0, r5
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	b118      	cbz	r0, 8009792 <_fflush_r+0x1a>
 800978a:	6983      	ldr	r3, [r0, #24]
 800978c:	b90b      	cbnz	r3, 8009792 <_fflush_r+0x1a>
 800978e:	f7ff f871 	bl	8008874 <__sinit>
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <_fflush_r+0x6c>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d11b      	bne.n	80097d0 <_fflush_r+0x58>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0ef      	beq.n	8009782 <_fflush_r+0xa>
 80097a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097a4:	07d0      	lsls	r0, r2, #31
 80097a6:	d404      	bmi.n	80097b2 <_fflush_r+0x3a>
 80097a8:	0599      	lsls	r1, r3, #22
 80097aa:	d402      	bmi.n	80097b2 <_fflush_r+0x3a>
 80097ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ae:	f7ff f8ff 	bl	80089b0 <__retarget_lock_acquire_recursive>
 80097b2:	4628      	mov	r0, r5
 80097b4:	4621      	mov	r1, r4
 80097b6:	f7ff ff59 	bl	800966c <__sflush_r>
 80097ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097bc:	07da      	lsls	r2, r3, #31
 80097be:	4605      	mov	r5, r0
 80097c0:	d4e0      	bmi.n	8009784 <_fflush_r+0xc>
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	059b      	lsls	r3, r3, #22
 80097c6:	d4dd      	bmi.n	8009784 <_fflush_r+0xc>
 80097c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ca:	f7ff f8f2 	bl	80089b2 <__retarget_lock_release_recursive>
 80097ce:	e7d9      	b.n	8009784 <_fflush_r+0xc>
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <_fflush_r+0x70>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d101      	bne.n	80097da <_fflush_r+0x62>
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	e7df      	b.n	800979a <_fflush_r+0x22>
 80097da:	4b04      	ldr	r3, [pc, #16]	; (80097ec <_fflush_r+0x74>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	bf08      	it	eq
 80097e0:	68ec      	ldreq	r4, [r5, #12]
 80097e2:	e7da      	b.n	800979a <_fflush_r+0x22>
 80097e4:	0800b0b0 	.word	0x0800b0b0
 80097e8:	0800b0d0 	.word	0x0800b0d0
 80097ec:	0800b090 	.word	0x0800b090

080097f0 <_lseek_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	; (8009810 <_lseek_r+0x20>)
 80097f4:	4604      	mov	r4, r0
 80097f6:	4608      	mov	r0, r1
 80097f8:	4611      	mov	r1, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	602a      	str	r2, [r5, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	f7f7 fea8 	bl	8001554 <_lseek>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_lseek_r+0x1e>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_lseek_r+0x1e>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20002264 	.word	0x20002264

08009814 <__swhatbuf_r>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	460e      	mov	r6, r1
 8009818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981c:	2900      	cmp	r1, #0
 800981e:	b096      	sub	sp, #88	; 0x58
 8009820:	4614      	mov	r4, r2
 8009822:	461d      	mov	r5, r3
 8009824:	da08      	bge.n	8009838 <__swhatbuf_r+0x24>
 8009826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	602a      	str	r2, [r5, #0]
 800982e:	061a      	lsls	r2, r3, #24
 8009830:	d410      	bmi.n	8009854 <__swhatbuf_r+0x40>
 8009832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009836:	e00e      	b.n	8009856 <__swhatbuf_r+0x42>
 8009838:	466a      	mov	r2, sp
 800983a:	f000 f913 	bl	8009a64 <_fstat_r>
 800983e:	2800      	cmp	r0, #0
 8009840:	dbf1      	blt.n	8009826 <__swhatbuf_r+0x12>
 8009842:	9a01      	ldr	r2, [sp, #4]
 8009844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800984c:	425a      	negs	r2, r3
 800984e:	415a      	adcs	r2, r3
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	e7ee      	b.n	8009832 <__swhatbuf_r+0x1e>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	2000      	movs	r0, #0
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	b016      	add	sp, #88	; 0x58
 800985c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009860 <__smakebuf_r>:
 8009860:	898b      	ldrh	r3, [r1, #12]
 8009862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009864:	079d      	lsls	r5, r3, #30
 8009866:	4606      	mov	r6, r0
 8009868:	460c      	mov	r4, r1
 800986a:	d507      	bpl.n	800987c <__smakebuf_r+0x1c>
 800986c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	2301      	movs	r3, #1
 8009876:	6163      	str	r3, [r4, #20]
 8009878:	b002      	add	sp, #8
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	ab01      	add	r3, sp, #4
 800987e:	466a      	mov	r2, sp
 8009880:	f7ff ffc8 	bl	8009814 <__swhatbuf_r>
 8009884:	9900      	ldr	r1, [sp, #0]
 8009886:	4605      	mov	r5, r0
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff f8b3 	bl	80089f4 <_malloc_r>
 800988e:	b948      	cbnz	r0, 80098a4 <__smakebuf_r+0x44>
 8009890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d4ef      	bmi.n	8009878 <__smakebuf_r+0x18>
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	f043 0302 	orr.w	r3, r3, #2
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7e3      	b.n	800986c <__smakebuf_r+0xc>
 80098a4:	4b0d      	ldr	r3, [pc, #52]	; (80098dc <__smakebuf_r+0x7c>)
 80098a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	6163      	str	r3, [r4, #20]
 80098b6:	9b01      	ldr	r3, [sp, #4]
 80098b8:	6120      	str	r0, [r4, #16]
 80098ba:	b15b      	cbz	r3, 80098d4 <__smakebuf_r+0x74>
 80098bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f8e1 	bl	8009a88 <_isatty_r>
 80098c6:	b128      	cbz	r0, 80098d4 <__smakebuf_r+0x74>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	89a0      	ldrh	r0, [r4, #12]
 80098d6:	4305      	orrs	r5, r0
 80098d8:	81a5      	strh	r5, [r4, #12]
 80098da:	e7cd      	b.n	8009878 <__smakebuf_r+0x18>
 80098dc:	0800880d 	.word	0x0800880d

080098e0 <memcpy>:
 80098e0:	440a      	add	r2, r1
 80098e2:	4291      	cmp	r1, r2
 80098e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e8:	d100      	bne.n	80098ec <memcpy+0xc>
 80098ea:	4770      	bx	lr
 80098ec:	b510      	push	{r4, lr}
 80098ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f6:	4291      	cmp	r1, r2
 80098f8:	d1f9      	bne.n	80098ee <memcpy+0xe>
 80098fa:	bd10      	pop	{r4, pc}

080098fc <memmove>:
 80098fc:	4288      	cmp	r0, r1
 80098fe:	b510      	push	{r4, lr}
 8009900:	eb01 0402 	add.w	r4, r1, r2
 8009904:	d902      	bls.n	800990c <memmove+0x10>
 8009906:	4284      	cmp	r4, r0
 8009908:	4623      	mov	r3, r4
 800990a:	d807      	bhi.n	800991c <memmove+0x20>
 800990c:	1e43      	subs	r3, r0, #1
 800990e:	42a1      	cmp	r1, r4
 8009910:	d008      	beq.n	8009924 <memmove+0x28>
 8009912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800991a:	e7f8      	b.n	800990e <memmove+0x12>
 800991c:	4402      	add	r2, r0
 800991e:	4601      	mov	r1, r0
 8009920:	428a      	cmp	r2, r1
 8009922:	d100      	bne.n	8009926 <memmove+0x2a>
 8009924:	bd10      	pop	{r4, pc}
 8009926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800992a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800992e:	e7f7      	b.n	8009920 <memmove+0x24>

08009930 <__malloc_lock>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__malloc_lock+0x8>)
 8009932:	f7ff b83d 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 8009936:	bf00      	nop
 8009938:	20002258 	.word	0x20002258

0800993c <__malloc_unlock>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__malloc_unlock+0x8>)
 800993e:	f7ff b838 	b.w	80089b2 <__retarget_lock_release_recursive>
 8009942:	bf00      	nop
 8009944:	20002258 	.word	0x20002258

08009948 <_free_r>:
 8009948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800994a:	2900      	cmp	r1, #0
 800994c:	d044      	beq.n	80099d8 <_free_r+0x90>
 800994e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009952:	9001      	str	r0, [sp, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f1a1 0404 	sub.w	r4, r1, #4
 800995a:	bfb8      	it	lt
 800995c:	18e4      	addlt	r4, r4, r3
 800995e:	f7ff ffe7 	bl	8009930 <__malloc_lock>
 8009962:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <_free_r+0x94>)
 8009964:	9801      	ldr	r0, [sp, #4]
 8009966:	6813      	ldr	r3, [r2, #0]
 8009968:	b933      	cbnz	r3, 8009978 <_free_r+0x30>
 800996a:	6063      	str	r3, [r4, #4]
 800996c:	6014      	str	r4, [r2, #0]
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009974:	f7ff bfe2 	b.w	800993c <__malloc_unlock>
 8009978:	42a3      	cmp	r3, r4
 800997a:	d908      	bls.n	800998e <_free_r+0x46>
 800997c:	6825      	ldr	r5, [r4, #0]
 800997e:	1961      	adds	r1, r4, r5
 8009980:	428b      	cmp	r3, r1
 8009982:	bf01      	itttt	eq
 8009984:	6819      	ldreq	r1, [r3, #0]
 8009986:	685b      	ldreq	r3, [r3, #4]
 8009988:	1949      	addeq	r1, r1, r5
 800998a:	6021      	streq	r1, [r4, #0]
 800998c:	e7ed      	b.n	800996a <_free_r+0x22>
 800998e:	461a      	mov	r2, r3
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	b10b      	cbz	r3, 8009998 <_free_r+0x50>
 8009994:	42a3      	cmp	r3, r4
 8009996:	d9fa      	bls.n	800998e <_free_r+0x46>
 8009998:	6811      	ldr	r1, [r2, #0]
 800999a:	1855      	adds	r5, r2, r1
 800999c:	42a5      	cmp	r5, r4
 800999e:	d10b      	bne.n	80099b8 <_free_r+0x70>
 80099a0:	6824      	ldr	r4, [r4, #0]
 80099a2:	4421      	add	r1, r4
 80099a4:	1854      	adds	r4, r2, r1
 80099a6:	42a3      	cmp	r3, r4
 80099a8:	6011      	str	r1, [r2, #0]
 80099aa:	d1e0      	bne.n	800996e <_free_r+0x26>
 80099ac:	681c      	ldr	r4, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	6053      	str	r3, [r2, #4]
 80099b2:	4421      	add	r1, r4
 80099b4:	6011      	str	r1, [r2, #0]
 80099b6:	e7da      	b.n	800996e <_free_r+0x26>
 80099b8:	d902      	bls.n	80099c0 <_free_r+0x78>
 80099ba:	230c      	movs	r3, #12
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	e7d6      	b.n	800996e <_free_r+0x26>
 80099c0:	6825      	ldr	r5, [r4, #0]
 80099c2:	1961      	adds	r1, r4, r5
 80099c4:	428b      	cmp	r3, r1
 80099c6:	bf04      	itt	eq
 80099c8:	6819      	ldreq	r1, [r3, #0]
 80099ca:	685b      	ldreq	r3, [r3, #4]
 80099cc:	6063      	str	r3, [r4, #4]
 80099ce:	bf04      	itt	eq
 80099d0:	1949      	addeq	r1, r1, r5
 80099d2:	6021      	streq	r1, [r4, #0]
 80099d4:	6054      	str	r4, [r2, #4]
 80099d6:	e7ca      	b.n	800996e <_free_r+0x26>
 80099d8:	b003      	add	sp, #12
 80099da:	bd30      	pop	{r4, r5, pc}
 80099dc:	2000225c 	.word	0x2000225c

080099e0 <_realloc_r>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	4680      	mov	r8, r0
 80099e6:	4614      	mov	r4, r2
 80099e8:	460e      	mov	r6, r1
 80099ea:	b921      	cbnz	r1, 80099f6 <_realloc_r+0x16>
 80099ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	4611      	mov	r1, r2
 80099f2:	f7fe bfff 	b.w	80089f4 <_malloc_r>
 80099f6:	b92a      	cbnz	r2, 8009a04 <_realloc_r+0x24>
 80099f8:	f7ff ffa6 	bl	8009948 <_free_r>
 80099fc:	4625      	mov	r5, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	f000 f850 	bl	8009aa8 <_malloc_usable_size_r>
 8009a08:	4284      	cmp	r4, r0
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	d802      	bhi.n	8009a14 <_realloc_r+0x34>
 8009a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a12:	d812      	bhi.n	8009a3a <_realloc_r+0x5a>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4640      	mov	r0, r8
 8009a18:	f7fe ffec 	bl	80089f4 <_malloc_r>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0ed      	beq.n	80099fe <_realloc_r+0x1e>
 8009a22:	42bc      	cmp	r4, r7
 8009a24:	4622      	mov	r2, r4
 8009a26:	4631      	mov	r1, r6
 8009a28:	bf28      	it	cs
 8009a2a:	463a      	movcs	r2, r7
 8009a2c:	f7ff ff58 	bl	80098e0 <memcpy>
 8009a30:	4631      	mov	r1, r6
 8009a32:	4640      	mov	r0, r8
 8009a34:	f7ff ff88 	bl	8009948 <_free_r>
 8009a38:	e7e1      	b.n	80099fe <_realloc_r+0x1e>
 8009a3a:	4635      	mov	r5, r6
 8009a3c:	e7df      	b.n	80099fe <_realloc_r+0x1e>
	...

08009a40 <_read_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	; (8009a60 <_read_r+0x20>)
 8009a44:	4604      	mov	r4, r0
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f7 fd3c 	bl	80014cc <_read>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_read_r+0x1e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_read_r+0x1e>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	20002264 	.word	0x20002264

08009a64 <_fstat_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d07      	ldr	r5, [pc, #28]	; (8009a84 <_fstat_r+0x20>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	f7f7 fd54 	bl	800151e <_fstat>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d102      	bne.n	8009a80 <_fstat_r+0x1c>
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	b103      	cbz	r3, 8009a80 <_fstat_r+0x1c>
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	bd38      	pop	{r3, r4, r5, pc}
 8009a82:	bf00      	nop
 8009a84:	20002264 	.word	0x20002264

08009a88 <_isatty_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d06      	ldr	r5, [pc, #24]	; (8009aa4 <_isatty_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f7f7 fd53 	bl	800153e <_isatty>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_isatty_r+0x1a>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_isatty_r+0x1a>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	20002264 	.word	0x20002264

08009aa8 <_malloc_usable_size_r>:
 8009aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aac:	1f18      	subs	r0, r3, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfbc      	itt	lt
 8009ab2:	580b      	ldrlt	r3, [r1, r0]
 8009ab4:	18c0      	addlt	r0, r0, r3
 8009ab6:	4770      	bx	lr

08009ab8 <_init>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr

08009ac4 <_fini>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr


kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a8  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000020c  0800a1a8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  0800a1a8  00021040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c76  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003326  00000000  00000000  00033eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000371d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  000382a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022247  00000000  00000000  00039208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f38  00000000  00000000  0005b44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdef9  00000000  00000000  00071387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  0012f2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089cc 	.word	0x080089cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080089cc 	.word	0x080089cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	220e      	movs	r2, #14
 800058e:	216c      	movs	r1, #108	; 0x6c
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f001 fd97 	bl	80020c4 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21a      	sxth	r2, r3
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <AS5600_ReadStatus>:

uint8_t AS5600_ReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	f107 030f 	add.w	r3, r7, #15
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	220b      	movs	r2, #11
 80005ca:	216c      	movs	r1, #108	; 0x6c
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f001 fd79 	bl	80020c4 <HAL_I2C_Mem_Read>

    return status;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <AS5600_IsMagnetPresent>:

uint8_t AS5600_IsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint8_t status = AS5600_ReadStatus(hi2c);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffe3 	bl	80005b0 <AS5600_ReadStatus>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d104      	bne.n	8000602 <AS5600_IsMagnetPresent+0x26>
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	f003 0310 	and.w	r3, r3, #16
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <AS5600_IsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <AS5600_IsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 8000606:	2301      	movs	r3, #1
    }
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a0      	sub	sp, #128	; 0x80
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 ff83 	bl	8001520 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f9b9 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fab3 	bl	8000b88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000622:	f000 fa1f 	bl	8000a64 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000626:	f000 fa4b 	bl	8000ac0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 800062a:	f007 f8f7 	bl	800781c <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800062e:	f000 fa75 	bl	8000b1c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000632:	2104      	movs	r1, #4
 8000634:	48c0      	ldr	r0, [pc, #768]	; (8000938 <main+0x328>)
 8000636:	f001 fae8 	bl	8001c0a <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f000 ffe2 	bl	8001604 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 8000640:	f000 fb14 	bl	8000c6c <SSD1306_Init>

  HAL_Delay(50);
 8000644:	2032      	movs	r0, #50	; 0x32
 8000646:	f000 ffdd 	bl	8001604 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 800064a:	2100      	movs	r1, #0
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fc77 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	49b9      	ldr	r1, [pc, #740]	; (800093c <main+0x32c>)
 8000656:	48ba      	ldr	r0, [pc, #744]	; (8000940 <main+0x330>)
 8000658:	f000 fd08 	bl	800106c <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 800065c:	2114      	movs	r1, #20
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fc6e 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts ("v.02", &Font_7x10, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	49b7      	ldr	r1, [pc, #732]	; (8000944 <main+0x334>)
 8000668:	48b7      	ldr	r0, [pc, #732]	; (8000948 <main+0x338>)
 800066a:	f000 fcff 	bl	800106c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800066e:	f000 fbc1 	bl	8000df4 <SSD1306_UpdateScreen>
/*
  sprintf(txBuf, "Kompetter-X\r\nv.02");
  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));*/

  HAL_Delay(1500);
 8000672:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000676:	f000 ffc5 	bl	8001604 <HAL_Delay>

  SSD1306_Clear();
 800067a:	f000 fd1c 	bl	80010b6 <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 800067e:	2104      	movs	r1, #4
 8000680:	48ad      	ldr	r0, [pc, #692]	; (8000938 <main+0x328>)
 8000682:	f001 fac2 	bl	8001c0a <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 8000686:	211e      	movs	r1, #30
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fc59 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	49ac      	ldr	r1, [pc, #688]	; (8000944 <main+0x334>)
 8000692:	48ae      	ldr	r0, [pc, #696]	; (800094c <main+0x33c>)
 8000694:	f000 fcea 	bl	800106c <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 8000698:	2128      	movs	r1, #40	; 0x28
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fc50 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	49a6      	ldr	r1, [pc, #664]	; (800093c <main+0x32c>)
 80006a4:	48aa      	ldr	r0, [pc, #680]	; (8000950 <main+0x340>)
 80006a6:	f000 fce1 	bl	800106c <SSD1306_Puts>

  SSD1306_GotoXY(40, 30);
 80006aa:	211e      	movs	r1, #30
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f000 fc47 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	49a3      	ldr	r1, [pc, #652]	; (8000944 <main+0x334>)
 80006b6:	48a7      	ldr	r0, [pc, #668]	; (8000954 <main+0x344>)
 80006b8:	f000 fcd8 	bl	800106c <SSD1306_Puts>
  SSD1306_GotoXY(40, 40);
 80006bc:	2128      	movs	r1, #40	; 0x28
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fc3e 	bl	8000f40 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	499d      	ldr	r1, [pc, #628]	; (800093c <main+0x32c>)
 80006c8:	48a1      	ldr	r0, [pc, #644]	; (8000950 <main+0x340>)
 80006ca:	f000 fccf 	bl	800106c <SSD1306_Puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 80006ce:	48a2      	ldr	r0, [pc, #648]	; (8000958 <main+0x348>)
 80006d0:	f7ff ff50 	bl	8000574 <AS5600_ReadAngle>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint8_t magnetPresent = AS5600_IsMagnetPresent(&hi2c2);
 80006da:	489f      	ldr	r0, [pc, #636]	; (8000958 <main+0x348>)
 80006dc:	f7ff ff7e 	bl	80005dc <AS5600_IsMagnetPresent>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

	//Magnet status
	if( magnetPresent == 1){
 80006e6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d125      	bne.n	800073a <main+0x12a>

		SSD1306_GotoXY(40, 40);
 80006ee:	2128      	movs	r1, #40	; 0x28
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f000 fc25 	bl	8000f40 <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	4990      	ldr	r1, [pc, #576]	; (800093c <main+0x32c>)
 80006fa:	4898      	ldr	r0, [pc, #608]	; (800095c <main+0x34c>)
 80006fc:	f000 fcb6 	bl	800106c <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

	    //Convert to a string with leading spaces
	    sprintf(angle_str, "%4u", angle);
 8000700:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000708:	4995      	ldr	r1, [pc, #596]	; (8000960 <main+0x350>)
 800070a:	4618      	mov	r0, r3
 800070c:	f007 fcf0 	bl	80080f0 <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fc14 	bl	8000f40 <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	498a      	ldr	r1, [pc, #552]	; (8000944 <main+0x334>)
 800071c:	4891      	ldr	r0, [pc, #580]	; (8000964 <main+0x354>)
 800071e:	f000 fca5 	bl	800106c <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000722:	210c      	movs	r1, #12
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fc0b 	bl	8000f40 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 800072a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800072e:	2201      	movs	r2, #1
 8000730:	4982      	ldr	r1, [pc, #520]	; (800093c <main+0x32c>)
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fc9a 	bl	800106c <SSD1306_Puts>
 8000738:	e008      	b.n	800074c <main+0x13c>

	} else {
		SSD1306_GotoXY(40, 40);
 800073a:	2128      	movs	r1, #40	; 0x28
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f000 fbff 	bl	8000f40 <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	497d      	ldr	r1, [pc, #500]	; (800093c <main+0x32c>)
 8000746:	4888      	ldr	r0, [pc, #544]	; (8000968 <main+0x358>)
 8000748:	f000 fc90 	bl	800106c <SSD1306_Puts>

	//debounce scan:
	enum KeyState { IDLE, PRESSED };
	enum KeyState key_state[NUM_ROWS][NUM_COLS];  // Declare the array of states

	for(int i = 0; i < NUM_ROWS; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000750:	e014      	b.n	800077c <main+0x16c>
	    for(int j = 0; j < NUM_COLS; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	67bb      	str	r3, [r7, #120]	; 0x78
 8000756:	e00b      	b.n	8000770 <main+0x160>
	        key_state[i][j] = IDLE;  // Initialize each state to IDLE
 8000758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	3380      	adds	r3, #128	; 0x80
 800075e:	19da      	adds	r2, r3, r7
 8000760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000762:	4413      	add	r3, r2
 8000764:	3b30      	subs	r3, #48	; 0x30
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 800076a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800076c:	3301      	adds	r3, #1
 800076e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000772:	2b03      	cmp	r3, #3
 8000774:	ddf0      	ble.n	8000758 <main+0x148>
	for(int i = 0; i < NUM_ROWS; i++) {
 8000776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000778:	3301      	adds	r3, #1
 800077a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800077c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800077e:	2b03      	cmp	r3, #3
 8000780:	dde7      	ble.n	8000752 <main+0x142>
	    }
	}

	uint32_t last_key_time[NUM_ROWS][NUM_COLS] = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2240      	movs	r2, #64	; 0x40
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f007 fca9 	bl	80080e0 <memset>

	int key_pressed = 0; // flag to track if a key was pressed during this cycle
 800078e:	2300      	movs	r3, #0
 8000790:	677b      	str	r3, [r7, #116]	; 0x74
	char key_str[3];

	for(int i = 0; i < NUM_ROWS; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	673b      	str	r3, [r7, #112]	; 0x70
 8000796:	e0af      	b.n	80008f8 <main+0x2e8>
	    uint32_t current_tick = HAL_GetTick();
 8000798:	f000 ff28 	bl	80015ec <HAL_GetTick>
 800079c:	6678      	str	r0, [r7, #100]	; 0x64
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 800079e:	4a73      	ldr	r2, [pc, #460]	; (800096c <main+0x35c>)
 80007a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a6:	4a72      	ldr	r2, [pc, #456]	; (8000970 <main+0x360>)
 80007a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	f001 fa11 	bl	8001bd8 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // delay after setting row high
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 ff24 	bl	8001604 <HAL_Delay>

	    for(int j = 0; j < NUM_COLS; j++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007c0:	e084      	b.n	80008cc <main+0x2bc>
	        uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 80007c2:	4a6c      	ldr	r2, [pc, #432]	; (8000974 <main+0x364>)
 80007c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ca:	496b      	ldr	r1, [pc, #428]	; (8000978 <main+0x368>)
 80007cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f001 f9e7 	bl	8001ba8 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	        if (is_pressed && key_state[i][j] == IDLE) {
 80007ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d045      	beq.n	800087e <main+0x26e>
 80007f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3380      	adds	r3, #128	; 0x80
 80007f8:	19da      	adds	r2, r3, r7
 80007fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007fc:	4413      	add	r3, r2
 80007fe:	3b30      	subs	r3, #48	; 0x30
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d13b      	bne.n	800087e <main+0x26e>
	            // Format the key string
	            sprintf(key_str, "%d%d", i+1, j+1);
 8000806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800080c:	3301      	adds	r3, #1
 800080e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8000812:	495a      	ldr	r1, [pc, #360]	; (800097c <main+0x36c>)
 8000814:	f007 fc6c 	bl	80080f0 <siprintf>

	            //send_key(HID_KEY_A);
	            keyboardhid.KEYCODE1 = keycode_map[i][j]; //send corresponding HID keycode
 8000818:	4a59      	ldr	r2, [pc, #356]	; (8000980 <main+0x370>)
 800081a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	441a      	add	r2, r3
 8000820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000822:	4413      	add	r3, r2
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b57      	ldr	r3, [pc, #348]	; (8000984 <main+0x374>)
 8000828:	709a      	strb	r2, [r3, #2]
	            USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 800082a:	2208      	movs	r2, #8
 800082c:	4955      	ldr	r1, [pc, #340]	; (8000984 <main+0x374>)
 800082e:	4856      	ldr	r0, [pc, #344]	; (8000988 <main+0x378>)
 8000830:	f005 fe2e 	bl	8006490 <USBD_HID_SendReport>
	            HAL_Delay(50);
 8000834:	2032      	movs	r0, #50	; 0x32
 8000836:	f000 fee5 	bl	8001604 <HAL_Delay>
	            keyboardhid.KEYCODE1 = 0x00; //release key press
 800083a:	4b52      	ldr	r3, [pc, #328]	; (8000984 <main+0x374>)
 800083c:	2200      	movs	r2, #0
 800083e:	709a      	strb	r2, [r3, #2]
	            USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000840:	2208      	movs	r2, #8
 8000842:	4950      	ldr	r1, [pc, #320]	; (8000984 <main+0x374>)
 8000844:	4850      	ldr	r0, [pc, #320]	; (8000988 <main+0x378>)
 8000846:	f005 fe23 	bl	8006490 <USBD_HID_SendReport>

	            // Light up led:
	            HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 800084a:	2104      	movs	r1, #4
 800084c:	483a      	ldr	r0, [pc, #232]	; (8000938 <main+0x328>)
 800084e:	f001 f9dc 	bl	8001c0a <HAL_GPIO_TogglePin>

	            key_pressed = 1; // set key pressed flag
 8000852:	2301      	movs	r3, #1
 8000854:	677b      	str	r3, [r7, #116]	; 0x74
	            key_state[i][j] = PRESSED;
 8000856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	3380      	adds	r3, #128	; 0x80
 800085c:	19da      	adds	r2, r3, r7
 800085e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000860:	4413      	add	r3, r2
 8000862:	3b30      	subs	r3, #48	; 0x30
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
	            last_key_time[i][j] = current_tick;
 8000868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800086a:	009a      	lsls	r2, r3, #2
 800086c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	3380      	adds	r3, #128	; 0x80
 8000874:	443b      	add	r3, r7
 8000876:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000878:	f843 2c7c 	str.w	r2, [r3, #-124]

	            break; // exit loop as soon as a key press is detected
 800087c:	e02a      	b.n	80008d4 <main+0x2c4>
	        } else if (!is_pressed && key_state[i][j] == PRESSED && current_tick - last_key_time[i][j] > DEBOUNCE_DELAY) {
 800087e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000882:	2b00      	cmp	r3, #0
 8000884:	d11f      	bne.n	80008c6 <main+0x2b6>
 8000886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	3380      	adds	r3, #128	; 0x80
 800088c:	19da      	adds	r2, r3, r7
 800088e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000890:	4413      	add	r3, r2
 8000892:	3b30      	subs	r3, #48	; 0x30
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d115      	bne.n	80008c6 <main+0x2b6>
 800089a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800089c:	009a      	lsls	r2, r3, #2
 800089e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	3380      	adds	r3, #128	; 0x80
 80008a6:	443b      	add	r3, r7
 80008a8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80008ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	2b14      	cmp	r3, #20
 80008b2:	d908      	bls.n	80008c6 <main+0x2b6>
	            key_state[i][j] = IDLE;
 80008b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	3380      	adds	r3, #128	; 0x80
 80008ba:	19da      	adds	r2, r3, r7
 80008bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008be:	4413      	add	r3, r2
 80008c0:	3b30      	subs	r3, #48	; 0x30
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 80008c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c8:	3301      	adds	r3, #1
 80008ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	f77f af77 	ble.w	80007c2 <main+0x1b2>
	        }
	    }

	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 80008d4:	4a25      	ldr	r2, [pc, #148]	; (800096c <main+0x35c>)
 80008d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008dc:	4a24      	ldr	r2, [pc, #144]	; (8000970 <main+0x360>)
 80008de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	f001 f976 	bl	8001bd8 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // delay after setting row low
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fe89 	bl	8001604 <HAL_Delay>
	for(int i = 0; i < NUM_ROWS; i++) {
 80008f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008f4:	3301      	adds	r3, #1
 80008f6:	673b      	str	r3, [r7, #112]	; 0x70
 80008f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	f77f af4c 	ble.w	8000798 <main+0x188>
	}

	if (key_pressed) {
 8000900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00b      	beq.n	800091e <main+0x30e>
	    // Display the key on the OLED display
	    SSD1306_GotoXY(0, 40);
 8000906:	2128      	movs	r1, #40	; 0x28
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fb19 	bl	8000f40 <SSD1306_GotoXY>
	    SSD1306_Puts(key_str, &Font_11x18, 1);
 800090e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000912:	2201      	movs	r2, #1
 8000914:	4909      	ldr	r1, [pc, #36]	; (800093c <main+0x32c>)
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fba8 	bl	800106c <SSD1306_Puts>
 800091c:	e008      	b.n	8000930 <main+0x320>
	} else {
	    // Display '--' on the OLED display
	    SSD1306_GotoXY(0, 40);
 800091e:	2128      	movs	r1, #40	; 0x28
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb0d 	bl	8000f40 <SSD1306_GotoXY>
	    SSD1306_Puts("--", &Font_11x18, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	4904      	ldr	r1, [pc, #16]	; (800093c <main+0x32c>)
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <main+0x37c>)
 800092c:	f000 fb9e 	bl	800106c <SSD1306_Puts>
	}
	//Debounce scan END

  	// Update the OLED display
	SSD1306_UpdateScreen();
 8000930:	f000 fa60 	bl	8000df4 <SSD1306_UpdateScreen>
  {
 8000934:	e6cb      	b.n	80006ce <main+0xbe>
 8000936:	bf00      	nop
 8000938:	40020000 	.word	0x40020000
 800093c:	20000008 	.word	0x20000008
 8000940:	080089e4 	.word	0x080089e4
 8000944:	20000000 	.word	0x20000000
 8000948:	080089f0 	.word	0x080089f0
 800094c:	080089f8 	.word	0x080089f8
 8000950:	08008a00 	.word	0x08008a00
 8000954:	08008a08 	.word	0x08008a08
 8000958:	20000284 	.word	0x20000284
 800095c:	08008a14 	.word	0x08008a14
 8000960:	08008a1c 	.word	0x08008a1c
 8000964:	08008a20 	.word	0x08008a20
 8000968:	08008a28 	.word	0x08008a28
 800096c:	20000020 	.word	0x20000020
 8000970:	20000030 	.word	0x20000030
 8000974:	20000038 	.word	0x20000038
 8000978:	20000048 	.word	0x20000048
 800097c:	08008a30 	.word	0x08008a30
 8000980:	20000010 	.word	0x20000010
 8000984:	20000228 	.word	0x20000228
 8000988:	20000744 	.word	0x20000744
 800098c:	08008a38 	.word	0x08008a38

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 fb9e 	bl	80080e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemClock_Config+0xcc>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <SystemClock_Config+0xcc>)
 80009be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <SystemClock_Config+0xcc>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <SystemClock_Config+0xd0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemClock_Config+0xd0>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a00:	2308      	movs	r3, #8
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a04:	23a8      	movs	r3, #168	; 0xa8
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 fb5b 	bl	80040d0 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a20:	f000 f91e 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2105      	movs	r1, #5
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fdbc 	bl	80045c0 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a4e:	f000 f907 	bl	8000c60 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	; 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <MX_I2C1_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_I2C1_Init+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_I2C1_Init+0x50>)
 8000aa2:	f001 f8cd 	bl	8001c40 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 f8d8 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000230 	.word	0x20000230
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	00061a80 	.word	0x00061a80

08000ac0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_I2C2_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_I2C2_Init+0x58>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C2_Init+0x50>)
 8000afe:	f001 f89f 	bl	8001c40 <HAL_I2C_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 f8aa 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000284 	.word	0x20000284
 8000b14:	40005800 	.word	0x40005800
 8000b18:	000186a0 	.word	0x000186a0

08000b1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_SPI2_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI2_Init+0x64>)
 8000b6e:	f003 ff31 	bl	80049d4 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 f872 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200002d8 	.word	0x200002d8
 8000b84:	40003800 	.word	0x40003800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_GPIO_Init+0xcc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000c0e:	2200      	movs	r2, #0
 8000c10:	21f4      	movs	r1, #244	; 0xf4
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000c14:	f000 ffe0 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c2c:	f000 fe20 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000c30:	23f4      	movs	r3, #244	; 0xf4
 8000c32:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000c48:	f000 fe12 	bl	8001870 <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c72:	f000 fa29 	bl	80010c8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c76:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2178      	movs	r1, #120	; 0x78
 8000c7e:	485b      	ldr	r0, [pc, #364]	; (8000dec <SSD1306_Init+0x180>)
 8000c80:	f001 fc46 	bl	8002510 <HAL_I2C_IsDeviceReady>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e0a9      	b.n	8000de2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c8e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c92:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c94:	e002      	b.n	8000c9c <SSD1306_Init+0x30>
		p--;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f9      	bne.n	8000c96 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ca2:	22ae      	movs	r2, #174	; 0xae
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2078      	movs	r0, #120	; 0x78
 8000ca8:	f000 fa8a 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2078      	movs	r0, #120	; 0x78
 8000cb2:	f000 fa85 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	; 0x78
 8000cbc:	f000 fa80 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000cc0:	22b0      	movs	r2, #176	; 0xb0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2078      	movs	r0, #120	; 0x78
 8000cc6:	f000 fa7b 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000cca:	22c8      	movs	r2, #200	; 0xc8
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2078      	movs	r0, #120	; 0x78
 8000cd0:	f000 fa76 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2078      	movs	r0, #120	; 0x78
 8000cda:	f000 fa71 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000cde:	2210      	movs	r2, #16
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2078      	movs	r0, #120	; 0x78
 8000ce4:	f000 fa6c 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ce8:	2240      	movs	r2, #64	; 0x40
 8000cea:	2100      	movs	r1, #0
 8000cec:	2078      	movs	r0, #120	; 0x78
 8000cee:	f000 fa67 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cf2:	2281      	movs	r2, #129	; 0x81
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2078      	movs	r0, #120	; 0x78
 8000cf8:	f000 fa62 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cfc:	22ff      	movs	r2, #255	; 0xff
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2078      	movs	r0, #120	; 0x78
 8000d02:	f000 fa5d 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d06:	22a1      	movs	r2, #161	; 0xa1
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2078      	movs	r0, #120	; 0x78
 8000d0c:	f000 fa58 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d10:	22a6      	movs	r2, #166	; 0xa6
 8000d12:	2100      	movs	r1, #0
 8000d14:	2078      	movs	r0, #120	; 0x78
 8000d16:	f000 fa53 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d1a:	22a8      	movs	r2, #168	; 0xa8
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2078      	movs	r0, #120	; 0x78
 8000d20:	f000 fa4e 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d24:	223f      	movs	r2, #63	; 0x3f
 8000d26:	2100      	movs	r1, #0
 8000d28:	2078      	movs	r0, #120	; 0x78
 8000d2a:	f000 fa49 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d2e:	22a4      	movs	r2, #164	; 0xa4
 8000d30:	2100      	movs	r1, #0
 8000d32:	2078      	movs	r0, #120	; 0x78
 8000d34:	f000 fa44 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d38:	22d3      	movs	r2, #211	; 0xd3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	f000 fa3f 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2078      	movs	r0, #120	; 0x78
 8000d48:	f000 fa3a 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d4c:	22d5      	movs	r2, #213	; 0xd5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2078      	movs	r0, #120	; 0x78
 8000d52:	f000 fa35 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d56:	22f0      	movs	r2, #240	; 0xf0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2078      	movs	r0, #120	; 0x78
 8000d5c:	f000 fa30 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d60:	22d9      	movs	r2, #217	; 0xd9
 8000d62:	2100      	movs	r1, #0
 8000d64:	2078      	movs	r0, #120	; 0x78
 8000d66:	f000 fa2b 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d6a:	2222      	movs	r2, #34	; 0x22
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2078      	movs	r0, #120	; 0x78
 8000d70:	f000 fa26 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d74:	22da      	movs	r2, #218	; 0xda
 8000d76:	2100      	movs	r1, #0
 8000d78:	2078      	movs	r0, #120	; 0x78
 8000d7a:	f000 fa21 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d7e:	2212      	movs	r2, #18
 8000d80:	2100      	movs	r1, #0
 8000d82:	2078      	movs	r0, #120	; 0x78
 8000d84:	f000 fa1c 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d88:	22db      	movs	r2, #219	; 0xdb
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2078      	movs	r0, #120	; 0x78
 8000d8e:	f000 fa17 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	2078      	movs	r0, #120	; 0x78
 8000d98:	f000 fa12 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d9c:	228d      	movs	r2, #141	; 0x8d
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2078      	movs	r0, #120	; 0x78
 8000da2:	f000 fa0d 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000da6:	2214      	movs	r2, #20
 8000da8:	2100      	movs	r1, #0
 8000daa:	2078      	movs	r0, #120	; 0x78
 8000dac:	f000 fa08 	bl	80011c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000db0:	22af      	movs	r2, #175	; 0xaf
 8000db2:	2100      	movs	r1, #0
 8000db4:	2078      	movs	r0, #120	; 0x78
 8000db6:	f000 fa03 	bl	80011c0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000dba:	222e      	movs	r2, #46	; 0x2e
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2078      	movs	r0, #120	; 0x78
 8000dc0:	f000 f9fe 	bl	80011c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 f843 	bl	8000e50 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000dca:	f000 f813 	bl	8000df4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <SSD1306_Init+0x184>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SSD1306_Init+0x184>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SSD1306_Init+0x184>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000230 	.word	0x20000230
 8000df0:	20000730 	.word	0x20000730

08000df4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e01d      	b.n	8000e3c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3b50      	subs	r3, #80	; 0x50
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	; 0x78
 8000e0c:	f000 f9d8 	bl	80011c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2078      	movs	r0, #120	; 0x78
 8000e16:	f000 f9d3 	bl	80011c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	; 0x78
 8000e20:	f000 f9ce 	bl	80011c0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <SSD1306_UpdateScreen+0x58>)
 8000e2a:	441a      	add	r2, r3
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	f000 f95f 	bl	80010f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d9de      	bls.n	8000e00 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000330 	.word	0x20000330

08000e50 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <SSD1306_Fill+0x14>
 8000e60:	2300      	movs	r3, #0
 8000e62:	e000      	b.n	8000e66 <SSD1306_Fill+0x16>
 8000e64:	23ff      	movs	r3, #255	; 0xff
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <SSD1306_Fill+0x2c>)
 8000e6e:	f007 f937 	bl	80080e0 <memset>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000330 	.word	0x20000330

08000e80 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	70fb      	strb	r3, [r7, #3]
	if (
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d848      	bhi.n	8000f2a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9c:	d845      	bhi.n	8000f2a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <SSD1306_DrawPixel+0xb8>)
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d11a      	bne.n	8000ef0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000eba:	88fa      	ldrh	r2, [r7, #6]
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	b298      	uxth	r0, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	01db      	lsls	r3, r3, #7
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <SSD1306_DrawPixel+0xbc>)
 8000eca:	5cd3      	ldrb	r3, [r2, r3]
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b259      	sxtb	r1, r3
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	01db      	lsls	r3, r3, #7
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2c9      	uxtb	r1, r1
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <SSD1306_DrawPixel+0xbc>)
 8000eec:	54d1      	strb	r1, [r2, r3]
 8000eee:	e01d      	b.n	8000f2c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	b298      	uxth	r0, r3
 8000ef8:	4603      	mov	r3, r0
 8000efa:	01db      	lsls	r3, r3, #7
 8000efc:	4413      	add	r3, r2
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <SSD1306_DrawPixel+0xbc>)
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
 8000f02:	b25a      	sxtb	r2, r3
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	4013      	ands	r3, r2
 8000f18:	b259      	sxtb	r1, r3
 8000f1a:	88fa      	ldrh	r2, [r7, #6]
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	01db      	lsls	r3, r3, #7
 8000f20:	4413      	add	r3, r2
 8000f22:	b2c9      	uxtb	r1, r1
 8000f24:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SSD1306_DrawPixel+0xbc>)
 8000f26:	54d1      	strb	r1, [r2, r3]
 8000f28:	e000      	b.n	8000f2c <SSD1306_DrawPixel+0xac>
		return;
 8000f2a:	bf00      	nop
	}
}
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000730 	.word	0x20000730
 8000f3c:	20000330 	.word	0x20000330

08000f40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f50:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SSD1306_GotoXY+0x28>)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <SSD1306_GotoXY+0x28>)
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	8053      	strh	r3, [r2, #2]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000730 	.word	0x20000730

08000f6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <SSD1306_Putc+0xfc>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
	if (
 8000f88:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8a:	dc07      	bgt.n	8000f9c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <SSD1306_Putc+0xfc>)
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	461a      	mov	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f98:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9a:	dd01      	ble.n	8000fa0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e05e      	b.n	800105e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e04b      	b.n	800103e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3b20      	subs	r3, #32
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	7849      	ldrb	r1, [r1, #1]
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	440b      	add	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	e030      	b.n	800102c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <SSD1306_Putc+0xfc>)
 8000fdc:	881a      	ldrh	r2, [r3, #0]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b298      	uxth	r0, r3
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <SSD1306_Putc+0xfc>)
 8000fe8:	885a      	ldrh	r2, [r3, #2]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff ff43 	bl	8000e80 <SSD1306_DrawPixel>
 8000ffa:	e014      	b.n	8001026 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <SSD1306_Putc+0xfc>)
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4413      	add	r3, r2
 8001006:	b298      	uxth	r0, r3
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <SSD1306_Putc+0xfc>)
 800100a:	885a      	ldrh	r2, [r3, #2]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b299      	uxth	r1, r3
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	f7ff ff2d 	bl	8000e80 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3301      	adds	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4293      	cmp	r3, r2
 8001036:	d3c8      	bcc.n	8000fca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	461a      	mov	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4293      	cmp	r3, r2
 8001048:	d3ad      	bcc.n	8000fa6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <SSD1306_Putc+0xfc>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SSD1306_Putc+0xfc>)
 800105a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000730 	.word	0x20000730

0800106c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800107a:	e012      	b.n	80010a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff71 	bl	8000f6c <SSD1306_Putc>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d002      	beq.n	800109c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	e008      	b.n	80010ae <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1e8      	bne.n	800107c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fec8 	bl	8000e50 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80010c0:	f7ff fe98 	bl	8000df4 <SSD1306_UpdateScreen>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <ssd1306_I2C_Init+0x28>)
 80010d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010d2:	e002      	b.n	80010da <ssd1306_I2C_Init+0x12>
		p--;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f9      	bne.n	80010d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	0003d090 	.word	0x0003d090

080010f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b0c7      	sub	sp, #284	; 0x11c
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001102:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800110e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001112:	4622      	mov	r2, r4
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800111a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800111e:	4602      	mov	r2, r0
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800112a:	460a      	mov	r2, r1
 800112c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800112e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001136:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800113a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800113e:	7812      	ldrb	r2, [r2, #0]
 8001140:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001142:	2300      	movs	r3, #0
 8001144:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001148:	e015      	b.n	8001176 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800114a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800114e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001152:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	441a      	add	r2, r3
 800115a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800115e:	3301      	adds	r3, #1
 8001160:	7811      	ldrb	r1, [r2, #0]
 8001162:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001166:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800116a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800116c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001170:	3301      	adds	r3, #1
 8001172:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001176:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800117a:	b29b      	uxth	r3, r3
 800117c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001180:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001184:	8812      	ldrh	r2, [r2, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d8df      	bhi.n	800114a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800118a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800118e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b299      	uxth	r1, r3
 8001196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800119a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	200a      	movs	r0, #10
 80011aa:	9000      	str	r0, [sp, #0]
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_I2C_WriteMulti+0xc8>)
 80011ae:	f000 fe8b 	bl	8001ec8 <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	20000230 	.word	0x20000230

080011c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	460b      	mov	r3, r1
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80011d6:	797b      	ldrb	r3, [r7, #5]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	b299      	uxth	r1, r3
 80011de:	f107 020c 	add.w	r2, r7, #12
 80011e2:	230a      	movs	r3, #10
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2302      	movs	r3, #2
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ssd1306_I2C_Write+0x38>)
 80011ea:	f000 fe6d 	bl	8001ec8 <HAL_I2C_Master_Transmit>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000230 	.word	0x20000230

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_MspInit+0x4c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x4c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_I2C_MspInit+0xe8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12c      	bne.n	80012c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <HAL_I2C_MspInit+0xec>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <HAL_I2C_MspInit+0xec>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <HAL_I2C_MspInit+0xec>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129a:	2304      	movs	r3, #4
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <HAL_I2C_MspInit+0xf0>)
 80012a6:	f000 fae3 	bl	8001870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012c6:	e031      	b.n	800132c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <HAL_I2C_MspInit+0xf4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12c      	bne.n	800132c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_I2C_MspInit+0xec>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001300:	2304      	movs	r3, #4
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_I2C_MspInit+0xf0>)
 800130c:	f000 fab0 	bl	8001870 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xec>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_I2C_MspInit+0xec>)
 800131a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_I2C_MspInit+0xec>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	bf00      	nop
 800132e:	3730      	adds	r7, #48	; 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005400 	.word	0x40005400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400
 8001340:	40005800 	.word	0x40005800

08001344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_SPI_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SPI_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_SPI_MspInit+0x88>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800139e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b0:	2305      	movs	r3, #5
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_SPI_MspInit+0x8c>)
 80013bc:	f000 fa58 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40003800 	.word	0x40003800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f8d0 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <OTG_FS_IRQHandler+0x10>)
 800142e:	f001 fe34 	bl	800309a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000c14 	.word	0x20000c14

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f006 fe0e 	bl	800808c <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20020000 	.word	0x20020000
 800149c:	00000400 	.word	0x00000400
 80014a0:	20000738 	.word	0x20000738
 80014a4:	20001040 	.word	0x20001040

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f006 fdcd 	bl	8008098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f887 	bl	8000610 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001510:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8001514:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001518:	20001040 	.word	0x20001040

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f94f 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fe52 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f967 	bl	8001856 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f92f 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000050 	.word	0x20000050
 80015bc:	20000058 	.word	0x20000058
 80015c0:	20000054 	.word	0x20000054

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000058 	.word	0x20000058
 80015e8:	2000073c 	.word	0x2000073c

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000073c 	.word	0x2000073c

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000058 	.word	0x20000058

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff29 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff3e 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff31 	bl	80016b0 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e16b      	b.n	8001b64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 815a 	bne.w	8001b5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80b4 	beq.w	8001b5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x314>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x318>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x31c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x320>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x216>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x212>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_GPIO_Init+0x32c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x20a>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00e      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ada:	4a32      	ldr	r2, [pc, #200]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f ae90 	bls.w	800188c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e12b      	b.n	8001eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff faf0 	bl	800124c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca4:	f002 fe82 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8001ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4a81      	ldr	r2, [pc, #516]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d807      	bhi.n	8001cc4 <HAL_I2C_Init+0x84>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a80      	ldr	r2, [pc, #512]	; (8001eb8 <HAL_I2C_Init+0x278>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	bf94      	ite	ls
 8001cbc:	2301      	movls	r3, #1
 8001cbe:	2300      	movhi	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e006      	b.n	8001cd2 <HAL_I2C_Init+0x92>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a7d      	ldr	r2, [pc, #500]	; (8001ebc <HAL_I2C_Init+0x27c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf94      	ite	ls
 8001ccc:	2301      	movls	r3, #1
 8001cce:	2300      	movhi	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0e7      	b.n	8001eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <HAL_I2C_Init+0x280>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d802      	bhi.n	8001d14 <HAL_I2C_Init+0xd4>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3301      	adds	r3, #1
 8001d12:	e009      	b.n	8001d28 <HAL_I2C_Init+0xe8>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_I2C_Init+0x284>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	3301      	adds	r3, #1
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	495c      	ldr	r1, [pc, #368]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d819      	bhi.n	8001d7c <HAL_I2C_Init+0x13c>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e59      	subs	r1, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_I2C_Init+0x138>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e59      	subs	r1, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d76:	e051      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e04f      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_I2C_Init+0x168>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e012      	b.n	8001dce <HAL_I2C_Init+0x18e>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Init+0x196>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e022      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <HAL_I2C_Init+0x1bc>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1e58      	subs	r0, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	440b      	add	r3, r1
 8001dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfa:	e00f      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	6809      	ldr	r1, [r1, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6911      	ldr	r1, [r2, #16]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68d2      	ldr	r2, [r2, #12]
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	000186a0 	.word	0x000186a0
 8001eb8:	001e847f 	.word	0x001e847f
 8001ebc:	003d08ff 	.word	0x003d08ff
 8001ec0:	431bde83 	.word	0x431bde83
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fb86 	bl	80015ec <HAL_GetTick>
 8001ee0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 80e0 	bne.w	80020b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2319      	movs	r3, #25
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4970      	ldr	r1, [pc, #448]	; (80020bc <HAL_I2C_Master_Transmit+0x1f4>)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fda0 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	e0d3      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_I2C_Master_Transmit+0x50>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0cc      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d007      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2221      	movs	r2, #33	; 0x21
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	893a      	ldrh	r2, [r7, #8]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a50      	ldr	r2, [pc, #320]	; (80020c0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f80:	8979      	ldrh	r1, [r7, #10]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fbf0 	bl	800276c <I2C_MasterRequestWrite>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fac:	e066      	b.n	800207c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fe1a 	bl	8002bec <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_I2C_Master_Transmit+0x188>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d017      	beq.n	8002050 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	6a39      	ldr	r1, [r7, #32]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fe0a 	bl	8002c6e <I2C_WaitOnBTFFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	2b04      	cmp	r3, #4
 8002066:	d107      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e01a      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d194      	bne.n	8001fae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	00100002 	.word	0x00100002
 80020c0:	ffff0000 	.word	0xffff0000

080020c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020de:	f7ff fa85 	bl	80015ec <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	f040 8208 	bne.w	8002502 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2319      	movs	r3, #25
 80020f8:	2201      	movs	r2, #1
 80020fa:	497b      	ldr	r1, [pc, #492]	; (80022e8 <HAL_I2C_Mem_Read+0x224>)
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fc9f 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	e1fb      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_I2C_Mem_Read+0x56>
 8002116:	2302      	movs	r3, #2
 8002118:	e1f4      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d007      	beq.n	8002140 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2222      	movs	r2, #34	; 0x22
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_I2C_Mem_Read+0x228>)
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002182:	88f8      	ldrh	r0, [r7, #6]
 8002184:	893a      	ldrh	r2, [r7, #8]
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4603      	mov	r3, r0
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fb6c 	bl	8002870 <I2C_RequestMemoryRead>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1b0      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d113      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e184      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11b      	bne.n	8002212 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e164      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b02      	cmp	r3, #2
 8002218:	d11b      	bne.n	8002252 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002238:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	e144      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002268:	e138      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b03      	cmp	r3, #3
 8002270:	f200 80f1 	bhi.w	8002456 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b01      	cmp	r3, #1
 800227a:	d123      	bne.n	80022c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fd35 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e139      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c2:	e10b      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d14e      	bne.n	800236a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	2200      	movs	r2, #0
 80022d4:	4906      	ldr	r1, [pc, #24]	; (80022f0 <HAL_I2C_Mem_Read+0x22c>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fbb2 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e10e      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
 80022e6:	bf00      	nop
 80022e8:	00100002 	.word	0x00100002
 80022ec:	ffff0000 	.word	0xffff0000
 80022f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002368:	e0b8      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	2200      	movs	r2, #0
 8002372:	4966      	ldr	r1, [pc, #408]	; (800250c <HAL_I2C_Mem_Read+0x448>)
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fb63 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0bf      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	2200      	movs	r2, #0
 80023ce:	494f      	ldr	r1, [pc, #316]	; (800250c <HAL_I2C_Mem_Read+0x448>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb35 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e091      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002454:	e042      	b.n	80024dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fc48 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e04c      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d118      	bne.n	80024dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f aec2 	bne.w	800226a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	00010004 	.word	0x00010004

08002510 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	460b      	mov	r3, r1
 800251e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff f864 	bl	80015ec <HAL_GetTick>
 8002524:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	f040 8111 	bne.w	800275a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	4988      	ldr	r1, [pc, #544]	; (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa7c 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
 8002550:	e104      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_I2C_IsDeviceReady+0x50>
 800255c:	2302      	movs	r3, #2
 800255e:	e0fd      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d007      	beq.n	8002586 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2224      	movs	r2, #36	; 0x24
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a70      	ldr	r2, [pc, #448]	; (8002768 <HAL_I2C_IsDeviceReady+0x258>)
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa3a 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e0:	d103      	bne.n	80025ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b6      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fff5 	bl	80015ec <HAL_GetTick>
 8002602:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002632:	e025      	b.n	8002680 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002634:	f7fe ffda 	bl	80015ec <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d302      	bcc.n	800264a <HAL_I2C_IsDeviceReady+0x13a>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22a0      	movs	r2, #160	; 0xa0
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2ba0      	cmp	r3, #160	; 0xa0
 800268a:	d005      	beq.n	8002698 <HAL_I2C_IsDeviceReady+0x188>
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x188>
 8002692:	7dbb      	ldrb	r3, [r7, #22]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0cd      	beq.n	8002634 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d129      	bne.n	8002702 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2319      	movs	r3, #25
 80026da:	2201      	movs	r2, #1
 80026dc:	4921      	ldr	r1, [pc, #132]	; (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f9ae 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e036      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e02c      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002710:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800271a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	490f      	ldr	r1, [pc, #60]	; (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f98a 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e012      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3301      	adds	r3, #1
 800273a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	f4ff af32 	bcc.w	80025aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000

0800276c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d006      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00b      	b.n	80027c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d107      	bne.n	80027c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f937 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e035      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e01b      	b.n	8002848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <I2C_MasterRequestWrite+0xfc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f95d 	bl	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e010      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestWrite+0x100>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f94d 	bl	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	460b      	mov	r3, r1
 8002884:	813b      	strh	r3, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8c2 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d103      	bne.n	80028da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0aa      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	4952      	ldr	r1, [pc, #328]	; (8002a3c <I2C_RequestMemoryRead+0x1cc>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8fa 	bl	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e097      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f964 	bl	8002bec <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e076      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e021      	b.n	800299c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29b      	uxth	r3, r3
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f93e 	bl	8002bec <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e050      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	6a39      	ldr	r1, [r7, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f923 	bl	8002bec <I2C_WaitOnTXEFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d107      	bne.n	80029c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e035      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2200      	movs	r2, #0
 80029e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f82b 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fe:	d103      	bne.n	8002a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e013      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	4906      	ldr	r1, [pc, #24]	; (8002a3c <I2C_RequestMemoryRead+0x1cc>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f863 	bl	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	00010002 	.word	0x00010002

08002a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	e025      	b.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d021      	beq.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe fdc7 	bl	80015ec <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f043 0220 	orr.w	r2, r3, #32
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e023      	b.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10d      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	e00c      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d0b6      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002afc:	e051      	b.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	d123      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e046      	b.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d021      	beq.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7fe fd45 	bl	80015ec <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d302      	bcc.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e020      	b.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e00b      	b.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d18d      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf8:	e02d      	b.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8ce 	bl	8002d9c <I2C_IsAcknowledgeFailed>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e02d      	b.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d021      	beq.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe fceb 	bl	80015ec <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e007      	b.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d1ca      	bne.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7a:	e02d      	b.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f88d 	bl	8002d9c <I2C_IsAcknowledgeFailed>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e02d      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d021      	beq.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c94:	f7fe fcaa 	bl	80015ec <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d302      	bcc.n	8002caa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d1ca      	bne.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfc:	e042      	b.n	8002d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d119      	bne.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0210 	mvn.w	r2, #16
 8002d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e029      	b.n	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe fc54 	bl	80015ec <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e007      	b.n	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d1b5      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d11b      	bne.n	8002dec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfc:	b08f      	sub	sp, #60	; 0x3c
 8002dfe:	af0a      	add	r7, sp, #40	; 0x28
 8002e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e10f      	b.n	800302c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f004 fe2e 	bl	8007a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 ff5f 	bl	8004d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	687e      	ldr	r6, [r7, #4]
 8002e58:	466d      	mov	r5, sp
 8002e5a:	f106 0410 	add.w	r4, r6, #16
 8002e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e6e:	1d33      	adds	r3, r6, #4
 8002e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	f001 fe37 	bl	8004ae6 <USB_CoreInit>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0d0      	b.n	800302c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 ff4d 	bl	8004d30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e04a      	b.n	8002f32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333d      	adds	r3, #61	; 0x3d
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	333c      	adds	r3, #60	; 0x3c
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	b298      	uxth	r0, r3
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3342      	adds	r3, #66	; 0x42
 8002ed8:	4602      	mov	r2, r0
 8002eda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	333f      	adds	r3, #63	; 0x3f
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3344      	adds	r3, #68	; 0x44
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3348      	adds	r3, #72	; 0x48
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3350      	adds	r3, #80	; 0x50
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3af      	bcc.n	8002e9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e044      	b.n	8002fcc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b5      	bcc.n	8002f42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	687e      	ldr	r6, [r7, #4]
 8002fde:	466d      	mov	r5, sp
 8002fe0:	f106 0410 	add.w	r4, r6, #16
 8002fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ff0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ff4:	1d33      	adds	r3, r6, #4
 8002ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff8:	6838      	ldr	r0, [r7, #0]
 8002ffa:	f001 fee5 	bl	8004dc8 <USB_DevInit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e00d      	b.n	800302c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f002 ff61 	bl	8005eec <USB_DevDisconnect>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003034 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_Start+0x1c>
 800304c:	2302      	movs	r3, #2
 800304e:	e020      	b.n	8003092 <HAL_PCD_Start+0x5e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	2b01      	cmp	r3, #1
 800305e:	d109      	bne.n	8003074 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003064:	2b01      	cmp	r3, #1
 8003066:	d005      	beq.n	8003074 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fe37 	bl	8004cec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 ff11 	bl	8005eaa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800309a:	b590      	push	{r4, r7, lr}
 800309c:	b08d      	sub	sp, #52	; 0x34
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 ffcf 	bl	8006054 <USB_GetMode>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 839d 	bne.w	80037f8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 ff33 	bl	8005f2e <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8393 	beq.w	80037f6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 ff2a 	bl	8005f2e <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d107      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f002 0202 	and.w	r2, r2, #2
 80030f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 ff18 	bl	8005f2e <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d161      	bne.n	80031cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0210 	bic.w	r2, r2, #16
 8003116:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	0c5b      	lsrs	r3, r3, #17
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	2b02      	cmp	r3, #2
 8003142:	d124      	bne.n	800318e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d035      	beq.n	80031bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800315a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315e:	b29b      	uxth	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	6a38      	ldr	r0, [r7, #32]
 8003164:	f002 fd4f 	bl	8005c06 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003174:	441a      	add	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003186:	441a      	add	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	619a      	str	r2, [r3, #24]
 800318c:	e016      	b.n	80031bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	0c5b      	lsrs	r3, r3, #17
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	2b06      	cmp	r3, #6
 8003198:	d110      	bne.n	80031bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a0:	2208      	movs	r2, #8
 80031a2:	4619      	mov	r1, r3
 80031a4:	6a38      	ldr	r0, [r7, #32]
 80031a6:	f002 fd2e 	bl	8005c06 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b6:	441a      	add	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0210 	orr.w	r2, r2, #16
 80031ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 feac 	bl	8005f2e <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e0:	d16e      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 feb2 	bl	8005f54 <USB_ReadDevAllOutEpInterrupt>
 80031f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031f2:	e062      	b.n	80032ba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d057      	beq.n	80032ae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f002 fed7 	bl	8005fbc <USB_ReadDevOutEPInterrupt>
 800320e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	461a      	mov	r2, r3
 8003228:	2301      	movs	r3, #1
 800322a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800322c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fd98 	bl	8003d64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	2308      	movs	r3, #8
 800324e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fe92 	bl	8003f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2310      	movs	r3, #16
 8003272:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	2320      	movs	r3, #32
 800328e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	461a      	mov	r2, r3
 80032a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d199      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 fe32 	bl	8005f2e <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d4:	f040 80c0 	bne.w	8003458 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f002 fe53 	bl	8005f88 <USB_ReadDevAllInEpInterrupt>
 80032e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032e8:	e0b2      	b.n	8003450 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a7 	beq.w	8003444 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fe79 	bl	8005ff8 <USB_ReadDevInEPInterrupt>
 8003306:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d057      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	2201      	movs	r2, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43db      	mvns	r3, r3
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003332:	4013      	ands	r3, r2
 8003334:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	461a      	mov	r2, r3
 8003344:	2301      	movs	r3, #1
 8003346:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d132      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3348      	adds	r3, #72	; 0x48
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4403      	add	r3, r0
 8003370:	3344      	adds	r3, #68	; 0x44
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4419      	add	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	3348      	adds	r3, #72	; 0x48
 8003386:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x31c>
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3350      	adds	r3, #80	; 0x50
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033ae:	461a      	mov	r2, r3
 80033b0:	2101      	movs	r1, #1
 80033b2:	f002 fe81 	bl	80060b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f004 fbe4 	bl	8007b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d8:	461a      	mov	r2, r3
 80033da:	2308      	movs	r3, #8
 80033dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f4:	461a      	mov	r2, r3
 80033f6:	2310      	movs	r3, #16
 80033f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003410:	461a      	mov	r2, r3
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	461a      	mov	r2, r3
 800342e:	2302      	movs	r3, #2
 8003430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800343c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fc03 	bl	8003c4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	3301      	adds	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	f47f af49 	bne.w	80032ea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f002 fd66 	bl	8005f2e <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346c:	d122      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fe0e 	bl	80040b8 <HAL_PCDEx_LPM_Callback>
 800349c:	e002      	b.n	80034a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f004 fbea 	bl	8007c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 fd38 	bl	8005f2e <USB_ReadInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c8:	d112      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f004 fba6 	bl	8007c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fd1a 	bl	8005f2e <USB_ReadInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	f040 80c7 	bne.w	8003696 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2110      	movs	r1, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fdb4 	bl	8005090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	e056      	b.n	80035dc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353a:	461a      	mov	r2, r3
 800353c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003540:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003552:	0151      	lsls	r1, r2, #5
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	440a      	add	r2, r1
 8003558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003560:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	440a      	add	r2, r1
 8003578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003580:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003594:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	3301      	adds	r3, #1
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3a3      	bcc.n	800352e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003612:	f043 030b 	orr.w	r3, r3, #11
 8003616:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003628:	f043 030b 	orr.w	r3, r3, #11
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	e015      	b.n	800365c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003642:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003646:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f043 030b 	orr.w	r3, r3, #11
 800365a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800366e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003680:	461a      	mov	r2, r3
 8003682:	f002 fd19 	bl	80060b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fc47 	bl	8005f2e <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	d124      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 fcdd 	bl	8006070 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fd45 	bl	800514a <USB_GetDevSpeed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681c      	ldr	r4, [r3, #0]
 80036cc:	f001 f962 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80036d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4620      	mov	r0, r4
 80036dc:	f001 fa64 	bl	8004ba8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f004 fa7a 	bl	8007bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 fc17 	bl	8005f2e <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d10a      	bne.n	8003720 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f004 fa57 	bl	8007bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 0208 	and.w	r2, r2, #8
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fc02 	bl	8005f2e <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003734:	d10f      	bne.n	8003756 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f004 fab9 	bl	8007cb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fbe7 	bl	8005f2e <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376a:	d10f      	bne.n	800378c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f004 fa8c 	bl	8007c94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800378a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fbcc 	bl	8005f2e <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d10a      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f004 fa9a 	bl	8007cdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fbb6 	bl	8005f2e <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d115      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f004 fa8a 	bl	8007cf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	e000      	b.n	80037f8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80037f6:	bf00      	nop
    }
  }
}
 80037f8:	3734      	adds	r7, #52	; 0x34
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}

080037fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_PCD_SetAddress+0x1a>
 8003814:	2302      	movs	r3, #2
 8003816:	e013      	b.n	8003840 <HAL_PCD_SetAddress+0x42>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f002 fb14 	bl	8005e5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	70fb      	strb	r3, [r7, #3]
 800385a:	460b      	mov	r3, r1
 800385c:	803b      	strh	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da0f      	bge.n	800388e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3338      	adds	r3, #56	; 0x38
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
 800388c:	e00f      	b.n	80038ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038ba:	883a      	ldrh	r2, [r7, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	78ba      	ldrb	r2, [r7, #2]
 80038c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038d8:	78bb      	ldrb	r3, [r7, #2]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d102      	bne.n	80038e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_Open+0xaa>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_Open+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fc47 	bl	8005194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800390e:	7afb      	ldrb	r3, [r7, #11]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003928:	2b00      	cmp	r3, #0
 800392a:	da0f      	bge.n	800394c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	3338      	adds	r3, #56	; 0x38
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	705a      	strb	r2, [r3, #1]
 800394a:	e00f      	b.n	800396c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_PCD_EP_Close+0x6e>
 8003982:	2302      	movs	r3, #2
 8003984:	e00e      	b.n	80039a4 <HAL_PCD_EP_Close+0x8c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fc85 	bl	80052a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	460b      	mov	r3, r1
 80039ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	3304      	adds	r3, #4
 80039d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ee:	7afb      	ldrb	r3, [r7, #11]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	f001 ff60 	bl	80058e4 <USB_EP0StartXfer>
 8003a24:	e008      	b.n	8003a38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	f001 fd12 	bl	800545c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	f001 ff16 	bl	80058e4 <USB_EP0StartXfer>
 8003ab8:	e008      	b.n	8003acc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	f001 fcc8 	bl	800545c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d901      	bls.n	8003af4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e050      	b.n	8003b96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da0f      	bge.n	8003b1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	3338      	adds	r3, #56	; 0x38
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	705a      	strb	r2, [r3, #1]
 8003b1a:	e00d      	b.n	8003b38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_PCD_EP_SetStall+0x82>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e01e      	b.n	8003b96 <HAL_PCD_EP_SetStall+0xc0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 f8a5 	bl	8005cb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	b2d9      	uxtb	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b86:	461a      	mov	r2, r3
 8003b88:	f002 fa96 	bl	80060b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d901      	bls.n	8003bbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e042      	b.n	8003c42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da0f      	bge.n	8003be4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3338      	adds	r3, #56	; 0x38
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	705a      	strb	r2, [r3, #1]
 8003be2:	e00f      	b.n	8003c04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_ClrStall+0x86>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e00e      	b.n	8003c42 <HAL_PCD_EP_ClrStall+0xa4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f002 f8ad 	bl	8005d92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	3338      	adds	r3, #56	; 0x38
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d901      	bls.n	8003c82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06c      	b.n	8003d5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d902      	bls.n	8003c9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca6:	e02b      	b.n	8003d00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d902      	bls.n	8003cc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3303      	adds	r3, #3
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f001 ff51 	bl	8005b8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d809      	bhi.n	8003d2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d203      	bcs.n	8003d2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1be      	bne.n	8003ca8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d811      	bhi.n	8003d5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	6939      	ldr	r1, [r7, #16]
 8003d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d56:	4013      	ands	r3, r2
 8003d58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	333c      	adds	r3, #60	; 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 80a0 	bne.w	8003edc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d015      	beq.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f240 80dd 	bls.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80d7 	beq.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	e0cb      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	2320      	movs	r3, #32
 8003dec:	6093      	str	r3, [r2, #8]
 8003dee:	e0bc      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 80b7 	bne.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a5d      	ldr	r2, [pc, #372]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d90f      	bls.n	8003e24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e0a2      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	0159      	lsls	r1, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	440b      	add	r3, r1
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4403      	add	r3, r0
 8003e5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4419      	add	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4403      	add	r3, r0
 8003e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d114      	bne.n	8003ece <PCD_EP_OutXfrComplete_int+0x16a>
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2101      	movs	r1, #1
 8003eca:	f002 f8f5 	bl	80060b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f003 fe3d 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
 8003eda:	e046      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d124      	bne.n	8003f2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	e032      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f003 fe14 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
 8003f2c:	e01d      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d114      	bne.n	8003f5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f56:	461a      	mov	r2, r3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f002 f8ad 	bl	80060b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f003 fdf5 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	4f54300a 	.word	0x4f54300a
 8003f78:	4f54310a 	.word	0x4f54310a

08003f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	333c      	adds	r3, #60	; 0x3c
 8003f94:	3304      	adds	r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d90e      	bls.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f003 fdad 	bl	8007b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d90c      	bls.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	f002 f860 	bl	80060b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	4f54300a 	.word	0x4f54300a

08004008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
 8004014:	4613      	mov	r3, r2
 8004016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004026:	883b      	ldrh	r3, [r7, #0]
 8004028:	0419      	lsls	r1, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
 8004034:	e028      	b.n	8004088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e00d      	b.n	8004066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4413      	add	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3301      	adds	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	3b01      	subs	r3, #1
 800406c:	429a      	cmp	r2, r3
 800406e:	d3ec      	bcc.n	800404a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004070:	883b      	ldrh	r3, [r7, #0]
 8004072:	0418      	lsls	r0, r3, #16
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	3b01      	subs	r3, #1
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4302      	orrs	r2, r0
 8004080:	3340      	adds	r3, #64	; 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e267      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e242      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a75      	ldr	r2, [pc, #468]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b70      	ldr	r3, [pc, #448]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6f      	ldr	r2, [pc, #444]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6c      	ldr	r2, [pc, #432]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd fa30 	bl	80015ec <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd fa2c 	bl	80015ec <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e207      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd fa1c 	bl	80015ec <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd fa18 	bl	80015ec <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f3      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c7      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd f9d1 	bl	80015ec <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd f9cd 	bl	80015ec <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a8      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4925      	ldr	r1, [pc, #148]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd f9b0 	bl	80015ec <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd f9ac 	bl	80015ec <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e187      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d036      	beq.n	8004328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd f990 	bl	80015ec <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd f98c 	bl	80015ec <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e167      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e01b      	b.n	8004328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd f979 	bl	80015ec <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e00e      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd f975 	bl	80015ec <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d907      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e150      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	42470000 	.word	0x42470000
 8004318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ea      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8097 	beq.w	8004464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b81      	ldr	r3, [pc, #516]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b7d      	ldr	r3, [pc, #500]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a7c      	ldr	r2, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b77      	ldr	r3, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b74      	ldr	r3, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd f935 	bl	80015ec <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd f931 	bl	80015ec <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e10c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x2ea>
 80043ac:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e01c      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x30c>
 80043c2:	4b5f      	ldr	r3, [pc, #380]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a5e      	ldr	r2, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043dc:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd f8f6 	bl	80015ec <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd f8f2 	bl	80015ec <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0cb      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCC_OscConfig+0x334>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004428:	f7fd f8e0 	bl	80015ec <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd f8dc 	bl	80015ec <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b5      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004452:	7dfb      	ldrb	r3, [r7, #23]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80a1 	beq.w	80045b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d05c      	beq.n	8004534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d141      	bne.n	8004506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd f8b0 	bl	80015ec <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd f8ac 	bl	80015ec <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e087      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd f885 	bl	80015ec <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd f881 	bl	80015ec <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e05c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x416>
 8004504:	e054      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd f86e 	bl	80015ec <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd f86a 	bl	80015ec <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e045      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x444>
 8004532:	e03d      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e038      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d028      	beq.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d121      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d11a      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fc ff9c 	bl	80015ec <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fc ff98 	bl	80015ec <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fefc 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08009f40 	.word	0x08009f40
 8004784:	20000050 	.word	0x20000050
 8004788:	20000054 	.word	0x20000054

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b094      	sub	sp, #80	; 0x50
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	2300      	movs	r3, #0
 800479e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80e1 	bhi.w	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0db      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047c4:	e0db      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ca:	e0d8      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b6f      	ldr	r3, [pc, #444]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	2200      	movs	r2, #0
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	0159      	lsls	r1, r3, #5
 800480c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004810:	0150      	lsls	r0, r2, #5
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4621      	mov	r1, r4
 8004818:	1a51      	subs	r1, r2, r1
 800481a:	6139      	str	r1, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483a:	4651      	mov	r1, sl
 800483c:	018a      	lsls	r2, r1, #6
 800483e:	4651      	mov	r1, sl
 8004840:	ebb2 0801 	subs.w	r8, r2, r1
 8004844:	4659      	mov	r1, fp
 8004846:	eb63 0901 	sbc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	462b      	mov	r3, r5
 800486c:	eb49 0303 	adc.w	r3, r9, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487e:	4629      	mov	r1, r5
 8004880:	028b      	lsls	r3, r1, #10
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004888:	4621      	mov	r1, r4
 800488a:	028a      	lsls	r2, r1, #10
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800489c:	f7fb fce8 	bl	8000270 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	e058      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	4611      	mov	r1, r2
 80048b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d6:	0150      	lsls	r0, r2, #5
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4641      	mov	r1, r8
 80048de:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004900:	eb63 050b 	sbc.w	r5, r3, fp
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	464b      	mov	r3, r9
 8004920:	eb45 0303 	adc.w	r3, r5, r3
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	f7fb fc8e 	bl	8000270 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800496c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004980:	4618      	mov	r0, r3
 8004982:	3750      	adds	r7, #80	; 0x50
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	00f42400 	.word	0x00f42400

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000050 	.word	0x20000050

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	08009f50 	.word	0x08009f50

080049d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07b      	b.n	8004ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d108      	bne.n	8004a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f6:	d009      	beq.n	8004a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	e005      	b.n	8004a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fc8c 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	ea42 0103 	orr.w	r1, r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0104 	and.w	r1, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0210 	and.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	f107 001c 	add.w	r0, r7, #28
 8004af4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d122      	bne.n	8004b44 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fb1b 	bl	8006174 <USB_CoreReset>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	e01a      	b.n	8004b7a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 fb0f 	bl	8006174 <USB_CoreReset>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b6c:	e005      	b.n	8004b7a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10b      	bne.n	8004b98 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f043 0206 	orr.w	r2, r3, #6
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba4:	b004      	add	sp, #16
 8004ba6:	4770      	bx	lr

08004ba8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d165      	bne.n	8004c88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a41      	ldr	r2, [pc, #260]	; (8004cc4 <USB_SetTurnaroundTime+0x11c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d906      	bls.n	8004bd2 <USB_SetTurnaroundTime+0x2a>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <USB_SetTurnaroundTime+0x120>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d202      	bcs.n	8004bd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bcc:	230f      	movs	r3, #15
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e062      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <USB_SetTurnaroundTime+0x120>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d306      	bcc.n	8004be8 <USB_SetTurnaroundTime+0x40>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a3b      	ldr	r2, [pc, #236]	; (8004ccc <USB_SetTurnaroundTime+0x124>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d202      	bcs.n	8004be8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004be2:	230e      	movs	r3, #14
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e057      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <USB_SetTurnaroundTime+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d306      	bcc.n	8004bfe <USB_SetTurnaroundTime+0x56>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <USB_SetTurnaroundTime+0x128>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d202      	bcs.n	8004bfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bf8:	230d      	movs	r3, #13
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	e04c      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a33      	ldr	r2, [pc, #204]	; (8004cd0 <USB_SetTurnaroundTime+0x128>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d306      	bcc.n	8004c14 <USB_SetTurnaroundTime+0x6c>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a32      	ldr	r2, [pc, #200]	; (8004cd4 <USB_SetTurnaroundTime+0x12c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d802      	bhi.n	8004c14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c0e:	230c      	movs	r3, #12
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e041      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <USB_SetTurnaroundTime+0x12c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d906      	bls.n	8004c2a <USB_SetTurnaroundTime+0x82>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a2e      	ldr	r2, [pc, #184]	; (8004cd8 <USB_SetTurnaroundTime+0x130>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d802      	bhi.n	8004c2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c24:	230b      	movs	r3, #11
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e036      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <USB_SetTurnaroundTime+0x130>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d906      	bls.n	8004c40 <USB_SetTurnaroundTime+0x98>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4a29      	ldr	r2, [pc, #164]	; (8004cdc <USB_SetTurnaroundTime+0x134>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d802      	bhi.n	8004c40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e02b      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <USB_SetTurnaroundTime+0x134>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d906      	bls.n	8004c56 <USB_SetTurnaroundTime+0xae>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <USB_SetTurnaroundTime+0x138>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d202      	bcs.n	8004c56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c50:	2309      	movs	r3, #9
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e020      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <USB_SetTurnaroundTime+0x138>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d306      	bcc.n	8004c6c <USB_SetTurnaroundTime+0xc4>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <USB_SetTurnaroundTime+0x13c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d802      	bhi.n	8004c6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c66:	2308      	movs	r3, #8
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e015      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <USB_SetTurnaroundTime+0x13c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d906      	bls.n	8004c82 <USB_SetTurnaroundTime+0xda>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <USB_SetTurnaroundTime+0x140>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d202      	bcs.n	8004c82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c7c:	2307      	movs	r3, #7
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e00a      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c82:	2306      	movs	r3, #6
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e007      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c8e:	2309      	movs	r3, #9
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e001      	b.n	8004c98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c94:	2309      	movs	r3, #9
 8004c96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	029b      	lsls	r3, r3, #10
 8004cac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	00d8acbf 	.word	0x00d8acbf
 8004cc8:	00e4e1c0 	.word	0x00e4e1c0
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	01067380 	.word	0x01067380
 8004cd4:	011a499f 	.word	0x011a499f
 8004cd8:	01312cff 	.word	0x01312cff
 8004cdc:	014ca43f 	.word	0x014ca43f
 8004ce0:	016e3600 	.word	0x016e3600
 8004ce4:	01a6ab1f 	.word	0x01a6ab1f
 8004ce8:	01e84800 	.word	0x01e84800

08004cec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d115      	bne.n	8004d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f7fc fc50 	bl	8001604 <HAL_Delay>
      ms++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 f972 	bl	8006054 <USB_GetMode>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d01e      	beq.n	8004db4 <USB_SetCurrentMode+0x84>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b31      	cmp	r3, #49	; 0x31
 8004d7a:	d9f0      	bls.n	8004d5e <USB_SetCurrentMode+0x2e>
 8004d7c:	e01a      	b.n	8004db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d115      	bne.n	8004db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d90:	2001      	movs	r0, #1
 8004d92:	f7fc fc37 	bl	8001604 <HAL_Delay>
      ms++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f001 f959 	bl	8006054 <USB_GetMode>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <USB_SetCurrentMode+0x84>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b31      	cmp	r3, #49	; 0x31
 8004dac:	d9f0      	bls.n	8004d90 <USB_SetCurrentMode+0x60>
 8004dae:	e001      	b.n	8004db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e005      	b.n	8004dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b32      	cmp	r3, #50	; 0x32
 8004db8:	d101      	bne.n	8004dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc8:	b084      	sub	sp, #16
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e009      	b.n	8004dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3340      	adds	r3, #64	; 0x40
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0e      	cmp	r3, #14
 8004e00:	d9f2      	bls.n	8004de8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11c      	bne.n	8004e42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e40:	e00b      	b.n	8004e5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	461a      	mov	r2, r3
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10c      	bne.n	8004e9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d104      	bne.n	8004e90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e86:	2100      	movs	r1, #0
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f945 	bl	8005118 <USB_SetDevSpeed>
 8004e8e:	e008      	b.n	8004ea2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e90:	2101      	movs	r1, #1
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f940 	bl	8005118 <USB_SetDevSpeed>
 8004e98:	e003      	b.n	8004ea2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f93b 	bl	8005118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ea2:	2110      	movs	r1, #16
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8f3 	bl	8005090 <USB_FlushTxFifo>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f90f 	bl	80050d8 <USB_FlushRxFifo>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e043      	b.n	8004f76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f04:	d118      	bne.n	8004f38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e013      	b.n	8004f4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e008      	b.n	8004f4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3301      	adds	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3b7      	bcc.n	8004eee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e043      	b.n	800500c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9a:	d118      	bne.n	8004fce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e013      	b.n	8004fe0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e008      	b.n	8004fe0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d3b7      	bcc.n	8004f84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f043 0210 	orr.w	r2, r3, #16
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <USB_DevInit+0x2c4>)
 800504e:	4313      	orrs	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f043 0208 	orr.w	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d107      	bne.n	800507c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005088:	b004      	add	sp, #16
 800508a:	4770      	bx	lr
 800508c:	803c3800 	.word	0x803c3800

08005090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	019b      	lsls	r3, r3, #6
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <USB_FlushTxFifo+0x44>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d0f1      	beq.n	80050aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	00030d40 	.word	0x00030d40

080050d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2210      	movs	r2, #16
 80050e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	4a08      	ldr	r2, [pc, #32]	; (8005114 <USB_FlushRxFifo+0x3c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e006      	b.n	8005108 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d0f1      	beq.n	80050ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	00030d40 	.word	0x00030d40

08005118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b087      	sub	sp, #28
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]
 800516e:	e00a      	b.n	8005186 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d002      	beq.n	800517c <USB_GetDevSpeed+0x32>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d102      	bne.n	8005182 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800517c:	2302      	movs	r3, #2
 800517e:	75fb      	strb	r3, [r7, #23]
 8005180:	e001      	b.n	8005186 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005182:	230f      	movs	r3, #15
 8005184:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005186:	7dfb      	ldrb	r3, [r7, #23]
}
 8005188:	4618      	mov	r0, r3
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d13a      	bne.n	8005226 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d155      	bne.n	8005294 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005204:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	059b      	lsls	r3, r3, #22
 800520a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800520c:	4313      	orrs	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e036      	b.n	8005294 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	2101      	movs	r1, #1
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005244:	4313      	orrs	r3, r2
 8005246:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11a      	bne.n	8005294 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	78db      	ldrb	r3, [r3, #3]
 8005278:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800527a:	430b      	orrs	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005292:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d161      	bne.n	8005384 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d6:	d11f      	bne.n	8005318 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4013      	ands	r3, r2
 800533a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535c:	4013      	ands	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	0159      	lsls	r1, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	440b      	add	r3, r1
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	4619      	mov	r1, r3
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <USB_DeactivateEndpoint+0x1b0>)
 800537e:	4013      	ands	r3, r2
 8005380:	600b      	str	r3, [r1, #0]
 8005382:	e060      	b.n	8005446 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d11f      	bne.n	80053dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	43db      	mvns	r3, r3
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4013      	ands	r3, r2
 80053fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	43db      	mvns	r3, r3
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005420:	4013      	ands	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0159      	lsls	r1, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	440b      	add	r3, r1
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	4619      	mov	r1, r3
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <USB_DeactivateEndpoint+0x1b4>)
 8005442:	4013      	ands	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	ec337800 	.word	0xec337800
 8005458:	eff37800 	.word	0xeff37800

0800545c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 815c 	bne.w	8005736 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d132      	bne.n	80054ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	0cdb      	lsrs	r3, r3, #19
 80054e6:	04db      	lsls	r3, r3, #19
 80054e8:	6113      	str	r3, [r2, #16]
 80054ea:	e074      	b.n	80055d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	0cdb      	lsrs	r3, r3, #19
 8005508:	04db      	lsls	r3, r3, #19
 800550a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800552a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800552e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6959      	ldr	r1, [r3, #20]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	440b      	add	r3, r1
 8005548:	1e59      	subs	r1, r3, #1
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005552:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005554:	4b9d      	ldr	r3, [pc, #628]	; (80057cc <USB_EPStartXfer+0x370>)
 8005556:	400b      	ands	r3, r1
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	0148      	lsls	r0, r1, #5
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	4401      	add	r1, r0
 8005560:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	0148      	lsls	r0, r1, #5
 8005582:	69f9      	ldr	r1, [r7, #28]
 8005584:	4401      	add	r1, r0
 8005586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800558a:	4313      	orrs	r3, r2
 800558c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	78db      	ldrb	r3, [r3, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d11f      	bne.n	80055d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d14b      	bne.n	8005674 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d128      	bne.n	8005652 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d110      	bne.n	8005632 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e00f      	b.n	8005652 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e12f      	b.n	80058d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005692:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d015      	beq.n	80056c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8117 	beq.w	80058d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c2:	4313      	orrs	r3, r2
 80056c4:	634b      	str	r3, [r1, #52]	; 0x34
 80056c6:	e105      	b.n	80058d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d110      	bne.n	80056fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e00f      	b.n	800571a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005718:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	68d9      	ldr	r1, [r3, #12]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	b298      	uxth	r0, r3
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4603      	mov	r3, r0
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fa2b 	bl	8005b8a <USB_WritePacket>
 8005734:	e0ce      	b.n	80058d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005750:	0cdb      	lsrs	r3, r3, #19
 8005752:	04db      	lsls	r3, r3, #19
 8005754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005778:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d126      	bne.n	80057d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	0148      	lsls	r0, r1, #5
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	4401      	add	r1, r0
 80057a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057a4:	4313      	orrs	r3, r2
 80057a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c6:	6113      	str	r3, [r2, #16]
 80057c8:	e036      	b.n	8005838 <USB_EPStartXfer+0x3dc>
 80057ca:	bf00      	nop
 80057cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4413      	add	r3, r2
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	8afb      	ldrh	r3, [r7, #22]
 80057f6:	04d9      	lsls	r1, r3, #19
 80057f8:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <USB_EPStartXfer+0x484>)
 80057fa:	400b      	ands	r3, r1
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	0148      	lsls	r0, r1, #5
 8005800:	69f9      	ldr	r1, [r7, #28]
 8005802:	4401      	add	r1, r0
 8005804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005808:	4313      	orrs	r3, r2
 800580a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	8af9      	ldrh	r1, [r7, #22]
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	0148      	lsls	r0, r1, #5
 800582c:	69f9      	ldr	r1, [r7, #28]
 800582e:	4401      	add	r1, r0
 8005830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005834:	4313      	orrs	r3, r2
 8005836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10d      	bne.n	800585a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68d9      	ldr	r1, [r3, #12]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	460a      	mov	r2, r1
 8005858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	78db      	ldrb	r3, [r3, #3]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d128      	bne.n	80058b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d110      	bne.n	8005894 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e00f      	b.n	80058b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	1ff80000 	.word	0x1ff80000

080058e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	f040 80cd 	bne.w	8005aa0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d132      	bne.n	8005974 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800592c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	0cdb      	lsrs	r3, r3, #19
 800596e:	04db      	lsls	r3, r3, #19
 8005970:	6113      	str	r3, [r2, #16]
 8005972:	e04e      	b.n	8005a12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	0cdb      	lsrs	r3, r3, #19
 8005990:	04db      	lsls	r3, r3, #19
 8005992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	0148      	lsls	r0, r1, #5
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	4401      	add	r1, r0
 8005a0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d11e      	bne.n	8005a56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	e092      	b.n	8005b7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d07e      	beq.n	8005b7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	6979      	ldr	r1, [r7, #20]
 8005a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a9e:	e06d      	b.n	8005b7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	0cdb      	lsrs	r3, r3, #19
 8005abc:	04db      	lsls	r3, r3, #19
 8005abe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ade:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ae2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10d      	bne.n	8005b5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68d9      	ldr	r1, [r3, #12]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	460a      	mov	r2, r1
 8005b5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b089      	sub	sp, #36	; 0x24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	4611      	mov	r1, r2
 8005b96:	461a      	mov	r2, r3
 8005b98:	460b      	mov	r3, r1
 8005b9a:	71fb      	strb	r3, [r7, #7]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d123      	bne.n	8005bf8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bb0:	88bb      	ldrh	r3, [r7, #4]
 8005bb2:	3303      	adds	r3, #3
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e018      	b.n	8005bf0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	031a      	lsls	r2, r3, #12
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bca:	461a      	mov	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3301      	adds	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3301      	adds	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3301      	adds	r3, #1
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d3e2      	bcc.n	8005bbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b08b      	sub	sp, #44	; 0x2c
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	e014      	b.n	8005c5c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	3301      	adds	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	3301      	adds	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	3301      	adds	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d3e6      	bcc.n	8005c32 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01e      	beq.n	8005ca8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c74:	461a      	mov	r2, r3
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	701a      	strb	r2, [r3, #0]
      i++;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	3301      	adds	r3, #1
 8005c94:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	3301      	adds	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ca2:	8bfb      	ldrh	r3, [r7, #30]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ea      	bne.n	8005c7e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	372c      	adds	r7, #44	; 0x2c
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d12c      	bne.n	8005d2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db12      	blt.n	8005d0a <USB_EPSetStall+0x54>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00f      	beq.n	8005d0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e02b      	b.n	8005d84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db12      	blt.n	8005d64 <USB_EPSetStall+0xae>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00f      	beq.n	8005d64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d128      	bne.n	8005e00 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d003      	beq.n	8005dde <USB_EPClearStall+0x4c>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d138      	bne.n	8005e50 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e027      	b.n	8005e50 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d003      	beq.n	8005e30 <USB_EPClearStall+0x9e>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d10f      	bne.n	8005e50 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed8:	f023 0302 	bic.w	r3, r3, #2
 8005edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f46:	68fb      	ldr	r3, [r7, #12]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4013      	ands	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	b29b      	uxth	r3, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fea:	68bb      	ldr	r3, [r7, #8]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	01db      	lsls	r3, r3, #7
 800602a:	b2db      	uxtb	r3, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006046:	68bb      	ldr	r3, [r7, #8]
}
 8006048:	4618      	mov	r0, r3
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0301 	and.w	r3, r3, #1
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800608e:	f023 0307 	bic.w	r3, r3, #7
 8006092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	460b      	mov	r3, r1
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	333c      	adds	r3, #60	; 0x3c
 80060ce:	3304      	adds	r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4a26      	ldr	r2, [pc, #152]	; (8006170 <USB_EP0_OutStart+0xb8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d90a      	bls.n	80060f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ec:	d101      	bne.n	80060f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e037      	b.n	8006162 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006120:	f043 0318 	orr.w	r3, r3, #24
 8006124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006134:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006138:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10f      	bne.n	8006160 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800615e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	4f54300a 	.word	0x4f54300a

08006174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4a13      	ldr	r2, [pc, #76]	; (80061d4 <USB_CoreReset+0x60>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e01a      	b.n	80061c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	daf3      	bge.n	8006180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f043 0201 	orr.w	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <USB_CoreReset+0x60>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e006      	b.n	80061c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d0f1      	beq.n	80061a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	00030d40 	.word	0x00030d40

080061d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80061e4:	2010      	movs	r0, #16
 80061e6:	f001 ff0d 	bl	8008004 <USBD_static_malloc>
 80061ea:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01b      	b.n	8006236 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7c1b      	ldrb	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2207      	movs	r2, #7
 8006212:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006214:	e002      	b.n	800621c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	220a      	movs	r2, #10
 800621a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800621c:	2304      	movs	r3, #4
 800621e:	2203      	movs	r2, #3
 8006220:	2181      	movs	r1, #129	; 0x81
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fddd 	bl	8007de2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800624a:	2181      	movs	r1, #129	; 0x81
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fdee 	bl	8007e2e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fed6 	bl	8008020 <USBD_static_free>
    pdev->pClassData = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006298:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0e8      	b.n	800647e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d046      	beq.n	8006346 <USBD_HID_Setup+0xbe>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	f040 80d8 	bne.w	800646e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	3b02      	subs	r3, #2
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d836      	bhi.n	8006336 <USBD_HID_Setup+0xae>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USBD_HID_Setup+0x48>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006327 	.word	0x08006327
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006337 	.word	0x08006337
 80062dc:	08006337 	.word	0x08006337
 80062e0:	08006337 	.word	0x08006337
 80062e4:	08006337 	.word	0x08006337
 80062e8:	08006337 	.word	0x08006337
 80062ec:	08006337 	.word	0x08006337
 80062f0:	08006315 	.word	0x08006315
 80062f4:	080062f9 	.word	0x080062f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	885b      	ldrh	r3, [r3, #2]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]
          break;
 8006304:	e01e      	b.n	8006344 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fa22 	bl	8007756 <USBD_CtlSendData>
          break;
 8006312:	e017      	b.n	8006344 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	b29b      	uxth	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	605a      	str	r2, [r3, #4]
          break;
 8006324:	e00e      	b.n	8006344 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3304      	adds	r3, #4
 800632a:	2201      	movs	r2, #1
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fa11 	bl	8007756 <USBD_CtlSendData>
          break;
 8006334:	e006      	b.n	8006344 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f99b 	bl	8007674 <USBD_CtlError>
          ret = USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	75fb      	strb	r3, [r7, #23]
          break;
 8006342:	bf00      	nop
      }
      break;
 8006344:	e09a      	b.n	800647c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b0b      	cmp	r3, #11
 800634c:	f200 8086 	bhi.w	800645c <USBD_HID_Setup+0x1d4>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <USBD_HID_Setup+0xd0>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	08006389 	.word	0x08006389
 800635c:	0800646b 	.word	0x0800646b
 8006360:	0800645d 	.word	0x0800645d
 8006364:	0800645d 	.word	0x0800645d
 8006368:	0800645d 	.word	0x0800645d
 800636c:	0800645d 	.word	0x0800645d
 8006370:	080063b3 	.word	0x080063b3
 8006374:	0800645d 	.word	0x0800645d
 8006378:	0800645d 	.word	0x0800645d
 800637c:	0800645d 	.word	0x0800645d
 8006380:	0800640b 	.word	0x0800640b
 8006384:	08006435 	.word	0x08006435
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b03      	cmp	r3, #3
 8006392:	d107      	bne.n	80063a4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006394:	f107 030a 	add.w	r3, r7, #10
 8006398:	2202      	movs	r2, #2
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f9da 	bl	8007756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a2:	e063      	b.n	800646c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f964 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	75fb      	strb	r3, [r7, #23]
          break;
 80063b0:	e05c      	b.n	800646c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	885b      	ldrh	r3, [r3, #2]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b22      	cmp	r3, #34	; 0x22
 80063bc:	d108      	bne.n	80063d0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	88db      	ldrh	r3, [r3, #6]
 80063c2:	2b3f      	cmp	r3, #63	; 0x3f
 80063c4:	bf28      	it	cs
 80063c6:	233f      	movcs	r3, #63	; 0x3f
 80063c8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80063ca:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <USBD_HID_Setup+0x200>)
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e015      	b.n	80063fc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	885b      	ldrh	r3, [r3, #2]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b21      	cmp	r3, #33	; 0x21
 80063da:	d108      	bne.n	80063ee <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80063dc:	4b2b      	ldr	r3, [pc, #172]	; (800648c <USBD_HID_Setup+0x204>)
 80063de:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	88db      	ldrh	r3, [r3, #6]
 80063e4:	2b09      	cmp	r3, #9
 80063e6:	bf28      	it	cs
 80063e8:	2309      	movcs	r3, #9
 80063ea:	82bb      	strh	r3, [r7, #20]
 80063ec:	e006      	b.n	80063fc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f93f 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f6:	2303      	movs	r3, #3
 80063f8:	75fb      	strb	r3, [r7, #23]
            break;
 80063fa:	e037      	b.n	800646c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80063fc:	8abb      	ldrh	r3, [r7, #20]
 80063fe:	461a      	mov	r2, r3
 8006400:	6939      	ldr	r1, [r7, #16]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f9a7 	bl	8007756 <USBD_CtlSendData>
          break;
 8006408:	e030      	b.n	800646c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b03      	cmp	r3, #3
 8006414:	d107      	bne.n	8006426 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3308      	adds	r3, #8
 800641a:	2201      	movs	r2, #1
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f999 	bl	8007756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006424:	e022      	b.n	800646c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 f923 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 800642e:	2303      	movs	r3, #3
 8006430:	75fb      	strb	r3, [r7, #23]
          break;
 8006432:	e01b      	b.n	800646c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d106      	bne.n	800644e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	885b      	ldrh	r3, [r3, #2]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800644c:	e00e      	b.n	800646c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 f90f 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	75fb      	strb	r3, [r7, #23]
          break;
 800645a:	e007      	b.n	800646c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 f908 	bl	8007674 <USBD_CtlError>
          ret = USBD_FAIL;
 8006464:	2303      	movs	r3, #3
 8006466:	75fb      	strb	r3, [r7, #23]
          break;
 8006468:	e000      	b.n	800646c <USBD_HID_Setup+0x1e4>
          break;
 800646a:	bf00      	nop
      }
      break;
 800646c:	e006      	b.n	800647c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 f8ff 	bl	8007674 <USBD_CtlError>
      ret = USBD_FAIL;
 8006476:	2303      	movs	r3, #3
 8006478:	75fb      	strb	r3, [r7, #23]
      break;
 800647a:	bf00      	nop
  }

  return (uint8_t)ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000118 	.word	0x20000118
 800648c:	20000100 	.word	0x20000100

08006490 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064a4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e013      	b.n	80064d8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d10c      	bne.n	80064d6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	7b1b      	ldrb	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d108      	bne.n	80064d6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	2181      	movs	r1, #129	; 0x81
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 fd54 	bl	8007f7e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2222      	movs	r2, #34	; 0x22
 80064ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80064ee:	4b03      	ldr	r3, [pc, #12]	; (80064fc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20000094 	.word	0x20000094

08006500 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2222      	movs	r2, #34	; 0x22
 800650c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800650e:	4b03      	ldr	r3, [pc, #12]	; (800651c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	200000b8 	.word	0x200000b8

08006520 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2222      	movs	r2, #34	; 0x22
 800652c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800652e:	4b03      	ldr	r3, [pc, #12]	; (800653c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	200000dc 	.word	0x200000dc

08006540 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006552:	2200      	movs	r2, #0
 8006554:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	220a      	movs	r2, #10
 8006570:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	2000010c 	.word	0x2000010c

08006584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	e01f      	b.n	80065dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	79fa      	ldrb	r2, [r7, #7]
 80065ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 fb9f 	bl	8007d14 <USBD_LL_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e016      	b.n	800662a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	f107 020e 	add.w	r2, r7, #14
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fbb6 	bl	8007dac <USBD_LL_Start>
 8006640:	4603      	mov	r3, r0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	4611      	mov	r1, r2
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4611      	mov	r1, r2
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 ff90 	bl	8007600 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	2b02      	cmp	r3, #2
 8006702:	d01a      	beq.n	800673a <USBD_LL_SetupStage+0x72>
 8006704:	2b02      	cmp	r3, #2
 8006706:	d822      	bhi.n	800674e <USBD_LL_SetupStage+0x86>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <USBD_LL_SetupStage+0x4a>
 800670c:	2b01      	cmp	r3, #1
 800670e:	d00a      	beq.n	8006726 <USBD_LL_SetupStage+0x5e>
 8006710:	e01d      	b.n	800674e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa62 	bl	8006be4 <USBD_StdDevReq>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	e020      	b.n	8006768 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fac6 	bl	8006cc0 <USBD_StdItfReq>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
      break;
 8006738:	e016      	b.n	8006768 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb05 	bl	8006d52 <USBD_StdEPReq>
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e00c      	b.n	8006768 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006758:	b2db      	uxtb	r3, r3
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fb85 	bl	8007e6c <USBD_LL_StallEP>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
      break;
 8006766:	bf00      	nop
  }

  return ret;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	460b      	mov	r3, r1
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d138      	bne.n	80067f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800678c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006794:	2b03      	cmp	r3, #3
 8006796:	d14a      	bne.n	800682e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d913      	bls.n	80067cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	1ad2      	subs	r2, r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4293      	cmp	r3, r2
 80067bc:	bf28      	it	cs
 80067be:	4613      	movcs	r3, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fff2 	bl	80077ae <USBD_CtlContinueRx>
 80067ca:	e030      	b.n	800682e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d10b      	bne.n	80067f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 ffed 	bl	80077d0 <USBD_CtlSendStatus>
 80067f6:	e01a      	b.n	800682e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b03      	cmp	r3, #3
 8006802:	d114      	bne.n	800682e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	4611      	mov	r1, r2
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	e000      	b.n	8006830 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	460b      	mov	r3, r1
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d16b      	bne.n	8006924 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3314      	adds	r3, #20
 8006850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006858:	2b02      	cmp	r3, #2
 800685a:	d156      	bne.n	800690a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d914      	bls.n	8006892 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	461a      	mov	r2, r3
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 ff84 	bl	800778c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f001 fb98 	bl	8007fc0 <USBD_LL_PrepareReceive>
 8006890:	e03b      	b.n	800690a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	d11c      	bne.n	80068d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d316      	bcc.n	80068d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d20f      	bcs.n	80068d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068b8:	2200      	movs	r2, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 ff65 	bl	800778c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	2100      	movs	r1, #0
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 fb75 	bl	8007fc0 <USBD_LL_PrepareReceive>
 80068d6:	e018      	b.n	800690a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d10b      	bne.n	80068fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fab4 	bl	8007e6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 ff76 	bl	80077f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d122      	bne.n	800695a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff fe98 	bl	800664a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006922:	e01a      	b.n	800695a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b03      	cmp	r3, #3
 800692e:	d114      	bne.n	800695a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	7afa      	ldrb	r2, [r7, #11]
 8006946:	4611      	mov	r1, r2
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	4798      	blx	r3
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	e000      	b.n	800695c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	e02f      	b.n	80069f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00f      	beq.n	80069c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6852      	ldr	r2, [r2, #4]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	4611      	mov	r1, r2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c2:	2340      	movs	r3, #64	; 0x40
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fa0a 	bl	8007de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2240      	movs	r2, #64	; 0x40
 80069da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069de:	2340      	movs	r3, #64	; 0x40
 80069e0:	2200      	movs	r2, #0
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f9fc 	bl	8007de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d106      	bne.n	8006a6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e012      	b.n	8006ab8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d10b      	bne.n	8006ab6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e014      	b.n	8006b04 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d10d      	bne.n	8006b02 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	4611      	mov	r1, r2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e014      	b.n	8006b50 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d10d      	bne.n	8006b4e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6852      	ldr	r2, [r2, #4]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	4611      	mov	r1, r2
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bc4:	8a3b      	ldrh	r3, [r7, #16]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b21a      	sxth	r2, r3
 8006bca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d005      	beq.n	8006c0a <USBD_StdDevReq+0x26>
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d853      	bhi.n	8006caa <USBD_StdDevReq+0xc6>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <USBD_StdDevReq+0x3a>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d14f      	bne.n	8006caa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e04a      	b.n	8006cb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b09      	cmp	r3, #9
 8006c24:	d83b      	bhi.n	8006c9e <USBD_StdDevReq+0xba>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBD_StdDevReq+0x48>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006c95 	.word	0x08006c95
 8006c34:	08006c9f 	.word	0x08006c9f
 8006c38:	08006c8b 	.word	0x08006c8b
 8006c3c:	08006c9f 	.word	0x08006c9f
 8006c40:	08006c5f 	.word	0x08006c5f
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c9f 	.word	0x08006c9f
 8006c4c:	08006c77 	.word	0x08006c77
 8006c50:	08006c69 	.word	0x08006c69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9de 	bl	8007018 <USBD_GetDescriptor>
          break;
 8006c5c:	e024      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb43 	bl	80072ec <USBD_SetAddress>
          break;
 8006c66:	e01f      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb82 	bl	8007374 <USBD_SetConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
          break;
 8006c74:	e018      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fc21 	bl	80074c0 <USBD_GetConfig>
          break;
 8006c7e:	e013      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fc52 	bl	800752c <USBD_GetStatus>
          break;
 8006c88:	e00e      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc81 	bl	8007594 <USBD_SetFeature>
          break;
 8006c92:	e009      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc90 	bl	80075bc <USBD_ClrFeature>
          break;
 8006c9c:	e004      	b.n	8006ca8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fce7 	bl	8007674 <USBD_CtlError>
          break;
 8006ca6:	bf00      	nop
      }
      break;
 8006ca8:	e004      	b.n	8006cb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fce1 	bl	8007674 <USBD_CtlError>
      break;
 8006cb2:	bf00      	nop
  }

  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop

08006cc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d005      	beq.n	8006ce6 <USBD_StdItfReq+0x26>
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d82f      	bhi.n	8006d3e <USBD_StdItfReq+0x7e>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <USBD_StdItfReq+0x26>
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d12b      	bne.n	8006d3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d81d      	bhi.n	8006d30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	889b      	ldrh	r3, [r3, #4]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d813      	bhi.n	8006d26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	88db      	ldrh	r3, [r3, #6]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d110      	bne.n	8006d3a <USBD_StdItfReq+0x7a>
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10d      	bne.n	8006d3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fd56 	bl	80077d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d24:	e009      	b.n	8006d3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fca3 	bl	8007674 <USBD_CtlError>
          break;
 8006d2e:	e004      	b.n	8006d3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fc9e 	bl	8007674 <USBD_CtlError>
          break;
 8006d38:	e000      	b.n	8006d3c <USBD_StdItfReq+0x7c>
          break;
 8006d3a:	bf00      	nop
      }
      break;
 8006d3c:	e004      	b.n	8006d48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fc97 	bl	8007674 <USBD_CtlError>
      break;
 8006d46:	bf00      	nop
  }

  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	889b      	ldrh	r3, [r3, #4]
 8006d64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d007      	beq.n	8006d82 <USBD_StdEPReq+0x30>
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	f200 8145 	bhi.w	8007002 <USBD_StdEPReq+0x2b0>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <USBD_StdEPReq+0x44>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	f040 8140 	bne.w	8007002 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e13a      	b.n	800700c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d007      	beq.n	8006dae <USBD_StdEPReq+0x5c>
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	f300 8129 	bgt.w	8006ff6 <USBD_StdEPReq+0x2a4>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d07f      	beq.n	8006ea8 <USBD_StdEPReq+0x156>
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d03c      	beq.n	8006e26 <USBD_StdEPReq+0xd4>
 8006dac:	e123      	b.n	8006ff6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d002      	beq.n	8006dc0 <USBD_StdEPReq+0x6e>
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d016      	beq.n	8006dec <USBD_StdEPReq+0x9a>
 8006dbe:	e02c      	b.n	8006e1a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <USBD_StdEPReq+0x90>
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b80      	cmp	r3, #128	; 0x80
 8006dca:	d00a      	beq.n	8006de2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f84b 	bl	8007e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd6:	2180      	movs	r1, #128	; 0x80
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f847 	bl	8007e6c <USBD_LL_StallEP>
 8006dde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006de0:	e020      	b.n	8006e24 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc45 	bl	8007674 <USBD_CtlError>
              break;
 8006dea:	e01b      	b.n	8006e24 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	885b      	ldrh	r3, [r3, #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10e      	bne.n	8006e12 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <USBD_StdEPReq+0xc0>
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d008      	beq.n	8006e12 <USBD_StdEPReq+0xc0>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	88db      	ldrh	r3, [r3, #6]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f82d 	bl	8007e6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fcdc 	bl	80077d0 <USBD_CtlSendStatus>

              break;
 8006e18:	e004      	b.n	8006e24 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc29 	bl	8007674 <USBD_CtlError>
              break;
 8006e22:	bf00      	nop
          }
          break;
 8006e24:	e0ec      	b.n	8007000 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d002      	beq.n	8006e38 <USBD_StdEPReq+0xe6>
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d016      	beq.n	8006e64 <USBD_StdEPReq+0x112>
 8006e36:	e030      	b.n	8006e9a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <USBD_StdEPReq+0x108>
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d00a      	beq.n	8006e5a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f80f 	bl	8007e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f80b 	bl	8007e6c <USBD_LL_StallEP>
 8006e56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e58:	e025      	b.n	8006ea6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fc09 	bl	8007674 <USBD_CtlError>
              break;
 8006e62:	e020      	b.n	8006ea6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	885b      	ldrh	r3, [r3, #2]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11b      	bne.n	8006ea4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f815 	bl	8007eaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fca5 	bl	80077d0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fbe9 	bl	8007674 <USBD_CtlError>
              break;
 8006ea2:	e000      	b.n	8006ea6 <USBD_StdEPReq+0x154>
              break;
 8006ea4:	bf00      	nop
          }
          break;
 8006ea6:	e0ab      	b.n	8007000 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d002      	beq.n	8006eba <USBD_StdEPReq+0x168>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d032      	beq.n	8006f1e <USBD_StdEPReq+0x1cc>
 8006eb8:	e097      	b.n	8006fea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <USBD_StdEPReq+0x17e>
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d004      	beq.n	8006ed0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fbd3 	bl	8007674 <USBD_CtlError>
                break;
 8006ece:	e091      	b.n	8006ff4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da0b      	bge.n	8006ef0 <USBD_StdEPReq+0x19e>
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	3310      	adds	r3, #16
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	3304      	adds	r3, #4
 8006eee:	e00b      	b.n	8006f08 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	4413      	add	r3, r2
 8006f06:	3304      	adds	r3, #4
 8006f08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2202      	movs	r2, #2
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fc1d 	bl	8007756 <USBD_CtlSendData>
              break;
 8006f1c:	e06a      	b.n	8006ff4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da11      	bge.n	8006f4a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	f003 020f 	and.w	r2, r3, #15
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3324      	adds	r3, #36	; 0x24
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d117      	bne.n	8006f70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fb96 	bl	8007674 <USBD_CtlError>
                  break;
 8006f48:	e054      	b.n	8006ff4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb83 	bl	8007674 <USBD_CtlError>
                  break;
 8006f6e:	e041      	b.n	8006ff4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da0b      	bge.n	8006f90 <USBD_StdEPReq+0x23e>
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	3310      	adds	r3, #16
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	e00b      	b.n	8006fa8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <USBD_StdEPReq+0x264>
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d103      	bne.n	8006fbe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e00e      	b.n	8006fdc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 ff90 	bl	8007ee8 <USBD_LL_IsStallEP>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e002      	b.n	8006fdc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fbb7 	bl	8007756 <USBD_CtlSendData>
              break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb41 	bl	8007674 <USBD_CtlError>
              break;
 8006ff2:	bf00      	nop
          }
          break;
 8006ff4:	e004      	b.n	8007000 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb3b 	bl	8007674 <USBD_CtlError>
          break;
 8006ffe:	bf00      	nop
      }
      break;
 8007000:	e004      	b.n	800700c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fb35 	bl	8007674 <USBD_CtlError>
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	2b06      	cmp	r3, #6
 800703a:	f200 8128 	bhi.w	800728e <USBD_GetDescriptor+0x276>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_GetDescriptor+0x2c>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007061 	.word	0x08007061
 8007048:	08007079 	.word	0x08007079
 800704c:	080070b9 	.word	0x080070b9
 8007050:	0800728f 	.word	0x0800728f
 8007054:	0800728f 	.word	0x0800728f
 8007058:	0800722f 	.word	0x0800722f
 800705c:	0800725b 	.word	0x0800725b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
      break;
 8007076:	e112      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7c1b      	ldrb	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10d      	bne.n	800709c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f107 0208 	add.w	r2, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800709a:	e100      	b.n	800729e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	f107 0208 	add.w	r2, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	2202      	movs	r2, #2
 80070b4:	701a      	strb	r2, [r3, #0]
      break;
 80070b6:	e0f2      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b05      	cmp	r3, #5
 80070c0:	f200 80ac 	bhi.w	800721c <USBD_GetDescriptor+0x204>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <USBD_GetDescriptor+0xb4>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	080070e5 	.word	0x080070e5
 80070d0:	08007119 	.word	0x08007119
 80070d4:	0800714d 	.word	0x0800714d
 80070d8:	08007181 	.word	0x08007181
 80070dc:	080071b5 	.word	0x080071b5
 80070e0:	080071e9 	.word	0x080071e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	7c12      	ldrb	r2, [r2, #16]
 80070fc:	f107 0108 	add.w	r1, r7, #8
 8007100:	4610      	mov	r0, r2
 8007102:	4798      	blx	r3
 8007104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007106:	e091      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fab2 	bl	8007674 <USBD_CtlError>
            err++;
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	3301      	adds	r3, #1
 8007114:	72fb      	strb	r3, [r7, #11]
          break;
 8007116:	e089      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713a:	e077      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa98 	bl	8007674 <USBD_CtlError>
            err++;
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	3301      	adds	r3, #1
 8007148:	72fb      	strb	r3, [r7, #11]
          break;
 800714a:	e06f      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716e:	e05d      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa7e 	bl	8007674 <USBD_CtlError>
            err++;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	3301      	adds	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
          break;
 800717e:	e055      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7c12      	ldrb	r2, [r2, #16]
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
 80071a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a2:	e043      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa64 	bl	8007674 <USBD_CtlError>
            err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
          break;
 80071b2:	e03b      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e029      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa4a 	bl	8007674 <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e021      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e00f      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa30 	bl	8007674 <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e007      	b.n	800722c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa28 	bl	8007674 <USBD_CtlError>
          err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800722a:	bf00      	nop
      }
      break;
 800722c:	e037      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7c1b      	ldrb	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723e:	f107 0208 	add.w	r2, r7, #8
 8007242:	4610      	mov	r0, r2
 8007244:	4798      	blx	r3
 8007246:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007248:	e029      	b.n	800729e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa11 	bl	8007674 <USBD_CtlError>
        err++;
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	3301      	adds	r3, #1
 8007256:	72fb      	strb	r3, [r7, #11]
      break;
 8007258:	e021      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7c1b      	ldrb	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	4610      	mov	r0, r2
 8007270:	4798      	blx	r3
 8007272:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	2207      	movs	r2, #7
 800727a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800727c:	e00f      	b.n	800729e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9f7 	bl	8007674 <USBD_CtlError>
        err++;
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	3301      	adds	r3, #1
 800728a:	72fb      	strb	r3, [r7, #11]
      break;
 800728c:	e007      	b.n	800729e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f9ef 	bl	8007674 <USBD_CtlError>
      err++;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	3301      	adds	r3, #1
 800729a:	72fb      	strb	r3, [r7, #11]
      break;
 800729c:	bf00      	nop
  }

  if (err != 0U)
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11e      	bne.n	80072e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	88db      	ldrh	r3, [r3, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d016      	beq.n	80072da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072ac:	893b      	ldrh	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	88da      	ldrh	r2, [r3, #6]
 80072b6:	893b      	ldrh	r3, [r7, #8]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bf28      	it	cs
 80072bc:	4613      	movcs	r3, r2
 80072be:	b29b      	uxth	r3, r3
 80072c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072c2:	893b      	ldrh	r3, [r7, #8]
 80072c4:	461a      	mov	r2, r3
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa44 	bl	8007756 <USBD_CtlSendData>
 80072ce:	e009      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9ce 	bl	8007674 <USBD_CtlError>
 80072d8:	e004      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa78 	bl	80077d0 <USBD_CtlSendStatus>
 80072e0:	e000      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    return;
 80072e2:	bf00      	nop
  }
}
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop

080072ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	889b      	ldrh	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d131      	bne.n	8007362 <USBD_SetAddress+0x76>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d12d      	bne.n	8007362 <USBD_SetAddress+0x76>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b7f      	cmp	r3, #127	; 0x7f
 800730c:	d829      	bhi.n	8007362 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d104      	bne.n	8007330 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9a3 	bl	8007674 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	e01d      	b.n	800736c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fdff 	bl	8007f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa44 	bl	80077d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007356:	e009      	b.n	800736c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007360:	e004      	b.n	800736c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f985 	bl	8007674 <USBD_CtlError>
  }
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	4b4c      	ldr	r3, [pc, #304]	; (80074bc <USBD_SetConfig+0x148>)
 800738a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800738c:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <USBD_SetConfig+0x148>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d905      	bls.n	80073a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f96c 	bl	8007674 <USBD_CtlError>
    return USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e088      	b.n	80074b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d002      	beq.n	80073b2 <USBD_SetConfig+0x3e>
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d025      	beq.n	80073fc <USBD_SetConfig+0x88>
 80073b0:	e071      	b.n	8007496 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073b2:	4b42      	ldr	r3, [pc, #264]	; (80074bc <USBD_SetConfig+0x148>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d01c      	beq.n	80073f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80073ba:	4b40      	ldr	r3, [pc, #256]	; (80074bc <USBD_SetConfig+0x148>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073c4:	4b3d      	ldr	r3, [pc, #244]	; (80074bc <USBD_SetConfig+0x148>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f948 	bl	8006660 <USBD_SetClassConfig>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f949 	bl	8007674 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073e2:	e065      	b.n	80074b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9f3 	bl	80077d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2203      	movs	r2, #3
 80073ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073f2:	e05d      	b.n	80074b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9eb 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 80073fa:	e059      	b.n	80074b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073fc:	4b2f      	ldr	r3, [pc, #188]	; (80074bc <USBD_SetConfig+0x148>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d112      	bne.n	800742a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800740c:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <USBD_SetConfig+0x148>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <USBD_SetConfig+0x148>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff f93b 	bl	8006698 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9d4 	bl	80077d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007428:	e042      	b.n	80074b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800742a:	4b24      	ldr	r3, [pc, #144]	; (80074bc <USBD_SetConfig+0x148>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d02a      	beq.n	800748e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff f929 	bl	8006698 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <USBD_SetConfig+0x148>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <USBD_SetConfig+0x148>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff f902 	bl	8006660 <USBD_SetClassConfig>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00f      	beq.n	8007486 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f903 	bl	8007674 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff f90e 	bl	8006698 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007484:	e014      	b.n	80074b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9a2 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 800748c:	e010      	b.n	80074b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f99e 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 8007494:	e00c      	b.n	80074b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8eb 	bl	8007674 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800749e:	4b07      	ldr	r3, [pc, #28]	; (80074bc <USBD_SetConfig+0x148>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff f8f7 	bl	8006698 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074aa:	2303      	movs	r3, #3
 80074ac:	73fb      	strb	r3, [r7, #15]
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000740 	.word	0x20000740

080074c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	88db      	ldrh	r3, [r3, #6]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d004      	beq.n	80074dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8cd 	bl	8007674 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074da:	e023      	b.n	8007524 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	dc02      	bgt.n	80074ee <USBD_GetConfig+0x2e>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc03      	bgt.n	80074f4 <USBD_GetConfig+0x34>
 80074ec:	e015      	b.n	800751a <USBD_GetConfig+0x5a>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d00b      	beq.n	800750a <USBD_GetConfig+0x4a>
 80074f2:	e012      	b.n	800751a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3308      	adds	r3, #8
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f927 	bl	8007756 <USBD_CtlSendData>
        break;
 8007508:	e00c      	b.n	8007524 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	2201      	movs	r2, #1
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f91f 	bl	8007756 <USBD_CtlSendData>
        break;
 8007518:	e004      	b.n	8007524 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f8a9 	bl	8007674 <USBD_CtlError>
        break;
 8007522:	bf00      	nop
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	2b02      	cmp	r3, #2
 8007542:	d81e      	bhi.n	8007582 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	88db      	ldrh	r3, [r3, #6]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d004      	beq.n	8007556 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f890 	bl	8007674 <USBD_CtlError>
        break;
 8007554:	e01a      	b.n	800758c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f043 0202 	orr.w	r2, r3, #2
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	330c      	adds	r3, #12
 8007576:	2202      	movs	r2, #2
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f8eb 	bl	8007756 <USBD_CtlSendData>
      break;
 8007580:	e004      	b.n	800758c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f875 	bl	8007674 <USBD_CtlError>
      break;
 800758a:	bf00      	nop
  }
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	885b      	ldrh	r3, [r3, #2]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d106      	bne.n	80075b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f90e 	bl	80077d0 <USBD_CtlSendStatus>
  }
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d80b      	bhi.n	80075ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	885b      	ldrh	r3, [r3, #2]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d10c      	bne.n	80075f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8f3 	bl	80077d0 <USBD_CtlSendStatus>
      }
      break;
 80075ea:	e004      	b.n	80075f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f840 	bl	8007674 <USBD_CtlError>
      break;
 80075f4:	e000      	b.n	80075f8 <USBD_ClrFeature+0x3c>
      break;
 80075f6:	bf00      	nop
  }
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3301      	adds	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fabb 	bl	8006ba6 <SWAPBYTE>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff faae 	bl	8006ba6 <SWAPBYTE>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff faa1 	bl	8006ba6 <SWAPBYTE>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	80da      	strh	r2, [r3, #6]
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800767e:	2180      	movs	r1, #128	; 0x80
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbf3 	bl	8007e6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007686:	2100      	movs	r1, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fbef 	bl	8007e6c <USBD_LL_StallEP>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d036      	beq.n	800771a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076b0:	6938      	ldr	r0, [r7, #16]
 80076b2:	f000 f836 	bl	8007722 <USBD_GetLen>
 80076b6:	4603      	mov	r3, r0
 80076b8:	3301      	adds	r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	3301      	adds	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4413      	add	r3, r2
 80076dc:	2203      	movs	r2, #3
 80076de:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	3301      	adds	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076e6:	e013      	b.n	8007710 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	3301      	adds	r3, #1
 80076f8:	613b      	str	r3, [r7, #16]
    idx++;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	3301      	adds	r3, #1
 80076fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
    idx++;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	3301      	adds	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e7      	bne.n	80076e8 <USBD_GetString+0x52>
 8007718:	e000      	b.n	800771c <USBD_GetString+0x86>
    return;
 800771a:	bf00      	nop
  }
}
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007732:	e005      	b.n	8007740 <USBD_GetLen+0x1e>
  {
    len++;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	3301      	adds	r3, #1
 8007738:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	3301      	adds	r3, #1
 800773e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f5      	bne.n	8007734 <USBD_GetLen+0x12>
  }

  return len;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	2100      	movs	r1, #0
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fbfe 	bl	8007f7e <USBD_LL_Transmit>

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fbed 	bl	8007f7e <USBD_LL_Transmit>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	2100      	movs	r1, #0
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fbfd 	bl	8007fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2204      	movs	r2, #4
 80077dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fbc9 	bl	8007f7e <USBD_LL_Transmit>

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2205      	movs	r2, #5
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007806:	2300      	movs	r3, #0
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbd7 	bl	8007fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007820:	2200      	movs	r2, #0
 8007822:	490e      	ldr	r1, [pc, #56]	; (800785c <MX_USB_DEVICE_Init+0x40>)
 8007824:	480e      	ldr	r0, [pc, #56]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007826:	f7fe fead 	bl	8006584 <USBD_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007830:	f7f9 fa16 	bl	8000c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007834:	490b      	ldr	r1, [pc, #44]	; (8007864 <MX_USB_DEVICE_Init+0x48>)
 8007836:	480a      	ldr	r0, [pc, #40]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007838:	f7fe fed4 	bl	80065e4 <USBD_RegisterClass>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007842:	f7f9 fa0d 	bl	8000c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007846:	4806      	ldr	r0, [pc, #24]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007848:	f7fe fef3 	bl	8006632 <USBD_Start>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007852:	f7f9 fa05 	bl	8000c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007856:	bf00      	nop
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000158 	.word	0x20000158
 8007860:	20000744 	.word	0x20000744
 8007864:	2000005c 	.word	0x2000005c

08007868 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2212      	movs	r2, #18
 8007878:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_FS_DeviceDescriptor+0x20>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	20000174 	.word	0x20000174

0800788c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2204      	movs	r2, #4
 800789c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800789e:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000188 	.word	0x20000188

080078b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	4907      	ldr	r1, [pc, #28]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078c6:	4808      	ldr	r0, [pc, #32]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078c8:	f7ff fee5 	bl	8007696 <USBD_GetString>
 80078cc:	e004      	b.n	80078d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4904      	ldr	r1, [pc, #16]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d2:	4805      	ldr	r0, [pc, #20]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d4:	f7ff fedf 	bl	8007696 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000a14 	.word	0x20000a14
 80078e8:	08008a3c 	.word	0x08008a3c

080078ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	4904      	ldr	r1, [pc, #16]	; (800790c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078fe:	f7ff feca 	bl	8007696 <USBD_GetString>
  return USBD_StrDesc;
 8007902:	4b02      	ldr	r3, [pc, #8]	; (800790c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000a14 	.word	0x20000a14
 8007910:	08008a4c 	.word	0x08008a4c

08007914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	221a      	movs	r2, #26
 8007924:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007926:	f000 f843 	bl	80079b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800792a:	4b02      	ldr	r3, [pc, #8]	; (8007934 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	2000018c 	.word	0x2000018c

08007938 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4907      	ldr	r1, [pc, #28]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
 800794e:	4808      	ldr	r0, [pc, #32]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007950:	f7ff fea1 	bl	8007696 <USBD_GetString>
 8007954:	e004      	b.n	8007960 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4904      	ldr	r1, [pc, #16]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
 800795a:	4805      	ldr	r0, [pc, #20]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x38>)
 800795c:	f7ff fe9b 	bl	8007696 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000a14 	.word	0x20000a14
 8007970:	08008a5c 	.word	0x08008a5c

08007974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d105      	bne.n	8007992 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4907      	ldr	r1, [pc, #28]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800798a:	4808      	ldr	r0, [pc, #32]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800798c:	f7ff fe83 	bl	8007696 <USBD_GetString>
 8007990:	e004      	b.n	800799c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4904      	ldr	r1, [pc, #16]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007996:	4805      	ldr	r0, [pc, #20]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007998:	f7ff fe7d 	bl	8007696 <USBD_GetString>
  }
  return USBD_StrDesc;
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000a14 	.word	0x20000a14
 80079ac:	08008a68 	.word	0x08008a68

080079b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <Get_SerialNum+0x44>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079bc:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <Get_SerialNum+0x48>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079c2:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <Get_SerialNum+0x4c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079d6:	2208      	movs	r2, #8
 80079d8:	4909      	ldr	r1, [pc, #36]	; (8007a00 <Get_SerialNum+0x50>)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f814 	bl	8007a08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e0:	2204      	movs	r2, #4
 80079e2:	4908      	ldr	r1, [pc, #32]	; (8007a04 <Get_SerialNum+0x54>)
 80079e4:	68b8      	ldr	r0, [r7, #8]
 80079e6:	f000 f80f 	bl	8007a08 <IntToUnicode>
  }
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	1fff7a10 	.word	0x1fff7a10
 80079f8:	1fff7a14 	.word	0x1fff7a14
 80079fc:	1fff7a18 	.word	0x1fff7a18
 8007a00:	2000018e 	.word	0x2000018e
 8007a04:	2000019e 	.word	0x2000019e

08007a08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
 8007a1e:	e027      	b.n	8007a70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	0f1b      	lsrs	r3, r3, #28
 8007a24:	2b09      	cmp	r3, #9
 8007a26:	d80b      	bhi.n	8007a40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	440b      	add	r3, r1
 8007a38:	3230      	adds	r2, #48	; 0x30
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e00a      	b.n	8007a56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0f1b      	lsrs	r3, r3, #28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	440b      	add	r3, r1
 8007a50:	3237      	adds	r2, #55	; 0x37
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	3301      	adds	r3, #1
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	4413      	add	r3, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
 8007a70:	7dfa      	ldrb	r2, [r7, #23]
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d3d3      	bcc.n	8007a20 <IntToUnicode+0x18>
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aa8:	d13a      	bne.n	8007b20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
 8007aae:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007acc:	2302      	movs	r3, #2
 8007ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ad8:	230a      	movs	r3, #10
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007adc:	f107 0314 	add.w	r3, r7, #20
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4812      	ldr	r0, [pc, #72]	; (8007b2c <HAL_PCD_MspInit+0xa4>)
 8007ae4:	f7f9 fec4 	bl	8001870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	6353      	str	r3, [r2, #52]	; 0x34
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afc:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b02:	6453      	str	r3, [r2, #68]	; 0x44
 8007b04:	4b08      	ldr	r3, [pc, #32]	; (8007b28 <HAL_PCD_MspInit+0xa0>)
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b10:	2200      	movs	r2, #0
 8007b12:	2100      	movs	r1, #0
 8007b14:	2043      	movs	r0, #67	; 0x43
 8007b16:	f7f9 fe74 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b1a:	2043      	movs	r0, #67	; 0x43
 8007b1c:	f7f9 fe8d 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b20:	bf00      	nop
 8007b22:	3728      	adds	r7, #40	; 0x28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	40020000 	.word	0x40020000

08007b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe fdbe 	bl	80066c8 <USBD_LL_SetupStage>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	440b      	add	r3, r1
 8007b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f7fe fdf8 	bl	8006772 <USBD_LL_DataOutStage>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3348      	adds	r3, #72	; 0x48
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7fe fe41 	bl	8006838 <USBD_LL_DataInStage>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe ff55 	bl	8006a7c <USBD_LL_SOF>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
 8007bf2:	e008      	b.n	8007c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d102      	bne.n	8007c02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
 8007c00:	e001      	b.n	8007c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c02:	f7f9 f82d 	bl	8000c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0c:	7bfa      	ldrb	r2, [r7, #15]
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fef5 	bl	8006a00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fea1 	bl	8006964 <USBD_LL_Reset>
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fef0 	bl	8006a20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d005      	beq.n	8007c6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <HAL_PCD_SuspendCallback+0x48>)
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4a03      	ldr	r2, [pc, #12]	; (8007c74 <HAL_PCD_SuspendCallback+0x48>)
 8007c66:	f043 0306 	orr.w	r3, r3, #6
 8007c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000ed00 	.word	0xe000ed00

08007c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fee0 	bl	8006a4c <USBD_LL_Resume>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe ff2e 	bl	8006b0c <USBD_LL_IsoOUTIncomplete>
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fef6 	bl	8006ac0 <USBD_LL_IsoINIncomplete>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe ff34 	bl	8006b58 <USBD_LL_DevConnected>
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe ff31 	bl	8006b6e <USBD_LL_DevDisconnected>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d13c      	bne.n	8007d9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d24:	4a20      	ldr	r2, [pc, #128]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d34:	4b1c      	ldr	r3, [pc, #112]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d3e:	2204      	movs	r2, #4
 8007d40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d42:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d44:	2202      	movs	r2, #2
 8007d46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d48:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d4e:	4b16      	ldr	r3, [pc, #88]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d50:	2202      	movs	r2, #2
 8007d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d54:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d72:	480d      	ldr	r0, [pc, #52]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d74:	f7fb f841 	bl	8002dfa <HAL_PCD_Init>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d7e:	f7f8 ff6f 	bl	8000c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	4808      	ldr	r0, [pc, #32]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d86:	f7fc f986 	bl	8004096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d8a:	2240      	movs	r2, #64	; 0x40
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4806      	ldr	r0, [pc, #24]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d90:	f7fc f93a 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	2101      	movs	r1, #1
 8007d98:	4803      	ldr	r0, [pc, #12]	; (8007da8 <USBD_LL_Init+0x94>)
 8007d9a:	f7fc f935 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000c14 	.word	0x20000c14

08007dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fb f936 	bl	8003034 <HAL_PCD_Start>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 f930 	bl	8008034 <USBD_Get_USB_Status>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	461a      	mov	r2, r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	70fb      	strb	r3, [r7, #3]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70bb      	strb	r3, [r7, #2]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e0a:	78bb      	ldrb	r3, [r7, #2]
 8007e0c:	883a      	ldrh	r2, [r7, #0]
 8007e0e:	78f9      	ldrb	r1, [r7, #3]
 8007e10:	f7fb fd1a 	bl	8003848 <HAL_PCD_EP_Open>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f90a 	bl	8008034 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fb fd63 	bl	8003918 <HAL_PCD_EP_Close>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 f8eb 	bl	8008034 <USBD_Get_USB_Status>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fb fe23 	bl	8003ad6 <HAL_PCD_EP_SetStall>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f8cc 	bl	8008034 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb fe68 	bl	8003b9e <HAL_PCD_EP_ClrStall>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f8ad 	bl	8008034 <USBD_Get_USB_Status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da0b      	bge.n	8007f1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	333e      	adds	r3, #62	; 0x3e
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	e00b      	b.n	8007f34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fb fc4d 	bl	80037fe <HAL_PCD_SetAddress>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f862 	bl	8008034 <USBD_Get_USB_Status>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b086      	sub	sp, #24
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f9c:	7af9      	ldrb	r1, [r7, #11]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	f7fb fd4e 	bl	8003a42 <HAL_PCD_EP_Transmit>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f841 	bl	8008034 <USBD_Get_USB_Status>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fde:	7af9      	ldrb	r1, [r7, #11]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	f7fb fce2 	bl	80039ac <HAL_PCD_EP_Receive>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f820 	bl	8008034 <USBD_Get_USB_Status>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ff8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800800c:	4b03      	ldr	r3, [pc, #12]	; (800801c <USBD_static_malloc+0x18>)
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	2000101c 	.word	0x2000101c

08008020 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d817      	bhi.n	8008078 <USBD_Get_USB_Status+0x44>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBD_Get_USB_Status+0x1c>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008061 	.word	0x08008061
 8008054:	08008067 	.word	0x08008067
 8008058:	0800806d 	.word	0x0800806d
 800805c:	08008073 	.word	0x08008073
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
    break;
 8008064:	e00b      	b.n	800807e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	73fb      	strb	r3, [r7, #15]
    break;
 800806a:	e008      	b.n	800807e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
    break;
 8008070:	e005      	b.n	800807e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	73fb      	strb	r3, [r7, #15]
    break;
 8008076:	e002      	b.n	800807e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	bf00      	nop
  }
  return usb_status;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <__errno>:
 800808c:	4b01      	ldr	r3, [pc, #4]	; (8008094 <__errno+0x8>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	200001a8 	.word	0x200001a8

08008098 <__libc_init_array>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4d0d      	ldr	r5, [pc, #52]	; (80080d0 <__libc_init_array+0x38>)
 800809c:	4c0d      	ldr	r4, [pc, #52]	; (80080d4 <__libc_init_array+0x3c>)
 800809e:	1b64      	subs	r4, r4, r5
 80080a0:	10a4      	asrs	r4, r4, #2
 80080a2:	2600      	movs	r6, #0
 80080a4:	42a6      	cmp	r6, r4
 80080a6:	d109      	bne.n	80080bc <__libc_init_array+0x24>
 80080a8:	4d0b      	ldr	r5, [pc, #44]	; (80080d8 <__libc_init_array+0x40>)
 80080aa:	4c0c      	ldr	r4, [pc, #48]	; (80080dc <__libc_init_array+0x44>)
 80080ac:	f000 fc8e 	bl	80089cc <_init>
 80080b0:	1b64      	subs	r4, r4, r5
 80080b2:	10a4      	asrs	r4, r4, #2
 80080b4:	2600      	movs	r6, #0
 80080b6:	42a6      	cmp	r6, r4
 80080b8:	d105      	bne.n	80080c6 <__libc_init_array+0x2e>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c0:	4798      	blx	r3
 80080c2:	3601      	adds	r6, #1
 80080c4:	e7ee      	b.n	80080a4 <__libc_init_array+0xc>
 80080c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ca:	4798      	blx	r3
 80080cc:	3601      	adds	r6, #1
 80080ce:	e7f2      	b.n	80080b6 <__libc_init_array+0x1e>
 80080d0:	08009f94 	.word	0x08009f94
 80080d4:	08009f94 	.word	0x08009f94
 80080d8:	08009f94 	.word	0x08009f94
 80080dc:	08009f98 	.word	0x08009f98

080080e0 <memset>:
 80080e0:	4402      	add	r2, r0
 80080e2:	4603      	mov	r3, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <memset+0xa>
 80080e8:	4770      	bx	lr
 80080ea:	f803 1b01 	strb.w	r1, [r3], #1
 80080ee:	e7f9      	b.n	80080e4 <memset+0x4>

080080f0 <siprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b500      	push	{lr}
 80080f4:	b09c      	sub	sp, #112	; 0x70
 80080f6:	ab1d      	add	r3, sp, #116	; 0x74
 80080f8:	9002      	str	r0, [sp, #8]
 80080fa:	9006      	str	r0, [sp, #24]
 80080fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <siprintf+0x38>)
 8008102:	9107      	str	r1, [sp, #28]
 8008104:	9104      	str	r1, [sp, #16]
 8008106:	4909      	ldr	r1, [pc, #36]	; (800812c <siprintf+0x3c>)
 8008108:	f853 2b04 	ldr.w	r2, [r3], #4
 800810c:	9105      	str	r1, [sp, #20]
 800810e:	6800      	ldr	r0, [r0, #0]
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	a902      	add	r1, sp, #8
 8008114:	f000 f868 	bl	80081e8 <_svfiprintf_r>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	b01c      	add	sp, #112	; 0x70
 8008120:	f85d eb04 	ldr.w	lr, [sp], #4
 8008124:	b003      	add	sp, #12
 8008126:	4770      	bx	lr
 8008128:	200001a8 	.word	0x200001a8
 800812c:	ffff0208 	.word	0xffff0208

08008130 <__ssputs_r>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	688e      	ldr	r6, [r1, #8]
 8008136:	429e      	cmp	r6, r3
 8008138:	4682      	mov	sl, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4690      	mov	r8, r2
 800813e:	461f      	mov	r7, r3
 8008140:	d838      	bhi.n	80081b4 <__ssputs_r+0x84>
 8008142:	898a      	ldrh	r2, [r1, #12]
 8008144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008148:	d032      	beq.n	80081b0 <__ssputs_r+0x80>
 800814a:	6825      	ldr	r5, [r4, #0]
 800814c:	6909      	ldr	r1, [r1, #16]
 800814e:	eba5 0901 	sub.w	r9, r5, r1
 8008152:	6965      	ldr	r5, [r4, #20]
 8008154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800815c:	3301      	adds	r3, #1
 800815e:	444b      	add	r3, r9
 8008160:	106d      	asrs	r5, r5, #1
 8008162:	429d      	cmp	r5, r3
 8008164:	bf38      	it	cc
 8008166:	461d      	movcc	r5, r3
 8008168:	0553      	lsls	r3, r2, #21
 800816a:	d531      	bpl.n	80081d0 <__ssputs_r+0xa0>
 800816c:	4629      	mov	r1, r5
 800816e:	f000 fb63 	bl	8008838 <_malloc_r>
 8008172:	4606      	mov	r6, r0
 8008174:	b950      	cbnz	r0, 800818c <__ssputs_r+0x5c>
 8008176:	230c      	movs	r3, #12
 8008178:	f8ca 3000 	str.w	r3, [sl]
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	6921      	ldr	r1, [r4, #16]
 800818e:	464a      	mov	r2, r9
 8008190:	f000 fabe 	bl	8008710 <memcpy>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800819a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	6126      	str	r6, [r4, #16]
 80081a2:	6165      	str	r5, [r4, #20]
 80081a4:	444e      	add	r6, r9
 80081a6:	eba5 0509 	sub.w	r5, r5, r9
 80081aa:	6026      	str	r6, [r4, #0]
 80081ac:	60a5      	str	r5, [r4, #8]
 80081ae:	463e      	mov	r6, r7
 80081b0:	42be      	cmp	r6, r7
 80081b2:	d900      	bls.n	80081b6 <__ssputs_r+0x86>
 80081b4:	463e      	mov	r6, r7
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	4632      	mov	r2, r6
 80081ba:	4641      	mov	r1, r8
 80081bc:	f000 fab6 	bl	800872c <memmove>
 80081c0:	68a3      	ldr	r3, [r4, #8]
 80081c2:	1b9b      	subs	r3, r3, r6
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	4433      	add	r3, r6
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	2000      	movs	r0, #0
 80081ce:	e7db      	b.n	8008188 <__ssputs_r+0x58>
 80081d0:	462a      	mov	r2, r5
 80081d2:	f000 fba5 	bl	8008920 <_realloc_r>
 80081d6:	4606      	mov	r6, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	d1e1      	bne.n	80081a0 <__ssputs_r+0x70>
 80081dc:	6921      	ldr	r1, [r4, #16]
 80081de:	4650      	mov	r0, sl
 80081e0:	f000 fabe 	bl	8008760 <_free_r>
 80081e4:	e7c7      	b.n	8008176 <__ssputs_r+0x46>
	...

080081e8 <_svfiprintf_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4698      	mov	r8, r3
 80081ee:	898b      	ldrh	r3, [r1, #12]
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	b09d      	sub	sp, #116	; 0x74
 80081f4:	4607      	mov	r7, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	d50e      	bpl.n	800821a <_svfiprintf_r+0x32>
 80081fc:	690b      	ldr	r3, [r1, #16]
 80081fe:	b963      	cbnz	r3, 800821a <_svfiprintf_r+0x32>
 8008200:	2140      	movs	r1, #64	; 0x40
 8008202:	f000 fb19 	bl	8008838 <_malloc_r>
 8008206:	6028      	str	r0, [r5, #0]
 8008208:	6128      	str	r0, [r5, #16]
 800820a:	b920      	cbnz	r0, 8008216 <_svfiprintf_r+0x2e>
 800820c:	230c      	movs	r3, #12
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	e0d1      	b.n	80083ba <_svfiprintf_r+0x1d2>
 8008216:	2340      	movs	r3, #64	; 0x40
 8008218:	616b      	str	r3, [r5, #20]
 800821a:	2300      	movs	r3, #0
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	2320      	movs	r3, #32
 8008220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008224:	f8cd 800c 	str.w	r8, [sp, #12]
 8008228:	2330      	movs	r3, #48	; 0x30
 800822a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d4 <_svfiprintf_r+0x1ec>
 800822e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008232:	f04f 0901 	mov.w	r9, #1
 8008236:	4623      	mov	r3, r4
 8008238:	469a      	mov	sl, r3
 800823a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823e:	b10a      	cbz	r2, 8008244 <_svfiprintf_r+0x5c>
 8008240:	2a25      	cmp	r2, #37	; 0x25
 8008242:	d1f9      	bne.n	8008238 <_svfiprintf_r+0x50>
 8008244:	ebba 0b04 	subs.w	fp, sl, r4
 8008248:	d00b      	beq.n	8008262 <_svfiprintf_r+0x7a>
 800824a:	465b      	mov	r3, fp
 800824c:	4622      	mov	r2, r4
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff6d 	bl	8008130 <__ssputs_r>
 8008256:	3001      	adds	r0, #1
 8008258:	f000 80aa 	beq.w	80083b0 <_svfiprintf_r+0x1c8>
 800825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825e:	445a      	add	r2, fp
 8008260:	9209      	str	r2, [sp, #36]	; 0x24
 8008262:	f89a 3000 	ldrb.w	r3, [sl]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80a2 	beq.w	80083b0 <_svfiprintf_r+0x1c8>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008276:	f10a 0a01 	add.w	sl, sl, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008282:	931a      	str	r3, [sp, #104]	; 0x68
 8008284:	4654      	mov	r4, sl
 8008286:	2205      	movs	r2, #5
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	4851      	ldr	r0, [pc, #324]	; (80083d4 <_svfiprintf_r+0x1ec>)
 800828e:	f7f7 ff9f 	bl	80001d0 <memchr>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	b9d8      	cbnz	r0, 80082ce <_svfiprintf_r+0xe6>
 8008296:	06d0      	lsls	r0, r2, #27
 8008298:	bf44      	itt	mi
 800829a:	2320      	movmi	r3, #32
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a0:	0711      	lsls	r1, r2, #28
 80082a2:	bf44      	itt	mi
 80082a4:	232b      	movmi	r3, #43	; 0x2b
 80082a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082aa:	f89a 3000 	ldrb.w	r3, [sl]
 80082ae:	2b2a      	cmp	r3, #42	; 0x2a
 80082b0:	d015      	beq.n	80082de <_svfiprintf_r+0xf6>
 80082b2:	9a07      	ldr	r2, [sp, #28]
 80082b4:	4654      	mov	r4, sl
 80082b6:	2000      	movs	r0, #0
 80082b8:	f04f 0c0a 	mov.w	ip, #10
 80082bc:	4621      	mov	r1, r4
 80082be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c2:	3b30      	subs	r3, #48	; 0x30
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d94e      	bls.n	8008366 <_svfiprintf_r+0x17e>
 80082c8:	b1b0      	cbz	r0, 80082f8 <_svfiprintf_r+0x110>
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	e014      	b.n	80082f8 <_svfiprintf_r+0x110>
 80082ce:	eba0 0308 	sub.w	r3, r0, r8
 80082d2:	fa09 f303 	lsl.w	r3, r9, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	46a2      	mov	sl, r4
 80082dc:	e7d2      	b.n	8008284 <_svfiprintf_r+0x9c>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	1d19      	adds	r1, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9103      	str	r1, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbb      	ittet	lt
 80082ea:	425b      	neglt	r3, r3
 80082ec:	f042 0202 	orrlt.w	r2, r2, #2
 80082f0:	9307      	strge	r3, [sp, #28]
 80082f2:	9307      	strlt	r3, [sp, #28]
 80082f4:	bfb8      	it	lt
 80082f6:	9204      	strlt	r2, [sp, #16]
 80082f8:	7823      	ldrb	r3, [r4, #0]
 80082fa:	2b2e      	cmp	r3, #46	; 0x2e
 80082fc:	d10c      	bne.n	8008318 <_svfiprintf_r+0x130>
 80082fe:	7863      	ldrb	r3, [r4, #1]
 8008300:	2b2a      	cmp	r3, #42	; 0x2a
 8008302:	d135      	bne.n	8008370 <_svfiprintf_r+0x188>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	9203      	str	r2, [sp, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfb8      	it	lt
 8008310:	f04f 33ff 	movlt.w	r3, #4294967295
 8008314:	3402      	adds	r4, #2
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e4 <_svfiprintf_r+0x1fc>
 800831c:	7821      	ldrb	r1, [r4, #0]
 800831e:	2203      	movs	r2, #3
 8008320:	4650      	mov	r0, sl
 8008322:	f7f7 ff55 	bl	80001d0 <memchr>
 8008326:	b140      	cbz	r0, 800833a <_svfiprintf_r+0x152>
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	eba0 000a 	sub.w	r0, r0, sl
 800832e:	fa03 f000 	lsl.w	r0, r3, r0
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	4303      	orrs	r3, r0
 8008336:	3401      	adds	r4, #1
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833e:	4826      	ldr	r0, [pc, #152]	; (80083d8 <_svfiprintf_r+0x1f0>)
 8008340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008344:	2206      	movs	r2, #6
 8008346:	f7f7 ff43 	bl	80001d0 <memchr>
 800834a:	2800      	cmp	r0, #0
 800834c:	d038      	beq.n	80083c0 <_svfiprintf_r+0x1d8>
 800834e:	4b23      	ldr	r3, [pc, #140]	; (80083dc <_svfiprintf_r+0x1f4>)
 8008350:	bb1b      	cbnz	r3, 800839a <_svfiprintf_r+0x1b2>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	3307      	adds	r3, #7
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	3308      	adds	r3, #8
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	4433      	add	r3, r6
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	e767      	b.n	8008236 <_svfiprintf_r+0x4e>
 8008366:	fb0c 3202 	mla	r2, ip, r2, r3
 800836a:	460c      	mov	r4, r1
 800836c:	2001      	movs	r0, #1
 800836e:	e7a5      	b.n	80082bc <_svfiprintf_r+0xd4>
 8008370:	2300      	movs	r3, #0
 8008372:	3401      	adds	r4, #1
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	4619      	mov	r1, r3
 8008378:	f04f 0c0a 	mov.w	ip, #10
 800837c:	4620      	mov	r0, r4
 800837e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008382:	3a30      	subs	r2, #48	; 0x30
 8008384:	2a09      	cmp	r2, #9
 8008386:	d903      	bls.n	8008390 <_svfiprintf_r+0x1a8>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0c5      	beq.n	8008318 <_svfiprintf_r+0x130>
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	e7c3      	b.n	8008318 <_svfiprintf_r+0x130>
 8008390:	fb0c 2101 	mla	r1, ip, r1, r2
 8008394:	4604      	mov	r4, r0
 8008396:	2301      	movs	r3, #1
 8008398:	e7f0      	b.n	800837c <_svfiprintf_r+0x194>
 800839a:	ab03      	add	r3, sp, #12
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	462a      	mov	r2, r5
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	4638      	mov	r0, r7
 80083a6:	f3af 8000 	nop.w
 80083aa:	1c42      	adds	r2, r0, #1
 80083ac:	4606      	mov	r6, r0
 80083ae:	d1d6      	bne.n	800835e <_svfiprintf_r+0x176>
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	065b      	lsls	r3, r3, #25
 80083b4:	f53f af2c 	bmi.w	8008210 <_svfiprintf_r+0x28>
 80083b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ba:	b01d      	add	sp, #116	; 0x74
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	ab03      	add	r3, sp, #12
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	462a      	mov	r2, r5
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083c8:	a904      	add	r1, sp, #16
 80083ca:	4638      	mov	r0, r7
 80083cc:	f000 f87a 	bl	80084c4 <_printf_i>
 80083d0:	e7eb      	b.n	80083aa <_svfiprintf_r+0x1c2>
 80083d2:	bf00      	nop
 80083d4:	08009f58 	.word	0x08009f58
 80083d8:	08009f62 	.word	0x08009f62
 80083dc:	00000000 	.word	0x00000000
 80083e0:	08008131 	.word	0x08008131
 80083e4:	08009f5e 	.word	0x08009f5e

080083e8 <_printf_common>:
 80083e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	4616      	mov	r6, r2
 80083ee:	4699      	mov	r9, r3
 80083f0:	688a      	ldr	r2, [r1, #8]
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	bfb8      	it	lt
 80083fc:	4613      	movlt	r3, r2
 80083fe:	6033      	str	r3, [r6, #0]
 8008400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008404:	4607      	mov	r7, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b10a      	cbz	r2, 800840e <_printf_common+0x26>
 800840a:	3301      	adds	r3, #1
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	0699      	lsls	r1, r3, #26
 8008412:	bf42      	ittt	mi
 8008414:	6833      	ldrmi	r3, [r6, #0]
 8008416:	3302      	addmi	r3, #2
 8008418:	6033      	strmi	r3, [r6, #0]
 800841a:	6825      	ldr	r5, [r4, #0]
 800841c:	f015 0506 	ands.w	r5, r5, #6
 8008420:	d106      	bne.n	8008430 <_printf_common+0x48>
 8008422:	f104 0a19 	add.w	sl, r4, #25
 8008426:	68e3      	ldr	r3, [r4, #12]
 8008428:	6832      	ldr	r2, [r6, #0]
 800842a:	1a9b      	subs	r3, r3, r2
 800842c:	42ab      	cmp	r3, r5
 800842e:	dc26      	bgt.n	800847e <_printf_common+0x96>
 8008430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008434:	1e13      	subs	r3, r2, #0
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	bf18      	it	ne
 800843a:	2301      	movne	r3, #1
 800843c:	0692      	lsls	r2, r2, #26
 800843e:	d42b      	bmi.n	8008498 <_printf_common+0xb0>
 8008440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008444:	4649      	mov	r1, r9
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	3001      	adds	r0, #1
 800844c:	d01e      	beq.n	800848c <_printf_common+0xa4>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	68e5      	ldr	r5, [r4, #12]
 8008452:	6832      	ldr	r2, [r6, #0]
 8008454:	f003 0306 	and.w	r3, r3, #6
 8008458:	2b04      	cmp	r3, #4
 800845a:	bf08      	it	eq
 800845c:	1aad      	subeq	r5, r5, r2
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	bf0c      	ite	eq
 8008464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008468:	2500      	movne	r5, #0
 800846a:	4293      	cmp	r3, r2
 800846c:	bfc4      	itt	gt
 800846e:	1a9b      	subgt	r3, r3, r2
 8008470:	18ed      	addgt	r5, r5, r3
 8008472:	2600      	movs	r6, #0
 8008474:	341a      	adds	r4, #26
 8008476:	42b5      	cmp	r5, r6
 8008478:	d11a      	bne.n	80084b0 <_printf_common+0xc8>
 800847a:	2000      	movs	r0, #0
 800847c:	e008      	b.n	8008490 <_printf_common+0xa8>
 800847e:	2301      	movs	r3, #1
 8008480:	4652      	mov	r2, sl
 8008482:	4649      	mov	r1, r9
 8008484:	4638      	mov	r0, r7
 8008486:	47c0      	blx	r8
 8008488:	3001      	adds	r0, #1
 800848a:	d103      	bne.n	8008494 <_printf_common+0xac>
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008494:	3501      	adds	r5, #1
 8008496:	e7c6      	b.n	8008426 <_printf_common+0x3e>
 8008498:	18e1      	adds	r1, r4, r3
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	2030      	movs	r0, #48	; 0x30
 800849e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a2:	4422      	add	r2, r4
 80084a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ac:	3302      	adds	r3, #2
 80084ae:	e7c7      	b.n	8008440 <_printf_common+0x58>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4622      	mov	r2, r4
 80084b4:	4649      	mov	r1, r9
 80084b6:	4638      	mov	r0, r7
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d0e6      	beq.n	800848c <_printf_common+0xa4>
 80084be:	3601      	adds	r6, #1
 80084c0:	e7d9      	b.n	8008476 <_printf_common+0x8e>
	...

080084c4 <_printf_i>:
 80084c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c8:	7e0f      	ldrb	r7, [r1, #24]
 80084ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084cc:	2f78      	cmp	r7, #120	; 0x78
 80084ce:	4691      	mov	r9, r2
 80084d0:	4680      	mov	r8, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	469a      	mov	sl, r3
 80084d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084da:	d807      	bhi.n	80084ec <_printf_i+0x28>
 80084dc:	2f62      	cmp	r7, #98	; 0x62
 80084de:	d80a      	bhi.n	80084f6 <_printf_i+0x32>
 80084e0:	2f00      	cmp	r7, #0
 80084e2:	f000 80d8 	beq.w	8008696 <_printf_i+0x1d2>
 80084e6:	2f58      	cmp	r7, #88	; 0x58
 80084e8:	f000 80a3 	beq.w	8008632 <_printf_i+0x16e>
 80084ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084f4:	e03a      	b.n	800856c <_printf_i+0xa8>
 80084f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084fa:	2b15      	cmp	r3, #21
 80084fc:	d8f6      	bhi.n	80084ec <_printf_i+0x28>
 80084fe:	a101      	add	r1, pc, #4	; (adr r1, 8008504 <_printf_i+0x40>)
 8008500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008504:	0800855d 	.word	0x0800855d
 8008508:	08008571 	.word	0x08008571
 800850c:	080084ed 	.word	0x080084ed
 8008510:	080084ed 	.word	0x080084ed
 8008514:	080084ed 	.word	0x080084ed
 8008518:	080084ed 	.word	0x080084ed
 800851c:	08008571 	.word	0x08008571
 8008520:	080084ed 	.word	0x080084ed
 8008524:	080084ed 	.word	0x080084ed
 8008528:	080084ed 	.word	0x080084ed
 800852c:	080084ed 	.word	0x080084ed
 8008530:	0800867d 	.word	0x0800867d
 8008534:	080085a1 	.word	0x080085a1
 8008538:	0800865f 	.word	0x0800865f
 800853c:	080084ed 	.word	0x080084ed
 8008540:	080084ed 	.word	0x080084ed
 8008544:	0800869f 	.word	0x0800869f
 8008548:	080084ed 	.word	0x080084ed
 800854c:	080085a1 	.word	0x080085a1
 8008550:	080084ed 	.word	0x080084ed
 8008554:	080084ed 	.word	0x080084ed
 8008558:	08008667 	.word	0x08008667
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	602a      	str	r2, [r5, #0]
 8008564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800856c:	2301      	movs	r3, #1
 800856e:	e0a3      	b.n	80086b8 <_printf_i+0x1f4>
 8008570:	6820      	ldr	r0, [r4, #0]
 8008572:	6829      	ldr	r1, [r5, #0]
 8008574:	0606      	lsls	r6, r0, #24
 8008576:	f101 0304 	add.w	r3, r1, #4
 800857a:	d50a      	bpl.n	8008592 <_printf_i+0xce>
 800857c:	680e      	ldr	r6, [r1, #0]
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	2e00      	cmp	r6, #0
 8008582:	da03      	bge.n	800858c <_printf_i+0xc8>
 8008584:	232d      	movs	r3, #45	; 0x2d
 8008586:	4276      	negs	r6, r6
 8008588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800858c:	485e      	ldr	r0, [pc, #376]	; (8008708 <_printf_i+0x244>)
 800858e:	230a      	movs	r3, #10
 8008590:	e019      	b.n	80085c6 <_printf_i+0x102>
 8008592:	680e      	ldr	r6, [r1, #0]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800859a:	bf18      	it	ne
 800859c:	b236      	sxthne	r6, r6
 800859e:	e7ef      	b.n	8008580 <_printf_i+0xbc>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	6029      	str	r1, [r5, #0]
 80085a8:	0601      	lsls	r1, r0, #24
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0xec>
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0xf2>
 80085b0:	0646      	lsls	r6, r0, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0xe8>
 80085b4:	881e      	ldrh	r6, [r3, #0]
 80085b6:	4854      	ldr	r0, [pc, #336]	; (8008708 <_printf_i+0x244>)
 80085b8:	2f6f      	cmp	r7, #111	; 0x6f
 80085ba:	bf0c      	ite	eq
 80085bc:	2308      	moveq	r3, #8
 80085be:	230a      	movne	r3, #10
 80085c0:	2100      	movs	r1, #0
 80085c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c6:	6865      	ldr	r5, [r4, #4]
 80085c8:	60a5      	str	r5, [r4, #8]
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	bfa2      	ittt	ge
 80085ce:	6821      	ldrge	r1, [r4, #0]
 80085d0:	f021 0104 	bicge.w	r1, r1, #4
 80085d4:	6021      	strge	r1, [r4, #0]
 80085d6:	b90e      	cbnz	r6, 80085dc <_printf_i+0x118>
 80085d8:	2d00      	cmp	r5, #0
 80085da:	d04d      	beq.n	8008678 <_printf_i+0x1b4>
 80085dc:	4615      	mov	r5, r2
 80085de:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e2:	fb03 6711 	mls	r7, r3, r1, r6
 80085e6:	5dc7      	ldrb	r7, [r0, r7]
 80085e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085ec:	4637      	mov	r7, r6
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	460e      	mov	r6, r1
 80085f2:	d9f4      	bls.n	80085de <_printf_i+0x11a>
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d10b      	bne.n	8008610 <_printf_i+0x14c>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	07de      	lsls	r6, r3, #31
 80085fc:	d508      	bpl.n	8008610 <_printf_i+0x14c>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	bfde      	ittt	le
 8008606:	2330      	movle	r3, #48	; 0x30
 8008608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800860c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008610:	1b52      	subs	r2, r2, r5
 8008612:	6122      	str	r2, [r4, #16]
 8008614:	f8cd a000 	str.w	sl, [sp]
 8008618:	464b      	mov	r3, r9
 800861a:	aa03      	add	r2, sp, #12
 800861c:	4621      	mov	r1, r4
 800861e:	4640      	mov	r0, r8
 8008620:	f7ff fee2 	bl	80083e8 <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	d14c      	bne.n	80086c2 <_printf_i+0x1fe>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	b004      	add	sp, #16
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	4835      	ldr	r0, [pc, #212]	; (8008708 <_printf_i+0x244>)
 8008634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008638:	6829      	ldr	r1, [r5, #0]
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008640:	6029      	str	r1, [r5, #0]
 8008642:	061d      	lsls	r5, r3, #24
 8008644:	d514      	bpl.n	8008670 <_printf_i+0x1ac>
 8008646:	07df      	lsls	r7, r3, #31
 8008648:	bf44      	itt	mi
 800864a:	f043 0320 	orrmi.w	r3, r3, #32
 800864e:	6023      	strmi	r3, [r4, #0]
 8008650:	b91e      	cbnz	r6, 800865a <_printf_i+0x196>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	f023 0320 	bic.w	r3, r3, #32
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	2310      	movs	r3, #16
 800865c:	e7b0      	b.n	80085c0 <_printf_i+0xfc>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	f043 0320 	orr.w	r3, r3, #32
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	2378      	movs	r3, #120	; 0x78
 8008668:	4828      	ldr	r0, [pc, #160]	; (800870c <_printf_i+0x248>)
 800866a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800866e:	e7e3      	b.n	8008638 <_printf_i+0x174>
 8008670:	0659      	lsls	r1, r3, #25
 8008672:	bf48      	it	mi
 8008674:	b2b6      	uxthmi	r6, r6
 8008676:	e7e6      	b.n	8008646 <_printf_i+0x182>
 8008678:	4615      	mov	r5, r2
 800867a:	e7bb      	b.n	80085f4 <_printf_i+0x130>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	6826      	ldr	r6, [r4, #0]
 8008680:	6961      	ldr	r1, [r4, #20]
 8008682:	1d18      	adds	r0, r3, #4
 8008684:	6028      	str	r0, [r5, #0]
 8008686:	0635      	lsls	r5, r6, #24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	d501      	bpl.n	8008690 <_printf_i+0x1cc>
 800868c:	6019      	str	r1, [r3, #0]
 800868e:	e002      	b.n	8008696 <_printf_i+0x1d2>
 8008690:	0670      	lsls	r0, r6, #25
 8008692:	d5fb      	bpl.n	800868c <_printf_i+0x1c8>
 8008694:	8019      	strh	r1, [r3, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	4615      	mov	r5, r2
 800869c:	e7ba      	b.n	8008614 <_printf_i+0x150>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	2100      	movs	r1, #0
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7f7 fd90 	bl	80001d0 <memchr>
 80086b0:	b108      	cbz	r0, 80086b6 <_printf_i+0x1f2>
 80086b2:	1b40      	subs	r0, r0, r5
 80086b4:	6060      	str	r0, [r4, #4]
 80086b6:	6863      	ldr	r3, [r4, #4]
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	2300      	movs	r3, #0
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c0:	e7a8      	b.n	8008614 <_printf_i+0x150>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4649      	mov	r1, r9
 80086c8:	4640      	mov	r0, r8
 80086ca:	47d0      	blx	sl
 80086cc:	3001      	adds	r0, #1
 80086ce:	d0ab      	beq.n	8008628 <_printf_i+0x164>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	079b      	lsls	r3, r3, #30
 80086d4:	d413      	bmi.n	80086fe <_printf_i+0x23a>
 80086d6:	68e0      	ldr	r0, [r4, #12]
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	4298      	cmp	r0, r3
 80086dc:	bfb8      	it	lt
 80086de:	4618      	movlt	r0, r3
 80086e0:	e7a4      	b.n	800862c <_printf_i+0x168>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4632      	mov	r2, r6
 80086e6:	4649      	mov	r1, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	47d0      	blx	sl
 80086ec:	3001      	adds	r0, #1
 80086ee:	d09b      	beq.n	8008628 <_printf_i+0x164>
 80086f0:	3501      	adds	r5, #1
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	9903      	ldr	r1, [sp, #12]
 80086f6:	1a5b      	subs	r3, r3, r1
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dcf2      	bgt.n	80086e2 <_printf_i+0x21e>
 80086fc:	e7eb      	b.n	80086d6 <_printf_i+0x212>
 80086fe:	2500      	movs	r5, #0
 8008700:	f104 0619 	add.w	r6, r4, #25
 8008704:	e7f5      	b.n	80086f2 <_printf_i+0x22e>
 8008706:	bf00      	nop
 8008708:	08009f69 	.word	0x08009f69
 800870c:	08009f7a 	.word	0x08009f7a

08008710 <memcpy>:
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	f100 33ff 	add.w	r3, r0, #4294967295
 8008718:	d100      	bne.n	800871c <memcpy+0xc>
 800871a:	4770      	bx	lr
 800871c:	b510      	push	{r4, lr}
 800871e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008726:	4291      	cmp	r1, r2
 8008728:	d1f9      	bne.n	800871e <memcpy+0xe>
 800872a:	bd10      	pop	{r4, pc}

0800872c <memmove>:
 800872c:	4288      	cmp	r0, r1
 800872e:	b510      	push	{r4, lr}
 8008730:	eb01 0402 	add.w	r4, r1, r2
 8008734:	d902      	bls.n	800873c <memmove+0x10>
 8008736:	4284      	cmp	r4, r0
 8008738:	4623      	mov	r3, r4
 800873a:	d807      	bhi.n	800874c <memmove+0x20>
 800873c:	1e43      	subs	r3, r0, #1
 800873e:	42a1      	cmp	r1, r4
 8008740:	d008      	beq.n	8008754 <memmove+0x28>
 8008742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874a:	e7f8      	b.n	800873e <memmove+0x12>
 800874c:	4402      	add	r2, r0
 800874e:	4601      	mov	r1, r0
 8008750:	428a      	cmp	r2, r1
 8008752:	d100      	bne.n	8008756 <memmove+0x2a>
 8008754:	bd10      	pop	{r4, pc}
 8008756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800875e:	e7f7      	b.n	8008750 <memmove+0x24>

08008760 <_free_r>:
 8008760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008762:	2900      	cmp	r1, #0
 8008764:	d044      	beq.n	80087f0 <_free_r+0x90>
 8008766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876a:	9001      	str	r0, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f1a1 0404 	sub.w	r4, r1, #4
 8008772:	bfb8      	it	lt
 8008774:	18e4      	addlt	r4, r4, r3
 8008776:	f000 f913 	bl	80089a0 <__malloc_lock>
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <_free_r+0x94>)
 800877c:	9801      	ldr	r0, [sp, #4]
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	b933      	cbnz	r3, 8008790 <_free_r+0x30>
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	6014      	str	r4, [r2, #0]
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878c:	f000 b90e 	b.w	80089ac <__malloc_unlock>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d908      	bls.n	80087a6 <_free_r+0x46>
 8008794:	6825      	ldr	r5, [r4, #0]
 8008796:	1961      	adds	r1, r4, r5
 8008798:	428b      	cmp	r3, r1
 800879a:	bf01      	itttt	eq
 800879c:	6819      	ldreq	r1, [r3, #0]
 800879e:	685b      	ldreq	r3, [r3, #4]
 80087a0:	1949      	addeq	r1, r1, r5
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	e7ed      	b.n	8008782 <_free_r+0x22>
 80087a6:	461a      	mov	r2, r3
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b10b      	cbz	r3, 80087b0 <_free_r+0x50>
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d9fa      	bls.n	80087a6 <_free_r+0x46>
 80087b0:	6811      	ldr	r1, [r2, #0]
 80087b2:	1855      	adds	r5, r2, r1
 80087b4:	42a5      	cmp	r5, r4
 80087b6:	d10b      	bne.n	80087d0 <_free_r+0x70>
 80087b8:	6824      	ldr	r4, [r4, #0]
 80087ba:	4421      	add	r1, r4
 80087bc:	1854      	adds	r4, r2, r1
 80087be:	42a3      	cmp	r3, r4
 80087c0:	6011      	str	r1, [r2, #0]
 80087c2:	d1e0      	bne.n	8008786 <_free_r+0x26>
 80087c4:	681c      	ldr	r4, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	6053      	str	r3, [r2, #4]
 80087ca:	4421      	add	r1, r4
 80087cc:	6011      	str	r1, [r2, #0]
 80087ce:	e7da      	b.n	8008786 <_free_r+0x26>
 80087d0:	d902      	bls.n	80087d8 <_free_r+0x78>
 80087d2:	230c      	movs	r3, #12
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	e7d6      	b.n	8008786 <_free_r+0x26>
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf04      	itt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	bf04      	itt	eq
 80087e8:	1949      	addeq	r1, r1, r5
 80087ea:	6021      	streq	r1, [r4, #0]
 80087ec:	6054      	str	r4, [r2, #4]
 80087ee:	e7ca      	b.n	8008786 <_free_r+0x26>
 80087f0:	b003      	add	sp, #12
 80087f2:	bd30      	pop	{r4, r5, pc}
 80087f4:	20001030 	.word	0x20001030

080087f8 <sbrk_aligned>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	4e0e      	ldr	r6, [pc, #56]	; (8008834 <sbrk_aligned+0x3c>)
 80087fc:	460c      	mov	r4, r1
 80087fe:	6831      	ldr	r1, [r6, #0]
 8008800:	4605      	mov	r5, r0
 8008802:	b911      	cbnz	r1, 800880a <sbrk_aligned+0x12>
 8008804:	f000 f8bc 	bl	8008980 <_sbrk_r>
 8008808:	6030      	str	r0, [r6, #0]
 800880a:	4621      	mov	r1, r4
 800880c:	4628      	mov	r0, r5
 800880e:	f000 f8b7 	bl	8008980 <_sbrk_r>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	d00a      	beq.n	800882c <sbrk_aligned+0x34>
 8008816:	1cc4      	adds	r4, r0, #3
 8008818:	f024 0403 	bic.w	r4, r4, #3
 800881c:	42a0      	cmp	r0, r4
 800881e:	d007      	beq.n	8008830 <sbrk_aligned+0x38>
 8008820:	1a21      	subs	r1, r4, r0
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f8ac 	bl	8008980 <_sbrk_r>
 8008828:	3001      	adds	r0, #1
 800882a:	d101      	bne.n	8008830 <sbrk_aligned+0x38>
 800882c:	f04f 34ff 	mov.w	r4, #4294967295
 8008830:	4620      	mov	r0, r4
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	20001034 	.word	0x20001034

08008838 <_malloc_r>:
 8008838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	1ccd      	adds	r5, r1, #3
 800883e:	f025 0503 	bic.w	r5, r5, #3
 8008842:	3508      	adds	r5, #8
 8008844:	2d0c      	cmp	r5, #12
 8008846:	bf38      	it	cc
 8008848:	250c      	movcc	r5, #12
 800884a:	2d00      	cmp	r5, #0
 800884c:	4607      	mov	r7, r0
 800884e:	db01      	blt.n	8008854 <_malloc_r+0x1c>
 8008850:	42a9      	cmp	r1, r5
 8008852:	d905      	bls.n	8008860 <_malloc_r+0x28>
 8008854:	230c      	movs	r3, #12
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	2600      	movs	r6, #0
 800885a:	4630      	mov	r0, r6
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	4e2e      	ldr	r6, [pc, #184]	; (800891c <_malloc_r+0xe4>)
 8008862:	f000 f89d 	bl	80089a0 <__malloc_lock>
 8008866:	6833      	ldr	r3, [r6, #0]
 8008868:	461c      	mov	r4, r3
 800886a:	bb34      	cbnz	r4, 80088ba <_malloc_r+0x82>
 800886c:	4629      	mov	r1, r5
 800886e:	4638      	mov	r0, r7
 8008870:	f7ff ffc2 	bl	80087f8 <sbrk_aligned>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	4604      	mov	r4, r0
 8008878:	d14d      	bne.n	8008916 <_malloc_r+0xde>
 800887a:	6834      	ldr	r4, [r6, #0]
 800887c:	4626      	mov	r6, r4
 800887e:	2e00      	cmp	r6, #0
 8008880:	d140      	bne.n	8008904 <_malloc_r+0xcc>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	4631      	mov	r1, r6
 8008886:	4638      	mov	r0, r7
 8008888:	eb04 0803 	add.w	r8, r4, r3
 800888c:	f000 f878 	bl	8008980 <_sbrk_r>
 8008890:	4580      	cmp	r8, r0
 8008892:	d13a      	bne.n	800890a <_malloc_r+0xd2>
 8008894:	6821      	ldr	r1, [r4, #0]
 8008896:	3503      	adds	r5, #3
 8008898:	1a6d      	subs	r5, r5, r1
 800889a:	f025 0503 	bic.w	r5, r5, #3
 800889e:	3508      	adds	r5, #8
 80088a0:	2d0c      	cmp	r5, #12
 80088a2:	bf38      	it	cc
 80088a4:	250c      	movcc	r5, #12
 80088a6:	4629      	mov	r1, r5
 80088a8:	4638      	mov	r0, r7
 80088aa:	f7ff ffa5 	bl	80087f8 <sbrk_aligned>
 80088ae:	3001      	adds	r0, #1
 80088b0:	d02b      	beq.n	800890a <_malloc_r+0xd2>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	442b      	add	r3, r5
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	e00e      	b.n	80088d8 <_malloc_r+0xa0>
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	1b52      	subs	r2, r2, r5
 80088be:	d41e      	bmi.n	80088fe <_malloc_r+0xc6>
 80088c0:	2a0b      	cmp	r2, #11
 80088c2:	d916      	bls.n	80088f2 <_malloc_r+0xba>
 80088c4:	1961      	adds	r1, r4, r5
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	6025      	str	r5, [r4, #0]
 80088ca:	bf18      	it	ne
 80088cc:	6059      	strne	r1, [r3, #4]
 80088ce:	6863      	ldr	r3, [r4, #4]
 80088d0:	bf08      	it	eq
 80088d2:	6031      	streq	r1, [r6, #0]
 80088d4:	5162      	str	r2, [r4, r5]
 80088d6:	604b      	str	r3, [r1, #4]
 80088d8:	4638      	mov	r0, r7
 80088da:	f104 060b 	add.w	r6, r4, #11
 80088de:	f000 f865 	bl	80089ac <__malloc_unlock>
 80088e2:	f026 0607 	bic.w	r6, r6, #7
 80088e6:	1d23      	adds	r3, r4, #4
 80088e8:	1af2      	subs	r2, r6, r3
 80088ea:	d0b6      	beq.n	800885a <_malloc_r+0x22>
 80088ec:	1b9b      	subs	r3, r3, r6
 80088ee:	50a3      	str	r3, [r4, r2]
 80088f0:	e7b3      	b.n	800885a <_malloc_r+0x22>
 80088f2:	6862      	ldr	r2, [r4, #4]
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	bf0c      	ite	eq
 80088f8:	6032      	streq	r2, [r6, #0]
 80088fa:	605a      	strne	r2, [r3, #4]
 80088fc:	e7ec      	b.n	80088d8 <_malloc_r+0xa0>
 80088fe:	4623      	mov	r3, r4
 8008900:	6864      	ldr	r4, [r4, #4]
 8008902:	e7b2      	b.n	800886a <_malloc_r+0x32>
 8008904:	4634      	mov	r4, r6
 8008906:	6876      	ldr	r6, [r6, #4]
 8008908:	e7b9      	b.n	800887e <_malloc_r+0x46>
 800890a:	230c      	movs	r3, #12
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4638      	mov	r0, r7
 8008910:	f000 f84c 	bl	80089ac <__malloc_unlock>
 8008914:	e7a1      	b.n	800885a <_malloc_r+0x22>
 8008916:	6025      	str	r5, [r4, #0]
 8008918:	e7de      	b.n	80088d8 <_malloc_r+0xa0>
 800891a:	bf00      	nop
 800891c:	20001030 	.word	0x20001030

08008920 <_realloc_r>:
 8008920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4680      	mov	r8, r0
 8008926:	4614      	mov	r4, r2
 8008928:	460e      	mov	r6, r1
 800892a:	b921      	cbnz	r1, 8008936 <_realloc_r+0x16>
 800892c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	4611      	mov	r1, r2
 8008932:	f7ff bf81 	b.w	8008838 <_malloc_r>
 8008936:	b92a      	cbnz	r2, 8008944 <_realloc_r+0x24>
 8008938:	f7ff ff12 	bl	8008760 <_free_r>
 800893c:	4625      	mov	r5, r4
 800893e:	4628      	mov	r0, r5
 8008940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008944:	f000 f838 	bl	80089b8 <_malloc_usable_size_r>
 8008948:	4284      	cmp	r4, r0
 800894a:	4607      	mov	r7, r0
 800894c:	d802      	bhi.n	8008954 <_realloc_r+0x34>
 800894e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008952:	d812      	bhi.n	800897a <_realloc_r+0x5a>
 8008954:	4621      	mov	r1, r4
 8008956:	4640      	mov	r0, r8
 8008958:	f7ff ff6e 	bl	8008838 <_malloc_r>
 800895c:	4605      	mov	r5, r0
 800895e:	2800      	cmp	r0, #0
 8008960:	d0ed      	beq.n	800893e <_realloc_r+0x1e>
 8008962:	42bc      	cmp	r4, r7
 8008964:	4622      	mov	r2, r4
 8008966:	4631      	mov	r1, r6
 8008968:	bf28      	it	cs
 800896a:	463a      	movcs	r2, r7
 800896c:	f7ff fed0 	bl	8008710 <memcpy>
 8008970:	4631      	mov	r1, r6
 8008972:	4640      	mov	r0, r8
 8008974:	f7ff fef4 	bl	8008760 <_free_r>
 8008978:	e7e1      	b.n	800893e <_realloc_r+0x1e>
 800897a:	4635      	mov	r5, r6
 800897c:	e7df      	b.n	800893e <_realloc_r+0x1e>
	...

08008980 <_sbrk_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d06      	ldr	r5, [pc, #24]	; (800899c <_sbrk_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7f8 fd56 	bl	800143c <_sbrk>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_sbrk_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_sbrk_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20001038 	.word	0x20001038

080089a0 <__malloc_lock>:
 80089a0:	4801      	ldr	r0, [pc, #4]	; (80089a8 <__malloc_lock+0x8>)
 80089a2:	f000 b811 	b.w	80089c8 <__retarget_lock_acquire_recursive>
 80089a6:	bf00      	nop
 80089a8:	2000103c 	.word	0x2000103c

080089ac <__malloc_unlock>:
 80089ac:	4801      	ldr	r0, [pc, #4]	; (80089b4 <__malloc_unlock+0x8>)
 80089ae:	f000 b80c 	b.w	80089ca <__retarget_lock_release_recursive>
 80089b2:	bf00      	nop
 80089b4:	2000103c 	.word	0x2000103c

080089b8 <_malloc_usable_size_r>:
 80089b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089bc:	1f18      	subs	r0, r3, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfbc      	itt	lt
 80089c2:	580b      	ldrlt	r3, [r1, r0]
 80089c4:	18c0      	addlt	r0, r0, r3
 80089c6:	4770      	bx	lr

080089c8 <__retarget_lock_acquire_recursive>:
 80089c8:	4770      	bx	lr

080089ca <__retarget_lock_release_recursive>:
 80089ca:	4770      	bx	lr

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

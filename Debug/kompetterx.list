
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b0  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a248  0800a248  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800a248  0800a248  0001a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a250  0800a250  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800a258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000270  0800a4c8  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001120  0800a4c8  00021120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001556e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003501  00000000  00000000  0003580e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00038d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00039df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002278c  00000000  00000000  0003ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a75  00000000  00000000  0005d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc60  00000000  00000000  00073f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004908  00000000  00000000  00133c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c80 	.word	0x08008c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008c80 	.word	0x08008c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <angleSensorInit>:
int32_t encoderAccumulator = 0;
int32_t smoothedAccumulator = 0;
int32_t lastSmoothedAccumulator = 0;

void angleSensorInit(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	lastEncoderVal = AS5600_ReadAngle(hi2c);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f80b 	bl	8000598 <AS5600_ReadAngle>
 8000582:	4603      	mov	r3, r0
 8000584:	b21a      	sxth	r2, r3
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <angleSensorInit+0x20>)
 8000588:	801a      	strh	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000028c 	.word	0x2000028c

08000598 <AS5600_ReadAngle>:

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af04      	add	r7, sp, #16
 800059e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	220e      	movs	r2, #14
 80005b2:	216c      	movs	r1, #108	; 0x6c
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f001 fedf 	bl	8002378 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 80005ba:	7b3b      	ldrb	r3, [r7, #12]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b21a      	sxth	r2, r3
 80005c0:	7b7b      	ldrb	r3, [r7, #13]
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <AS5600_ReadStatus>:

uint8_t AS5600_ReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
 80005da:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 030f 	add.w	r3, r7, #15
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	220b      	movs	r2, #11
 80005ee:	216c      	movs	r1, #108	; 0x6c
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f001 fec1 	bl	8002378 <HAL_I2C_Mem_Read>

    return status;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <AS5600_IsMagnetPresent>:

uint8_t AS5600_IsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    uint8_t status = AS5600_ReadStatus(hi2c);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffe3 	bl	80005d4 <AS5600_ReadStatus>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <AS5600_IsMagnetPresent+0x26>
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <AS5600_IsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <AS5600_IsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 800062a:	2301      	movs	r3, #1
    }
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <encoderValueFunction>:

int32_t encoderValueFunction(int16_t currentValue, int16_t previousValue, int32_t accumulator) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	603a      	str	r2, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	460b      	mov	r3, r1
 8000642:	80bb      	strh	r3, [r7, #4]
	int16_t difference = (int16_t)currentValue - (int16_t)previousValue;
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	81fb      	strh	r3, [r7, #14]

	// Handle wraparound from 0 to 4095 and from 4095 to 0
	if (abs(difference) > 2048) {
 800064e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000652:	2b00      	cmp	r3, #0
 8000654:	bfb8      	it	lt
 8000656:	425b      	neglt	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065e:	d90e      	bls.n	800067e <encoderValueFunction+0x4a>
		if (difference > 0) {
 8000660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd05      	ble.n	8000674 <encoderValueFunction+0x40>
			difference -= 4096;
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800066e:	b29b      	uxth	r3, r3
 8000670:	81fb      	strh	r3, [r7, #14]
 8000672:	e004      	b.n	800067e <encoderValueFunction+0x4a>
		} else {
			difference += 4096;
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800067a:	b29b      	uxth	r3, r3
 800067c:	81fb      	strh	r3, [r7, #14]
		}
	}

	if (abs(difference) > 10) {
 800067e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000682:	2b00      	cmp	r3, #0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	2b0a      	cmp	r3, #10
 800068c:	d904      	bls.n	8000698 <encoderValueFunction+0x64>
		accumulator += difference;
 800068e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	4413      	add	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
	}

	// Exponential smoothing
	float alpha = ALPHA_SMOOTHING; // Smoothing factor, adjust as needed
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <encoderValueFunction+0xd4>)
 800069a:	60bb      	str	r3, [r7, #8]
	smoothedAccumulator = alpha * accumulator + (1 - alpha) * smoothedAccumulator;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <encoderValueFunction+0xd8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d2:	ee17 2a90 	vmov	r2, s15
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <encoderValueFunction+0xd8>)
 80006d8:	601a      	str	r2, [r3, #0]

	// Limit smoothedAccumulator to the range -127 to 127
	smoothedAccumulator = max(-127, min(127, smoothedAccumulator));
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <encoderValueFunction+0xd8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80006e2:	db05      	blt.n	80006f0 <encoderValueFunction+0xbc>
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <encoderValueFunction+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ea:	bfa8      	it	ge
 80006ec:	237f      	movge	r3, #127	; 0x7f
 80006ee:	e001      	b.n	80006f4 <encoderValueFunction+0xc0>
 80006f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80006f4:	4a05      	ldr	r2, [pc, #20]	; (800070c <encoderValueFunction+0xd8>)
 80006f6:	6013      	str	r3, [r2, #0]

	return smoothedAccumulator;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <encoderValueFunction+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	3e4ccccd 	.word	0x3e4ccccd
 800070c:	20000294 	.word	0x20000294

08000710 <angleSensorScrollScan>:

void angleSensorScrollScan(I2C_HandleTypeDef *hi2c){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(hi2c);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff3d 	bl	8000598 <AS5600_ReadAngle>
 800071e:	4603      	mov	r3, r0
 8000720:	81fb      	strh	r3, [r7, #14]

	smoothedAccumulator = encoderValueFunction(angle, lastEncoderVal, encoderAccumulator);
 8000722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <angleSensorScrollScan+0xe0>)
 8000728:	f9b2 1000 	ldrsh.w	r1, [r2]
 800072c:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <angleSensorScrollScan+0xe4>)
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff7f 	bl	8000634 <encoderValueFunction>
 8000736:	4603      	mov	r3, r0
 8000738:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <angleSensorScrollScan+0xe8>)
 800073a:	6013      	str	r3, [r2, #0]
	lastEncoderVal = angle; // Update lastEncoderVal after calling encoderValueFunction
 800073c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <angleSensorScrollScan+0xe0>)
 8000742:	801a      	strh	r2, [r3, #0]

	//Handle magnet status
	if( AS5600_IsMagnetPresent(hi2c) == 1){
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff5b 	bl	8000600 <AS5600_IsMagnetPresent>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d142      	bne.n	80007d6 <angleSensorScrollScan+0xc6>

		SSD1306_GotoXY(40, 40);
 8000750:	2128      	movs	r1, #40	; 0x28
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 fd4e 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	4928      	ldr	r1, [pc, #160]	; (80007fc <angleSensorScrollScan+0xec>)
 800075c:	4828      	ldr	r0, [pc, #160]	; (8000800 <angleSensorScrollScan+0xf0>)
 800075e:	f000 fddf 	bl	8001320 <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

		//Convert to a string with leading spaces
		sprintf(angle_str, "%4u", angle);
 8000762:	89fa      	ldrh	r2, [r7, #14]
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4926      	ldr	r1, [pc, #152]	; (8000804 <angleSensorScrollScan+0xf4>)
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fe1a 	bl	80083a4 <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fd3e 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	4923      	ldr	r1, [pc, #140]	; (8000808 <angleSensorScrollScan+0xf8>)
 800077c:	4823      	ldr	r0, [pc, #140]	; (800080c <angleSensorScrollScan+0xfc>)
 800077e:	f000 fdcf 	bl	8001320 <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000782:	210c      	movs	r1, #12
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fd35 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2201      	movs	r2, #1
 8000790:	491a      	ldr	r1, [pc, #104]	; (80007fc <angleSensorScrollScan+0xec>)
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fdc4 	bl	8001320 <SSD1306_Puts>


		//ACCUMULATOR:
		//Convert to a string with leading spaces
		sprintf(angle_str, "%5d", (int8_t)smoothedAccumulator);
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <angleSensorScrollScan+0xe8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	491a      	ldr	r1, [pc, #104]	; (8000810 <angleSensorScrollScan+0x100>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fdfc 	bl	80083a4 <siprintf>

		//display accumulator
		SSD1306_GotoXY (80,0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2050      	movs	r0, #80	; 0x50
 80007b0:	f000 fd20 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts("Acc: ", &Font_7x10, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <angleSensorScrollScan+0xf8>)
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <angleSensorScrollScan+0x104>)
 80007ba:	f000 fdb1 	bl	8001320 <SSD1306_Puts>
		SSD1306_GotoXY (60, 12);
 80007be:	210c      	movs	r1, #12
 80007c0:	203c      	movs	r0, #60	; 0x3c
 80007c2:	f000 fd17 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_7x10, 1);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2201      	movs	r2, #1
 80007cc:	490e      	ldr	r1, [pc, #56]	; (8000808 <angleSensorScrollScan+0xf8>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fda6 	bl	8001320 <SSD1306_Puts>

	} else {
		SSD1306_GotoXY(40, 40);
		SSD1306_Puts("No :(", &Font_11x18, 1);
	}
}
 80007d4:	e008      	b.n	80007e8 <angleSensorScrollScan+0xd8>
		SSD1306_GotoXY(40, 40);
 80007d6:	2128      	movs	r1, #40	; 0x28
 80007d8:	2028      	movs	r0, #40	; 0x28
 80007da:	f000 fd0b 	bl	80011f4 <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <angleSensorScrollScan+0xec>)
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <angleSensorScrollScan+0x108>)
 80007e4:	f000 fd9c 	bl	8001320 <SSD1306_Puts>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000028c 	.word	0x2000028c
 80007f4:	20000290 	.word	0x20000290
 80007f8:	20000294 	.word	0x20000294
 80007fc:	20000008 	.word	0x20000008
 8000800:	08008c98 	.word	0x08008c98
 8000804:	08008ca0 	.word	0x08008ca0
 8000808:	20000000 	.word	0x20000000
 800080c:	08008ca4 	.word	0x08008ca4
 8000810:	08008cac 	.word	0x08008cac
 8000814:	08008cb0 	.word	0x08008cb0
 8000818:	08008cb8 	.word	0x08008cb8

0800081c <keyboardScannerInit>:
uint8_t hid_report_prev[NUM_KEYS] = {0};
char last_key[3] = {0};
enum KeyState key_state[NUM_ROWS][NUM_COLS];

void keyboardScannerInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  // Initialize each state to IDLE
  for(int i = 0; i < NUM_ROWS; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e013      	b.n	8000850 <keyboardScannerInit+0x34>
    for(int j = 0; j < NUM_COLS; j++) {
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	e00a      	b.n	8000844 <keyboardScannerInit+0x28>
      key_state[i][j] = IDLE;
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <keyboardScannerInit+0x48>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	441a      	add	r2, r3
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < NUM_COLS; j++) {
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2b03      	cmp	r3, #3
 8000848:	ddf1      	ble.n	800082e <keyboardScannerInit+0x12>
  for(int i = 0; i < NUM_ROWS; i++) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3301      	adds	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b03      	cmp	r3, #3
 8000854:	dde8      	ble.n	8000828 <keyboardScannerInit+0xc>
    }
  }
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	20000300 	.word	0x20000300

08000868 <keyboardScan>:

void keyboardScan(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
	//Keyboard Scan!
	for(int i = 0; i < NUM_ROWS; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	e0bc      	b.n	80009ee <keyboardScan+0x186>
		uint32_t current_tick = HAL_GetTick();
 8000874:	f001 f814 	bl	80018a0 <HAL_GetTick>
 8000878:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 800087a:	4a61      	ldr	r2, [pc, #388]	; (8000a00 <keyboardScan+0x198>)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000882:	4a60      	ldr	r2, [pc, #384]	; (8000a04 <keyboardScan+0x19c>)
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f001 fafd 	bl	8001e8c <HAL_GPIO_WritePin>
		HAL_Delay(1); // delay after setting row high
 8000892:	2001      	movs	r0, #1
 8000894:	f001 f810 	bl	80018b8 <HAL_Delay>

		for(int j = 0; j < NUM_COLS; j++) {
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	e091      	b.n	80009c2 <keyboardScan+0x15a>
			uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 800089e:	4a5a      	ldr	r2, [pc, #360]	; (8000a08 <keyboardScan+0x1a0>)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a6:	4959      	ldr	r1, [pc, #356]	; (8000a0c <keyboardScan+0x1a4>)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4610      	mov	r0, r2
 80008b2:	f001 fad3 	bl	8001e5c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	bf0c      	ite	eq
 80008bc:	2301      	moveq	r3, #1
 80008be:	2300      	movne	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	70fb      	strb	r3, [r7, #3]

			if (is_pressed && key_state[i][j] == IDLE) {
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d03d      	beq.n	8000946 <keyboardScan+0xde>
 80008ca:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <keyboardScan+0x1a8>)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	441a      	add	r2, r3
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d134      	bne.n	8000946 <keyboardScan+0xde>
				// Key has been pressed from an idle state

				// Find a slot in the HID report
				for (int k = 0; k < NUM_KEYS; k++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e015      	b.n	800090e <keyboardScan+0xa6>
					if (hid_report[k] == 0) { // 0 indicates an empty slot
 80008e2:	4a4c      	ldr	r2, [pc, #304]	; (8000a14 <keyboardScan+0x1ac>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10c      	bne.n	8000908 <keyboardScan+0xa0>
						hid_report[k] = keycode_map[i][j]; // Add the key to the HID report
 80008ee:	4a4a      	ldr	r2, [pc, #296]	; (8000a18 <keyboardScan+0x1b0>)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	441a      	add	r2, r3
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	4413      	add	r3, r2
 80008fa:	7819      	ldrb	r1, [r3, #0]
 80008fc:	4a45      	ldr	r2, [pc, #276]	; (8000a14 <keyboardScan+0x1ac>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	460a      	mov	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
						break;
 8000906:	e005      	b.n	8000914 <keyboardScan+0xac>
				for (int k = 0; k < NUM_KEYS; k++) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	dde6      	ble.n	80008e2 <keyboardScan+0x7a>
					}
				}
				key_state[i][j] = PRESSED;
 8000914:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <keyboardScan+0x1a8>)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	441a      	add	r2, r3
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4413      	add	r3, r2
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
				last_key_time[i][j] = current_tick;
 8000924:	493d      	ldr	r1, [pc, #244]	; (8000a1c <keyboardScan+0x1b4>)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	009a      	lsls	r2, r3, #2
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	4413      	add	r3, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				sprintf(last_key, "%d%d", i+1, j+1);  // Save the last key pressed
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	3301      	adds	r3, #1
 800093c:	4938      	ldr	r1, [pc, #224]	; (8000a20 <keyboardScan+0x1b8>)
 800093e:	4839      	ldr	r0, [pc, #228]	; (8000a24 <keyboardScan+0x1bc>)
 8000940:	f007 fd30 	bl	80083a4 <siprintf>
 8000944:	e03a      	b.n	80009bc <keyboardScan+0x154>

			} else if (!is_pressed && key_state[i][j] == PRESSED && current_tick - last_key_time[i][j] > DEBOUNCE_DELAY) {
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d137      	bne.n	80009bc <keyboardScan+0x154>
 800094c:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <keyboardScan+0x1a8>)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	441a      	add	r2, r3
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d12e      	bne.n	80009bc <keyboardScan+0x154>
 800095e:	492f      	ldr	r1, [pc, #188]	; (8000a1c <keyboardScan+0x1b4>)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	009a      	lsls	r2, r3, #2
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b0a      	cmp	r3, #10
 8000972:	d923      	bls.n	80009bc <keyboardScan+0x154>
				// Key has been released

				// Remove the key from the HID report
				for (int k = 0; k < NUM_KEYS; k++) {
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e015      	b.n	80009a6 <keyboardScan+0x13e>
					if (hid_report[k] == keycode_map[i][j]) {
 800097a:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <keyboardScan+0x1ac>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4413      	add	r3, r2
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4925      	ldr	r1, [pc, #148]	; (8000a18 <keyboardScan+0x1b0>)
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4419      	add	r1, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	440b      	add	r3, r1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d105      	bne.n	80009a0 <keyboardScan+0x138>
						hid_report[k] = 0; // Remove the key
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <keyboardScan+0x1ac>)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4413      	add	r3, r2
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
						break;
 800099e:	e005      	b.n	80009ac <keyboardScan+0x144>
				for (int k = 0; k < NUM_KEYS; k++) {
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	dde6      	ble.n	800097a <keyboardScan+0x112>
					}
				}

				key_state[i][j] = IDLE;
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <keyboardScan+0x1a8>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	441a      	add	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4413      	add	r3, r2
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < NUM_COLS; j++) {
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	3301      	adds	r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	f77f af6a 	ble.w	800089e <keyboardScan+0x36>
			}
		}

		HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <keyboardScan+0x198>)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <keyboardScan+0x19c>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	f001 fa55 	bl	8001e8c <HAL_GPIO_WritePin>
		HAL_Delay(1); // delay after setting row low
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 ff68 	bl	80018b8 <HAL_Delay>
	for(int i = 0; i < NUM_ROWS; i++) {
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	f77f af3f 	ble.w	8000874 <keyboardScan+0xc>
	}
}
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000034 	.word	0x20000034
 8000a04:	20000044 	.word	0x20000044
 8000a08:	2000004c 	.word	0x2000004c
 8000a0c:	2000005c 	.word	0x2000005c
 8000a10:	20000300 	.word	0x20000300
 8000a14:	200002dc 	.word	0x200002dc
 8000a18:	20000010 	.word	0x20000010
 8000a1c:	2000029c 	.word	0x2000029c
 8000a20:	08008cc0 	.word	0x08008cc0
 8000a24:	200002fc 	.word	0x200002fc

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fed1 	bl	80017d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f907 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 fa01 	bl	8000e3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3a:	f000 f96d 	bl	8000d18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a3e:	f000 f999 	bl	8000d74 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000a42:	f007 f845 	bl	8007ad0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000a46:	f000 f9c3 	bl	8000dd0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	486a      	ldr	r0, [pc, #424]	; (8000bf8 <main+0x1d0>)
 8000a4e:	f001 fa36 	bl	8001ebe <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 8000a52:	2032      	movs	r0, #50	; 0x32
 8000a54:	f000 ff30 	bl	80018b8 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 8000a58:	f000 fa62 	bl	8000f20 <SSD1306_Init>

  HAL_Delay(50);
 8000a5c:	2032      	movs	r0, #50	; 0x32
 8000a5e:	f000 ff2b 	bl	80018b8 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 8000a62:	2100      	movs	r1, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fbc5 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4963      	ldr	r1, [pc, #396]	; (8000bfc <main+0x1d4>)
 8000a6e:	4864      	ldr	r0, [pc, #400]	; (8000c00 <main+0x1d8>)
 8000a70:	f000 fc56 	bl	8001320 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 8000a74:	2114      	movs	r1, #20
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 fbbc 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts ("v.02", &Font_7x10, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4961      	ldr	r1, [pc, #388]	; (8000c04 <main+0x1dc>)
 8000a80:	4861      	ldr	r0, [pc, #388]	; (8000c08 <main+0x1e0>)
 8000a82:	f000 fc4d 	bl	8001320 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000a86:	f000 fb0f 	bl	80010a8 <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 8000a8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a8e:	f000 ff13 	bl	80018b8 <HAL_Delay>

  SSD1306_Clear();
 8000a92:	f000 fc6a 	bl	800136a <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000a96:	2104      	movs	r1, #4
 8000a98:	4857      	ldr	r0, [pc, #348]	; (8000bf8 <main+0x1d0>)
 8000a9a:	f001 fa10 	bl	8001ebe <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 8000a9e:	211e      	movs	r1, #30
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fba7 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4956      	ldr	r1, [pc, #344]	; (8000c04 <main+0x1dc>)
 8000aaa:	4858      	ldr	r0, [pc, #352]	; (8000c0c <main+0x1e4>)
 8000aac:	f000 fc38 	bl	8001320 <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 8000ab0:	2128      	movs	r1, #40	; 0x28
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fb9e 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4950      	ldr	r1, [pc, #320]	; (8000bfc <main+0x1d4>)
 8000abc:	4854      	ldr	r0, [pc, #336]	; (8000c10 <main+0x1e8>)
 8000abe:	f000 fc2f 	bl	8001320 <SSD1306_Puts>

  SSD1306_GotoXY(40, 30);
 8000ac2:	211e      	movs	r1, #30
 8000ac4:	2028      	movs	r0, #40	; 0x28
 8000ac6:	f000 fb95 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	494d      	ldr	r1, [pc, #308]	; (8000c04 <main+0x1dc>)
 8000ace:	4851      	ldr	r0, [pc, #324]	; (8000c14 <main+0x1ec>)
 8000ad0:	f000 fc26 	bl	8001320 <SSD1306_Puts>
  SSD1306_GotoXY(40, 40);
 8000ad4:	2128      	movs	r1, #40	; 0x28
 8000ad6:	2028      	movs	r0, #40	; 0x28
 8000ad8:	f000 fb8c 	bl	80011f4 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	4947      	ldr	r1, [pc, #284]	; (8000bfc <main+0x1d4>)
 8000ae0:	484b      	ldr	r0, [pc, #300]	; (8000c10 <main+0x1e8>)
 8000ae2:	f000 fc1d 	bl	8001320 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000ae6:	f000 fadf 	bl	80010a8 <SSD1306_UpdateScreen>

  keyboardScannerInit();
 8000aea:	f7ff fe97 	bl	800081c <keyboardScannerInit>

  //lastEncoderVal = AS5600_ReadAngle(&hi2c2);
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000aee:	2104      	movs	r1, #4
 8000af0:	4841      	ldr	r0, [pc, #260]	; (8000bf8 <main+0x1d0>)
 8000af2:	f001 f9e4 	bl	8001ebe <HAL_GPIO_TogglePin>
  angleSensorInit(&hi2c2);
 8000af6:	4848      	ldr	r0, [pc, #288]	; (8000c18 <main+0x1f0>)
 8000af8:	f7ff fd3c 	bl	8000574 <angleSensorInit>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000afc:	2104      	movs	r1, #4
 8000afe:	483e      	ldr	r0, [pc, #248]	; (8000bf8 <main+0x1d0>)
 8000b00:	f001 f9dd 	bl	8001ebe <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	angleSensorScrollScan(&hi2c2);
 8000b04:	4844      	ldr	r0, [pc, #272]	; (8000c18 <main+0x1f0>)
 8000b06:	f7ff fe03 	bl	8000710 <angleSensorScrollScan>
	keyboardScan();
 8000b0a:	f7ff fead 	bl	8000868 <keyboardScan>

	// Check if the HID report has changed for the keyboard
	uint8_t report_changed = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NUM_KEYS; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	e00f      	b.n	8000b38 <main+0x110>
	    if (hid_report[i] != hid_report_prev[i]) {
 8000b18:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <main+0x1f4>)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	493f      	ldr	r1, [pc, #252]	; (8000c20 <main+0x1f8>)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	440b      	add	r3, r1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d002      	beq.n	8000b32 <main+0x10a>
	        report_changed = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	71fb      	strb	r3, [r7, #7]
	        break;
 8000b30:	e005      	b.n	8000b3e <main+0x116>
	for (int i = 0; i < NUM_KEYS; i++) {
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	ddec      	ble.n	8000b18 <main+0xf0>
	    }
	}

	//Send Keyboard HID report over USB
	if (report_changed) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d032      	beq.n	8000baa <main+0x182>
	    // Update the Keyboard HID report
	    keyboardhid.KEYCODE1 = hid_report[0];
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <main+0x1f4>)
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <main+0x1fc>)
 8000b4a:	70da      	strb	r2, [r3, #3]
	    keyboardhid.KEYCODE2 = hid_report[1];
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <main+0x1f4>)
 8000b4e:	785a      	ldrb	r2, [r3, #1]
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <main+0x1fc>)
 8000b52:	711a      	strb	r2, [r3, #4]
	    keyboardhid.KEYCODE3 = hid_report[2];
 8000b54:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <main+0x1f4>)
 8000b56:	789a      	ldrb	r2, [r3, #2]
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <main+0x1fc>)
 8000b5a:	715a      	strb	r2, [r3, #5]
	    keyboardhid.KEYCODE4 = hid_report[3];
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <main+0x1f4>)
 8000b5e:	78da      	ldrb	r2, [r3, #3]
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <main+0x1fc>)
 8000b62:	719a      	strb	r2, [r3, #6]
	    keyboardhid.KEYCODE5 = hid_report[4];
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <main+0x1f4>)
 8000b66:	791a      	ldrb	r2, [r3, #4]
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <main+0x1fc>)
 8000b6a:	71da      	strb	r2, [r3, #7]
	    keyboardhid.KEYCODE6 = hid_report[5];
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <main+0x1f4>)
 8000b6e:	795a      	ldrb	r2, [r3, #5]
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <main+0x1fc>)
 8000b72:	721a      	strb	r2, [r3, #8]

	    // Send the Keyboard HID report
	    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b74:	2209      	movs	r2, #9
 8000b76:	492b      	ldr	r1, [pc, #172]	; (8000c24 <main+0x1fc>)
 8000b78:	482b      	ldr	r0, [pc, #172]	; (8000c28 <main+0x200>)
 8000b7a:	f005 fde3 	bl	8006744 <USBD_HID_SendReport>

	    // Update the previous report state
	    memcpy(hid_report_prev, hid_report, NUM_KEYS);
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <main+0x1f8>)
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <main+0x1f4>)
 8000b82:	6814      	ldr	r4, [r2, #0]
 8000b84:	6850      	ldr	r0, [r2, #4]
 8000b86:	6891      	ldr	r1, [r2, #8]
 8000b88:	68d2      	ldr	r2, [r2, #12]
 8000b8a:	601c      	str	r4, [r3, #0]
 8000b8c:	6058      	str	r0, [r3, #4]
 8000b8e:	6099      	str	r1, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

	    // Update the OLED display
	    SSD1306_GotoXY(0, 40);
 8000b92:	2128      	movs	r1, #40	; 0x28
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 fb2d 	bl	80011f4 <SSD1306_GotoXY>
	    SSD1306_Puts(last_key, &Font_11x18, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4917      	ldr	r1, [pc, #92]	; (8000bfc <main+0x1d4>)
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <main+0x204>)
 8000ba0:	f000 fbbe 	bl	8001320 <SSD1306_Puts>
	    screenNotUpdated = 1;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <main+0x208>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	}

	//Send Mouse HID report over USB
	if(smoothedAccumulator != 0){
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <main+0x20c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d018      	beq.n	8000be4 <main+0x1bc>
		// Update the Mouse HID report
		mousehid.WHEEL = (int8_t)smoothedAccumulator / 35;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <main+0x20c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <main+0x210>)
 8000bba:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbe:	441a      	add	r2, r3
 8000bc0:	1152      	asrs	r2, r2, #5
 8000bc2:	17db      	asrs	r3, r3, #31
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <main+0x214>)
 8000bca:	711a      	strb	r2, [r3, #4]

		// Remember the last value of smoothedAccumulator for the next loop
		lastSmoothedAccumulator = smoothedAccumulator;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <main+0x20c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <main+0x218>)
 8000bd2:	6013      	str	r3, [r2, #0]

		// Send the Mouse HID report
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&mousehid, sizeof(mousehid));
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	4919      	ldr	r1, [pc, #100]	; (8000c3c <main+0x214>)
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <main+0x200>)
 8000bda:	f005 fdb3 	bl	8006744 <USBD_HID_SendReport>

		// Update the OLED display
		screenNotUpdated = 1;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <main+0x208>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
	}

	if(screenNotUpdated == 1){
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <main+0x208>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d18b      	bne.n	8000b04 <main+0xdc>
		  SSD1306_UpdateScreen();
 8000bec:	f000 fa5c 	bl	80010a8 <SSD1306_UpdateScreen>
		  screenNotUpdated = 0;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <main+0x208>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
  {
 8000bf6:	e785      	b.n	8000b04 <main+0xdc>
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	08008cc8 	.word	0x08008cc8
 8000c04:	20000000 	.word	0x20000000
 8000c08:	08008cd4 	.word	0x08008cd4
 8000c0c:	08008cdc 	.word	0x08008cdc
 8000c10:	08008ce4 	.word	0x08008ce4
 8000c14:	08008cec 	.word	0x08008cec
 8000c18:	20000364 	.word	0x20000364
 8000c1c:	200002dc 	.word	0x200002dc
 8000c20:	200002ec 	.word	0x200002ec
 8000c24:	20000020 	.word	0x20000020
 8000c28:	20000824 	.word	0x20000824
 8000c2c:	200002fc 	.word	0x200002fc
 8000c30:	20000033 	.word	0x20000033
 8000c34:	20000294 	.word	0x20000294
 8000c38:	ea0ea0eb 	.word	0xea0ea0eb
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	20000298 	.word	0x20000298

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f007 fb9e 	bl	8008394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cb8:	23a8      	movs	r3, #168	; 0xa8
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fb5b 	bl	8004384 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd4:	f000 f91e 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fdbc 	bl	8004874 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d02:	f000 f907 	bl	8000f14 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MX_I2C1_Init+0x54>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x58>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d56:	f001 f8cd 	bl	8001ef4 <HAL_I2C_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d60:	f000 f8d8 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000310 	.word	0x20000310
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	00061a80 	.word	0x00061a80

08000d74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <MX_I2C2_Init+0x54>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_I2C2_Init+0x58>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_I2C2_Init+0x50>)
 8000db2:	f001 f89f 	bl	8001ef4 <HAL_I2C_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f000 f8aa 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000364 	.word	0x20000364
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	000186a0 	.word	0x000186a0

08000dd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <MX_SPI2_Init+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_SPI2_Init+0x64>)
 8000e22:	f003 ff31 	bl	8004c88 <HAL_SPI_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e2c:	f000 f872 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200003b8 	.word	0x200003b8
 8000e38:	40003800 	.word	0x40003800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_GPIO_Init+0xcc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	21f4      	movs	r1, #244	; 0xf4
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_GPIO_Init+0xd0>)
 8000ec8:	f000 ffe0 	bl	8001e8c <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000ee0:	f000 fe20 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000ee4:	23f4      	movs	r3, #244	; 0xf4
 8000ee6:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_GPIO_Init+0xd0>)
 8000efc:	f000 fe12 	bl	8001b24 <HAL_GPIO_Init>

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020800 	.word	0x40020800

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f26:	f000 fa29 	bl	800137c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f2a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2178      	movs	r1, #120	; 0x78
 8000f32:	485b      	ldr	r0, [pc, #364]	; (80010a0 <SSD1306_Init+0x180>)
 8000f34:	f001 fc46 	bl	80027c4 <HAL_I2C_IsDeviceReady>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e0a9      	b.n	8001096 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f42:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f46:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f48:	e002      	b.n	8000f50 <SSD1306_Init+0x30>
		p--;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f56:	22ae      	movs	r2, #174	; 0xae
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	; 0x78
 8000f5c:	f000 fa8a 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	2078      	movs	r0, #120	; 0x78
 8000f66:	f000 fa85 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2078      	movs	r0, #120	; 0x78
 8000f70:	f000 fa80 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f74:	22b0      	movs	r2, #176	; 0xb0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2078      	movs	r0, #120	; 0x78
 8000f7a:	f000 fa7b 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f7e:	22c8      	movs	r2, #200	; 0xc8
 8000f80:	2100      	movs	r1, #0
 8000f82:	2078      	movs	r0, #120	; 0x78
 8000f84:	f000 fa76 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2078      	movs	r0, #120	; 0x78
 8000f8e:	f000 fa71 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f92:	2210      	movs	r2, #16
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	; 0x78
 8000f98:	f000 fa6c 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2078      	movs	r0, #120	; 0x78
 8000fa2:	f000 fa67 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fa6:	2281      	movs	r2, #129	; 0x81
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2078      	movs	r0, #120	; 0x78
 8000fac:	f000 fa62 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2078      	movs	r0, #120	; 0x78
 8000fb6:	f000 fa5d 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fba:	22a1      	movs	r2, #161	; 0xa1
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2078      	movs	r0, #120	; 0x78
 8000fc0:	f000 fa58 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fc4:	22a6      	movs	r2, #166	; 0xa6
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2078      	movs	r0, #120	; 0x78
 8000fca:	f000 fa53 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fce:	22a8      	movs	r2, #168	; 0xa8
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f000 fa4e 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fd8:	223f      	movs	r2, #63	; 0x3f
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2078      	movs	r0, #120	; 0x78
 8000fde:	f000 fa49 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fe2:	22a4      	movs	r2, #164	; 0xa4
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	; 0x78
 8000fe8:	f000 fa44 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fec:	22d3      	movs	r2, #211	; 0xd3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2078      	movs	r0, #120	; 0x78
 8000ff2:	f000 fa3f 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	; 0x78
 8000ffc:	f000 fa3a 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001000:	22d5      	movs	r2, #213	; 0xd5
 8001002:	2100      	movs	r1, #0
 8001004:	2078      	movs	r0, #120	; 0x78
 8001006:	f000 fa35 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800100a:	22f0      	movs	r2, #240	; 0xf0
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	; 0x78
 8001010:	f000 fa30 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001014:	22d9      	movs	r2, #217	; 0xd9
 8001016:	2100      	movs	r1, #0
 8001018:	2078      	movs	r0, #120	; 0x78
 800101a:	f000 fa2b 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800101e:	2222      	movs	r2, #34	; 0x22
 8001020:	2100      	movs	r1, #0
 8001022:	2078      	movs	r0, #120	; 0x78
 8001024:	f000 fa26 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001028:	22da      	movs	r2, #218	; 0xda
 800102a:	2100      	movs	r1, #0
 800102c:	2078      	movs	r0, #120	; 0x78
 800102e:	f000 fa21 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001032:	2212      	movs	r2, #18
 8001034:	2100      	movs	r1, #0
 8001036:	2078      	movs	r0, #120	; 0x78
 8001038:	f000 fa1c 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800103c:	22db      	movs	r2, #219	; 0xdb
 800103e:	2100      	movs	r1, #0
 8001040:	2078      	movs	r0, #120	; 0x78
 8001042:	f000 fa17 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001046:	2220      	movs	r2, #32
 8001048:	2100      	movs	r1, #0
 800104a:	2078      	movs	r0, #120	; 0x78
 800104c:	f000 fa12 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001050:	228d      	movs	r2, #141	; 0x8d
 8001052:	2100      	movs	r1, #0
 8001054:	2078      	movs	r0, #120	; 0x78
 8001056:	f000 fa0d 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800105a:	2214      	movs	r2, #20
 800105c:	2100      	movs	r1, #0
 800105e:	2078      	movs	r0, #120	; 0x78
 8001060:	f000 fa08 	bl	8001474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001064:	22af      	movs	r2, #175	; 0xaf
 8001066:	2100      	movs	r1, #0
 8001068:	2078      	movs	r0, #120	; 0x78
 800106a:	f000 fa03 	bl	8001474 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800106e:	222e      	movs	r2, #46	; 0x2e
 8001070:	2100      	movs	r1, #0
 8001072:	2078      	movs	r0, #120	; 0x78
 8001074:	f000 f9fe 	bl	8001474 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001078:	2000      	movs	r0, #0
 800107a:	f000 f843 	bl	8001104 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800107e:	f000 f813 	bl	80010a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SSD1306_Init+0x184>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SSD1306_Init+0x184>)
 800108a:	2200      	movs	r2, #0
 800108c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SSD1306_Init+0x184>)
 8001090:	2201      	movs	r2, #1
 8001092:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000310 	.word	0x20000310
 80010a4:	20000810 	.word	0x20000810

080010a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	e01d      	b.n	80010f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	3b50      	subs	r3, #80	; 0x50
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 f9d8 	bl	8001474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 f9d3 	bl	8001474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010ce:	2210      	movs	r2, #16
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 f9ce 	bl	8001474 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	01db      	lsls	r3, r3, #7
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <SSD1306_UpdateScreen+0x58>)
 80010de:	441a      	add	r2, r3
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 f95f 	bl	80013a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3301      	adds	r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d9de      	bls.n	80010b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000410 	.word	0x20000410

08001104 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <SSD1306_Fill+0x14>
 8001114:	2300      	movs	r3, #0
 8001116:	e000      	b.n	800111a <SSD1306_Fill+0x16>
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111e:	4619      	mov	r1, r3
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <SSD1306_Fill+0x2c>)
 8001122:	f007 f937 	bl	8008394 <memset>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000410 	.word	0x20000410

08001134 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	80bb      	strh	r3, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	70fb      	strb	r3, [r7, #3]
	if (
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2b7f      	cmp	r3, #127	; 0x7f
 800114a:	d848      	bhi.n	80011de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	2b3f      	cmp	r3, #63	; 0x3f
 8001150:	d845      	bhi.n	80011de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <SSD1306_DrawPixel+0xb8>)
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11a      	bne.n	80011a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	b298      	uxth	r0, r3
 8001176:	4603      	mov	r3, r0
 8001178:	01db      	lsls	r3, r3, #7
 800117a:	4413      	add	r3, r2
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <SSD1306_DrawPixel+0xbc>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	b25a      	sxtb	r2, r3
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	b25b      	sxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b259      	sxtb	r1, r3
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	4603      	mov	r3, r0
 8001198:	01db      	lsls	r3, r3, #7
 800119a:	4413      	add	r3, r2
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <SSD1306_DrawPixel+0xbc>)
 80011a0:	54d1      	strb	r1, [r2, r3]
 80011a2:	e01d      	b.n	80011e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b298      	uxth	r0, r3
 80011ac:	4603      	mov	r3, r0
 80011ae:	01db      	lsls	r3, r3, #7
 80011b0:	4413      	add	r3, r2
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <SSD1306_DrawPixel+0xbc>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4013      	ands	r3, r2
 80011cc:	b259      	sxtb	r1, r3
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	4603      	mov	r3, r0
 80011d2:	01db      	lsls	r3, r3, #7
 80011d4:	4413      	add	r3, r2
 80011d6:	b2c9      	uxtb	r1, r1
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SSD1306_DrawPixel+0xbc>)
 80011da:	54d1      	strb	r1, [r2, r3]
 80011dc:	e000      	b.n	80011e0 <SSD1306_DrawPixel+0xac>
		return;
 80011de:	bf00      	nop
	}
}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000810 	.word	0x20000810
 80011f0:	20000410 	.word	0x20000410

080011f4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	460a      	mov	r2, r1
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	4613      	mov	r3, r2
 8001202:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <SSD1306_GotoXY+0x28>)
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <SSD1306_GotoXY+0x28>)
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	8053      	strh	r3, [r2, #2]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000810 	.word	0x20000810

08001220 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <SSD1306_Putc+0xfc>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
	if (
 800123c:	2b7f      	cmp	r3, #127	; 0x7f
 800123e:	dc07      	bgt.n	8001250 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <SSD1306_Putc+0xfc>)
 8001242:	885b      	ldrh	r3, [r3, #2]
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800124c:	2b3f      	cmp	r3, #63	; 0x3f
 800124e:	dd01      	ble.n	8001254 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e05e      	b.n	8001312 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e04b      	b.n	80012f2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	3b20      	subs	r3, #32
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	7849      	ldrb	r1, [r1, #1]
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	4619      	mov	r1, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	440b      	add	r3, r1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	e030      	b.n	80012e0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d010      	beq.n	80012b0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <SSD1306_Putc+0xfc>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4413      	add	r3, r2
 8001298:	b298      	uxth	r0, r3
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <SSD1306_Putc+0xfc>)
 800129c:	885a      	ldrh	r2, [r3, #2]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	79ba      	ldrb	r2, [r7, #6]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff ff43 	bl	8001134 <SSD1306_DrawPixel>
 80012ae:	e014      	b.n	80012da <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <SSD1306_Putc+0xfc>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b298      	uxth	r0, r3
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <SSD1306_Putc+0xfc>)
 80012be:	885a      	ldrh	r2, [r3, #2]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	b299      	uxth	r1, r3
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f7ff ff2d 	bl	8001134 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	3301      	adds	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d3c8      	bcc.n	800127e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	461a      	mov	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d3ad      	bcc.n	800125a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <SSD1306_Putc+0xfc>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4413      	add	r3, r2
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <SSD1306_Putc+0xfc>)
 800130e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000810 	.word	0x20000810

08001320 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800132e:	e012      	b.n	8001356 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff71 	bl	8001220 <SSD1306_Putc>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d002      	beq.n	8001350 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	e008      	b.n	8001362 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e8      	bne.n	8001330 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fec8 	bl	8001104 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001374:	f7ff fe98 	bl	80010a8 <SSD1306_UpdateScreen>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <ssd1306_I2C_Init+0x28>)
 8001384:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001386:	e002      	b.n	800138e <ssd1306_I2C_Init+0x12>
		p--;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	0003d090 	.word	0x0003d090

080013a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b0c7      	sub	sp, #284	; 0x11c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80013b6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80013ba:	600a      	str	r2, [r1, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013c6:	4622      	mov	r2, r4
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013ce:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80013d2:	4602      	mov	r2, r0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013de:	460a      	mov	r2, r1
 80013e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013fc:	e015      	b.n	800142a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001402:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001406:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	441a      	add	r2, r3
 800140e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001412:	3301      	adds	r3, #1
 8001414:	7811      	ldrb	r1, [r2, #0]
 8001416:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800141a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800141e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001420:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001424:	3301      	adds	r3, #1
 8001426:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800142a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800142e:	b29b      	uxth	r3, r3
 8001430:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001434:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d8df      	bhi.n	80013fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800143e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001442:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b299      	uxth	r1, r3
 800144a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	f107 020c 	add.w	r2, r7, #12
 800145c:	200a      	movs	r0, #10
 800145e:	9000      	str	r0, [sp, #0]
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <ssd1306_I2C_WriteMulti+0xc8>)
 8001462:	f000 fe8b 	bl	800217c <HAL_I2C_Master_Transmit>
}
 8001466:	bf00      	nop
 8001468:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000310 	.word	0x20000310

08001474 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	460b      	mov	r3, r1
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	4613      	mov	r3, r2
 8001484:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	b299      	uxth	r1, r3
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	230a      	movs	r3, #10
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2302      	movs	r3, #2
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <ssd1306_I2C_Write+0x38>)
 800149e:	f000 fe6d 	bl	800217c <HAL_I2C_Master_Transmit>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000310 	.word	0x20000310

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_MspInit+0x4c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_I2C_MspInit+0xe8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a30      	ldr	r2, [pc, #192]	; (80015ec <HAL_I2C_MspInit+0xec>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001542:	2312      	movs	r3, #18
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800154e:	2304      	movs	r3, #4
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4825      	ldr	r0, [pc, #148]	; (80015f0 <HAL_I2C_MspInit+0xf0>)
 800155a:	f000 fae3 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800157a:	e031      	b.n	80015e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <HAL_I2C_MspInit+0xf4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12c      	bne.n	80015e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_I2C_MspInit+0xec>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_I2C_MspInit+0xec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b4:	2304      	movs	r3, #4
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <HAL_I2C_MspInit+0xf0>)
 80015c0:	f000 fab0 	bl	8001b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0xec>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_I2C_MspInit+0xec>)
 80015ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_I2C_MspInit+0xec>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40005800 	.word	0x40005800

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_SPI_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001652:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001664:	2305      	movs	r3, #5
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 8001670:	f000 fa58 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40003800 	.word	0x40003800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8d0 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <OTG_FS_IRQHandler+0x10>)
 80016e2:	f001 fe34 	bl	800334e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000cf4 	.word	0x20000cf4

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f006 fe0e 	bl	8008340 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	20000818 	.word	0x20000818
 8001758:	20001120 	.word	0x20001120

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f006 fdcd 	bl	800834c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff f939 	bl	8000a28 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80017c4:	0800a258 	.word	0x0800a258
  ldr r2, =_sbss
 80017c8:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80017cc:	20001120 	.word	0x20001120

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe52 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000064 	.word	0x20000064
 8001870:	2000006c 	.word	0x2000006c
 8001874:	20000068 	.word	0x20000068

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000006c 	.word	0x2000006c
 800189c:	2000081c 	.word	0x2000081c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000081c 	.word	0x2000081c

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000006c 	.word	0x2000006c

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e16b      	b.n	8001e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 815a 	bne.w	8001e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <HAL_GPIO_Init+0x310>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_GPIO_Init+0x314>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_GPIO_Init+0x318>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_GPIO_Init+0x31c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_GPIO_Init+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	; (8001e50 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20a>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x310>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8e:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae90 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	400b      	ands	r3, r1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e12b      	b.n	800215e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff faf0 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	; 0x24
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f58:	f002 fe82 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a81      	ldr	r2, [pc, #516]	; (8002168 <HAL_I2C_Init+0x274>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d807      	bhi.n	8001f78 <HAL_I2C_Init+0x84>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a80      	ldr	r2, [pc, #512]	; (800216c <HAL_I2C_Init+0x278>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bf94      	ite	ls
 8001f70:	2301      	movls	r3, #1
 8001f72:	2300      	movhi	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e006      	b.n	8001f86 <HAL_I2C_Init+0x92>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a7d      	ldr	r2, [pc, #500]	; (8002170 <HAL_I2C_Init+0x27c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0e7      	b.n	800215e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a78      	ldr	r2, [pc, #480]	; (8002174 <HAL_I2C_Init+0x280>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0c9b      	lsrs	r3, r3, #18
 8001f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <HAL_I2C_Init+0x274>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_I2C_Init+0xd4>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	e009      	b.n	8001fdc <HAL_I2C_Init+0xe8>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	4a69      	ldr	r2, [pc, #420]	; (8002178 <HAL_I2C_Init+0x284>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	3301      	adds	r3, #1
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	495c      	ldr	r1, [pc, #368]	; (8002168 <HAL_I2C_Init+0x274>)
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	d819      	bhi.n	8002030 <HAL_I2C_Init+0x13c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e59      	subs	r1, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fbb1 f3f3 	udiv	r3, r1, r3
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002010:	400b      	ands	r3, r1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_I2C_Init+0x138>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e59      	subs	r1, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	e051      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800202c:	2304      	movs	r3, #4
 800202e:	e04f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <HAL_I2C_Init+0x168>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e58      	subs	r0, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e012      	b.n	8002082 <HAL_I2C_Init+0x18e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x196>
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10e      	bne.n	80020b0 <HAL_I2C_Init+0x1bc>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e58      	subs	r0, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ae:	e00f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e58      	subs	r0, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	0099      	lsls	r1, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6809      	ldr	r1, [r1, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6911      	ldr	r1, [r2, #16]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	430b      	orrs	r3, r1
 8002112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	000186a0 	.word	0x000186a0
 800216c:	001e847f 	.word	0x001e847f
 8002170:	003d08ff 	.word	0x003d08ff
 8002174:	431bde83 	.word	0x431bde83
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	461a      	mov	r2, r3
 8002188:	460b      	mov	r3, r1
 800218a:	817b      	strh	r3, [r7, #10]
 800218c:	4613      	mov	r3, r2
 800218e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff fb86 	bl	80018a0 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	f040 80e0 	bne.w	8002364 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2319      	movs	r3, #25
 80021aa:	2201      	movs	r2, #1
 80021ac:	4970      	ldr	r1, [pc, #448]	; (8002370 <HAL_I2C_Master_Transmit+0x1f4>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fda0 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0d3      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_I2C_Master_Transmit+0x50>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0cc      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d007      	beq.n	80021f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002200:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2221      	movs	r2, #33	; 0x21
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2210      	movs	r2, #16
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	893a      	ldrh	r2, [r7, #8]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a50      	ldr	r2, [pc, #320]	; (8002374 <HAL_I2C_Master_Transmit+0x1f8>)
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002234:	8979      	ldrh	r1, [r7, #10]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fbf0 	bl	8002a20 <I2C_MasterRequestWrite>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e08d      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002260:	e066      	b.n	8002330 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	6a39      	ldr	r1, [r7, #32]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fe1a 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b04      	cmp	r3, #4
 8002278:	d107      	bne.n	800228a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002288:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06b      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d11b      	bne.n	8002304 <HAL_I2C_Master_Transmit+0x188>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d017      	beq.n	8002304 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	6a39      	ldr	r1, [r7, #32]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fe0a 	bl	8002f22 <I2C_WaitOnBTFFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	2b04      	cmp	r3, #4
 800231a:	d107      	bne.n	800232c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e01a      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d194      	bne.n	8002262 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	00100002 	.word	0x00100002
 8002374:	ffff0000 	.word	0xffff0000

08002378 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002392:	f7ff fa85 	bl	80018a0 <HAL_GetTick>
 8002396:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	f040 8208 	bne.w	80027b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2319      	movs	r3, #25
 80023ac:	2201      	movs	r2, #1
 80023ae:	497b      	ldr	r1, [pc, #492]	; (800259c <HAL_I2C_Mem_Read+0x224>)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fc9f 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	e1fb      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_Mem_Read+0x56>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e1f4      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d007      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2222      	movs	r2, #34	; 0x22
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_I2C_Mem_Read+0x228>)
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002436:	88f8      	ldrh	r0, [r7, #6]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4603      	mov	r3, r0
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fb6c 	bl	8002b24 <I2C_RequestMemoryRead>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1b0      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e184      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b01      	cmp	r3, #1
 800248c:	d11b      	bne.n	80024c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e164      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11b      	bne.n	8002506 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	e144      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800251c:	e138      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	2b03      	cmp	r3, #3
 8002524:	f200 80f1 	bhi.w	800270a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b01      	cmp	r3, #1
 800252e:	d123      	bne.n	8002578 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fd35 	bl	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e139      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002576:	e10b      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	2b02      	cmp	r3, #2
 800257e:	d14e      	bne.n	800261e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	2200      	movs	r2, #0
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <HAL_I2C_Mem_Read+0x22c>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fbb2 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e10e      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
 800259a:	bf00      	nop
 800259c:	00100002 	.word	0x00100002
 80025a0:	ffff0000 	.word	0xffff0000
 80025a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800261c:	e0b8      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	2200      	movs	r2, #0
 8002626:	4966      	ldr	r1, [pc, #408]	; (80027c0 <HAL_I2C_Mem_Read+0x448>)
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fb63 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0bf      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	2200      	movs	r2, #0
 8002682:	494f      	ldr	r1, [pc, #316]	; (80027c0 <HAL_I2C_Mem_Read+0x448>)
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fb35 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e091      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002708:	e042      	b.n	8002790 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fc48 	bl	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e04c      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d118      	bne.n	8002790 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f aec2 	bne.w	800251e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00010004 	.word	0x00010004

080027c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff f864 	bl	80018a0 <HAL_GetTick>
 80027d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	f040 8111 	bne.w	8002a0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2319      	movs	r3, #25
 80027f2:	2201      	movs	r2, #1
 80027f4:	4988      	ldr	r1, [pc, #544]	; (8002a18 <HAL_I2C_IsDeviceReady+0x254>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa7c 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	e104      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2C_IsDeviceReady+0x50>
 8002810:	2302      	movs	r3, #2
 8002812:	e0fd      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d007      	beq.n	800283a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2224      	movs	r2, #36	; 0x24
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a70      	ldr	r2, [pc, #448]	; (8002a1c <HAL_I2C_IsDeviceReady+0x258>)
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa3a 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002894:	d103      	bne.n	800289e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0b6      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fff5 	bl	80018a0 <HAL_GetTick>
 80028b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028e6:	e025      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7fe ffda 	bl	80018a0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <HAL_I2C_IsDeviceReady+0x13a>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	22a0      	movs	r2, #160	; 0xa0
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2ba0      	cmp	r3, #160	; 0xa0
 800293e:	d005      	beq.n	800294c <HAL_I2C_IsDeviceReady+0x188>
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_I2C_IsDeviceReady+0x188>
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0cd      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d129      	bne.n	80029b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	4921      	ldr	r1, [pc, #132]	; (8002a18 <HAL_I2C_IsDeviceReady+0x254>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f9ae 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e036      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e02c      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	490f      	ldr	r1, [pc, #60]	; (8002a18 <HAL_I2C_IsDeviceReady+0x254>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f98a 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e012      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f4ff af32 	bcc.w	800285e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000

08002a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d006      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d003      	beq.n	8002a4a <I2C_MasterRequestWrite+0x2a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00b      	b.n	8002a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	2b12      	cmp	r3, #18
 8002a62:	d107      	bne.n	8002a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f937 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9a:	d103      	bne.n	8002aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e035      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	e01b      	b.n	8002afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	11db      	asrs	r3, r3, #7
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0306 	and.w	r3, r3, #6
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f063 030f 	orn	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <I2C_MasterRequestWrite+0xfc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f95d 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e010      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <I2C_MasterRequestWrite+0x100>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f94d 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010008 	.word	0x00010008
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f8c2 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b84:	d103      	bne.n	8002b8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0aa      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	4952      	ldr	r1, [pc, #328]	; (8002cf0 <I2C_RequestMemoryRead+0x1cc>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f8fa 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e097      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f964 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e076      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e021      	b.n	8002c50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f93e 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e050      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c46:	893b      	ldrh	r3, [r7, #8]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	6a39      	ldr	r1, [r7, #32]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f923 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d107      	bne.n	8002c78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e035      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f82b 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	d103      	bne.n	8002cbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e013      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	6a3a      	ldr	r2, [r7, #32]
 8002cd4:	4906      	ldr	r1, [pc, #24]	; (8002cf0 <I2C_RequestMemoryRead+0x1cc>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f863 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	e025      	b.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d021      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fdc7 	bl	80018a0 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d116      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e023      	b.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	e00c      	b.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d0b6      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db0:	e051      	b.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	d123      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e046      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d021      	beq.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fd45 	bl	80018a0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e020      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10c      	bne.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e00b      	b.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d18d      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eac:	e02d      	b.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8ce 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e02d      	b.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d021      	beq.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fceb 	bl	80018a0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d1ca      	bne.n	8002eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f2e:	e02d      	b.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f88d 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e02d      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d021      	beq.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fe fcaa 	bl	80018a0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e007      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d1ca      	bne.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb0:	e042      	b.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d119      	bne.n	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0210 	mvn.w	r2, #16
 8002fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e029      	b.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe fc54 	bl	80018a0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d1b5      	bne.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d11b      	bne.n	80030a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b0:	b08f      	sub	sp, #60	; 0x3c
 80030b2:	af0a      	add	r7, sp, #40	; 0x28
 80030b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e10f      	b.n	80032e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f004 fe2e 	bl	8007d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 ff5f 	bl	8004fc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	687e      	ldr	r6, [r7, #4]
 800310c:	466d      	mov	r5, sp
 800310e:	f106 0410 	add.w	r4, r6, #16
 8003112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003122:	1d33      	adds	r3, r6, #4
 8003124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f001 fe37 	bl	8004d9a <USB_CoreInit>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0d0      	b.n	80032e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f001 ff4d 	bl	8004fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	e04a      	b.n	80031e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	333d      	adds	r3, #61	; 0x3d
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333c      	adds	r3, #60	; 0x3c
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	b298      	uxth	r0, r3
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3342      	adds	r3, #66	; 0x42
 800318c:	4602      	mov	r2, r0
 800318e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	333f      	adds	r3, #63	; 0x3f
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3344      	adds	r3, #68	; 0x44
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3348      	adds	r3, #72	; 0x48
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3350      	adds	r3, #80	; 0x50
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	3301      	adds	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d3af      	bcc.n	8003150 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e044      	b.n	8003280 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3b5      	bcc.n	80031f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	687e      	ldr	r6, [r7, #4]
 8003292:	466d      	mov	r5, sp
 8003294:	f106 0410 	add.w	r4, r6, #16
 8003298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a8:	1d33      	adds	r3, r6, #4
 80032aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f001 fee5 	bl	800507c <USB_DevInit>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e00d      	b.n	80032e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 ff61 	bl	80061a0 <USB_DevDisconnect>

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_Start+0x1c>
 8003300:	2302      	movs	r3, #2
 8003302:	e020      	b.n	8003346 <HAL_PCD_Start+0x5e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	2b01      	cmp	r3, #1
 8003312:	d109      	bne.n	8003328 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003318:	2b01      	cmp	r3, #1
 800331a:	d005      	beq.n	8003328 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f001 fe37 	bl	8004fa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f002 ff11 	bl	800615e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800334e:	b590      	push	{r4, r7, lr}
 8003350:	b08d      	sub	sp, #52	; 0x34
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 ffcf 	bl	8006308 <USB_GetMode>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 839d 	bne.w	8003aac <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f002 ff33 	bl	80061e2 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8393 	beq.w	8003aaa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f002 ff2a 	bl	80061e2 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f002 0202 	and.w	r2, r2, #2
 80033a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 ff18 	bl	80061e2 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d161      	bne.n	8003480 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0210 	bic.w	r2, r2, #16
 80033ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	0c5b      	lsrs	r3, r3, #17
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d124      	bne.n	8003442 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d035      	beq.n	8003470 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6a38      	ldr	r0, [r7, #32]
 8003418:	f002 fd4f 	bl	8005eba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003428:	441a      	add	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343a:	441a      	add	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	e016      	b.n	8003470 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	0c5b      	lsrs	r3, r3, #17
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	2b06      	cmp	r3, #6
 800344c:	d110      	bne.n	8003470 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003454:	2208      	movs	r2, #8
 8003456:	4619      	mov	r1, r3
 8003458:	6a38      	ldr	r0, [r7, #32]
 800345a:	f002 fd2e 	bl	8005eba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346a:	441a      	add	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0210 	orr.w	r2, r2, #16
 800347e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f002 feac 	bl	80061e2 <USB_ReadInterrupts>
 800348a:	4603      	mov	r3, r0
 800348c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003490:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003494:	d16e      	bne.n	8003574 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 feb2 	bl	8006208 <USB_ReadDevAllOutEpInterrupt>
 80034a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034a6:	e062      	b.n	800356e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d057      	beq.n	8003562 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fed7 	bl	8006270 <USB_ReadDevOutEPInterrupt>
 80034c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	2301      	movs	r3, #1
 80034de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fd98 	bl	8004018 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2308      	movs	r3, #8
 8003502:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fe92 	bl	8004230 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003522:	461a      	mov	r2, r3
 8003524:	2310      	movs	r3, #16
 8003526:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2320      	movs	r3, #32
 8003542:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003560:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d199      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 fe32 	bl	80061e2 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003588:	f040 80c0 	bne.w	800370c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fe53 	bl	800623c <USB_ReadDevAllInEpInterrupt>
 8003596:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800359c:	e0b2      	b.n	8003704 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a7 	beq.w	80036f8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 fe79 	bl	80062ac <USB_ReadDevInEPInterrupt>
 80035ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d057      	beq.n	8003676 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2201      	movs	r2, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e6:	4013      	ands	r3, r2
 80035e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f6:	461a      	mov	r2, r3
 80035f8:	2301      	movs	r3, #1
 80035fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d132      	bne.n	800366a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3348      	adds	r3, #72	; 0x48
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4403      	add	r3, r0
 8003624:	3344      	adds	r3, #68	; 0x44
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4419      	add	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4403      	add	r3, r0
 8003638:	3348      	adds	r3, #72	; 0x48
 800363a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <HAL_PCD_IRQHandler+0x31c>
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3350      	adds	r3, #80	; 0x50
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003662:	461a      	mov	r2, r3
 8003664:	2101      	movs	r1, #1
 8003666:	f002 fe81 	bl	800636c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f004 fbe4 	bl	8007e3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368c:	461a      	mov	r2, r3
 800368e:	2308      	movs	r3, #8
 8003690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	461a      	mov	r2, r3
 80036aa:	2310      	movs	r3, #16
 80036ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	461a      	mov	r2, r3
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	2302      	movs	r3, #2
 80036e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fc03 	bl	8003efe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	3301      	adds	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	f47f af49 	bne.w	800359e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f002 fd66 	bl	80061e2 <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003720:	d122      	bne.n	8003768 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003748:	2100      	movs	r1, #0
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fe0e 	bl	800436c <HAL_PCDEx_LPM_Callback>
 8003750:	e002      	b.n	8003758 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f004 fbea 	bl	8007f2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fd38 	bl	80061e2 <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377c:	d112      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f004 fba6 	bl	8007ee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f002 fd1a 	bl	80061e2 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	f040 80c7 	bne.w	800394a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2110      	movs	r1, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fdb4 	bl	8005344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e0:	e056      	b.n	8003890 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003814:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	461a      	mov	r2, r3
 8003844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003848:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003884:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003888:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	3301      	adds	r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	429a      	cmp	r2, r3
 8003898:	d3a3      	bcc.n	80037e2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f043 030b 	orr.w	r3, r3, #11
 80038ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f043 030b 	orr.w	r3, r3, #11
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	e015      	b.n	8003910 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390a:	f043 030b 	orr.w	r3, r3, #11
 800390e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003922:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003934:	461a      	mov	r2, r3
 8003936:	f002 fd19 	bl	800636c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fc47 	bl	80061e2 <USB_ReadInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395e:	d124      	bne.n	80039aa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fcdd 	bl	8006324 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fd45 	bl	80053fe <USB_GetDevSpeed>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681c      	ldr	r4, [r3, #0]
 8003980:	f001 f962 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8003984:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4620      	mov	r0, r4
 8003990:	f001 fa64 	bl	8004e5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f004 fa7a 	bl	8007e8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 fc17 	bl	80061e2 <USB_ReadInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d10a      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f004 fa57 	bl	8007e72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f002 0208 	and.w	r2, r2, #8
 80039d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fc02 	bl	80061e2 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e8:	d10f      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f004 fab9 	bl	8007f6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 fbe7 	bl	80061e2 <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1e:	d10f      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f004 fa8c 	bl	8007f48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 fbcc 	bl	80061e2 <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d10a      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 fa9a 	bl	8007f90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fbb6 	bl	80061e2 <USB_ReadInterrupts>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d115      	bne.n	8003aac <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f004 fa8a 	bl	8007fac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e000      	b.n	8003aac <HAL_PCD_IRQHandler+0x75e>
      return;
 8003aaa:	bf00      	nop
    }
  }
}
 8003aac:	3734      	adds	r7, #52	; 0x34
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}

08003ab2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_SetAddress+0x1a>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e013      	b.n	8003af4 <HAL_PCD_SetAddress+0x42>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fb14 	bl	8006112 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	70fb      	strb	r3, [r7, #3]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	803b      	strh	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da0f      	bge.n	8003b42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	3338      	adds	r3, #56	; 0x38
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	705a      	strb	r2, [r3, #1]
 8003b40:	e00f      	b.n	8003b62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b6e:	883a      	ldrh	r2, [r7, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	78ba      	ldrb	r2, [r7, #2]
 8003b78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b8c:	78bb      	ldrb	r3, [r7, #2]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d102      	bne.n	8003b98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_PCD_EP_Open+0xaa>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e00e      	b.n	8003bc4 <HAL_PCD_EP_Open+0xc8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fc47 	bl	8005448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	da0f      	bge.n	8003c00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	3338      	adds	r3, #56	; 0x38
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	705a      	strb	r2, [r3, #1]
 8003bfe:	e00f      	b.n	8003c20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	3304      	adds	r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_PCD_EP_Close+0x6e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e00e      	b.n	8003c58 <HAL_PCD_EP_Close+0x8c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 fc85 	bl	8005558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	3304      	adds	r3, #4
 8003c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	f001 ff60 	bl	8005b98 <USB_EP0StartXfer>
 8003cd8:	e008      	b.n	8003cec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6979      	ldr	r1, [r7, #20]
 8003ce8:	f001 fd12 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	460b      	mov	r3, r1
 8003d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	3338      	adds	r3, #56	; 0x38
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2201      	movs	r2, #1
 8003d34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d36:	7afb      	ldrb	r3, [r7, #11]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	f001 ff16 	bl	8005b98 <USB_EP0StartXfer>
 8003d6c:	e008      	b.n	8003d80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	f001 fcc8 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d901      	bls.n	8003da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e050      	b.n	8003e4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da0f      	bge.n	8003dd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	3338      	adds	r3, #56	; 0x38
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	705a      	strb	r2, [r3, #1]
 8003dce:	e00d      	b.n	8003dec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_PCD_EP_SetStall+0x82>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e01e      	b.n	8003e4a <HAL_PCD_EP_SetStall+0xc0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 f8a5 	bl	8005f6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	b2d9      	uxtb	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f002 fa96 	bl	800636c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d901      	bls.n	8003e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e042      	b.n	8003ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3338      	adds	r3, #56	; 0x38
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00f      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_EP_ClrStall+0x86>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e00e      	b.n	8003ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 f8ad 	bl	8006046 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b08a      	sub	sp, #40	; 0x28
 8003f02:	af02      	add	r7, sp, #8
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	3338      	adds	r3, #56	; 0x38
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d901      	bls.n	8003f36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06c      	b.n	8004010 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d902      	bls.n	8003f52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3303      	adds	r3, #3
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f5a:	e02b      	b.n	8003fb4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d902      	bls.n	8003f78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3303      	adds	r3, #3
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68d9      	ldr	r1, [r3, #12]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4603      	mov	r3, r0
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f001 ff51 	bl	8005e3e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d809      	bhi.n	8003fde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1be      	bne.n	8003f5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d811      	bhi.n	800400e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	43db      	mvns	r3, r3
 8004004:	6939      	ldr	r1, [r7, #16]
 8004006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800400a:	4013      	ands	r3, r2
 800400c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	333c      	adds	r3, #60	; 0x3c
 8004030:	3304      	adds	r3, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	f040 80a0 	bne.w	8004190 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a72      	ldr	r2, [pc, #456]	; (8004228 <PCD_EP_OutXfrComplete_int+0x210>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f240 80dd 	bls.w	800421e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80d7 	beq.w	800421e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	6093      	str	r3, [r2, #8]
 8004084:	e0cb      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	2320      	movs	r3, #32
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	e0bc      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 80b7 	bne.w	800421e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <PCD_EP_OutXfrComplete_int+0x210>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d90f      	bls.n	80040d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	461a      	mov	r2, r3
 80040d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d4:	6093      	str	r3, [r2, #8]
 80040d6:	e0a2      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004112:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4403      	add	r3, r0
 8004136:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4419      	add	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004150:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d114      	bne.n	8004182 <PCD_EP_OutXfrComplete_int+0x16a>
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800417a:	461a      	mov	r2, r3
 800417c:	2101      	movs	r1, #1
 800417e:	f002 f8f5 	bl	800636c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f003 fe3d 	bl	8007e08 <HAL_PCD_DataOutStageCallback>
 800418e:	e046      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a26      	ldr	r2, [pc, #152]	; (800422c <PCD_EP_OutXfrComplete_int+0x214>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d124      	bne.n	80041e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b4:	6093      	str	r3, [r2, #8]
 80041b6:	e032      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	2320      	movs	r3, #32
 80041d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f003 fe14 	bl	8007e08 <HAL_PCD_DataOutStageCallback>
 80041e0:	e01d      	b.n	800421e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x1fa>
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420a:	461a      	mov	r2, r3
 800420c:	2100      	movs	r1, #0
 800420e:	f002 f8ad 	bl	800636c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f003 fdf5 	bl	8007e08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	4f54300a 	.word	0x4f54300a
 800422c:	4f54310a 	.word	0x4f54310a

08004230 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	333c      	adds	r3, #60	; 0x3c
 8004248:	3304      	adds	r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d90e      	bls.n	8004284 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	461a      	mov	r2, r3
 800427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004282:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f003 fdad 	bl	8007de4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d90c      	bls.n	80042ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042a4:	461a      	mov	r2, r3
 80042a6:	2101      	movs	r1, #1
 80042a8:	f002 f860 	bl	800636c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	4f54300a 	.word	0x4f54300a

080042bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
 80042c8:	4613      	mov	r3, r2
 80042ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042da:	883b      	ldrh	r3, [r7, #0]
 80042dc:	0419      	lsls	r1, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
 80042e8:	e028      	b.n	800433c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4413      	add	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e00d      	b.n	800431a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4413      	add	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	3301      	adds	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	3b01      	subs	r3, #1
 8004320:	429a      	cmp	r2, r3
 8004322:	d3ec      	bcc.n	80042fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004324:	883b      	ldrh	r3, [r7, #0]
 8004326:	0418      	lsls	r0, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6819      	ldr	r1, [r3, #0]
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	3b01      	subs	r3, #1
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	4302      	orrs	r2, r0
 8004334:	3340      	adds	r3, #64	; 0x40
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e267      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d075      	beq.n	800448e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	4b88      	ldr	r3, [pc, #544]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b85      	ldr	r3, [pc, #532]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d112      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	4b7e      	ldr	r3, [pc, #504]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05b      	beq.n	800448c <HAL_RCC_OscConfig+0x108>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d157      	bne.n	800448c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e242      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x74>
 80043ea:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a75      	ldr	r2, [pc, #468]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a6f      	ldr	r2, [pc, #444]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6c      	ldr	r2, [pc, #432]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 800441c:	4b69      	ldr	r3, [pc, #420]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a68      	ldr	r2, [pc, #416]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a65      	ldr	r2, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd fa30 	bl	80018a0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd fa2c 	bl	80018a0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e207      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xc0>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fd fa1c 	bl	80018a0 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446c:	f7fd fa18 	bl	80018a0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1f3      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b51      	ldr	r3, [pc, #324]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0xe8>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1c7      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4937      	ldr	r1, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b34      	ldr	r3, [pc, #208]	; (80045c8 <HAL_RCC_OscConfig+0x244>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fd f9d1 	bl	80018a0 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7fd f9cd 	bl	80018a0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1a8      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4925      	ldr	r1, [pc, #148]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_OscConfig+0x244>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fd f9b0 	bl	80018a0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004544:	f7fd f9ac 	bl	80018a0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e187      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d036      	beq.n	80045dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_RCC_OscConfig+0x248>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd f990 	bl	80018a0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd f98c 	bl	80018a0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e167      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x200>
 80045a2:	e01b      	b.n	80045dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_OscConfig+0x248>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fd f979 	bl	80018a0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	e00e      	b.n	80045d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fd f975 	bl	80018a0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d907      	bls.n	80045d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e150      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470000 	.word	0x42470000
 80045cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ea      	bne.n	80045b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8097 	beq.w	8004718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ee:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	4b7d      	ldr	r3, [pc, #500]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4a7c      	ldr	r2, [pc, #496]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
 800460a:	4b7a      	ldr	r3, [pc, #488]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461a:	4b77      	ldr	r3, [pc, #476]	; (80047f8 <HAL_RCC_OscConfig+0x474>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004626:	4b74      	ldr	r3, [pc, #464]	; (80047f8 <HAL_RCC_OscConfig+0x474>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a73      	ldr	r2, [pc, #460]	; (80047f8 <HAL_RCC_OscConfig+0x474>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fd f935 	bl	80018a0 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fd f931 	bl	80018a0 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e10c      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <HAL_RCC_OscConfig+0x474>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x2ea>
 8004660:	4b64      	ldr	r3, [pc, #400]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a63      	ldr	r2, [pc, #396]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	e01c      	b.n	80046a8 <HAL_RCC_OscConfig+0x324>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x30c>
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a5b      	ldr	r2, [pc, #364]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0x324>
 8004690:	4b58      	ldr	r3, [pc, #352]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	4a57      	ldr	r2, [pc, #348]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6713      	str	r3, [r2, #112]	; 0x70
 800469c:	4b55      	ldr	r3, [pc, #340]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a54      	ldr	r2, [pc, #336]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 0304 	bic.w	r3, r3, #4
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fd f8f6 	bl	80018a0 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fd f8f2 	bl	80018a0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0cb      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ee      	beq.n	80046b8 <HAL_RCC_OscConfig+0x334>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fd f8e0 	bl	80018a0 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fd f8dc 	bl	80018a0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0b5      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fa:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ee      	bne.n	80046e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470c:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	4a38      	ldr	r2, [pc, #224]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a1 	beq.w	8004864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b08      	cmp	r3, #8
 800472c:	d05c      	beq.n	80047e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d141      	bne.n	80047ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_RCC_OscConfig+0x478>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd f8b0 	bl	80018a0 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd f8ac 	bl	80018a0 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e087      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	019b      	lsls	r3, r3, #6
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	041b      	lsls	r3, r3, #16
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	491b      	ldr	r1, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCC_OscConfig+0x478>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd f885 	bl	80018a0 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479a:	f7fd f881 	bl	80018a0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e05c      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x416>
 80047b8:	e054      	b.n	8004864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_RCC_OscConfig+0x478>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fd f86e 	bl	80018a0 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd f86a 	bl	80018a0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e045      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x444>
 80047e6:	e03d      	b.n	8004864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e038      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40007000 	.word	0x40007000
 80047fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x4ec>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d028      	beq.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d121      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d11a      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004838:	4293      	cmp	r3, r2
 800483a:	d111      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0cc      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90c      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d044      	beq.n	8004994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d119      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e067      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004964:	f7fc ff9c 	bl	80018a0 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fc ff98 	bl	80018a0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20c      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	490a      	ldr	r1, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	5ccb      	ldrb	r3, [r1, r3]
 8004a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fefc 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	0800a1fc 	.word	0x0800a1fc
 8004a38:	20000064 	.word	0x20000064
 8004a3c:	20000068 	.word	0x20000068

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b094      	sub	sp, #80	; 0x50
 8004a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a50:	2300      	movs	r3, #0
 8004a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a58:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x40>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	f200 80e1 	bhi.w	8004c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a72:	e0db      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a78:	e0db      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7a:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a7e:	e0d8      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a80:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d063      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
 8004aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f04f 0000 	mov.w	r0, #0
 8004aba:	f04f 0100 	mov.w	r1, #0
 8004abe:	0159      	lsls	r1, r3, #5
 8004ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac4:	0150      	lsls	r0, r2, #5
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4621      	mov	r1, r4
 8004acc:	1a51      	subs	r1, r2, r1
 8004ace:	6139      	str	r1, [r7, #16]
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	018b      	lsls	r3, r1, #6
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aee:	4651      	mov	r1, sl
 8004af0:	018a      	lsls	r2, r1, #6
 8004af2:	4651      	mov	r1, sl
 8004af4:	ebb2 0801 	subs.w	r8, r2, r1
 8004af8:	4659      	mov	r1, fp
 8004afa:	eb63 0901 	sbc.w	r9, r3, r1
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b12:	4690      	mov	r8, r2
 8004b14:	4699      	mov	r9, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	eb18 0303 	adds.w	r3, r8, r3
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	462b      	mov	r3, r5
 8004b20:	eb49 0303 	adc.w	r3, r9, r3
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b32:	4629      	mov	r1, r5
 8004b34:	028b      	lsls	r3, r1, #10
 8004b36:	4621      	mov	r1, r4
 8004b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	028a      	lsls	r2, r1, #10
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b46:	2200      	movs	r2, #0
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b50:	f7fb fb8e 	bl	8000270 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b5c:	e058      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5e:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	2200      	movs	r2, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	2300      	movs	r3, #0
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
 8004b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	0159      	lsls	r1, r3, #5
 8004b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b8a:	0150      	lsls	r0, r2, #5
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4641      	mov	r1, r8
 8004b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b96:	4649      	mov	r1, r9
 8004b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	eb45 0303 	adc.w	r3, r5, r3
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be6:	4629      	mov	r1, r5
 8004be8:	028b      	lsls	r3, r1, #10
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	028a      	lsls	r2, r1, #10
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	61fa      	str	r2, [r7, #28]
 8004c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c04:	f7fb fb34 	bl	8000270 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3750      	adds	r7, #80	; 0x50
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000064 	.word	0x20000064

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800a20c 	.word	0x0800a20c

08004c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e07b      	b.n	8004d92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d009      	beq.n	8004cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
 8004cb2:	e005      	b.n	8004cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fc8c 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0104 	and.w	r1, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0210 	and.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	f107 001c 	add.w	r0, r7, #28
 8004da8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d122      	bne.n	8004df8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d105      	bne.n	8004dec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 fb1b 	bl	8006428 <USB_CoreReset>
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	e01a      	b.n	8004e2e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 fb0f 	bl	8006428 <USB_CoreReset>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e20:	e005      	b.n	8004e2e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10b      	bne.n	8004e4c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f043 0206 	orr.w	r2, r3, #6
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e58:	b004      	add	sp, #16
 8004e5a:	4770      	bx	lr

08004e5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d165      	bne.n	8004f3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a41      	ldr	r2, [pc, #260]	; (8004f78 <USB_SetTurnaroundTime+0x11c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d906      	bls.n	8004e86 <USB_SetTurnaroundTime+0x2a>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <USB_SetTurnaroundTime+0x120>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d202      	bcs.n	8004e86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e80:	230f      	movs	r3, #15
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e062      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a3c      	ldr	r2, [pc, #240]	; (8004f7c <USB_SetTurnaroundTime+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d306      	bcc.n	8004e9c <USB_SetTurnaroundTime+0x40>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a3b      	ldr	r2, [pc, #236]	; (8004f80 <USB_SetTurnaroundTime+0x124>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d202      	bcs.n	8004e9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e96:	230e      	movs	r3, #14
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e057      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a38      	ldr	r2, [pc, #224]	; (8004f80 <USB_SetTurnaroundTime+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d306      	bcc.n	8004eb2 <USB_SetTurnaroundTime+0x56>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a37      	ldr	r2, [pc, #220]	; (8004f84 <USB_SetTurnaroundTime+0x128>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d202      	bcs.n	8004eb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004eac:	230d      	movs	r3, #13
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e04c      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a33      	ldr	r2, [pc, #204]	; (8004f84 <USB_SetTurnaroundTime+0x128>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d306      	bcc.n	8004ec8 <USB_SetTurnaroundTime+0x6c>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <USB_SetTurnaroundTime+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d802      	bhi.n	8004ec8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e041      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <USB_SetTurnaroundTime+0x12c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d906      	bls.n	8004ede <USB_SetTurnaroundTime+0x82>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <USB_SetTurnaroundTime+0x130>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d802      	bhi.n	8004ede <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ed8:	230b      	movs	r3, #11
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e036      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <USB_SetTurnaroundTime+0x130>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d906      	bls.n	8004ef4 <USB_SetTurnaroundTime+0x98>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <USB_SetTurnaroundTime+0x134>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d802      	bhi.n	8004ef4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eee:	230a      	movs	r3, #10
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e02b      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <USB_SetTurnaroundTime+0x134>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d906      	bls.n	8004f0a <USB_SetTurnaroundTime+0xae>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <USB_SetTurnaroundTime+0x138>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d202      	bcs.n	8004f0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f04:	2309      	movs	r3, #9
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e020      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <USB_SetTurnaroundTime+0x138>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d306      	bcc.n	8004f20 <USB_SetTurnaroundTime+0xc4>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <USB_SetTurnaroundTime+0x13c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d802      	bhi.n	8004f20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e015      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <USB_SetTurnaroundTime+0x13c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d906      	bls.n	8004f36 <USB_SetTurnaroundTime+0xda>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <USB_SetTurnaroundTime+0x140>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f30:	2307      	movs	r3, #7
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e00a      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f36:	2306      	movs	r3, #6
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e007      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f42:	2309      	movs	r3, #9
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e001      	b.n	8004f4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f48:	2309      	movs	r3, #9
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	00d8acbf 	.word	0x00d8acbf
 8004f7c:	00e4e1c0 	.word	0x00e4e1c0
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	01067380 	.word	0x01067380
 8004f88:	011a499f 	.word	0x011a499f
 8004f8c:	01312cff 	.word	0x01312cff
 8004f90:	014ca43f 	.word	0x014ca43f
 8004f94:	016e3600 	.word	0x016e3600
 8004f98:	01a6ab1f 	.word	0x01a6ab1f
 8004f9c:	01e84800 	.word	0x01e84800

08004fa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f043 0201 	orr.w	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 0201 	bic.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d115      	bne.n	8005032 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005012:	2001      	movs	r0, #1
 8005014:	f7fc fc50 	bl	80018b8 <HAL_Delay>
      ms++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 f972 	bl	8006308 <USB_GetMode>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d01e      	beq.n	8005068 <USB_SetCurrentMode+0x84>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b31      	cmp	r3, #49	; 0x31
 800502e:	d9f0      	bls.n	8005012 <USB_SetCurrentMode+0x2e>
 8005030:	e01a      	b.n	8005068 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d115      	bne.n	8005064 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005044:	2001      	movs	r0, #1
 8005046:	f7fc fc37 	bl	80018b8 <HAL_Delay>
      ms++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 f959 	bl	8006308 <USB_GetMode>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <USB_SetCurrentMode+0x84>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b31      	cmp	r3, #49	; 0x31
 8005060:	d9f0      	bls.n	8005044 <USB_SetCurrentMode+0x60>
 8005062:	e001      	b.n	8005068 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e005      	b.n	8005074 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b32      	cmp	r3, #50	; 0x32
 800506c:	d101      	bne.n	8005072 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800507c:	b084      	sub	sp, #16
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800508a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e009      	b.n	80050b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3340      	adds	r3, #64	; 0x40
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0e      	cmp	r3, #14
 80050b4:	d9f2      	bls.n	800509c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11c      	bne.n	80050f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
 80050f4:	e00b      	b.n	800510e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005120:	4619      	mov	r1, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	461a      	mov	r2, r3
 800512a:	680b      	ldr	r3, [r1, #0]
 800512c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10c      	bne.n	800514e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800513a:	2100      	movs	r1, #0
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f945 	bl	80053cc <USB_SetDevSpeed>
 8005142:	e008      	b.n	8005156 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005144:	2101      	movs	r1, #1
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f940 	bl	80053cc <USB_SetDevSpeed>
 800514c:	e003      	b.n	8005156 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800514e:	2103      	movs	r1, #3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f93b 	bl	80053cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005156:	2110      	movs	r1, #16
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8f3 	bl	8005344 <USB_FlushTxFifo>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f90f 	bl	800538c <USB_FlushRxFifo>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e043      	b.n	800522a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b8:	d118      	bne.n	80051ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	461a      	mov	r2, r3
 80051ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e013      	b.n	80051fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e008      	b.n	80051fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	461a      	mov	r2, r3
 800520c:	2300      	movs	r3, #0
 800520e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3301      	adds	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d3b7      	bcc.n	80051a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	e043      	b.n	80052c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524e:	d118      	bne.n	8005282 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e013      	b.n	8005294 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e008      	b.n	8005294 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	461a      	mov	r2, r3
 8005290:	2300      	movs	r3, #0
 8005292:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	461a      	mov	r2, r3
 80052b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d3b7      	bcc.n	8005238 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f043 0210 	orr.w	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <USB_DevInit+0x2c4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f043 0208 	orr.w	r2, r3, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d107      	bne.n	8005330 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533c:	b004      	add	sp, #16
 800533e:	4770      	bx	lr
 8005340:	803c3800 	.word	0x803c3800

08005344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	019b      	lsls	r3, r3, #6
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <USB_FlushTxFifo+0x44>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e006      	b.n	800537c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d0f1      	beq.n	800535e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	00030d40 	.word	0x00030d40

0800538c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2210      	movs	r2, #16
 800539c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <USB_FlushRxFifo+0x3c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d0f1      	beq.n	800539e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00030d40 	.word	0x00030d40

080053cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e00a      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d002      	beq.n	8005430 <USB_GetDevSpeed+0x32>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d102      	bne.n	8005436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
 8005434:	e001      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005436:	230f      	movs	r3, #15
 8005438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d13a      	bne.n	80054da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d155      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e036      	b.n	8005548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11a      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	78db      	ldrb	r3, [r3, #3]
 800552c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800552e:	430b      	orrs	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d161      	bne.n	8005638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558a:	d11f      	bne.n	80055cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0159      	lsls	r1, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	440b      	add	r3, r1
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	4619      	mov	r1, r3
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <USB_DeactivateEndpoint+0x1b0>)
 8005632:	4013      	ands	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e060      	b.n	80056fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564e:	d11f      	bne.n	8005690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800568e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	43db      	mvns	r3, r3
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b0:	4013      	ands	r3, r2
 80056b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <USB_DeactivateEndpoint+0x1b4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	ec337800 	.word	0xec337800
 800570c:	eff37800 	.word	0xeff37800

08005710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	f040 815c 	bne.w	80059ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d132      	bne.n	80057a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800575c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800577c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	0cdb      	lsrs	r3, r3, #19
 800579a:	04db      	lsls	r3, r3, #19
 800579c:	6113      	str	r3, [r2, #16]
 800579e:	e074      	b.n	800588a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	0cdb      	lsrs	r3, r3, #19
 80057bc:	04db      	lsls	r3, r3, #19
 80057be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6959      	ldr	r1, [r3, #20]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	440b      	add	r3, r1
 80057fc:	1e59      	subs	r1, r3, #1
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	fbb1 f3f3 	udiv	r3, r1, r3
 8005806:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005808:	4b9d      	ldr	r3, [pc, #628]	; (8005a80 <USB_EPStartXfer+0x370>)
 800580a:	400b      	ands	r3, r1
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	0148      	lsls	r0, r1, #5
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	4401      	add	r1, r0
 8005814:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	0148      	lsls	r0, r1, #5
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	4401      	add	r1, r0
 800583a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11f      	bne.n	800588a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d14b      	bne.n	8005928 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d128      	bne.n	8005906 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d110      	bne.n	80058e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e00f      	b.n	8005906 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e12f      	b.n	8005b88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d015      	beq.n	800597c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8117 	beq.w	8005b88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005976:	4313      	orrs	r3, r2
 8005978:	634b      	str	r3, [r1, #52]	; 0x34
 800597a:	e105      	b.n	8005b88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00f      	b.n	80059ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68d9      	ldr	r1, [r3, #12]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	b298      	uxth	r0, r3
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fa2b 	bl	8005e3e <USB_WritePacket>
 80059e8:	e0ce      	b.n	8005b88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a04:	0cdb      	lsrs	r3, r3, #19
 8005a06:	04db      	lsls	r3, r3, #19
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d126      	bne.n	8005a84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7a:	6113      	str	r3, [r2, #16]
 8005a7c:	e036      	b.n	8005aec <USB_EPStartXfer+0x3dc>
 8005a7e:	bf00      	nop
 8005a80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	8afb      	ldrh	r3, [r7, #22]
 8005aaa:	04d9      	lsls	r1, r3, #19
 8005aac:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <USB_EPStartXfer+0x484>)
 8005aae:	400b      	ands	r3, r1
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	0148      	lsls	r0, r1, #5
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005abc:	4313      	orrs	r3, r2
 8005abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	8af9      	ldrh	r1, [r7, #22]
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	0148      	lsls	r0, r1, #5
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	4401      	add	r1, r0
 8005ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10d      	bne.n	8005b0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d128      	bne.n	8005b68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d110      	bne.n	8005b48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e00f      	b.n	8005b68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	1ff80000 	.word	0x1ff80000

08005b98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80cd 	bne.w	8005d54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d132      	bne.n	8005c28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	0cdb      	lsrs	r3, r3, #19
 8005c22:	04db      	lsls	r3, r3, #19
 8005c24:	6113      	str	r3, [r2, #16]
 8005c26:	e04e      	b.n	8005cc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c42:	0cdb      	lsrs	r3, r3, #19
 8005c44:	04db      	lsls	r3, r3, #19
 8005c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d903      	bls.n	8005c80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	0148      	lsls	r0, r1, #5
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	4401      	add	r1, r0
 8005cbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d11e      	bne.n	8005d0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	e092      	b.n	8005e30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d07e      	beq.n	8005e30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	634b      	str	r3, [r1, #52]	; 0x34
 8005d52:	e06d      	b.n	8005e30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	0cdb      	lsrs	r3, r3, #19
 8005d70:	04db      	lsls	r3, r3, #19
 8005d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dde:	6939      	ldr	r1, [r7, #16]
 8005de0:	0148      	lsls	r0, r1, #5
 8005de2:	6979      	ldr	r1, [r7, #20]
 8005de4:	4401      	add	r1, r0
 8005de6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dea:	4313      	orrs	r3, r2
 8005dec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10d      	bne.n	8005e10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68d9      	ldr	r1, [r3, #12]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	460a      	mov	r2, r1
 8005e0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b089      	sub	sp, #36	; 0x24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	71fb      	strb	r3, [r7, #7]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d123      	bne.n	8005eac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e64:	88bb      	ldrh	r3, [r7, #4]
 8005e66:	3303      	adds	r3, #3
 8005e68:	089b      	lsrs	r3, r3, #2
 8005e6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e018      	b.n	8005ea4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	031a      	lsls	r2, r3, #12
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7e:	461a      	mov	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3301      	adds	r3, #1
 8005e96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3e2      	bcc.n	8005e72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3724      	adds	r7, #36	; 0x24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b08b      	sub	sp, #44	; 0x2c
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	e014      	b.n	8005f10 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	3301      	adds	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	3301      	adds	r3, #1
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	3301      	adds	r3, #1
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3e6      	bcc.n	8005ee6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f18:	8bfb      	ldrh	r3, [r7, #30]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01e      	beq.n	8005f5c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	701a      	strb	r2, [r3, #0]
      i++;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	3301      	adds	r3, #1
 8005f48:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f50:	8bfb      	ldrh	r3, [r7, #30]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f56:	8bfb      	ldrh	r3, [r7, #30]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ea      	bne.n	8005f32 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	372c      	adds	r7, #44	; 0x2c
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d12c      	bne.n	8005fe0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db12      	blt.n	8005fbe <USB_EPSetStall+0x54>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00f      	beq.n	8005fbe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e02b      	b.n	8006038 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	db12      	blt.n	8006018 <USB_EPSetStall+0xae>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00f      	beq.n	8006018 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006016:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d128      	bne.n	80060b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	78db      	ldrb	r3, [r3, #3]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d003      	beq.n	8006092 <USB_EPClearStall+0x4c>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d138      	bne.n	8006104 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e027      	b.n	8006104 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	78db      	ldrb	r3, [r3, #3]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d003      	beq.n	80060e4 <USB_EPClearStall+0x9e>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d10f      	bne.n	8006104 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006102:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006130:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006134:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006178:	f023 0303 	bic.w	r3, r3, #3
 800617c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618c:	f023 0302 	bic.w	r3, r3, #2
 8006190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4013      	ands	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	0c1b      	lsrs	r3, r3, #16
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	b29b      	uxth	r3, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800629e:	68bb      	ldr	r3, [r7, #8]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
 80062dc:	01db      	lsls	r3, r3, #7
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062fa:	68bb      	ldr	r3, [r7, #8]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0301 	and.w	r3, r3, #1
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	333c      	adds	r3, #60	; 0x3c
 8006382:	3304      	adds	r3, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4a26      	ldr	r2, [pc, #152]	; (8006424 <USB_EP0_OutStart+0xb8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d90a      	bls.n	80063a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a0:	d101      	bne.n	80063a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e037      	b.n	8006416 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	2300      	movs	r3, #0
 80063b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d4:	f043 0318 	orr.w	r3, r3, #24
 80063d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10f      	bne.n	8006414 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	4f54300a 	.word	0x4f54300a

08006428 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4a13      	ldr	r2, [pc, #76]	; (8006488 <USB_CoreReset+0x60>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e01a      	b.n	800647a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	daf3      	bge.n	8006434 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f043 0201 	orr.w	r2, r3, #1
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	4a09      	ldr	r2, [pc, #36]	; (8006488 <USB_CoreReset+0x60>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d901      	bls.n	800646c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d0f1      	beq.n	800645c <USB_CoreReset+0x34>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	00030d40 	.word	0x00030d40

0800648c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006498:	2010      	movs	r0, #16
 800649a:	f001 ff0d 	bl	80082b8 <USBD_static_malloc>
 800649e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80064ae:	2302      	movs	r3, #2
 80064b0:	e01b      	b.n	80064ea <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7c1b      	ldrb	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2207      	movs	r2, #7
 80064c6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80064c8:	e002      	b.n	80064d0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	220a      	movs	r2, #10
 80064ce:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80064d0:	2304      	movs	r3, #4
 80064d2:	2203      	movs	r2, #3
 80064d4:	2181      	movs	r1, #129	; 0x81
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fddd 	bl	8008096 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80064fe:	2181      	movs	r1, #129	; 0x81
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fdee 	bl	80080e2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fed6 	bl	80082d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	e0e8      	b.n	8006732 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006568:	2b00      	cmp	r3, #0
 800656a:	d046      	beq.n	80065fa <USBD_HID_Setup+0xbe>
 800656c:	2b20      	cmp	r3, #32
 800656e:	f040 80d8 	bne.w	8006722 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	3b02      	subs	r3, #2
 8006578:	2b09      	cmp	r3, #9
 800657a:	d836      	bhi.n	80065ea <USBD_HID_Setup+0xae>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <USBD_HID_Setup+0x48>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065db 	.word	0x080065db
 8006588:	080065bb 	.word	0x080065bb
 800658c:	080065eb 	.word	0x080065eb
 8006590:	080065eb 	.word	0x080065eb
 8006594:	080065eb 	.word	0x080065eb
 8006598:	080065eb 	.word	0x080065eb
 800659c:	080065eb 	.word	0x080065eb
 80065a0:	080065eb 	.word	0x080065eb
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065ad 	.word	0x080065ad
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	885b      	ldrh	r3, [r3, #2]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]
          break;
 80065b8:	e01e      	b.n	80065f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fa22 	bl	8007a0a <USBD_CtlSendData>
          break;
 80065c6:	e017      	b.n	80065f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	605a      	str	r2, [r3, #4]
          break;
 80065d8:	e00e      	b.n	80065f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	2201      	movs	r2, #1
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fa11 	bl	8007a0a <USBD_CtlSendData>
          break;
 80065e8:	e006      	b.n	80065f8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f99b 	bl	8007928 <USBD_CtlError>
          ret = USBD_FAIL;
 80065f2:	2303      	movs	r3, #3
 80065f4:	75fb      	strb	r3, [r7, #23]
          break;
 80065f6:	bf00      	nop
      }
      break;
 80065f8:	e09a      	b.n	8006730 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b0b      	cmp	r3, #11
 8006600:	f200 8086 	bhi.w	8006710 <USBD_HID_Setup+0x1d4>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <USBD_HID_Setup+0xd0>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	0800663d 	.word	0x0800663d
 8006610:	0800671f 	.word	0x0800671f
 8006614:	08006711 	.word	0x08006711
 8006618:	08006711 	.word	0x08006711
 800661c:	08006711 	.word	0x08006711
 8006620:	08006711 	.word	0x08006711
 8006624:	08006667 	.word	0x08006667
 8006628:	08006711 	.word	0x08006711
 800662c:	08006711 	.word	0x08006711
 8006630:	08006711 	.word	0x08006711
 8006634:	080066bf 	.word	0x080066bf
 8006638:	080066e9 	.word	0x080066e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d107      	bne.n	8006658 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006648:	f107 030a 	add.w	r3, r7, #10
 800664c:	2202      	movs	r2, #2
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f9da 	bl	8007a0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006656:	e063      	b.n	8006720 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f964 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 8006660:	2303      	movs	r3, #3
 8006662:	75fb      	strb	r3, [r7, #23]
          break;
 8006664:	e05c      	b.n	8006720 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b22      	cmp	r3, #34	; 0x22
 8006670:	d108      	bne.n	8006684 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b8d      	cmp	r3, #141	; 0x8d
 8006678:	bf28      	it	cs
 800667a:	238d      	movcs	r3, #141	; 0x8d
 800667c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800667e:	4b2f      	ldr	r3, [pc, #188]	; (800673c <USBD_HID_Setup+0x200>)
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	e015      	b.n	80066b0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	885b      	ldrh	r3, [r3, #2]
 8006688:	0a1b      	lsrs	r3, r3, #8
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b21      	cmp	r3, #33	; 0x21
 800668e:	d108      	bne.n	80066a2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006690:	4b2b      	ldr	r3, [pc, #172]	; (8006740 <USBD_HID_Setup+0x204>)
 8006692:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	88db      	ldrh	r3, [r3, #6]
 8006698:	2b09      	cmp	r3, #9
 800669a:	bf28      	it	cs
 800669c:	2309      	movcs	r3, #9
 800669e:	82bb      	strh	r3, [r7, #20]
 80066a0:	e006      	b.n	80066b0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f93f 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	75fb      	strb	r3, [r7, #23]
            break;
 80066ae:	e037      	b.n	8006720 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80066b0:	8abb      	ldrh	r3, [r7, #20]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6939      	ldr	r1, [r7, #16]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 f9a7 	bl	8007a0a <USBD_CtlSendData>
          break;
 80066bc:	e030      	b.n	8006720 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d107      	bne.n	80066da <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3308      	adds	r3, #8
 80066ce:	2201      	movs	r2, #1
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f999 	bl	8007a0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066d8:	e022      	b.n	8006720 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f923 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	75fb      	strb	r3, [r7, #23]
          break;
 80066e6:	e01b      	b.n	8006720 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d106      	bne.n	8006702 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	885b      	ldrh	r3, [r3, #2]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006700:	e00e      	b.n	8006720 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f90f 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 800670a:	2303      	movs	r3, #3
 800670c:	75fb      	strb	r3, [r7, #23]
          break;
 800670e:	e007      	b.n	8006720 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f908 	bl	8007928 <USBD_CtlError>
          ret = USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	75fb      	strb	r3, [r7, #23]
          break;
 800671c:	e000      	b.n	8006720 <USBD_HID_Setup+0x1e4>
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e006      	b.n	8006730 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f8ff 	bl	8007928 <USBD_CtlError>
      ret = USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	75fb      	strb	r3, [r7, #23]
      break;
 800672e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006730:	7dfb      	ldrb	r3, [r7, #23]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000012c 	.word	0x2000012c
 8006740:	20000114 	.word	0x20000114

08006744 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006758:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	e013      	b.n	800678c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b03      	cmp	r3, #3
 800676e:	d10c      	bne.n	800678a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	7b1b      	ldrb	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d108      	bne.n	800678a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2201      	movs	r2, #1
 800677c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	2181      	movs	r1, #129	; 0x81
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f001 fd54 	bl	8008232 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2222      	movs	r2, #34	; 0x22
 80067a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	200000a8 	.word	0x200000a8

080067b4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2222      	movs	r2, #34	; 0x22
 80067c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80067c2:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	200000cc 	.word	0x200000cc

080067d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2222      	movs	r2, #34	; 0x22
 80067e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80067e2:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	200000f0 	.word	0x200000f0

080067f4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006806:	2200      	movs	r2, #0
 8006808:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	220a      	movs	r2, #10
 8006824:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006826:	4b03      	ldr	r3, [pc, #12]	; (8006834 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	20000120 	.word	0x20000120

08006838 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	4613      	mov	r3, r2
 8006844:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	e01f      	b.n	8006890 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	79fa      	ldrb	r2, [r7, #7]
 8006882:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f001 fb9f 	bl	8007fc8 <USBD_LL_Init>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e016      	b.n	80068de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	f107 020e 	add.w	r2, r7, #14
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	4602      	mov	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fbb6 	bl	8008060 <USBD_LL_Start>
 80068f4:	4603      	mov	r3, r0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	4611      	mov	r1, r2
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	4611      	mov	r1, r2
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
  }

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 ff90 	bl	80078b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d01a      	beq.n	80069ee <USBD_LL_SetupStage+0x72>
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d822      	bhi.n	8006a02 <USBD_LL_SetupStage+0x86>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <USBD_LL_SetupStage+0x4a>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d00a      	beq.n	80069da <USBD_LL_SetupStage+0x5e>
 80069c4:	e01d      	b.n	8006a02 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa62 	bl	8006e98 <USBD_StdDevReq>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e020      	b.n	8006a1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fac6 	bl	8006f74 <USBD_StdItfReq>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e016      	b.n	8006a1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fb05 	bl	8007006 <USBD_StdEPReq>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e00c      	b.n	8006a1c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fb85 	bl	8008120 <USBD_LL_StallEP>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1a:	bf00      	nop
  }

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d138      	bne.n	8006aac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d14a      	bne.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d913      	bls.n	8006a80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	bf28      	it	cs
 8006a72:	4613      	movcs	r3, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fff2 	bl	8007a62 <USBD_CtlContinueRx>
 8006a7e:	e030      	b.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d10b      	bne.n	8006aa4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 ffed 	bl	8007a84 <USBD_CtlSendStatus>
 8006aaa:	e01a      	b.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d114      	bne.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	7afa      	ldrb	r2, [r7, #11]
 8006ace:	4611      	mov	r1, r2
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	4798      	blx	r3
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	e000      	b.n	8006ae4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d16b      	bne.n	8006bd8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3314      	adds	r3, #20
 8006b04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d156      	bne.n	8006bbe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d914      	bls.n	8006b46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 ff84 	bl	8007a40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 fb98 	bl	8008274 <USBD_LL_PrepareReceive>
 8006b44:	e03b      	b.n	8006bbe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d11c      	bne.n	8006b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d316      	bcc.n	8006b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d20f      	bcs.n	8006b8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 ff65 	bl	8007a40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2200      	movs	r2, #0
 8006b82:	2100      	movs	r1, #0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 fb75 	bl	8008274 <USBD_LL_PrepareReceive>
 8006b8a:	e018      	b.n	8006bbe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d10b      	bne.n	8006bb0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fab4 	bl	8008120 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 ff76 	bl	8007aaa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d122      	bne.n	8006c0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff fe98 	bl	80068fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bd6:	e01a      	b.n	8006c0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d114      	bne.n	8006c0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	7afa      	ldrb	r2, [r7, #11]
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	4798      	blx	r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	e000      	b.n	8006c10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e02f      	b.n	8006cac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00f      	beq.n	8006c76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6852      	ldr	r2, [r2, #4]
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	4611      	mov	r1, r2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fa0a 	bl	8008096 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2240      	movs	r2, #64	; 0x40
 8006c8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f9fc 	bl	8008096 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2240      	movs	r2, #64	; 0x40
 8006ca8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d106      	bne.n	8006d22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e012      	b.n	8006d6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d10b      	bne.n	8006d6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e014      	b.n	8006db8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d10d      	bne.n	8006db6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	4611      	mov	r1, r2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e014      	b.n	8006e04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d10d      	bne.n	8006e02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d009      	beq.n	8006e50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6852      	ldr	r2, [r2, #4]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
  }

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b087      	sub	sp, #28
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e78:	8a3b      	ldrh	r3, [r7, #16]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b21a      	sxth	r2, r3
 8006e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e88:	89fb      	ldrh	r3, [r7, #14]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d005      	beq.n	8006ebe <USBD_StdDevReq+0x26>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d853      	bhi.n	8006f5e <USBD_StdDevReq+0xc6>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00b      	beq.n	8006ed2 <USBD_StdDevReq+0x3a>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d14f      	bne.n	8006f5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e04a      	b.n	8006f68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b09      	cmp	r3, #9
 8006ed8:	d83b      	bhi.n	8006f52 <USBD_StdDevReq+0xba>
 8006eda:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <USBD_StdDevReq+0x48>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f53 	.word	0x08006f53
 8006eec:	08006f3f 	.word	0x08006f3f
 8006ef0:	08006f53 	.word	0x08006f53
 8006ef4:	08006f13 	.word	0x08006f13
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f53 	.word	0x08006f53
 8006f00:	08006f2b 	.word	0x08006f2b
 8006f04:	08006f1d 	.word	0x08006f1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9de 	bl	80072cc <USBD_GetDescriptor>
          break;
 8006f10:	e024      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fb43 	bl	80075a0 <USBD_SetAddress>
          break;
 8006f1a:	e01f      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb82 	bl	8007628 <USBD_SetConfig>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
          break;
 8006f28:	e018      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fc21 	bl	8007774 <USBD_GetConfig>
          break;
 8006f32:	e013      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fc52 	bl	80077e0 <USBD_GetStatus>
          break;
 8006f3c:	e00e      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc81 	bl	8007848 <USBD_SetFeature>
          break;
 8006f46:	e009      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc90 	bl	8007870 <USBD_ClrFeature>
          break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fce7 	bl	8007928 <USBD_CtlError>
          break;
 8006f5a:	bf00      	nop
      }
      break;
 8006f5c:	e004      	b.n	8006f68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fce1 	bl	8007928 <USBD_CtlError>
      break;
 8006f66:	bf00      	nop
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop

08006f74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d005      	beq.n	8006f9a <USBD_StdItfReq+0x26>
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d82f      	bhi.n	8006ff2 <USBD_StdItfReq+0x7e>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <USBD_StdItfReq+0x26>
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d12b      	bne.n	8006ff2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d81d      	bhi.n	8006fe4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	889b      	ldrh	r3, [r3, #4]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d813      	bhi.n	8006fda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d110      	bne.n	8006fee <USBD_StdItfReq+0x7a>
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fd56 	bl	8007a84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fd8:	e009      	b.n	8006fee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fca3 	bl	8007928 <USBD_CtlError>
          break;
 8006fe2:	e004      	b.n	8006fee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fc9e 	bl	8007928 <USBD_CtlError>
          break;
 8006fec:	e000      	b.n	8006ff0 <USBD_StdItfReq+0x7c>
          break;
 8006fee:	bf00      	nop
      }
      break;
 8006ff0:	e004      	b.n	8006ffc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fc97 	bl	8007928 <USBD_CtlError>
      break;
 8006ffa:	bf00      	nop
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	889b      	ldrh	r3, [r3, #4]
 8007018:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	d007      	beq.n	8007036 <USBD_StdEPReq+0x30>
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	f200 8145 	bhi.w	80072b6 <USBD_StdEPReq+0x2b0>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00c      	beq.n	800704a <USBD_StdEPReq+0x44>
 8007030:	2b20      	cmp	r3, #32
 8007032:	f040 8140 	bne.w	80072b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e13a      	b.n	80072c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d007      	beq.n	8007062 <USBD_StdEPReq+0x5c>
 8007052:	2b03      	cmp	r3, #3
 8007054:	f300 8129 	bgt.w	80072aa <USBD_StdEPReq+0x2a4>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d07f      	beq.n	800715c <USBD_StdEPReq+0x156>
 800705c:	2b01      	cmp	r3, #1
 800705e:	d03c      	beq.n	80070da <USBD_StdEPReq+0xd4>
 8007060:	e123      	b.n	80072aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d002      	beq.n	8007074 <USBD_StdEPReq+0x6e>
 800706e:	2b03      	cmp	r3, #3
 8007070:	d016      	beq.n	80070a0 <USBD_StdEPReq+0x9a>
 8007072:	e02c      	b.n	80070ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <USBD_StdEPReq+0x90>
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b80      	cmp	r3, #128	; 0x80
 800707e:	d00a      	beq.n	8007096 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f84b 	bl	8008120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f847 	bl	8008120 <USBD_LL_StallEP>
 8007092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007094:	e020      	b.n	80070d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc45 	bl	8007928 <USBD_CtlError>
              break;
 800709e:	e01b      	b.n	80070d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10e      	bne.n	80070c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USBD_StdEPReq+0xc0>
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d008      	beq.n	80070c6 <USBD_StdEPReq+0xc0>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f82d 	bl	8008120 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fcdc 	bl	8007a84 <USBD_CtlSendStatus>

              break;
 80070cc:	e004      	b.n	80070d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc29 	bl	8007928 <USBD_CtlError>
              break;
 80070d6:	bf00      	nop
          }
          break;
 80070d8:	e0ec      	b.n	80072b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d002      	beq.n	80070ec <USBD_StdEPReq+0xe6>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d016      	beq.n	8007118 <USBD_StdEPReq+0x112>
 80070ea:	e030      	b.n	800714e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <USBD_StdEPReq+0x108>
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d00a      	beq.n	800710e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f80f 	bl	8008120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f80b 	bl	8008120 <USBD_LL_StallEP>
 800710a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800710c:	e025      	b.n	800715a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc09 	bl	8007928 <USBD_CtlError>
              break;
 8007116:	e020      	b.n	800715a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d11b      	bne.n	8007158 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f815 	bl	800815e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fca5 	bl	8007a84 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800714c:	e004      	b.n	8007158 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fbe9 	bl	8007928 <USBD_CtlError>
              break;
 8007156:	e000      	b.n	800715a <USBD_StdEPReq+0x154>
              break;
 8007158:	bf00      	nop
          }
          break;
 800715a:	e0ab      	b.n	80072b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d002      	beq.n	800716e <USBD_StdEPReq+0x168>
 8007168:	2b03      	cmp	r3, #3
 800716a:	d032      	beq.n	80071d2 <USBD_StdEPReq+0x1cc>
 800716c:	e097      	b.n	800729e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <USBD_StdEPReq+0x17e>
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	d004      	beq.n	8007184 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fbd3 	bl	8007928 <USBD_CtlError>
                break;
 8007182:	e091      	b.n	80072a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007188:	2b00      	cmp	r3, #0
 800718a:	da0b      	bge.n	80071a4 <USBD_StdEPReq+0x19e>
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	3310      	adds	r3, #16
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	3304      	adds	r3, #4
 80071a2:	e00b      	b.n	80071bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2202      	movs	r2, #2
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc1d 	bl	8007a0a <USBD_CtlSendData>
              break;
 80071d0:	e06a      	b.n	80072a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da11      	bge.n	80071fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	6879      	ldr	r1, [r7, #4]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	3324      	adds	r3, #36	; 0x24
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d117      	bne.n	8007224 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb96 	bl	8007928 <USBD_CtlError>
                  break;
 80071fc:	e054      	b.n	80072a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	f003 020f 	and.w	r2, r3, #15
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fb83 	bl	8007928 <USBD_CtlError>
                  break;
 8007222:	e041      	b.n	80072a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	da0b      	bge.n	8007244 <USBD_StdEPReq+0x23e>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	3310      	adds	r3, #16
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4413      	add	r3, r2
 8007240:	3304      	adds	r3, #4
 8007242:	e00b      	b.n	800725c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	3304      	adds	r3, #4
 800725c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <USBD_StdEPReq+0x264>
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d103      	bne.n	8007272 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e00e      	b.n	8007290 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ff90 	bl	800819c <USBD_LL_IsStallEP>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e002      	b.n	8007290 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2202      	movs	r2, #2
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fbb7 	bl	8007a0a <USBD_CtlSendData>
              break;
 800729c:	e004      	b.n	80072a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb41 	bl	8007928 <USBD_CtlError>
              break;
 80072a6:	bf00      	nop
          }
          break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fb3b 	bl	8007928 <USBD_CtlError>
          break;
 80072b2:	bf00      	nop
      }
      break;
 80072b4:	e004      	b.n	80072c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb35 	bl	8007928 <USBD_CtlError>
      break;
 80072be:	bf00      	nop
  }

  return ret;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	885b      	ldrh	r3, [r3, #2]
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	2b06      	cmp	r3, #6
 80072ee:	f200 8128 	bhi.w	8007542 <USBD_GetDescriptor+0x276>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <USBD_GetDescriptor+0x2c>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	08007315 	.word	0x08007315
 80072fc:	0800732d 	.word	0x0800732d
 8007300:	0800736d 	.word	0x0800736d
 8007304:	08007543 	.word	0x08007543
 8007308:	08007543 	.word	0x08007543
 800730c:	080074e3 	.word	0x080074e3
 8007310:	0800750f 	.word	0x0800750f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7c12      	ldrb	r2, [r2, #16]
 8007320:	f107 0108 	add.w	r1, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
      break;
 800732a:	e112      	b.n	8007552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	7c1b      	ldrb	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10d      	bne.n	8007350 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f107 0208 	add.w	r2, r7, #8
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
 8007344:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3301      	adds	r3, #1
 800734a:	2202      	movs	r2, #2
 800734c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800734e:	e100      	b.n	8007552 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f107 0208 	add.w	r2, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	2202      	movs	r2, #2
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e0f2      	b.n	8007552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	885b      	ldrh	r3, [r3, #2]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b05      	cmp	r3, #5
 8007374:	f200 80ac 	bhi.w	80074d0 <USBD_GetDescriptor+0x204>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <USBD_GetDescriptor+0xb4>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007399 	.word	0x08007399
 8007384:	080073cd 	.word	0x080073cd
 8007388:	08007401 	.word	0x08007401
 800738c:	08007435 	.word	0x08007435
 8007390:	08007469 	.word	0x08007469
 8007394:	0800749d 	.word	0x0800749d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7c12      	ldrb	r2, [r2, #16]
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ba:	e091      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fab2 	bl	8007928 <USBD_CtlError>
            err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ca:	e089      	b.n	80074e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	7c12      	ldrb	r2, [r2, #16]
 80073e4:	f107 0108 	add.w	r1, r7, #8
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
 80073ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ee:	e077      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa98 	bl	8007928 <USBD_CtlError>
            err++;
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	3301      	adds	r3, #1
 80073fc:	72fb      	strb	r3, [r7, #11]
          break;
 80073fe:	e06f      	b.n	80074e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7c12      	ldrb	r2, [r2, #16]
 8007418:	f107 0108 	add.w	r1, r7, #8
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007422:	e05d      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa7e 	bl	8007928 <USBD_CtlError>
            err++;
 800742c:	7afb      	ldrb	r3, [r7, #11]
 800742e:	3301      	adds	r3, #1
 8007430:	72fb      	strb	r3, [r7, #11]
          break;
 8007432:	e055      	b.n	80074e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007456:	e043      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa64 	bl	8007928 <USBD_CtlError>
            err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
          break;
 8007466:	e03b      	b.n	80074e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748a:	e029      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa4a 	bl	8007928 <USBD_CtlError>
            err++;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	3301      	adds	r3, #1
 8007498:	72fb      	strb	r3, [r7, #11]
          break;
 800749a:	e021      	b.n	80074e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7c12      	ldrb	r2, [r2, #16]
 80074b4:	f107 0108 	add.w	r1, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074be:	e00f      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa30 	bl	8007928 <USBD_CtlError>
            err++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	3301      	adds	r3, #1
 80074cc:	72fb      	strb	r3, [r7, #11]
          break;
 80074ce:	e007      	b.n	80074e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa28 	bl	8007928 <USBD_CtlError>
          err++;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	3301      	adds	r3, #1
 80074dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80074de:	bf00      	nop
      }
      break;
 80074e0:	e037      	b.n	8007552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7c1b      	ldrb	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	f107 0208 	add.w	r2, r7, #8
 80074f6:	4610      	mov	r0, r2
 80074f8:	4798      	blx	r3
 80074fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074fc:	e029      	b.n	8007552 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa11 	bl	8007928 <USBD_CtlError>
        err++;
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	3301      	adds	r3, #1
 800750a:	72fb      	strb	r3, [r7, #11]
      break;
 800750c:	e021      	b.n	8007552 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10d      	bne.n	8007532 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	f107 0208 	add.w	r2, r7, #8
 8007522:	4610      	mov	r0, r2
 8007524:	4798      	blx	r3
 8007526:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	2207      	movs	r2, #7
 800752e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007530:	e00f      	b.n	8007552 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9f7 	bl	8007928 <USBD_CtlError>
        err++;
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	3301      	adds	r3, #1
 800753e:	72fb      	strb	r3, [r7, #11]
      break;
 8007540:	e007      	b.n	8007552 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f9ef 	bl	8007928 <USBD_CtlError>
      err++;
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	3301      	adds	r3, #1
 800754e:	72fb      	strb	r3, [r7, #11]
      break;
 8007550:	bf00      	nop
  }

  if (err != 0U)
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11e      	bne.n	8007596 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	88db      	ldrh	r3, [r3, #6]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d016      	beq.n	800758e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007560:	893b      	ldrh	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88da      	ldrh	r2, [r3, #6]
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	4293      	cmp	r3, r2
 800756e:	bf28      	it	cs
 8007570:	4613      	movcs	r3, r2
 8007572:	b29b      	uxth	r3, r3
 8007574:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007576:	893b      	ldrh	r3, [r7, #8]
 8007578:	461a      	mov	r2, r3
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa44 	bl	8007a0a <USBD_CtlSendData>
 8007582:	e009      	b.n	8007598 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9ce 	bl	8007928 <USBD_CtlError>
 800758c:	e004      	b.n	8007598 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa78 	bl	8007a84 <USBD_CtlSendStatus>
 8007594:	e000      	b.n	8007598 <USBD_GetDescriptor+0x2cc>
    return;
 8007596:	bf00      	nop
  }
}
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop

080075a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	889b      	ldrh	r3, [r3, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d131      	bne.n	8007616 <USBD_SetAddress+0x76>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88db      	ldrh	r3, [r3, #6]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d12d      	bne.n	8007616 <USBD_SetAddress+0x76>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	885b      	ldrh	r3, [r3, #2]
 80075be:	2b7f      	cmp	r3, #127	; 0x7f
 80075c0:	d829      	bhi.n	8007616 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d104      	bne.n	80075e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f9a3 	bl	8007928 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e2:	e01d      	b.n	8007620 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdff 	bl	80081f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa44 	bl	8007a84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760a:	e009      	b.n	8007620 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007614:	e004      	b.n	8007620 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f985 	bl	8007928 <USBD_CtlError>
  }
}
 800761e:	bf00      	nop
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	4b4c      	ldr	r3, [pc, #304]	; (8007770 <USBD_SetConfig+0x148>)
 800763e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007640:	4b4b      	ldr	r3, [pc, #300]	; (8007770 <USBD_SetConfig+0x148>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d905      	bls.n	8007654 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f96c 	bl	8007928 <USBD_CtlError>
    return USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e088      	b.n	8007766 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d002      	beq.n	8007666 <USBD_SetConfig+0x3e>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d025      	beq.n	80076b0 <USBD_SetConfig+0x88>
 8007664:	e071      	b.n	800774a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <USBD_SetConfig+0x148>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01c      	beq.n	80076a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800766e:	4b40      	ldr	r3, [pc, #256]	; (8007770 <USBD_SetConfig+0x148>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007678:	4b3d      	ldr	r3, [pc, #244]	; (8007770 <USBD_SetConfig+0x148>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff f948 	bl	8006914 <USBD_SetClassConfig>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f949 	bl	8007928 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007696:	e065      	b.n	8007764 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f9f3 	bl	8007a84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076a6:	e05d      	b.n	8007764 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f9eb 	bl	8007a84 <USBD_CtlSendStatus>
      break;
 80076ae:	e059      	b.n	8007764 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076b0:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <USBD_SetConfig+0x148>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d112      	bne.n	80076de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076c0:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <USBD_SetConfig+0x148>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <USBD_SetConfig+0x148>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff f93b 	bl	800694c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9d4 	bl	8007a84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076dc:	e042      	b.n	8007764 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <USBD_SetConfig+0x148>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d02a      	beq.n	8007742 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff f929 	bl	800694c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <USBD_SetConfig+0x148>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <USBD_SetConfig+0x148>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff f902 	bl	8006914 <USBD_SetClassConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f903 	bl	8007928 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff f90e 	bl	800694c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007738:	e014      	b.n	8007764 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9a2 	bl	8007a84 <USBD_CtlSendStatus>
      break;
 8007740:	e010      	b.n	8007764 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f99e 	bl	8007a84 <USBD_CtlSendStatus>
      break;
 8007748:	e00c      	b.n	8007764 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8eb 	bl	8007928 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <USBD_SetConfig+0x148>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff f8f7 	bl	800694c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000820 	.word	0x20000820

08007774 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d004      	beq.n	8007790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f8cd 	bl	8007928 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800778e:	e023      	b.n	80077d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	dc02      	bgt.n	80077a2 <USBD_GetConfig+0x2e>
 800779c:	2b00      	cmp	r3, #0
 800779e:	dc03      	bgt.n	80077a8 <USBD_GetConfig+0x34>
 80077a0:	e015      	b.n	80077ce <USBD_GetConfig+0x5a>
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d00b      	beq.n	80077be <USBD_GetConfig+0x4a>
 80077a6:	e012      	b.n	80077ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3308      	adds	r3, #8
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f927 	bl	8007a0a <USBD_CtlSendData>
        break;
 80077bc:	e00c      	b.n	80077d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	2201      	movs	r2, #1
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f91f 	bl	8007a0a <USBD_CtlSendData>
        break;
 80077cc:	e004      	b.n	80077d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8a9 	bl	8007928 <USBD_CtlError>
        break;
 80077d6:	bf00      	nop
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d81e      	bhi.n	8007836 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d004      	beq.n	800780a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f890 	bl	8007928 <USBD_CtlError>
        break;
 8007808:	e01a      	b.n	8007840 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f043 0202 	orr.w	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	330c      	adds	r3, #12
 800782a:	2202      	movs	r2, #2
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8eb 	bl	8007a0a <USBD_CtlSendData>
      break;
 8007834:	e004      	b.n	8007840 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f875 	bl	8007928 <USBD_CtlError>
      break;
 800783e:	bf00      	nop
  }
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d106      	bne.n	8007868 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f90e 	bl	8007a84 <USBD_CtlSendStatus>
  }
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	2b02      	cmp	r3, #2
 8007886:	d80b      	bhi.n	80078a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	885b      	ldrh	r3, [r3, #2]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10c      	bne.n	80078aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8f3 	bl	8007a84 <USBD_CtlSendStatus>
      }
      break;
 800789e:	e004      	b.n	80078aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f840 	bl	8007928 <USBD_CtlError>
      break;
 80078a8:	e000      	b.n	80078ac <USBD_ClrFeature+0x3c>
      break;
 80078aa:	bf00      	nop
  }
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3301      	adds	r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fabb 	bl	8006e5a <SWAPBYTE>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff faae 	bl	8006e5a <SWAPBYTE>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3301      	adds	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff faa1 	bl	8006e5a <SWAPBYTE>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	80da      	strh	r2, [r3, #6]
}
 8007920:	bf00      	nop
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fbf3 	bl	8008120 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800793a:	2100      	movs	r1, #0
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbef 	bl	8008120 <USBD_LL_StallEP>
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d036      	beq.n	80079ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007964:	6938      	ldr	r0, [r7, #16]
 8007966:	f000 f836 	bl	80079d6 <USBD_GetLen>
 800796a:	4603      	mov	r3, r0
 800796c:	3301      	adds	r3, #1
 800796e:	b29b      	uxth	r3, r3
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4413      	add	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	701a      	strb	r2, [r3, #0]
  idx++;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	3301      	adds	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4413      	add	r3, r2
 8007990:	2203      	movs	r2, #3
 8007992:	701a      	strb	r2, [r3, #0]
  idx++;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	3301      	adds	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800799a:	e013      	b.n	80079c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3301      	adds	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
    idx++;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	3301      	adds	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	3301      	adds	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e7      	bne.n	800799c <USBD_GetString+0x52>
 80079cc:	e000      	b.n	80079d0 <USBD_GetString+0x86>
    return;
 80079ce:	bf00      	nop
  }
}
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079e6:	e005      	b.n	80079f4 <USBD_GetLen+0x1e>
  {
    len++;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	3301      	adds	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f5      	bne.n	80079e8 <USBD_GetLen+0x12>
  }

  return len;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fbfe 	bl	8008232 <USBD_LL_Transmit>

  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	2100      	movs	r1, #0
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fbed 	bl	8008232 <USBD_LL_Transmit>

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	2100      	movs	r1, #0
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fbfd 	bl	8008274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2204      	movs	r2, #4
 8007a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a94:	2300      	movs	r3, #0
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fbc9 	bl	8008232 <USBD_LL_Transmit>

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2205      	movs	r2, #5
 8007ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aba:	2300      	movs	r3, #0
 8007abc:	2200      	movs	r2, #0
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fbd7 	bl	8008274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	490e      	ldr	r1, [pc, #56]	; (8007b10 <MX_USB_DEVICE_Init+0x40>)
 8007ad8:	480e      	ldr	r0, [pc, #56]	; (8007b14 <MX_USB_DEVICE_Init+0x44>)
 8007ada:	f7fe fead 	bl	8006838 <USBD_Init>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ae4:	f7f9 fa16 	bl	8000f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007ae8:	490b      	ldr	r1, [pc, #44]	; (8007b18 <MX_USB_DEVICE_Init+0x48>)
 8007aea:	480a      	ldr	r0, [pc, #40]	; (8007b14 <MX_USB_DEVICE_Init+0x44>)
 8007aec:	f7fe fed4 	bl	8006898 <USBD_RegisterClass>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007af6:	f7f9 fa0d 	bl	8000f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007afa:	4806      	ldr	r0, [pc, #24]	; (8007b14 <MX_USB_DEVICE_Init+0x44>)
 8007afc:	f7fe fef3 	bl	80068e6 <USBD_Start>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007b06:	f7f9 fa05 	bl	8000f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200001bc 	.word	0x200001bc
 8007b14:	20000824 	.word	0x20000824
 8007b18:	20000070 	.word	0x20000070

08007b1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2212      	movs	r2, #18
 8007b2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b2e:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	200001d8 	.word	0x200001d8

08007b40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b52:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	200001ec 	.word	0x200001ec

08007b64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4907      	ldr	r1, [pc, #28]	; (8007b98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b7a:	4808      	ldr	r0, [pc, #32]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b7c:	f7ff fee5 	bl	800794a <USBD_GetString>
 8007b80:	e004      	b.n	8007b8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b86:	4805      	ldr	r0, [pc, #20]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b88:	f7ff fedf 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000af4 	.word	0x20000af4
 8007b9c:	08008cf8 	.word	0x08008cf8

08007ba0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	4904      	ldr	r1, [pc, #16]	; (8007bc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bb0:	4804      	ldr	r0, [pc, #16]	; (8007bc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bb2:	f7ff feca 	bl	800794a <USBD_GetString>
  return USBD_StrDesc;
 8007bb6:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000af4 	.word	0x20000af4
 8007bc4:	08008d08 	.word	0x08008d08

08007bc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	221a      	movs	r2, #26
 8007bd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bda:	f000 f843 	bl	8007c64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bde:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	200001f0 	.word	0x200001f0

08007bec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4907      	ldr	r1, [pc, #28]	; (8007c20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c02:	4808      	ldr	r0, [pc, #32]	; (8007c24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c04:	f7ff fea1 	bl	800794a <USBD_GetString>
 8007c08:	e004      	b.n	8007c14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4904      	ldr	r1, [pc, #16]	; (8007c20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c0e:	4805      	ldr	r0, [pc, #20]	; (8007c24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c10:	f7ff fe9b 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c14:	4b02      	ldr	r3, [pc, #8]	; (8007c20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000af4 	.word	0x20000af4
 8007c24:	08008d18 	.word	0x08008d18

08007c28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4907      	ldr	r1, [pc, #28]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c3e:	4808      	ldr	r0, [pc, #32]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c40:	f7ff fe83 	bl	800794a <USBD_GetString>
 8007c44:	e004      	b.n	8007c50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4904      	ldr	r1, [pc, #16]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c4a:	4805      	ldr	r0, [pc, #20]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c4c:	f7ff fe7d 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000af4 	.word	0x20000af4
 8007c60:	08008d24 	.word	0x08008d24

08007c64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <Get_SerialNum+0x44>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c70:	4b0e      	ldr	r3, [pc, #56]	; (8007cac <Get_SerialNum+0x48>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <Get_SerialNum+0x4c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4413      	add	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	4909      	ldr	r1, [pc, #36]	; (8007cb4 <Get_SerialNum+0x50>)
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f814 	bl	8007cbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c94:	2204      	movs	r2, #4
 8007c96:	4908      	ldr	r1, [pc, #32]	; (8007cb8 <Get_SerialNum+0x54>)
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f000 f80f 	bl	8007cbc <IntToUnicode>
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	1fff7a10 	.word	0x1fff7a10
 8007cac:	1fff7a14 	.word	0x1fff7a14
 8007cb0:	1fff7a18 	.word	0x1fff7a18
 8007cb4:	200001f2 	.word	0x200001f2
 8007cb8:	20000202 	.word	0x20000202

08007cbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
 8007cd2:	e027      	b.n	8007d24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0f1b      	lsrs	r3, r3, #28
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	d80b      	bhi.n	8007cf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	0f1b      	lsrs	r3, r3, #28
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	440b      	add	r3, r1
 8007cec:	3230      	adds	r2, #48	; 0x30
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	e00a      	b.n	8007d0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	0f1b      	lsrs	r3, r3, #28
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	440b      	add	r3, r1
 8007d04:	3237      	adds	r2, #55	; 0x37
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	3301      	adds	r3, #1
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	3301      	adds	r3, #1
 8007d22:	75fb      	strb	r3, [r7, #23]
 8007d24:	7dfa      	ldrb	r2, [r7, #23]
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d3d3      	bcc.n	8007cd4 <IntToUnicode+0x18>
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d5c:	d13a      	bne.n	8007dd4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d5e:	2300      	movs	r3, #0
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6e:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d80:	2302      	movs	r3, #2
 8007d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d8c:	230a      	movs	r3, #10
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	4619      	mov	r1, r3
 8007d96:	4812      	ldr	r0, [pc, #72]	; (8007de0 <HAL_PCD_MspInit+0xa4>)
 8007d98:	f7f9 fec4 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	4a0e      	ldr	r2, [pc, #56]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	6353      	str	r3, [r2, #52]	; 0x34
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db0:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db6:	6453      	str	r3, [r2, #68]	; 0x44
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <HAL_PCD_MspInit+0xa0>)
 8007dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	2043      	movs	r0, #67	; 0x43
 8007dca:	f7f9 fe74 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dce:	2043      	movs	r0, #67	; 0x43
 8007dd0:	f7f9 fe8d 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	40020000 	.word	0x40020000

08007de4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f7fe fdbe 	bl	800697c <USBD_LL_SetupStage>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7fe fdf8 	bl	8006a26 <USBD_LL_DataOutStage>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	3348      	adds	r3, #72	; 0x48
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	4619      	mov	r1, r3
 8007e66:	f7fe fe41 	bl	8006aec <USBD_LL_DataInStage>
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe ff55 	bl	8006d30 <USBD_LL_SOF>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e96:	2301      	movs	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
 8007ea6:	e008      	b.n	8007eba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d102      	bne.n	8007eb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
 8007eb4:	e001      	b.n	8007eba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007eb6:	f7f9 f82d 	bl	8000f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ec0:	7bfa      	ldrb	r2, [r7, #15]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fe fef5 	bl	8006cb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fea1 	bl	8006c18 <USBD_LL_Reset>
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fef0 	bl	8006cd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f06:	f043 0301 	orr.w	r3, r3, #1
 8007f0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <HAL_PCD_SuspendCallback+0x48>)
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	4a03      	ldr	r2, [pc, #12]	; (8007f28 <HAL_PCD_SuspendCallback+0x48>)
 8007f1a:	f043 0306 	orr.w	r3, r3, #6
 8007f1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed00 	.word	0xe000ed00

08007f2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fee0 	bl	8006d00 <USBD_LL_Resume>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe ff2e 	bl	8006dc0 <USBD_LL_IsoOUTIncomplete>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fef6 	bl	8006d74 <USBD_LL_IsoINIncomplete>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe ff34 	bl	8006e0c <USBD_LL_DevConnected>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe ff31 	bl	8006e22 <USBD_LL_DevDisconnected>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d13c      	bne.n	8008052 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fd8:	4a20      	ldr	r2, [pc, #128]	; (800805c <USBD_LL_Init+0x94>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1e      	ldr	r2, [pc, #120]	; (800805c <USBD_LL_Init+0x94>)
 8007fe4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <USBD_LL_Init+0x94>)
 8007fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	; (800805c <USBD_LL_Init+0x94>)
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ff6:	4b19      	ldr	r3, [pc, #100]	; (800805c <USBD_LL_Init+0x94>)
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ffc:	4b17      	ldr	r3, [pc, #92]	; (800805c <USBD_LL_Init+0x94>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008002:	4b16      	ldr	r3, [pc, #88]	; (800805c <USBD_LL_Init+0x94>)
 8008004:	2202      	movs	r2, #2
 8008006:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <USBD_LL_Init+0x94>)
 800800a:	2200      	movs	r2, #0
 800800c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <USBD_LL_Init+0x94>)
 8008010:	2200      	movs	r2, #0
 8008012:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008014:	4b11      	ldr	r3, [pc, #68]	; (800805c <USBD_LL_Init+0x94>)
 8008016:	2200      	movs	r2, #0
 8008018:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800801a:	4b10      	ldr	r3, [pc, #64]	; (800805c <USBD_LL_Init+0x94>)
 800801c:	2200      	movs	r2, #0
 800801e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008020:	4b0e      	ldr	r3, [pc, #56]	; (800805c <USBD_LL_Init+0x94>)
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008026:	480d      	ldr	r0, [pc, #52]	; (800805c <USBD_LL_Init+0x94>)
 8008028:	f7fb f841 	bl	80030ae <HAL_PCD_Init>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008032:	f7f8 ff6f 	bl	8000f14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	4808      	ldr	r0, [pc, #32]	; (800805c <USBD_LL_Init+0x94>)
 800803a:	f7fc f986 	bl	800434a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800803e:	2240      	movs	r2, #64	; 0x40
 8008040:	2100      	movs	r1, #0
 8008042:	4806      	ldr	r0, [pc, #24]	; (800805c <USBD_LL_Init+0x94>)
 8008044:	f7fc f93a 	bl	80042bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008048:	2280      	movs	r2, #128	; 0x80
 800804a:	2101      	movs	r1, #1
 800804c:	4803      	ldr	r0, [pc, #12]	; (800805c <USBD_LL_Init+0x94>)
 800804e:	f7fc f935 	bl	80042bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000cf4 	.word	0x20000cf4

08008060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008076:	4618      	mov	r0, r3
 8008078:	f7fb f936 	bl	80032e8 <HAL_PCD_Start>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 f930 	bl	80082e8 <USBD_Get_USB_Status>
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808c:	7bbb      	ldrb	r3, [r7, #14]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	4608      	mov	r0, r1
 80080a0:	4611      	mov	r1, r2
 80080a2:	461a      	mov	r2, r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	70fb      	strb	r3, [r7, #3]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70bb      	strb	r3, [r7, #2]
 80080ac:	4613      	mov	r3, r2
 80080ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080be:	78bb      	ldrb	r3, [r7, #2]
 80080c0:	883a      	ldrh	r2, [r7, #0]
 80080c2:	78f9      	ldrb	r1, [r7, #3]
 80080c4:	f7fb fd1a 	bl	8003afc <HAL_PCD_EP_Open>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f90a 	bl	80082e8 <USBD_Get_USB_Status>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4611      	mov	r1, r2
 8008100:	4618      	mov	r0, r3
 8008102:	f7fb fd63 	bl	8003bcc <HAL_PCD_EP_Close>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f8eb 	bl	80082e8 <USBD_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008116:	7bbb      	ldrb	r3, [r7, #14]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7fb fe23 	bl	8003d8a <HAL_PCD_EP_SetStall>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f8cc 	bl	80082e8 <USBD_Get_USB_Status>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008154:	7bbb      	ldrb	r3, [r7, #14]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f7fb fe68 	bl	8003e52 <HAL_PCD_EP_ClrStall>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f8ad 	bl	80082e8 <USBD_Get_USB_Status>
 800818e:	4603      	mov	r3, r0
 8008190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008192:	7bbb      	ldrb	r3, [r7, #14]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da0b      	bge.n	80081d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	333e      	adds	r3, #62	; 0x3e
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	e00b      	b.n	80081e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fb fc4d 	bl	8003ab2 <HAL_PCD_SetAddress>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f862 	bl	80082e8 <USBD_Get_USB_Status>
 8008224:	4603      	mov	r3, r0
 8008226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008228:	7bbb      	ldrb	r3, [r7, #14]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	460b      	mov	r3, r1
 8008240:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008250:	7af9      	ldrb	r1, [r7, #11]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	f7fb fd4e 	bl	8003cf6 <HAL_PCD_EP_Transmit>
 800825a:	4603      	mov	r3, r0
 800825c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	4618      	mov	r0, r3
 8008262:	f000 f841 	bl	80082e8 <USBD_Get_USB_Status>
 8008266:	4603      	mov	r3, r0
 8008268:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800826a:	7dbb      	ldrb	r3, [r7, #22]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	460b      	mov	r3, r1
 8008282:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008292:	7af9      	ldrb	r1, [r7, #11]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	f7fb fce2 	bl	8003c60 <HAL_PCD_EP_Receive>
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f820 	bl	80082e8 <USBD_Get_USB_Status>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082c0:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <USBD_static_malloc+0x18>)
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200010fc 	.word	0x200010fc

080082d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d817      	bhi.n	800832c <USBD_Get_USB_Status+0x44>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBD_Get_USB_Status+0x1c>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008315 	.word	0x08008315
 8008308:	0800831b 	.word	0x0800831b
 800830c:	08008321 	.word	0x08008321
 8008310:	08008327 	.word	0x08008327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	e00b      	b.n	8008332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	73fb      	strb	r3, [r7, #15]
    break;
 800831e:	e008      	b.n	8008332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e005      	b.n	8008332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e002      	b.n	8008332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	bf00      	nop
  }
  return usb_status;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <__errno>:
 8008340:	4b01      	ldr	r3, [pc, #4]	; (8008348 <__errno+0x8>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	2000020c 	.word	0x2000020c

0800834c <__libc_init_array>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4d0d      	ldr	r5, [pc, #52]	; (8008384 <__libc_init_array+0x38>)
 8008350:	4c0d      	ldr	r4, [pc, #52]	; (8008388 <__libc_init_array+0x3c>)
 8008352:	1b64      	subs	r4, r4, r5
 8008354:	10a4      	asrs	r4, r4, #2
 8008356:	2600      	movs	r6, #0
 8008358:	42a6      	cmp	r6, r4
 800835a:	d109      	bne.n	8008370 <__libc_init_array+0x24>
 800835c:	4d0b      	ldr	r5, [pc, #44]	; (800838c <__libc_init_array+0x40>)
 800835e:	4c0c      	ldr	r4, [pc, #48]	; (8008390 <__libc_init_array+0x44>)
 8008360:	f000 fc8e 	bl	8008c80 <_init>
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	2600      	movs	r6, #0
 800836a:	42a6      	cmp	r6, r4
 800836c:	d105      	bne.n	800837a <__libc_init_array+0x2e>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	f855 3b04 	ldr.w	r3, [r5], #4
 8008374:	4798      	blx	r3
 8008376:	3601      	adds	r6, #1
 8008378:	e7ee      	b.n	8008358 <__libc_init_array+0xc>
 800837a:	f855 3b04 	ldr.w	r3, [r5], #4
 800837e:	4798      	blx	r3
 8008380:	3601      	adds	r6, #1
 8008382:	e7f2      	b.n	800836a <__libc_init_array+0x1e>
 8008384:	0800a250 	.word	0x0800a250
 8008388:	0800a250 	.word	0x0800a250
 800838c:	0800a250 	.word	0x0800a250
 8008390:	0800a254 	.word	0x0800a254

08008394 <memset>:
 8008394:	4402      	add	r2, r0
 8008396:	4603      	mov	r3, r0
 8008398:	4293      	cmp	r3, r2
 800839a:	d100      	bne.n	800839e <memset+0xa>
 800839c:	4770      	bx	lr
 800839e:	f803 1b01 	strb.w	r1, [r3], #1
 80083a2:	e7f9      	b.n	8008398 <memset+0x4>

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	ab1d      	add	r3, sp, #116	; 0x74
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <siprintf+0x38>)
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	a902      	add	r1, sp, #8
 80083c8:	f000 f868 	bl	800849c <_svfiprintf_r>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	2000020c 	.word	0x2000020c
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <__ssputs_r>:
 80083e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	688e      	ldr	r6, [r1, #8]
 80083ea:	429e      	cmp	r6, r3
 80083ec:	4682      	mov	sl, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	4690      	mov	r8, r2
 80083f2:	461f      	mov	r7, r3
 80083f4:	d838      	bhi.n	8008468 <__ssputs_r+0x84>
 80083f6:	898a      	ldrh	r2, [r1, #12]
 80083f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083fc:	d032      	beq.n	8008464 <__ssputs_r+0x80>
 80083fe:	6825      	ldr	r5, [r4, #0]
 8008400:	6909      	ldr	r1, [r1, #16]
 8008402:	eba5 0901 	sub.w	r9, r5, r1
 8008406:	6965      	ldr	r5, [r4, #20]
 8008408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800840c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008410:	3301      	adds	r3, #1
 8008412:	444b      	add	r3, r9
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	429d      	cmp	r5, r3
 8008418:	bf38      	it	cc
 800841a:	461d      	movcc	r5, r3
 800841c:	0553      	lsls	r3, r2, #21
 800841e:	d531      	bpl.n	8008484 <__ssputs_r+0xa0>
 8008420:	4629      	mov	r1, r5
 8008422:	f000 fb63 	bl	8008aec <_malloc_r>
 8008426:	4606      	mov	r6, r0
 8008428:	b950      	cbnz	r0, 8008440 <__ssputs_r+0x5c>
 800842a:	230c      	movs	r3, #12
 800842c:	f8ca 3000 	str.w	r3, [sl]
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	6921      	ldr	r1, [r4, #16]
 8008442:	464a      	mov	r2, r9
 8008444:	f000 fabe 	bl	80089c4 <memcpy>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800844e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	6126      	str	r6, [r4, #16]
 8008456:	6165      	str	r5, [r4, #20]
 8008458:	444e      	add	r6, r9
 800845a:	eba5 0509 	sub.w	r5, r5, r9
 800845e:	6026      	str	r6, [r4, #0]
 8008460:	60a5      	str	r5, [r4, #8]
 8008462:	463e      	mov	r6, r7
 8008464:	42be      	cmp	r6, r7
 8008466:	d900      	bls.n	800846a <__ssputs_r+0x86>
 8008468:	463e      	mov	r6, r7
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	4632      	mov	r2, r6
 800846e:	4641      	mov	r1, r8
 8008470:	f000 fab6 	bl	80089e0 <memmove>
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	1b9b      	subs	r3, r3, r6
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	4433      	add	r3, r6
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e7db      	b.n	800843c <__ssputs_r+0x58>
 8008484:	462a      	mov	r2, r5
 8008486:	f000 fba5 	bl	8008bd4 <_realloc_r>
 800848a:	4606      	mov	r6, r0
 800848c:	2800      	cmp	r0, #0
 800848e:	d1e1      	bne.n	8008454 <__ssputs_r+0x70>
 8008490:	6921      	ldr	r1, [r4, #16]
 8008492:	4650      	mov	r0, sl
 8008494:	f000 fabe 	bl	8008a14 <_free_r>
 8008498:	e7c7      	b.n	800842a <__ssputs_r+0x46>
	...

0800849c <_svfiprintf_r>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	4698      	mov	r8, r3
 80084a2:	898b      	ldrh	r3, [r1, #12]
 80084a4:	061b      	lsls	r3, r3, #24
 80084a6:	b09d      	sub	sp, #116	; 0x74
 80084a8:	4607      	mov	r7, r0
 80084aa:	460d      	mov	r5, r1
 80084ac:	4614      	mov	r4, r2
 80084ae:	d50e      	bpl.n	80084ce <_svfiprintf_r+0x32>
 80084b0:	690b      	ldr	r3, [r1, #16]
 80084b2:	b963      	cbnz	r3, 80084ce <_svfiprintf_r+0x32>
 80084b4:	2140      	movs	r1, #64	; 0x40
 80084b6:	f000 fb19 	bl	8008aec <_malloc_r>
 80084ba:	6028      	str	r0, [r5, #0]
 80084bc:	6128      	str	r0, [r5, #16]
 80084be:	b920      	cbnz	r0, 80084ca <_svfiprintf_r+0x2e>
 80084c0:	230c      	movs	r3, #12
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	e0d1      	b.n	800866e <_svfiprintf_r+0x1d2>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	616b      	str	r3, [r5, #20]
 80084ce:	2300      	movs	r3, #0
 80084d0:	9309      	str	r3, [sp, #36]	; 0x24
 80084d2:	2320      	movs	r3, #32
 80084d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084dc:	2330      	movs	r3, #48	; 0x30
 80084de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008688 <_svfiprintf_r+0x1ec>
 80084e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e6:	f04f 0901 	mov.w	r9, #1
 80084ea:	4623      	mov	r3, r4
 80084ec:	469a      	mov	sl, r3
 80084ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f2:	b10a      	cbz	r2, 80084f8 <_svfiprintf_r+0x5c>
 80084f4:	2a25      	cmp	r2, #37	; 0x25
 80084f6:	d1f9      	bne.n	80084ec <_svfiprintf_r+0x50>
 80084f8:	ebba 0b04 	subs.w	fp, sl, r4
 80084fc:	d00b      	beq.n	8008516 <_svfiprintf_r+0x7a>
 80084fe:	465b      	mov	r3, fp
 8008500:	4622      	mov	r2, r4
 8008502:	4629      	mov	r1, r5
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ff6d 	bl	80083e4 <__ssputs_r>
 800850a:	3001      	adds	r0, #1
 800850c:	f000 80aa 	beq.w	8008664 <_svfiprintf_r+0x1c8>
 8008510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008512:	445a      	add	r2, fp
 8008514:	9209      	str	r2, [sp, #36]	; 0x24
 8008516:	f89a 3000 	ldrb.w	r3, [sl]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80a2 	beq.w	8008664 <_svfiprintf_r+0x1c8>
 8008520:	2300      	movs	r3, #0
 8008522:	f04f 32ff 	mov.w	r2, #4294967295
 8008526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852a:	f10a 0a01 	add.w	sl, sl, #1
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	9307      	str	r3, [sp, #28]
 8008532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008536:	931a      	str	r3, [sp, #104]	; 0x68
 8008538:	4654      	mov	r4, sl
 800853a:	2205      	movs	r2, #5
 800853c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008540:	4851      	ldr	r0, [pc, #324]	; (8008688 <_svfiprintf_r+0x1ec>)
 8008542:	f7f7 fe45 	bl	80001d0 <memchr>
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	b9d8      	cbnz	r0, 8008582 <_svfiprintf_r+0xe6>
 800854a:	06d0      	lsls	r0, r2, #27
 800854c:	bf44      	itt	mi
 800854e:	2320      	movmi	r3, #32
 8008550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008554:	0711      	lsls	r1, r2, #28
 8008556:	bf44      	itt	mi
 8008558:	232b      	movmi	r3, #43	; 0x2b
 800855a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855e:	f89a 3000 	ldrb.w	r3, [sl]
 8008562:	2b2a      	cmp	r3, #42	; 0x2a
 8008564:	d015      	beq.n	8008592 <_svfiprintf_r+0xf6>
 8008566:	9a07      	ldr	r2, [sp, #28]
 8008568:	4654      	mov	r4, sl
 800856a:	2000      	movs	r0, #0
 800856c:	f04f 0c0a 	mov.w	ip, #10
 8008570:	4621      	mov	r1, r4
 8008572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008576:	3b30      	subs	r3, #48	; 0x30
 8008578:	2b09      	cmp	r3, #9
 800857a:	d94e      	bls.n	800861a <_svfiprintf_r+0x17e>
 800857c:	b1b0      	cbz	r0, 80085ac <_svfiprintf_r+0x110>
 800857e:	9207      	str	r2, [sp, #28]
 8008580:	e014      	b.n	80085ac <_svfiprintf_r+0x110>
 8008582:	eba0 0308 	sub.w	r3, r0, r8
 8008586:	fa09 f303 	lsl.w	r3, r9, r3
 800858a:	4313      	orrs	r3, r2
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	46a2      	mov	sl, r4
 8008590:	e7d2      	b.n	8008538 <_svfiprintf_r+0x9c>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	1d19      	adds	r1, r3, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	9103      	str	r1, [sp, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	bfbb      	ittet	lt
 800859e:	425b      	neglt	r3, r3
 80085a0:	f042 0202 	orrlt.w	r2, r2, #2
 80085a4:	9307      	strge	r3, [sp, #28]
 80085a6:	9307      	strlt	r3, [sp, #28]
 80085a8:	bfb8      	it	lt
 80085aa:	9204      	strlt	r2, [sp, #16]
 80085ac:	7823      	ldrb	r3, [r4, #0]
 80085ae:	2b2e      	cmp	r3, #46	; 0x2e
 80085b0:	d10c      	bne.n	80085cc <_svfiprintf_r+0x130>
 80085b2:	7863      	ldrb	r3, [r4, #1]
 80085b4:	2b2a      	cmp	r3, #42	; 0x2a
 80085b6:	d135      	bne.n	8008624 <_svfiprintf_r+0x188>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	1d1a      	adds	r2, r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	9203      	str	r2, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bfb8      	it	lt
 80085c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085c8:	3402      	adds	r4, #2
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008698 <_svfiprintf_r+0x1fc>
 80085d0:	7821      	ldrb	r1, [r4, #0]
 80085d2:	2203      	movs	r2, #3
 80085d4:	4650      	mov	r0, sl
 80085d6:	f7f7 fdfb 	bl	80001d0 <memchr>
 80085da:	b140      	cbz	r0, 80085ee <_svfiprintf_r+0x152>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	eba0 000a 	sub.w	r0, r0, sl
 80085e2:	fa03 f000 	lsl.w	r0, r3, r0
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	4303      	orrs	r3, r0
 80085ea:	3401      	adds	r4, #1
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	4826      	ldr	r0, [pc, #152]	; (800868c <_svfiprintf_r+0x1f0>)
 80085f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f8:	2206      	movs	r2, #6
 80085fa:	f7f7 fde9 	bl	80001d0 <memchr>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d038      	beq.n	8008674 <_svfiprintf_r+0x1d8>
 8008602:	4b23      	ldr	r3, [pc, #140]	; (8008690 <_svfiprintf_r+0x1f4>)
 8008604:	bb1b      	cbnz	r3, 800864e <_svfiprintf_r+0x1b2>
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	3307      	adds	r3, #7
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	3308      	adds	r3, #8
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	4433      	add	r3, r6
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	e767      	b.n	80084ea <_svfiprintf_r+0x4e>
 800861a:	fb0c 3202 	mla	r2, ip, r2, r3
 800861e:	460c      	mov	r4, r1
 8008620:	2001      	movs	r0, #1
 8008622:	e7a5      	b.n	8008570 <_svfiprintf_r+0xd4>
 8008624:	2300      	movs	r3, #0
 8008626:	3401      	adds	r4, #1
 8008628:	9305      	str	r3, [sp, #20]
 800862a:	4619      	mov	r1, r3
 800862c:	f04f 0c0a 	mov.w	ip, #10
 8008630:	4620      	mov	r0, r4
 8008632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008636:	3a30      	subs	r2, #48	; 0x30
 8008638:	2a09      	cmp	r2, #9
 800863a:	d903      	bls.n	8008644 <_svfiprintf_r+0x1a8>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0c5      	beq.n	80085cc <_svfiprintf_r+0x130>
 8008640:	9105      	str	r1, [sp, #20]
 8008642:	e7c3      	b.n	80085cc <_svfiprintf_r+0x130>
 8008644:	fb0c 2101 	mla	r1, ip, r1, r2
 8008648:	4604      	mov	r4, r0
 800864a:	2301      	movs	r3, #1
 800864c:	e7f0      	b.n	8008630 <_svfiprintf_r+0x194>
 800864e:	ab03      	add	r3, sp, #12
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	462a      	mov	r2, r5
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <_svfiprintf_r+0x1f8>)
 8008656:	a904      	add	r1, sp, #16
 8008658:	4638      	mov	r0, r7
 800865a:	f3af 8000 	nop.w
 800865e:	1c42      	adds	r2, r0, #1
 8008660:	4606      	mov	r6, r0
 8008662:	d1d6      	bne.n	8008612 <_svfiprintf_r+0x176>
 8008664:	89ab      	ldrh	r3, [r5, #12]
 8008666:	065b      	lsls	r3, r3, #25
 8008668:	f53f af2c 	bmi.w	80084c4 <_svfiprintf_r+0x28>
 800866c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866e:	b01d      	add	sp, #116	; 0x74
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	ab03      	add	r3, sp, #12
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	462a      	mov	r2, r5
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <_svfiprintf_r+0x1f8>)
 800867c:	a904      	add	r1, sp, #16
 800867e:	4638      	mov	r0, r7
 8008680:	f000 f87a 	bl	8008778 <_printf_i>
 8008684:	e7eb      	b.n	800865e <_svfiprintf_r+0x1c2>
 8008686:	bf00      	nop
 8008688:	0800a214 	.word	0x0800a214
 800868c:	0800a21e 	.word	0x0800a21e
 8008690:	00000000 	.word	0x00000000
 8008694:	080083e5 	.word	0x080083e5
 8008698:	0800a21a 	.word	0x0800a21a

0800869c <_printf_common>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4616      	mov	r6, r2
 80086a2:	4699      	mov	r9, r3
 80086a4:	688a      	ldr	r2, [r1, #8]
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bfb8      	it	lt
 80086b0:	4613      	movlt	r3, r2
 80086b2:	6033      	str	r3, [r6, #0]
 80086b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b8:	4607      	mov	r7, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b10a      	cbz	r2, 80086c2 <_printf_common+0x26>
 80086be:	3301      	adds	r3, #1
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	0699      	lsls	r1, r3, #26
 80086c6:	bf42      	ittt	mi
 80086c8:	6833      	ldrmi	r3, [r6, #0]
 80086ca:	3302      	addmi	r3, #2
 80086cc:	6033      	strmi	r3, [r6, #0]
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	f015 0506 	ands.w	r5, r5, #6
 80086d4:	d106      	bne.n	80086e4 <_printf_common+0x48>
 80086d6:	f104 0a19 	add.w	sl, r4, #25
 80086da:	68e3      	ldr	r3, [r4, #12]
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	dc26      	bgt.n	8008732 <_printf_common+0x96>
 80086e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e8:	1e13      	subs	r3, r2, #0
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	0692      	lsls	r2, r2, #26
 80086f2:	d42b      	bmi.n	800874c <_printf_common+0xb0>
 80086f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f8:	4649      	mov	r1, r9
 80086fa:	4638      	mov	r0, r7
 80086fc:	47c0      	blx	r8
 80086fe:	3001      	adds	r0, #1
 8008700:	d01e      	beq.n	8008740 <_printf_common+0xa4>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	68e5      	ldr	r5, [r4, #12]
 8008706:	6832      	ldr	r2, [r6, #0]
 8008708:	f003 0306 	and.w	r3, r3, #6
 800870c:	2b04      	cmp	r3, #4
 800870e:	bf08      	it	eq
 8008710:	1aad      	subeq	r5, r5, r2
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	bf0c      	ite	eq
 8008718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800871c:	2500      	movne	r5, #0
 800871e:	4293      	cmp	r3, r2
 8008720:	bfc4      	itt	gt
 8008722:	1a9b      	subgt	r3, r3, r2
 8008724:	18ed      	addgt	r5, r5, r3
 8008726:	2600      	movs	r6, #0
 8008728:	341a      	adds	r4, #26
 800872a:	42b5      	cmp	r5, r6
 800872c:	d11a      	bne.n	8008764 <_printf_common+0xc8>
 800872e:	2000      	movs	r0, #0
 8008730:	e008      	b.n	8008744 <_printf_common+0xa8>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4649      	mov	r1, r9
 8008738:	4638      	mov	r0, r7
 800873a:	47c0      	blx	r8
 800873c:	3001      	adds	r0, #1
 800873e:	d103      	bne.n	8008748 <_printf_common+0xac>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008748:	3501      	adds	r5, #1
 800874a:	e7c6      	b.n	80086da <_printf_common+0x3e>
 800874c:	18e1      	adds	r1, r4, r3
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	2030      	movs	r0, #48	; 0x30
 8008752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008756:	4422      	add	r2, r4
 8008758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800875c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008760:	3302      	adds	r3, #2
 8008762:	e7c7      	b.n	80086f4 <_printf_common+0x58>
 8008764:	2301      	movs	r3, #1
 8008766:	4622      	mov	r2, r4
 8008768:	4649      	mov	r1, r9
 800876a:	4638      	mov	r0, r7
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d0e6      	beq.n	8008740 <_printf_common+0xa4>
 8008772:	3601      	adds	r6, #1
 8008774:	e7d9      	b.n	800872a <_printf_common+0x8e>
	...

08008778 <_printf_i>:
 8008778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	7e0f      	ldrb	r7, [r1, #24]
 800877e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008780:	2f78      	cmp	r7, #120	; 0x78
 8008782:	4691      	mov	r9, r2
 8008784:	4680      	mov	r8, r0
 8008786:	460c      	mov	r4, r1
 8008788:	469a      	mov	sl, r3
 800878a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800878e:	d807      	bhi.n	80087a0 <_printf_i+0x28>
 8008790:	2f62      	cmp	r7, #98	; 0x62
 8008792:	d80a      	bhi.n	80087aa <_printf_i+0x32>
 8008794:	2f00      	cmp	r7, #0
 8008796:	f000 80d8 	beq.w	800894a <_printf_i+0x1d2>
 800879a:	2f58      	cmp	r7, #88	; 0x58
 800879c:	f000 80a3 	beq.w	80088e6 <_printf_i+0x16e>
 80087a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a8:	e03a      	b.n	8008820 <_printf_i+0xa8>
 80087aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ae:	2b15      	cmp	r3, #21
 80087b0:	d8f6      	bhi.n	80087a0 <_printf_i+0x28>
 80087b2:	a101      	add	r1, pc, #4	; (adr r1, 80087b8 <_printf_i+0x40>)
 80087b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008825 	.word	0x08008825
 80087c0:	080087a1 	.word	0x080087a1
 80087c4:	080087a1 	.word	0x080087a1
 80087c8:	080087a1 	.word	0x080087a1
 80087cc:	080087a1 	.word	0x080087a1
 80087d0:	08008825 	.word	0x08008825
 80087d4:	080087a1 	.word	0x080087a1
 80087d8:	080087a1 	.word	0x080087a1
 80087dc:	080087a1 	.word	0x080087a1
 80087e0:	080087a1 	.word	0x080087a1
 80087e4:	08008931 	.word	0x08008931
 80087e8:	08008855 	.word	0x08008855
 80087ec:	08008913 	.word	0x08008913
 80087f0:	080087a1 	.word	0x080087a1
 80087f4:	080087a1 	.word	0x080087a1
 80087f8:	08008953 	.word	0x08008953
 80087fc:	080087a1 	.word	0x080087a1
 8008800:	08008855 	.word	0x08008855
 8008804:	080087a1 	.word	0x080087a1
 8008808:	080087a1 	.word	0x080087a1
 800880c:	0800891b 	.word	0x0800891b
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	602a      	str	r2, [r5, #0]
 8008818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008820:	2301      	movs	r3, #1
 8008822:	e0a3      	b.n	800896c <_printf_i+0x1f4>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	6829      	ldr	r1, [r5, #0]
 8008828:	0606      	lsls	r6, r0, #24
 800882a:	f101 0304 	add.w	r3, r1, #4
 800882e:	d50a      	bpl.n	8008846 <_printf_i+0xce>
 8008830:	680e      	ldr	r6, [r1, #0]
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	2e00      	cmp	r6, #0
 8008836:	da03      	bge.n	8008840 <_printf_i+0xc8>
 8008838:	232d      	movs	r3, #45	; 0x2d
 800883a:	4276      	negs	r6, r6
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008840:	485e      	ldr	r0, [pc, #376]	; (80089bc <_printf_i+0x244>)
 8008842:	230a      	movs	r3, #10
 8008844:	e019      	b.n	800887a <_printf_i+0x102>
 8008846:	680e      	ldr	r6, [r1, #0]
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800884e:	bf18      	it	ne
 8008850:	b236      	sxthne	r6, r6
 8008852:	e7ef      	b.n	8008834 <_printf_i+0xbc>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	1d19      	adds	r1, r3, #4
 800885a:	6029      	str	r1, [r5, #0]
 800885c:	0601      	lsls	r1, r0, #24
 800885e:	d501      	bpl.n	8008864 <_printf_i+0xec>
 8008860:	681e      	ldr	r6, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0xf2>
 8008864:	0646      	lsls	r6, r0, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0xe8>
 8008868:	881e      	ldrh	r6, [r3, #0]
 800886a:	4854      	ldr	r0, [pc, #336]	; (80089bc <_printf_i+0x244>)
 800886c:	2f6f      	cmp	r7, #111	; 0x6f
 800886e:	bf0c      	ite	eq
 8008870:	2308      	moveq	r3, #8
 8008872:	230a      	movne	r3, #10
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887a:	6865      	ldr	r5, [r4, #4]
 800887c:	60a5      	str	r5, [r4, #8]
 800887e:	2d00      	cmp	r5, #0
 8008880:	bfa2      	ittt	ge
 8008882:	6821      	ldrge	r1, [r4, #0]
 8008884:	f021 0104 	bicge.w	r1, r1, #4
 8008888:	6021      	strge	r1, [r4, #0]
 800888a:	b90e      	cbnz	r6, 8008890 <_printf_i+0x118>
 800888c:	2d00      	cmp	r5, #0
 800888e:	d04d      	beq.n	800892c <_printf_i+0x1b4>
 8008890:	4615      	mov	r5, r2
 8008892:	fbb6 f1f3 	udiv	r1, r6, r3
 8008896:	fb03 6711 	mls	r7, r3, r1, r6
 800889a:	5dc7      	ldrb	r7, [r0, r7]
 800889c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088a0:	4637      	mov	r7, r6
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	460e      	mov	r6, r1
 80088a6:	d9f4      	bls.n	8008892 <_printf_i+0x11a>
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d10b      	bne.n	80088c4 <_printf_i+0x14c>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07de      	lsls	r6, r3, #31
 80088b0:	d508      	bpl.n	80088c4 <_printf_i+0x14c>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	bfde      	ittt	le
 80088ba:	2330      	movle	r3, #48	; 0x30
 80088bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c4:	1b52      	subs	r2, r2, r5
 80088c6:	6122      	str	r2, [r4, #16]
 80088c8:	f8cd a000 	str.w	sl, [sp]
 80088cc:	464b      	mov	r3, r9
 80088ce:	aa03      	add	r2, sp, #12
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fee2 	bl	800869c <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	d14c      	bne.n	8008976 <_printf_i+0x1fe>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b004      	add	sp, #16
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	4835      	ldr	r0, [pc, #212]	; (80089bc <_printf_i+0x244>)
 80088e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088ec:	6829      	ldr	r1, [r5, #0]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088f4:	6029      	str	r1, [r5, #0]
 80088f6:	061d      	lsls	r5, r3, #24
 80088f8:	d514      	bpl.n	8008924 <_printf_i+0x1ac>
 80088fa:	07df      	lsls	r7, r3, #31
 80088fc:	bf44      	itt	mi
 80088fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008902:	6023      	strmi	r3, [r4, #0]
 8008904:	b91e      	cbnz	r6, 800890e <_printf_i+0x196>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f023 0320 	bic.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	2310      	movs	r3, #16
 8008910:	e7b0      	b.n	8008874 <_printf_i+0xfc>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	f043 0320 	orr.w	r3, r3, #32
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	2378      	movs	r3, #120	; 0x78
 800891c:	4828      	ldr	r0, [pc, #160]	; (80089c0 <_printf_i+0x248>)
 800891e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008922:	e7e3      	b.n	80088ec <_printf_i+0x174>
 8008924:	0659      	lsls	r1, r3, #25
 8008926:	bf48      	it	mi
 8008928:	b2b6      	uxthmi	r6, r6
 800892a:	e7e6      	b.n	80088fa <_printf_i+0x182>
 800892c:	4615      	mov	r5, r2
 800892e:	e7bb      	b.n	80088a8 <_printf_i+0x130>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	6826      	ldr	r6, [r4, #0]
 8008934:	6961      	ldr	r1, [r4, #20]
 8008936:	1d18      	adds	r0, r3, #4
 8008938:	6028      	str	r0, [r5, #0]
 800893a:	0635      	lsls	r5, r6, #24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	d501      	bpl.n	8008944 <_printf_i+0x1cc>
 8008940:	6019      	str	r1, [r3, #0]
 8008942:	e002      	b.n	800894a <_printf_i+0x1d2>
 8008944:	0670      	lsls	r0, r6, #25
 8008946:	d5fb      	bpl.n	8008940 <_printf_i+0x1c8>
 8008948:	8019      	strh	r1, [r3, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	4615      	mov	r5, r2
 8008950:	e7ba      	b.n	80088c8 <_printf_i+0x150>
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	602a      	str	r2, [r5, #0]
 8008958:	681d      	ldr	r5, [r3, #0]
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	2100      	movs	r1, #0
 800895e:	4628      	mov	r0, r5
 8008960:	f7f7 fc36 	bl	80001d0 <memchr>
 8008964:	b108      	cbz	r0, 800896a <_printf_i+0x1f2>
 8008966:	1b40      	subs	r0, r0, r5
 8008968:	6060      	str	r0, [r4, #4]
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	2300      	movs	r3, #0
 8008970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008974:	e7a8      	b.n	80088c8 <_printf_i+0x150>
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	462a      	mov	r2, r5
 800897a:	4649      	mov	r1, r9
 800897c:	4640      	mov	r0, r8
 800897e:	47d0      	blx	sl
 8008980:	3001      	adds	r0, #1
 8008982:	d0ab      	beq.n	80088dc <_printf_i+0x164>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	079b      	lsls	r3, r3, #30
 8008988:	d413      	bmi.n	80089b2 <_printf_i+0x23a>
 800898a:	68e0      	ldr	r0, [r4, #12]
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	4298      	cmp	r0, r3
 8008990:	bfb8      	it	lt
 8008992:	4618      	movlt	r0, r3
 8008994:	e7a4      	b.n	80088e0 <_printf_i+0x168>
 8008996:	2301      	movs	r3, #1
 8008998:	4632      	mov	r2, r6
 800899a:	4649      	mov	r1, r9
 800899c:	4640      	mov	r0, r8
 800899e:	47d0      	blx	sl
 80089a0:	3001      	adds	r0, #1
 80089a2:	d09b      	beq.n	80088dc <_printf_i+0x164>
 80089a4:	3501      	adds	r5, #1
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	9903      	ldr	r1, [sp, #12]
 80089aa:	1a5b      	subs	r3, r3, r1
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dcf2      	bgt.n	8008996 <_printf_i+0x21e>
 80089b0:	e7eb      	b.n	800898a <_printf_i+0x212>
 80089b2:	2500      	movs	r5, #0
 80089b4:	f104 0619 	add.w	r6, r4, #25
 80089b8:	e7f5      	b.n	80089a6 <_printf_i+0x22e>
 80089ba:	bf00      	nop
 80089bc:	0800a225 	.word	0x0800a225
 80089c0:	0800a236 	.word	0x0800a236

080089c4 <memcpy>:
 80089c4:	440a      	add	r2, r1
 80089c6:	4291      	cmp	r1, r2
 80089c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089cc:	d100      	bne.n	80089d0 <memcpy+0xc>
 80089ce:	4770      	bx	lr
 80089d0:	b510      	push	{r4, lr}
 80089d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089da:	4291      	cmp	r1, r2
 80089dc:	d1f9      	bne.n	80089d2 <memcpy+0xe>
 80089de:	bd10      	pop	{r4, pc}

080089e0 <memmove>:
 80089e0:	4288      	cmp	r0, r1
 80089e2:	b510      	push	{r4, lr}
 80089e4:	eb01 0402 	add.w	r4, r1, r2
 80089e8:	d902      	bls.n	80089f0 <memmove+0x10>
 80089ea:	4284      	cmp	r4, r0
 80089ec:	4623      	mov	r3, r4
 80089ee:	d807      	bhi.n	8008a00 <memmove+0x20>
 80089f0:	1e43      	subs	r3, r0, #1
 80089f2:	42a1      	cmp	r1, r4
 80089f4:	d008      	beq.n	8008a08 <memmove+0x28>
 80089f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fe:	e7f8      	b.n	80089f2 <memmove+0x12>
 8008a00:	4402      	add	r2, r0
 8008a02:	4601      	mov	r1, r0
 8008a04:	428a      	cmp	r2, r1
 8008a06:	d100      	bne.n	8008a0a <memmove+0x2a>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a12:	e7f7      	b.n	8008a04 <memmove+0x24>

08008a14 <_free_r>:
 8008a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d044      	beq.n	8008aa4 <_free_r+0x90>
 8008a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1e:	9001      	str	r0, [sp, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f1a1 0404 	sub.w	r4, r1, #4
 8008a26:	bfb8      	it	lt
 8008a28:	18e4      	addlt	r4, r4, r3
 8008a2a:	f000 f913 	bl	8008c54 <__malloc_lock>
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <_free_r+0x94>)
 8008a30:	9801      	ldr	r0, [sp, #4]
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b933      	cbnz	r3, 8008a44 <_free_r+0x30>
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a40:	f000 b90e 	b.w	8008c60 <__malloc_unlock>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d908      	bls.n	8008a5a <_free_r+0x46>
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf01      	itttt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	1949      	addeq	r1, r1, r5
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	e7ed      	b.n	8008a36 <_free_r+0x22>
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b10b      	cbz	r3, 8008a64 <_free_r+0x50>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d9fa      	bls.n	8008a5a <_free_r+0x46>
 8008a64:	6811      	ldr	r1, [r2, #0]
 8008a66:	1855      	adds	r5, r2, r1
 8008a68:	42a5      	cmp	r5, r4
 8008a6a:	d10b      	bne.n	8008a84 <_free_r+0x70>
 8008a6c:	6824      	ldr	r4, [r4, #0]
 8008a6e:	4421      	add	r1, r4
 8008a70:	1854      	adds	r4, r2, r1
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	d1e0      	bne.n	8008a3a <_free_r+0x26>
 8008a78:	681c      	ldr	r4, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	6053      	str	r3, [r2, #4]
 8008a7e:	4421      	add	r1, r4
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	e7da      	b.n	8008a3a <_free_r+0x26>
 8008a84:	d902      	bls.n	8008a8c <_free_r+0x78>
 8008a86:	230c      	movs	r3, #12
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	e7d6      	b.n	8008a3a <_free_r+0x26>
 8008a8c:	6825      	ldr	r5, [r4, #0]
 8008a8e:	1961      	adds	r1, r4, r5
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf04      	itt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	bf04      	itt	eq
 8008a9c:	1949      	addeq	r1, r1, r5
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	6054      	str	r4, [r2, #4]
 8008aa2:	e7ca      	b.n	8008a3a <_free_r+0x26>
 8008aa4:	b003      	add	sp, #12
 8008aa6:	bd30      	pop	{r4, r5, pc}
 8008aa8:	20001110 	.word	0x20001110

08008aac <sbrk_aligned>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	4e0e      	ldr	r6, [pc, #56]	; (8008ae8 <sbrk_aligned+0x3c>)
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	6831      	ldr	r1, [r6, #0]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	b911      	cbnz	r1, 8008abe <sbrk_aligned+0x12>
 8008ab8:	f000 f8bc 	bl	8008c34 <_sbrk_r>
 8008abc:	6030      	str	r0, [r6, #0]
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	f000 f8b7 	bl	8008c34 <_sbrk_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d00a      	beq.n	8008ae0 <sbrk_aligned+0x34>
 8008aca:	1cc4      	adds	r4, r0, #3
 8008acc:	f024 0403 	bic.w	r4, r4, #3
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d007      	beq.n	8008ae4 <sbrk_aligned+0x38>
 8008ad4:	1a21      	subs	r1, r4, r0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f8ac 	bl	8008c34 <_sbrk_r>
 8008adc:	3001      	adds	r0, #1
 8008ade:	d101      	bne.n	8008ae4 <sbrk_aligned+0x38>
 8008ae0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	20001114 	.word	0x20001114

08008aec <_malloc_r>:
 8008aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af0:	1ccd      	adds	r5, r1, #3
 8008af2:	f025 0503 	bic.w	r5, r5, #3
 8008af6:	3508      	adds	r5, #8
 8008af8:	2d0c      	cmp	r5, #12
 8008afa:	bf38      	it	cc
 8008afc:	250c      	movcc	r5, #12
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	4607      	mov	r7, r0
 8008b02:	db01      	blt.n	8008b08 <_malloc_r+0x1c>
 8008b04:	42a9      	cmp	r1, r5
 8008b06:	d905      	bls.n	8008b14 <_malloc_r+0x28>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	4630      	mov	r0, r6
 8008b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b14:	4e2e      	ldr	r6, [pc, #184]	; (8008bd0 <_malloc_r+0xe4>)
 8008b16:	f000 f89d 	bl	8008c54 <__malloc_lock>
 8008b1a:	6833      	ldr	r3, [r6, #0]
 8008b1c:	461c      	mov	r4, r3
 8008b1e:	bb34      	cbnz	r4, 8008b6e <_malloc_r+0x82>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4638      	mov	r0, r7
 8008b24:	f7ff ffc2 	bl	8008aac <sbrk_aligned>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	d14d      	bne.n	8008bca <_malloc_r+0xde>
 8008b2e:	6834      	ldr	r4, [r6, #0]
 8008b30:	4626      	mov	r6, r4
 8008b32:	2e00      	cmp	r6, #0
 8008b34:	d140      	bne.n	8008bb8 <_malloc_r+0xcc>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	eb04 0803 	add.w	r8, r4, r3
 8008b40:	f000 f878 	bl	8008c34 <_sbrk_r>
 8008b44:	4580      	cmp	r8, r0
 8008b46:	d13a      	bne.n	8008bbe <_malloc_r+0xd2>
 8008b48:	6821      	ldr	r1, [r4, #0]
 8008b4a:	3503      	adds	r5, #3
 8008b4c:	1a6d      	subs	r5, r5, r1
 8008b4e:	f025 0503 	bic.w	r5, r5, #3
 8008b52:	3508      	adds	r5, #8
 8008b54:	2d0c      	cmp	r5, #12
 8008b56:	bf38      	it	cc
 8008b58:	250c      	movcc	r5, #12
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ffa5 	bl	8008aac <sbrk_aligned>
 8008b62:	3001      	adds	r0, #1
 8008b64:	d02b      	beq.n	8008bbe <_malloc_r+0xd2>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	442b      	add	r3, r5
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	e00e      	b.n	8008b8c <_malloc_r+0xa0>
 8008b6e:	6822      	ldr	r2, [r4, #0]
 8008b70:	1b52      	subs	r2, r2, r5
 8008b72:	d41e      	bmi.n	8008bb2 <_malloc_r+0xc6>
 8008b74:	2a0b      	cmp	r2, #11
 8008b76:	d916      	bls.n	8008ba6 <_malloc_r+0xba>
 8008b78:	1961      	adds	r1, r4, r5
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	6025      	str	r5, [r4, #0]
 8008b7e:	bf18      	it	ne
 8008b80:	6059      	strne	r1, [r3, #4]
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	bf08      	it	eq
 8008b86:	6031      	streq	r1, [r6, #0]
 8008b88:	5162      	str	r2, [r4, r5]
 8008b8a:	604b      	str	r3, [r1, #4]
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f104 060b 	add.w	r6, r4, #11
 8008b92:	f000 f865 	bl	8008c60 <__malloc_unlock>
 8008b96:	f026 0607 	bic.w	r6, r6, #7
 8008b9a:	1d23      	adds	r3, r4, #4
 8008b9c:	1af2      	subs	r2, r6, r3
 8008b9e:	d0b6      	beq.n	8008b0e <_malloc_r+0x22>
 8008ba0:	1b9b      	subs	r3, r3, r6
 8008ba2:	50a3      	str	r3, [r4, r2]
 8008ba4:	e7b3      	b.n	8008b0e <_malloc_r+0x22>
 8008ba6:	6862      	ldr	r2, [r4, #4]
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	bf0c      	ite	eq
 8008bac:	6032      	streq	r2, [r6, #0]
 8008bae:	605a      	strne	r2, [r3, #4]
 8008bb0:	e7ec      	b.n	8008b8c <_malloc_r+0xa0>
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	6864      	ldr	r4, [r4, #4]
 8008bb6:	e7b2      	b.n	8008b1e <_malloc_r+0x32>
 8008bb8:	4634      	mov	r4, r6
 8008bba:	6876      	ldr	r6, [r6, #4]
 8008bbc:	e7b9      	b.n	8008b32 <_malloc_r+0x46>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f000 f84c 	bl	8008c60 <__malloc_unlock>
 8008bc8:	e7a1      	b.n	8008b0e <_malloc_r+0x22>
 8008bca:	6025      	str	r5, [r4, #0]
 8008bcc:	e7de      	b.n	8008b8c <_malloc_r+0xa0>
 8008bce:	bf00      	nop
 8008bd0:	20001110 	.word	0x20001110

08008bd4 <_realloc_r>:
 8008bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	4680      	mov	r8, r0
 8008bda:	4614      	mov	r4, r2
 8008bdc:	460e      	mov	r6, r1
 8008bde:	b921      	cbnz	r1, 8008bea <_realloc_r+0x16>
 8008be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	4611      	mov	r1, r2
 8008be6:	f7ff bf81 	b.w	8008aec <_malloc_r>
 8008bea:	b92a      	cbnz	r2, 8008bf8 <_realloc_r+0x24>
 8008bec:	f7ff ff12 	bl	8008a14 <_free_r>
 8008bf0:	4625      	mov	r5, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf8:	f000 f838 	bl	8008c6c <_malloc_usable_size_r>
 8008bfc:	4284      	cmp	r4, r0
 8008bfe:	4607      	mov	r7, r0
 8008c00:	d802      	bhi.n	8008c08 <_realloc_r+0x34>
 8008c02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c06:	d812      	bhi.n	8008c2e <_realloc_r+0x5a>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7ff ff6e 	bl	8008aec <_malloc_r>
 8008c10:	4605      	mov	r5, r0
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d0ed      	beq.n	8008bf2 <_realloc_r+0x1e>
 8008c16:	42bc      	cmp	r4, r7
 8008c18:	4622      	mov	r2, r4
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	bf28      	it	cs
 8008c1e:	463a      	movcs	r2, r7
 8008c20:	f7ff fed0 	bl	80089c4 <memcpy>
 8008c24:	4631      	mov	r1, r6
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff fef4 	bl	8008a14 <_free_r>
 8008c2c:	e7e1      	b.n	8008bf2 <_realloc_r+0x1e>
 8008c2e:	4635      	mov	r5, r6
 8008c30:	e7df      	b.n	8008bf2 <_realloc_r+0x1e>
	...

08008c34 <_sbrk_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d06      	ldr	r5, [pc, #24]	; (8008c50 <_sbrk_r+0x1c>)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	602b      	str	r3, [r5, #0]
 8008c40:	f7f8 fd56 	bl	80016f0 <_sbrk>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_sbrk_r+0x1a>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_sbrk_r+0x1a>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	20001118 	.word	0x20001118

08008c54 <__malloc_lock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_lock+0x8>)
 8008c56:	f000 b811 	b.w	8008c7c <__retarget_lock_acquire_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	2000111c 	.word	0x2000111c

08008c60 <__malloc_unlock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__malloc_unlock+0x8>)
 8008c62:	f000 b80c 	b.w	8008c7e <__retarget_lock_release_recursive>
 8008c66:	bf00      	nop
 8008c68:	2000111c 	.word	0x2000111c

08008c6c <_malloc_usable_size_r>:
 8008c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c70:	1f18      	subs	r0, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbc      	itt	lt
 8008c76:	580b      	ldrlt	r3, [r1, r0]
 8008c78:	18c0      	addlt	r0, r0, r3
 8008c7a:	4770      	bx	lr

08008c7c <__retarget_lock_acquire_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <__retarget_lock_release_recursive>:
 8008c7e:	4770      	bx	lr

08008c80 <_init>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr

08008c8c <_fini>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

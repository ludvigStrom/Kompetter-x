
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a4  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a02c  0800a02c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a034  0800a034  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e98  2000020c  0800a248  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  0800a248  000210a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013972  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003274  00000000  00000000  00033bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00037ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002223b  00000000  00000000  00038e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e67  00000000  00000000  0005b043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde69  00000000  00000000  00070eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ed13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000483c  00000000  00000000  0012ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a70 	.word	0x08008a70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08008a70 	.word	0x08008a70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	220e      	movs	r2, #14
 800058e:	216c      	movs	r1, #108	; 0x6c
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f001 fde9 	bl	8002168 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21a      	sxth	r2, r3
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <AS5600_ReadStatus>:

uint8_t AS5600_ReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	f107 030f 	add.w	r3, r7, #15
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	220b      	movs	r2, #11
 80005ca:	216c      	movs	r1, #108	; 0x6c
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f001 fdcb 	bl	8002168 <HAL_I2C_Mem_Read>

    return status;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <AS5600_IsMagnetPresent>:

uint8_t AS5600_IsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint8_t status = AS5600_ReadStatus(hi2c);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffe3 	bl	80005b0 <AS5600_ReadStatus>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d104      	bne.n	8000602 <AS5600_IsMagnetPresent+0x26>
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	f003 0310 	and.w	r3, r3, #16
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <AS5600_IsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <AS5600_IsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 8000606:	2301      	movs	r3, #1
    }
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b093      	sub	sp, #76	; 0x4c
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 ffd5 	bl	80015c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 fa0b 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fb05 	bl	8000c2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000622:	f000 fa71 	bl	8000b08 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000626:	f000 fa9d 	bl	8000b64 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 800062a:	f007 f949 	bl	80078c0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800062e:	f000 fac7 	bl	8000bc0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000632:	2104      	movs	r1, #4
 8000634:	489f      	ldr	r0, [pc, #636]	; (80008b4 <main+0x2a4>)
 8000636:	f001 fb3a 	bl	8001cae <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f001 f834 	bl	80016a8 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 8000640:	f000 fb66 	bl	8000d10 <SSD1306_Init>

  HAL_Delay(50);
 8000644:	2032      	movs	r0, #50	; 0x32
 8000646:	f001 f82f 	bl	80016a8 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 800064a:	2100      	movs	r1, #0
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fcc9 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	4998      	ldr	r1, [pc, #608]	; (80008b8 <main+0x2a8>)
 8000656:	4899      	ldr	r0, [pc, #612]	; (80008bc <main+0x2ac>)
 8000658:	f000 fd5a 	bl	8001110 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 800065c:	2114      	movs	r1, #20
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fcc0 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts ("v.02", &Font_7x10, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	4996      	ldr	r1, [pc, #600]	; (80008c0 <main+0x2b0>)
 8000668:	4896      	ldr	r0, [pc, #600]	; (80008c4 <main+0x2b4>)
 800066a:	f000 fd51 	bl	8001110 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800066e:	f000 fc13 	bl	8000e98 <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 8000672:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000676:	f001 f817 	bl	80016a8 <HAL_Delay>

  SSD1306_Clear();
 800067a:	f000 fd6e 	bl	800115a <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 800067e:	2104      	movs	r1, #4
 8000680:	488c      	ldr	r0, [pc, #560]	; (80008b4 <main+0x2a4>)
 8000682:	f001 fb14 	bl	8001cae <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 8000686:	211e      	movs	r1, #30
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fcab 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	498b      	ldr	r1, [pc, #556]	; (80008c0 <main+0x2b0>)
 8000692:	488d      	ldr	r0, [pc, #564]	; (80008c8 <main+0x2b8>)
 8000694:	f000 fd3c 	bl	8001110 <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 8000698:	2128      	movs	r1, #40	; 0x28
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fca2 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	4985      	ldr	r1, [pc, #532]	; (80008b8 <main+0x2a8>)
 80006a4:	4889      	ldr	r0, [pc, #548]	; (80008cc <main+0x2bc>)
 80006a6:	f000 fd33 	bl	8001110 <SSD1306_Puts>

  SSD1306_GotoXY(40, 30);
 80006aa:	211e      	movs	r1, #30
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f000 fc99 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	4982      	ldr	r1, [pc, #520]	; (80008c0 <main+0x2b0>)
 80006b6:	4886      	ldr	r0, [pc, #536]	; (80008d0 <main+0x2c0>)
 80006b8:	f000 fd2a 	bl	8001110 <SSD1306_Puts>
  SSD1306_GotoXY(40, 40);
 80006bc:	2128      	movs	r1, #40	; 0x28
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fc90 	bl	8000fe4 <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	497c      	ldr	r1, [pc, #496]	; (80008b8 <main+0x2a8>)
 80006c8:	4880      	ldr	r0, [pc, #512]	; (80008cc <main+0x2bc>)
 80006ca:	f000 fd21 	bl	8001110 <SSD1306_Puts>

  //debounce scan:
  enum KeyState { IDLE, PRESSED };
  enum KeyState key_state[NUM_ROWS][NUM_COLS];  // Declare the array of states

  for(int i = 0; i < NUM_ROWS; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
 80006d2:	e014      	b.n	80006fe <main+0xee>
    for(int j = 0; j < NUM_COLS; j++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
 80006d8:	e00b      	b.n	80006f2 <main+0xe2>
	  key_state[i][j] = IDLE;  // Initialize each state to IDLE
 80006da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	3348      	adds	r3, #72	; 0x48
 80006e0:	19da      	adds	r2, r3, r7
 80006e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006e4:	4413      	add	r3, r2
 80006e6:	3b3c      	subs	r3, #60	; 0x3c
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < NUM_COLS; j++) {
 80006ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ee:	3301      	adds	r3, #1
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
 80006f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	ddf0      	ble.n	80006da <main+0xca>
  for(int i = 0; i < NUM_ROWS; i++) {
 80006f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006fa:	3301      	adds	r3, #1
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
 80006fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000700:	2b03      	cmp	r3, #3
 8000702:	dde7      	ble.n	80006d4 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 8000704:	4873      	ldr	r0, [pc, #460]	; (80008d4 <main+0x2c4>)
 8000706:	f7ff ff35 	bl	8000574 <AS5600_ReadAngle>
 800070a:	4603      	mov	r3, r0
 800070c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t magnetPresent = AS5600_IsMagnetPresent(&hi2c2);
 800070e:	4871      	ldr	r0, [pc, #452]	; (80008d4 <main+0x2c4>)
 8000710:	f7ff ff64 	bl	80005dc <AS5600_IsMagnetPresent>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//Magnet status
	if( magnetPresent == 1){
 800071a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800071e:	2b01      	cmp	r3, #1
 8000720:	d122      	bne.n	8000768 <main+0x158>

		SSD1306_GotoXY(40, 40);
 8000722:	2128      	movs	r1, #40	; 0x28
 8000724:	2028      	movs	r0, #40	; 0x28
 8000726:	f000 fc5d 	bl	8000fe4 <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	4962      	ldr	r1, [pc, #392]	; (80008b8 <main+0x2a8>)
 800072e:	486a      	ldr	r0, [pc, #424]	; (80008d8 <main+0x2c8>)
 8000730:	f000 fcee 	bl	8001110 <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

	    //Convert to a string with leading spaces
	    sprintf(angle_str, "%4u", angle);
 8000734:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4968      	ldr	r1, [pc, #416]	; (80008dc <main+0x2cc>)
 800073a:	4618      	mov	r0, r3
 800073c:	f007 fd2a 	bl	8008194 <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fc4e 	bl	8000fe4 <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	495d      	ldr	r1, [pc, #372]	; (80008c0 <main+0x2b0>)
 800074c:	4864      	ldr	r0, [pc, #400]	; (80008e0 <main+0x2d0>)
 800074e:	f000 fcdf 	bl	8001110 <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000752:	210c      	movs	r1, #12
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fc45 	bl	8000fe4 <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2201      	movs	r2, #1
 800075e:	4956      	ldr	r1, [pc, #344]	; (80008b8 <main+0x2a8>)
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fcd5 	bl	8001110 <SSD1306_Puts>
 8000766:	e008      	b.n	800077a <main+0x16a>

	} else {
		SSD1306_GotoXY(40, 40);
 8000768:	2128      	movs	r1, #40	; 0x28
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f000 fc3a 	bl	8000fe4 <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	4951      	ldr	r1, [pc, #324]	; (80008b8 <main+0x2a8>)
 8000774:	485b      	ldr	r0, [pc, #364]	; (80008e4 <main+0x2d4>)
 8000776:	f000 fccb 	bl	8001110 <SSD1306_Puts>
	}

	//Scan!
	for(int i = 0; i < NUM_ROWS; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800077e:	e0ed      	b.n	800095c <main+0x34c>
	    uint32_t current_tick = HAL_GetTick();
 8000780:	f000 ff86 	bl	8001690 <HAL_GetTick>
 8000784:	6238      	str	r0, [r7, #32]
	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 8000786:	4a58      	ldr	r2, [pc, #352]	; (80008e8 <main+0x2d8>)
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078e:	4a57      	ldr	r2, [pc, #348]	; (80008ec <main+0x2dc>)
 8000790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	f001 fa6f 	bl	8001c7c <HAL_GPIO_WritePin>
	    HAL_Delay(1); // delay after setting row high
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 ff82 	bl	80016a8 <HAL_Delay>

	    for(int j = 0; j < NUM_COLS; j++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80007a8:	e0c2      	b.n	8000930 <main+0x320>
	        uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 80007aa:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <main+0x2e0>)
 80007ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b2:	4950      	ldr	r1, [pc, #320]	; (80008f4 <main+0x2e4>)
 80007b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4610      	mov	r0, r2
 80007be:	f001 fa45 	bl	8001c4c <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	bf0c      	ite	eq
 80007c8:	2301      	moveq	r3, #1
 80007ca:	2300      	movne	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	77fb      	strb	r3, [r7, #31]

	        if (is_pressed && key_state[i][j] == IDLE) {
 80007d0:	7ffb      	ldrb	r3, [r7, #31]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d03f      	beq.n	8000856 <main+0x246>
 80007d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	3348      	adds	r3, #72	; 0x48
 80007dc:	19da      	adds	r2, r3, r7
 80007de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e0:	4413      	add	r3, r2
 80007e2:	3b3c      	subs	r3, #60	; 0x3c
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d135      	bne.n	8000856 <main+0x246>
	            // Key has been pressed from an idle state

	            // Find a slot in the HID report
	            for (int k = 0; k < NUM_KEYS; k++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
 80007ee:	e015      	b.n	800081c <main+0x20c>
	                if (hid_report[k] == 0) { // 0 indicates an empty slot
 80007f0:	4a41      	ldr	r2, [pc, #260]	; (80008f8 <main+0x2e8>)
 80007f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10c      	bne.n	8000816 <main+0x206>
	                    hid_report[k] = keycode_map[i][j]; // Add the key to the HID report
 80007fc:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <main+0x2ec>)
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	441a      	add	r2, r3
 8000804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000806:	4413      	add	r3, r2
 8000808:	7819      	ldrb	r1, [r3, #0]
 800080a:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <main+0x2e8>)
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	4413      	add	r3, r2
 8000810:	460a      	mov	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
	                    break;
 8000814:	e005      	b.n	8000822 <main+0x212>
	            for (int k = 0; k < NUM_KEYS; k++) {
 8000816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000818:	3301      	adds	r3, #1
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	2b0f      	cmp	r3, #15
 8000820:	dde6      	ble.n	80007f0 <main+0x1e0>
	                }
	            }
	            key_state[i][j] = PRESSED;
 8000822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	3348      	adds	r3, #72	; 0x48
 8000828:	19da      	adds	r2, r3, r7
 800082a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800082c:	4413      	add	r3, r2
 800082e:	3b3c      	subs	r3, #60	; 0x3c
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
	            last_key_time[i][j] = current_tick;
 8000834:	4932      	ldr	r1, [pc, #200]	; (8000900 <main+0x2f0>)
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800083c:	4413      	add	r3, r2
 800083e:	6a3a      	ldr	r2, [r7, #32]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	            sprintf(last_key, "%d%d", i+1, j+1);  // Save the last key pressed
 8000844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800084a:	3301      	adds	r3, #1
 800084c:	492d      	ldr	r1, [pc, #180]	; (8000904 <main+0x2f4>)
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <main+0x2f8>)
 8000850:	f007 fca0 	bl	8008194 <siprintf>
 8000854:	e069      	b.n	800092a <main+0x31a>

	        } else if (!is_pressed && key_state[i][j] == PRESSED && current_tick - last_key_time[i][j] > DEBOUNCE_DELAY) {
 8000856:	7ffb      	ldrb	r3, [r7, #31]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d166      	bne.n	800092a <main+0x31a>
 800085c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	3348      	adds	r3, #72	; 0x48
 8000862:	19da      	adds	r2, r3, r7
 8000864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000866:	4413      	add	r3, r2
 8000868:	3b3c      	subs	r3, #60	; 0x3c
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d15c      	bne.n	800092a <main+0x31a>
 8000870:	4923      	ldr	r1, [pc, #140]	; (8000900 <main+0x2f0>)
 8000872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000878:	4413      	add	r3, r2
 800087a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800087e:	6a3a      	ldr	r2, [r7, #32]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b0a      	cmp	r3, #10
 8000884:	d951      	bls.n	800092a <main+0x31a>
	            // Key has been released

	            // Remove the key from the HID report
	            for (int k = 0; k < NUM_KEYS; k++) {
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
 800088a:	e042      	b.n	8000912 <main+0x302>
	                if (hid_report[k] == keycode_map[i][j]) {
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <main+0x2e8>)
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	4413      	add	r3, r2
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4919      	ldr	r1, [pc, #100]	; (80008fc <main+0x2ec>)
 8000896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4419      	add	r1, r3
 800089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089e:	440b      	add	r3, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d132      	bne.n	800090c <main+0x2fc>
	                    hid_report[k] = 0; // Remove the key
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <main+0x2e8>)
 80008a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008aa:	4413      	add	r3, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	                    break;
 80008b0:	e032      	b.n	8000918 <main+0x308>
 80008b2:	bf00      	nop
 80008b4:	40020000 	.word	0x40020000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	08008a88 	.word	0x08008a88
 80008c0:	20000000 	.word	0x20000000
 80008c4:	08008a94 	.word	0x08008a94
 80008c8:	08008a9c 	.word	0x08008a9c
 80008cc:	08008aa4 	.word	0x08008aa4
 80008d0:	08008aac 	.word	0x08008aac
 80008d4:	200002e8 	.word	0x200002e8
 80008d8:	08008ab8 	.word	0x08008ab8
 80008dc:	08008ac0 	.word	0x08008ac0
 80008e0:	08008ac4 	.word	0x08008ac4
 80008e4:	08008acc 	.word	0x08008acc
 80008e8:	20000020 	.word	0x20000020
 80008ec:	20000030 	.word	0x20000030
 80008f0:	20000038 	.word	0x20000038
 80008f4:	20000048 	.word	0x20000048
 80008f8:	20000270 	.word	0x20000270
 80008fc:	20000010 	.word	0x20000010
 8000900:	20000230 	.word	0x20000230
 8000904:	08008ad4 	.word	0x08008ad4
 8000908:	20000290 	.word	0x20000290
	            for (int k = 0; k < NUM_KEYS; k++) {
 800090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090e:	3301      	adds	r3, #1
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
 8000912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000914:	2b0f      	cmp	r3, #15
 8000916:	ddb9      	ble.n	800088c <main+0x27c>
	                }
	            }

	            key_state[i][j] = IDLE;
 8000918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	3348      	adds	r3, #72	; 0x48
 800091e:	19da      	adds	r2, r3, r7
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	4413      	add	r3, r2
 8000924:	3b3c      	subs	r3, #60	; 0x3c
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	    for(int j = 0; j < NUM_COLS; j++) {
 800092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092c:	3301      	adds	r3, #1
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000932:	2b03      	cmp	r3, #3
 8000934:	f77f af39 	ble.w	80007aa <main+0x19a>
	        }
	    }

	    HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 8000938:	4a35      	ldr	r2, [pc, #212]	; (8000a10 <main+0x400>)
 800093a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800093c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000940:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <main+0x404>)
 8000942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	f001 f996 	bl	8001c7c <HAL_GPIO_WritePin>
	    HAL_Delay(1); // delay after setting row low
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fea9 	bl	80016a8 <HAL_Delay>
	for(int i = 0; i < NUM_ROWS; i++) {
 8000956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000958:	3301      	adds	r3, #1
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800095c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800095e:	2b03      	cmp	r3, #3
 8000960:	f77f af0e 	ble.w	8000780 <main+0x170>
	}

	// Check if the HID report has changed
	uint8_t report_changed = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < NUM_KEYS; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
 800096e:	e010      	b.n	8000992 <main+0x382>
	    if (hid_report[i] != hid_report_prev[i]) {
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <main+0x408>)
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	4413      	add	r3, r2
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4928      	ldr	r1, [pc, #160]	; (8000a1c <main+0x40c>)
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	440b      	add	r3, r1
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d003      	beq.n	800098c <main+0x37c>
	        report_changed = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	        break;
 800098a:	e005      	b.n	8000998 <main+0x388>
	for (int i = 0; i < NUM_KEYS; i++) {
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	3301      	adds	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	2b0f      	cmp	r3, #15
 8000996:	ddeb      	ble.n	8000970 <main+0x360>
	    }
	}

	if (report_changed) {
 8000998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800099c:	2b00      	cmp	r3, #0
 800099e:	d033      	beq.n	8000a08 <main+0x3f8>
	    // Update the HID report
	    keyboardhid.KEYCODE1 = hid_report[0];
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <main+0x408>)
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <main+0x410>)
 80009a6:	709a      	strb	r2, [r3, #2]
	    keyboardhid.KEYCODE2 = hid_report[1];
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <main+0x408>)
 80009aa:	785a      	ldrb	r2, [r3, #1]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <main+0x410>)
 80009ae:	70da      	strb	r2, [r3, #3]
	    keyboardhid.KEYCODE3 = hid_report[2];
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <main+0x408>)
 80009b2:	789a      	ldrb	r2, [r3, #2]
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <main+0x410>)
 80009b6:	711a      	strb	r2, [r3, #4]
	    keyboardhid.KEYCODE4 = hid_report[3];
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <main+0x408>)
 80009ba:	78da      	ldrb	r2, [r3, #3]
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x410>)
 80009be:	715a      	strb	r2, [r3, #5]
	    keyboardhid.KEYCODE5 = hid_report[4];
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <main+0x408>)
 80009c2:	791a      	ldrb	r2, [r3, #4]
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <main+0x410>)
 80009c6:	719a      	strb	r2, [r3, #6]
	    keyboardhid.KEYCODE6 = hid_report[5];
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <main+0x408>)
 80009ca:	795a      	ldrb	r2, [r3, #5]
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <main+0x410>)
 80009ce:	71da      	strb	r2, [r3, #7]

	    HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80009d0:	2104      	movs	r1, #4
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <main+0x414>)
 80009d4:	f001 f96b 	bl	8001cae <HAL_GPIO_TogglePin>
	    // Send the HID report
	    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 80009d8:	2208      	movs	r2, #8
 80009da:	4911      	ldr	r1, [pc, #68]	; (8000a20 <main+0x410>)
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <main+0x418>)
 80009de:	f005 fda9 	bl	8006534 <USBD_HID_SendReport>

	    // Update the previous report state
	    memcpy(hid_report_prev, hid_report, NUM_KEYS);
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <main+0x40c>)
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <main+0x408>)
 80009e6:	4614      	mov	r4, r2
 80009e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80009ee:	2104      	movs	r1, #4
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <main+0x414>)
 80009f2:	f001 f95c 	bl	8001cae <HAL_GPIO_TogglePin>

	    // Update the OLED display
	    SSD1306_GotoXY(0, 40);
 80009f6:	2128      	movs	r1, #40	; 0x28
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 faf3 	bl	8000fe4 <SSD1306_GotoXY>
	    SSD1306_Puts(last_key, &Font_11x18, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	490a      	ldr	r1, [pc, #40]	; (8000a2c <main+0x41c>)
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <main+0x420>)
 8000a04:	f000 fb84 	bl	8001110 <SSD1306_Puts>
	}

  	// Update the OLED display
	SSD1306_UpdateScreen();
 8000a08:	f000 fa46 	bl	8000e98 <SSD1306_UpdateScreen>
  {
 8000a0c:	e67a      	b.n	8000704 <main+0xf4>
 8000a0e:	bf00      	nop
 8000a10:	20000020 	.word	0x20000020
 8000a14:	20000030 	.word	0x20000030
 8000a18:	20000270 	.word	0x20000270
 8000a1c:	20000280 	.word	0x20000280
 8000a20:	20000228 	.word	0x20000228
 8000a24:	40020000 	.word	0x40020000
 8000a28:	200007a8 	.word	0x200007a8
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000290 	.word	0x20000290

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 fb9e 	bl	8008184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa8:	23a8      	movs	r3, #168	; 0xa8
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fb5b 	bl	8004174 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac4:	f000 f91e 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fdbc 	bl	8004664 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000af2:	f000 f907 	bl	8000d04 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <MX_I2C1_Init+0x54>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_I2C1_Init+0x58>)
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b46:	f001 f8cd 	bl	8001ce4 <HAL_I2C_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b50:	f000 f8d8 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000294 	.word	0x20000294
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	00061a80 	.word	0x00061a80

08000b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_I2C2_Init+0x54>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_I2C2_Init+0x58>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000ba2:	f001 f89f 	bl	8001ce4 <HAL_I2C_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bac:	f000 f8aa 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002e8 	.word	0x200002e8
 8000bb8:	40005800 	.word	0x40005800
 8000bbc:	000186a0 	.word	0x000186a0

08000bc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <MX_SPI2_Init+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_SPI2_Init+0x64>)
 8000c12:	f003 ff31 	bl	8004a78 <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f000 f872 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000033c 	.word	0x2000033c
 8000c28:	40003800 	.word	0x40003800

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_GPIO_Init+0xcc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	21f4      	movs	r1, #244	; 0xf4
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_GPIO_Init+0xd0>)
 8000cb8:	f000 ffe0 	bl	8001c7c <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xd4>)
 8000cd0:	f000 fe20 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000cd4:	23f4      	movs	r3, #244	; 0xf4
 8000cd6:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0xd0>)
 8000cec:	f000 fe12 	bl	8001914 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020800 	.word	0x40020800

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d16:	f000 fa29 	bl	800116c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d1a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2178      	movs	r1, #120	; 0x78
 8000d22:	485b      	ldr	r0, [pc, #364]	; (8000e90 <SSD1306_Init+0x180>)
 8000d24:	f001 fc46 	bl	80025b4 <HAL_I2C_IsDeviceReady>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e0a9      	b.n	8000e86 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000d32:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d38:	e002      	b.n	8000d40 <SSD1306_Init+0x30>
		p--;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d46:	22ae      	movs	r2, #174	; 0xae
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 fa8a 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 fa85 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 fa80 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d64:	22b0      	movs	r2, #176	; 0xb0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 fa7b 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d6e:	22c8      	movs	r2, #200	; 0xc8
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fa76 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fa71 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d82:	2210      	movs	r2, #16
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 fa6c 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 fa67 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d96:	2281      	movs	r2, #129	; 0x81
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 fa62 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000da0:	22ff      	movs	r2, #255	; 0xff
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 fa5d 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000daa:	22a1      	movs	r2, #161	; 0xa1
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 fa58 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000db4:	22a6      	movs	r2, #166	; 0xa6
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 fa53 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000dbe:	22a8      	movs	r2, #168	; 0xa8
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 fa4e 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000dc8:	223f      	movs	r2, #63	; 0x3f
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	; 0x78
 8000dce:	f000 fa49 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dd2:	22a4      	movs	r2, #164	; 0xa4
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 fa44 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ddc:	22d3      	movs	r2, #211	; 0xd3
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 fa3f 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 fa3a 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000df0:	22d5      	movs	r2, #213	; 0xd5
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	; 0x78
 8000df6:	f000 fa35 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000dfa:	22f0      	movs	r2, #240	; 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	; 0x78
 8000e00:	f000 fa30 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e04:	22d9      	movs	r2, #217	; 0xd9
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	; 0x78
 8000e0a:	f000 fa2b 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e0e:	2222      	movs	r2, #34	; 0x22
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f000 fa26 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e18:	22da      	movs	r2, #218	; 0xda
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	; 0x78
 8000e1e:	f000 fa21 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e22:	2212      	movs	r2, #18
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	; 0x78
 8000e28:	f000 fa1c 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e2c:	22db      	movs	r2, #219	; 0xdb
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	f000 fa17 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e36:	2220      	movs	r2, #32
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	; 0x78
 8000e3c:	f000 fa12 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e40:	228d      	movs	r2, #141	; 0x8d
 8000e42:	2100      	movs	r1, #0
 8000e44:	2078      	movs	r0, #120	; 0x78
 8000e46:	f000 fa0d 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e4a:	2214      	movs	r2, #20
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	; 0x78
 8000e50:	f000 fa08 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e54:	22af      	movs	r2, #175	; 0xaf
 8000e56:	2100      	movs	r1, #0
 8000e58:	2078      	movs	r0, #120	; 0x78
 8000e5a:	f000 fa03 	bl	8001264 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e5e:	222e      	movs	r2, #46	; 0x2e
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	; 0x78
 8000e64:	f000 f9fe 	bl	8001264 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f843 	bl	8000ef4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000e6e:	f000 f813 	bl	8000e98 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SSD1306_Init+0x184>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SSD1306_Init+0x184>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SSD1306_Init+0x184>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e84:	2301      	movs	r3, #1
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000294 	.word	0x20000294
 8000e94:	20000794 	.word	0x20000794

08000e98 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e01d      	b.n	8000ee0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b50      	subs	r3, #80	; 0x50
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2100      	movs	r1, #0
 8000eae:	2078      	movs	r0, #120	; 0x78
 8000eb0:	f000 f9d8 	bl	8001264 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2078      	movs	r0, #120	; 0x78
 8000eba:	f000 f9d3 	bl	8001264 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2078      	movs	r0, #120	; 0x78
 8000ec4:	f000 f9ce 	bl	8001264 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <SSD1306_UpdateScreen+0x58>)
 8000ece:	441a      	add	r2, r3
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	2078      	movs	r0, #120	; 0x78
 8000ed6:	f000 f95f 	bl	8001198 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	3301      	adds	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d9de      	bls.n	8000ea4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000394 	.word	0x20000394

08000ef4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <SSD1306_Fill+0x14>
 8000f04:	2300      	movs	r3, #0
 8000f06:	e000      	b.n	8000f0a <SSD1306_Fill+0x16>
 8000f08:	23ff      	movs	r3, #255	; 0xff
 8000f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <SSD1306_Fill+0x2c>)
 8000f12:	f007 f937 	bl	8008184 <memset>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000394 	.word	0x20000394

08000f24 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	70fb      	strb	r3, [r7, #3]
	if (
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3a:	d848      	bhi.n	8000fce <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f40:	d845      	bhi.n	8000fce <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <SSD1306_DrawPixel+0xb8>)
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d11a      	bne.n	8000f94 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f5e:	88fa      	ldrh	r2, [r7, #6]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	b298      	uxth	r0, r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <SSD1306_DrawPixel+0xbc>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b259      	sxtb	r1, r3
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	4603      	mov	r3, r0
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2c9      	uxtb	r1, r1
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <SSD1306_DrawPixel+0xbc>)
 8000f90:	54d1      	strb	r1, [r2, r3]
 8000f92:	e01d      	b.n	8000fd0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	b298      	uxth	r0, r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	01db      	lsls	r3, r3, #7
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <SSD1306_DrawPixel+0xbc>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4013      	ands	r3, r2
 8000fbc:	b259      	sxtb	r1, r3
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2c9      	uxtb	r1, r1
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SSD1306_DrawPixel+0xbc>)
 8000fca:	54d1      	strb	r1, [r2, r3]
 8000fcc:	e000      	b.n	8000fd0 <SSD1306_DrawPixel+0xac>
		return;
 8000fce:	bf00      	nop
	}
}
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000794 	.word	0x20000794
 8000fe0:	20000394 	.word	0x20000394

08000fe4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <SSD1306_GotoXY+0x28>)
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <SSD1306_GotoXY+0x28>)
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	8053      	strh	r3, [r2, #2]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000794 	.word	0x20000794

08001010 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001020:	4b3a      	ldr	r3, [pc, #232]	; (800110c <SSD1306_Putc+0xfc>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
	if (
 800102c:	2b7f      	cmp	r3, #127	; 0x7f
 800102e:	dc07      	bgt.n	8001040 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <SSD1306_Putc+0xfc>)
 8001032:	885b      	ldrh	r3, [r3, #2]
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800103c:	2b3f      	cmp	r3, #63	; 0x3f
 800103e:	dd01      	ble.n	8001044 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e05e      	b.n	8001102 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e04b      	b.n	80010e2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	3b20      	subs	r3, #32
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	7849      	ldrb	r1, [r1, #1]
 8001056:	fb01 f303 	mul.w	r3, r1, r3
 800105a:	4619      	mov	r1, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	440b      	add	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	e030      	b.n	80010d0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d010      	beq.n	80010a0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <SSD1306_Putc+0xfc>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b298      	uxth	r0, r3
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <SSD1306_Putc+0xfc>)
 800108c:	885a      	ldrh	r2, [r3, #2]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	79ba      	ldrb	r2, [r7, #6]
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff ff43 	bl	8000f24 <SSD1306_DrawPixel>
 800109e:	e014      	b.n	80010ca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <SSD1306_Putc+0xfc>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b298      	uxth	r0, r3
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <SSD1306_Putc+0xfc>)
 80010ae:	885a      	ldrh	r2, [r3, #2]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b299      	uxth	r1, r3
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	f7ff ff2d 	bl	8000f24 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4293      	cmp	r3, r2
 80010da:	d3c8      	bcc.n	800106e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	461a      	mov	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d3ad      	bcc.n	800104a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <SSD1306_Putc+0xfc>)
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <SSD1306_Putc+0xfc>)
 80010fe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001100:	79fb      	ldrb	r3, [r7, #7]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000794 	.word	0x20000794

08001110 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800111e:	e012      	b.n	8001146 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff71 	bl	8001010 <SSD1306_Putc>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d002      	beq.n	8001140 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	e008      	b.n	8001152 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1e8      	bne.n	8001120 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fec8 	bl	8000ef4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001164:	f7ff fe98 	bl	8000e98 <SSD1306_UpdateScreen>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <ssd1306_I2C_Init+0x28>)
 8001174:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001176:	e002      	b.n	800117e <ssd1306_I2C_Init+0x12>
		p--;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	0003d090 	.word	0x0003d090

08001198 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b0c7      	sub	sp, #284	; 0x11c
 800119c:	af02      	add	r7, sp, #8
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80011a6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80011aa:	600a      	str	r2, [r1, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80011b6:	4622      	mov	r2, r4
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011be:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80011c2:	4602      	mov	r2, r0
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ce:	460a      	mov	r2, r1
 80011d0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011de:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011ec:	e015      	b.n	800121a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80011ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011f6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001202:	3301      	adds	r3, #1
 8001204:	7811      	ldrb	r1, [r2, #0]
 8001206:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800120a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800120e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001210:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800121e:	b29b      	uxth	r3, r3
 8001220:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001224:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d8df      	bhi.n	80011ee <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800122e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001232:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b299      	uxth	r1, r3
 800123a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800123e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b29b      	uxth	r3, r3
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	200a      	movs	r0, #10
 800124e:	9000      	str	r0, [sp, #0]
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <ssd1306_I2C_WriteMulti+0xc8>)
 8001252:	f000 fe8b 	bl	8001f6c <HAL_I2C_Master_Transmit>
}
 8001256:	bf00      	nop
 8001258:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	20000294 	.word	0x20000294

08001264 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af02      	add	r7, sp, #8
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	460b      	mov	r3, r1
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	4613      	mov	r3, r2
 8001274:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800127a:	797b      	ldrb	r3, [r7, #5]
 800127c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	b299      	uxth	r1, r3
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	230a      	movs	r3, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2302      	movs	r3, #2
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <ssd1306_I2C_Write+0x38>)
 800128e:	f000 fe6d 	bl	8001f6c <HAL_I2C_Master_Transmit>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000294 	.word	0x20000294

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <HAL_I2C_MspInit+0xe8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_I2C_MspInit+0xec>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132e:	23c0      	movs	r3, #192	; 0xc0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <HAL_I2C_MspInit+0xf0>)
 800134a:	f000 fae3 	bl	8001914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800136a:	e031      	b.n	80013d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_I2C_MspInit+0xf4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12c      	bne.n	80013d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_I2C_MspInit+0xec>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_I2C_MspInit+0xec>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001392:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001398:	2312      	movs	r3, #18
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_I2C_MspInit+0xf0>)
 80013b0:	f000 fab0 	bl	8001914 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0xec>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_I2C_MspInit+0xec>)
 80013be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_I2C_MspInit+0xec>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40005800 	.word	0x40005800

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_SPI_MspInit+0x84>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12c      	bne.n	8001464 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_SPI_MspInit+0x88>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_SPI_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001442:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001454:	2305      	movs	r3, #5
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 8001460:	f000 fa58 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40003800 	.word	0x40003800
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f8d0 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <OTG_FS_IRQHandler+0x10>)
 80014d2:	f001 fe34 	bl	800313e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000c78 	.word	0x20000c78

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f006 fe0e 	bl	8008130 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20020000 	.word	0x20020000
 8001540:	00000400 	.word	0x00000400
 8001544:	2000079c 	.word	0x2000079c
 8001548:	200010a8 	.word	0x200010a8

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f006 fdcd 	bl	800813c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff f835 	bl	8000610 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80015b4:	0800a03c 	.word	0x0800a03c
  ldr r2, =_sbss
 80015b8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80015bc:	200010a4 	.word	0x200010a4

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f94f 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fe52 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f967 	bl	80018fa <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f92f 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000050 	.word	0x20000050
 8001660:	20000058 	.word	0x20000058
 8001664:	20000054 	.word	0x20000054

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000058 	.word	0x20000058
 800168c:	200007a0 	.word	0x200007a0

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200007a0 	.word	0x200007a0

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000058 	.word	0x20000058

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e16b      	b.n	8001c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 815a 	bne.w	8001c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d005      	beq.n	8001966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	2b02      	cmp	r3, #2
 8001964:	d130      	bne.n	80019c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80b4 	beq.w	8001c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a5f      	ldr	r2, [pc, #380]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab6:	4a5b      	ldr	r2, [pc, #364]	; (8001c24 <HAL_GPIO_Init+0x310>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_GPIO_Init+0x314>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x226>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x318>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x222>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_GPIO_Init+0x31c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x21e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <HAL_GPIO_Init+0x320>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x21a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_GPIO_Init+0x324>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x216>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x328>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x212>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_GPIO_Init+0x32c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <HAL_GPIO_Init+0x330>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x20a>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e00e      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x310>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f ae90 	bls.w	8001930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40013c00 	.word	0x40013c00

08001c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	041a      	lsls	r2, r3, #16
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	400b      	ands	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e12b      	b.n	8001f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff faf0 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d48:	f002 fe82 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a81      	ldr	r2, [pc, #516]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d807      	bhi.n	8001d68 <HAL_I2C_Init+0x84>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a80      	ldr	r2, [pc, #512]	; (8001f5c <HAL_I2C_Init+0x278>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e006      	b.n	8001d76 <HAL_I2C_Init+0x92>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a7d      	ldr	r2, [pc, #500]	; (8001f60 <HAL_I2C_Init+0x27c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	bf94      	ite	ls
 8001d70:	2301      	movls	r3, #1
 8001d72:	2300      	movhi	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0e7      	b.n	8001f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a78      	ldr	r2, [pc, #480]	; (8001f64 <HAL_I2C_Init+0x280>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d802      	bhi.n	8001db8 <HAL_I2C_Init+0xd4>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	e009      	b.n	8001dcc <HAL_I2C_Init+0xe8>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_I2C_Init+0x284>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	3301      	adds	r3, #1
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	495c      	ldr	r1, [pc, #368]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001de8:	428b      	cmp	r3, r1
 8001dea:	d819      	bhi.n	8001e20 <HAL_I2C_Init+0x13c>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e59      	subs	r1, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfa:	1c59      	adds	r1, r3, #1
 8001dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e00:	400b      	ands	r3, r1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_I2C_Init+0x138>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e59      	subs	r1, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	e051      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	e04f      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d111      	bne.n	8001e4c <HAL_I2C_Init+0x168>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e58      	subs	r0, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e012      	b.n	8001e72 <HAL_I2C_Init+0x18e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e58      	subs	r0, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	0099      	lsls	r1, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Init+0x196>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e022      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10e      	bne.n	8001ea0 <HAL_I2C_Init+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e58      	subs	r0, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	440b      	add	r3, r1
 8001e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9e:	e00f      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	6809      	ldr	r1, [r1, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6911      	ldr	r1, [r2, #16]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	000186a0 	.word	0x000186a0
 8001f5c:	001e847f 	.word	0x001e847f
 8001f60:	003d08ff 	.word	0x003d08ff
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	10624dd3 	.word	0x10624dd3

08001f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	460b      	mov	r3, r1
 8001f7a:	817b      	strh	r3, [r7, #10]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fb86 	bl	8001690 <HAL_GetTick>
 8001f84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	f040 80e0 	bne.w	8002154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2319      	movs	r3, #25
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4970      	ldr	r1, [pc, #448]	; (8002160 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fda0 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0d3      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x50>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0cc      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d007      	beq.n	8001fe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2221      	movs	r2, #33	; 0x21
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_I2C_Master_Transmit+0x1f8>)
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fbf0 	bl	8002810 <I2C_MasterRequestWrite>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e08d      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002050:	e066      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fe1a 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b04      	cmp	r3, #4
 8002068:	d107      	bne.n	800207a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d11b      	bne.n	80020f4 <HAL_I2C_Master_Transmit+0x188>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d017      	beq.n	80020f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	6a39      	ldr	r1, [r7, #32]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fe0a 	bl	8002d12 <I2C_WaitOnBTFFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b04      	cmp	r3, #4
 800210a:	d107      	bne.n	800211c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e01a      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d194      	bne.n	8002052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	00100002 	.word	0x00100002
 8002164:	ffff0000 	.word	0xffff0000

08002168 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff fa85 	bl	8001690 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 8208 	bne.w	80025a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2319      	movs	r3, #25
 800219c:	2201      	movs	r2, #1
 800219e:	497b      	ldr	r1, [pc, #492]	; (800238c <HAL_I2C_Mem_Read+0x224>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fc9f 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e1fb      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Mem_Read+0x56>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e1f4      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2222      	movs	r2, #34	; 0x22
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <HAL_I2C_Mem_Read+0x228>)
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002226:	88f8      	ldrh	r0, [r7, #6]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fb6c 	bl	8002914 <I2C_RequestMemoryRead>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1b0      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e184      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11b      	bne.n	80022b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e164      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d11b      	bne.n	80022f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	e144      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800230c:	e138      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b03      	cmp	r3, #3
 8002314:	f200 80f1 	bhi.w	80024fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b01      	cmp	r3, #1
 800231e:	d123      	bne.n	8002368 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fd35 	bl	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e139      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002366:	e10b      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	2b02      	cmp	r3, #2
 800236e:	d14e      	bne.n	800240e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	2200      	movs	r2, #0
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fbb2 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e10e      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
 800238a:	bf00      	nop
 800238c:	00100002 	.word	0x00100002
 8002390:	ffff0000 	.word	0xffff0000
 8002394:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800240c:	e0b8      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	2200      	movs	r2, #0
 8002416:	4966      	ldr	r1, [pc, #408]	; (80025b0 <HAL_I2C_Mem_Read+0x448>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb63 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0bf      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	2200      	movs	r2, #0
 8002472:	494f      	ldr	r1, [pc, #316]	; (80025b0 <HAL_I2C_Mem_Read+0x448>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fb35 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e091      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f8:	e042      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fc48 	bl	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04c      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d118      	bne.n	8002580 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aec2 	bne.w	800230e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	00010004 	.word	0x00010004

080025b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff f864 	bl	8001690 <HAL_GetTick>
 80025c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	f040 8111 	bne.w	80027fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	4988      	ldr	r1, [pc, #544]	; (8002808 <HAL_I2C_IsDeviceReady+0x254>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fa7c 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e104      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2C_IsDeviceReady+0x50>
 8002600:	2302      	movs	r3, #2
 8002602:	e0fd      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d007      	beq.n	800262a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002638:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2224      	movs	r2, #36	; 0x24
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a70      	ldr	r2, [pc, #448]	; (800280c <HAL_I2C_IsDeviceReady+0x258>)
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fa3a 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d103      	bne.n	800268e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0b6      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fff5 	bl	8001690 <HAL_GetTick>
 80026a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026d6:	e025      	b.n	8002724 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7fe ffda 	bl	8001690 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <HAL_I2C_IsDeviceReady+0x13a>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22a0      	movs	r2, #160	; 0xa0
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2ba0      	cmp	r3, #160	; 0xa0
 800272e:	d005      	beq.n	800273c <HAL_I2C_IsDeviceReady+0x188>
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_I2C_IsDeviceReady+0x188>
 8002736:	7dbb      	ldrb	r3, [r7, #22]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0cd      	beq.n	80026d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d129      	bne.n	80027a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002760:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2319      	movs	r3, #25
 800277e:	2201      	movs	r2, #1
 8002780:	4921      	ldr	r1, [pc, #132]	; (8002808 <HAL_I2C_IsDeviceReady+0x254>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f9ae 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e036      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e02c      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2319      	movs	r3, #25
 80027c6:	2201      	movs	r2, #1
 80027c8:	490f      	ldr	r1, [pc, #60]	; (8002808 <HAL_I2C_IsDeviceReady+0x254>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f98a 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e012      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3301      	adds	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f4ff af32 	bcc.w	800264e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	00100002 	.word	0x00100002
 800280c:	ffff0000 	.word	0xffff0000

08002810 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d006      	beq.n	800283a <I2C_MasterRequestWrite+0x2a>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d003      	beq.n	800283a <I2C_MasterRequestWrite+0x2a>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002838:	d108      	bne.n	800284c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e00b      	b.n	8002864 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	2b12      	cmp	r3, #18
 8002852:	d107      	bne.n	8002864 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002862:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f937 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d103      	bne.n	8002894 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e035      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a0:	d108      	bne.n	80028b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	e01b      	b.n	80028ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	11db      	asrs	r3, r3, #7
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0306 	and.w	r3, r3, #6
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f063 030f 	orn	r3, r3, #15
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	490e      	ldr	r1, [pc, #56]	; (800290c <I2C_MasterRequestWrite+0xfc>)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f95d 	bl	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e010      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <I2C_MasterRequestWrite+0x100>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f94d 	bl	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010008 	.word	0x00010008
 8002910:	00010002 	.word	0x00010002

08002914 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	817b      	strh	r3, [r7, #10]
 8002926:	460b      	mov	r3, r1
 8002928:	813b      	strh	r3, [r7, #8]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8c2 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d103      	bne.n	800297e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0aa      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	4952      	ldr	r1, [pc, #328]	; (8002ae0 <I2C_RequestMemoryRead+0x1cc>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f8fa 	bl	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e097      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f964 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e076      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e021      	b.n	8002a40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f93e 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e050      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	6a39      	ldr	r1, [r7, #32]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f923 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d107      	bne.n	8002a68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e035      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f82b 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa2:	d103      	bne.n	8002aac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e013      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	4906      	ldr	r1, [pc, #24]	; (8002ae0 <I2C_RequestMemoryRead+0x1cc>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f863 	bl	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00010002 	.word	0x00010002

08002ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	e025      	b.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d021      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fe fdc7 	bl	8001690 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e023      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	e00c      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d0b6      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba0:	e051      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	d123      	bne.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e046      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d021      	beq.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fd45 	bl	8001690 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e020      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10c      	bne.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	e00b      	b.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d18d      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c9c:	e02d      	b.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8ce 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e02d      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d021      	beq.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fceb 	bl	8001690 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e007      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d1ca      	bne.n	8002c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d1e:	e02d      	b.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f88d 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e02d      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d021      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7fe fcaa 	bl	8001690 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d1ca      	bne.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da0:	e042      	b.n	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d119      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e029      	b.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7fe fc54 	bl	8001690 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d1b5      	bne.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d11b      	bne.n	8002e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea0:	b08f      	sub	sp, #60	; 0x3c
 8002ea2:	af0a      	add	r7, sp, #40	; 0x28
 8002ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e10f      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f004 fe2e 	bl	8007b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 ff5f 	bl	8004db2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	687e      	ldr	r6, [r7, #4]
 8002efc:	466d      	mov	r5, sp
 8002efe:	f106 0410 	add.w	r4, r6, #16
 8002f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f12:	1d33      	adds	r3, r6, #4
 8002f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f001 fe37 	bl	8004b8a <USB_CoreInit>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0d0      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 ff4d 	bl	8004dd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e04a      	b.n	8002fd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333d      	adds	r3, #61	; 0x3d
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	333c      	adds	r3, #60	; 0x3c
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	b298      	uxth	r0, r3
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3342      	adds	r3, #66	; 0x42
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	333f      	adds	r3, #63	; 0x3f
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3344      	adds	r3, #68	; 0x44
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3348      	adds	r3, #72	; 0x48
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3350      	adds	r3, #80	; 0x50
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3af      	bcc.n	8002f40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e044      	b.n	8003070 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3b5      	bcc.n	8002fe6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	687e      	ldr	r6, [r7, #4]
 8003082:	466d      	mov	r5, sp
 8003084:	f106 0410 	add.w	r4, r6, #16
 8003088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003094:	e885 0003 	stmia.w	r5, {r0, r1}
 8003098:	1d33      	adds	r3, r6, #4
 800309a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	f001 fee5 	bl	8004e6c <USB_DevInit>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e00d      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 ff61 	bl	8005f90 <USB_DevDisconnect>

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_Start+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e020      	b.n	8003136 <HAL_PCD_Start+0x5e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b01      	cmp	r3, #1
 8003102:	d109      	bne.n	8003118 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003108:	2b01      	cmp	r3, #1
 800310a:	d005      	beq.n	8003118 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fe37 	bl	8004d90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ff11 	bl	8005f4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800313e:	b590      	push	{r4, r7, lr}
 8003140:	b08d      	sub	sp, #52	; 0x34
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f002 ffcf 	bl	80060f8 <USB_GetMode>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 839d 	bne.w	800389c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f002 ff33 	bl	8005fd2 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8393 	beq.w	800389a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f002 ff2a 	bl	8005fd2 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d107      	bne.n	8003198 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f002 0202 	and.w	r2, r2, #2
 8003196:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f002 ff18 	bl	8005fd2 <USB_ReadInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d161      	bne.n	8003270 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0210 	bic.w	r2, r2, #16
 80031ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	0c5b      	lsrs	r3, r3, #17
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d124      	bne.n	8003232 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d035      	beq.n	8003260 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6a38      	ldr	r0, [r7, #32]
 8003208:	f002 fd4f 	bl	8005caa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003218:	441a      	add	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322a:	441a      	add	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	e016      	b.n	8003260 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	0c5b      	lsrs	r3, r3, #17
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	2b06      	cmp	r3, #6
 800323c:	d110      	bne.n	8003260 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003244:	2208      	movs	r2, #8
 8003246:	4619      	mov	r1, r3
 8003248:	6a38      	ldr	r0, [r7, #32]
 800324a:	f002 fd2e 	bl	8005caa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325a:	441a      	add	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0210 	orr.w	r2, r2, #16
 800326e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f002 feac 	bl	8005fd2 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003280:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003284:	d16e      	bne.n	8003364 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f002 feb2 	bl	8005ff8 <USB_ReadDevAllOutEpInterrupt>
 8003294:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003296:	e062      	b.n	800335e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d057      	beq.n	8003352 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fed7 	bl	8006060 <USB_ReadDevOutEPInterrupt>
 80032b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	2301      	movs	r3, #1
 80032ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fd98 	bl	8003e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	461a      	mov	r2, r3
 80032f0:	2308      	movs	r3, #8
 80032f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fe92 	bl	8004020 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	2310      	movs	r3, #16
 8003316:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	2320      	movs	r3, #32
 8003332:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003350:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d199      	bne.n	8003298 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fe32 	bl	8005fd2 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003378:	f040 80c0 	bne.w	80034fc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f002 fe53 	bl	800602c <USB_ReadDevAllInEpInterrupt>
 8003386:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800338c:	e0b2      	b.n	80034f4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a7 	beq.w	80034e8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 fe79 	bl	800609c <USB_ReadDevInEPInterrupt>
 80033aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d057      	beq.n	8003466 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2201      	movs	r2, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69f9      	ldr	r1, [r7, #28]
 80033d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d6:	4013      	ands	r3, r2
 80033d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e6:	461a      	mov	r2, r3
 80033e8:	2301      	movs	r3, #1
 80033ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d132      	bne.n	800345a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3348      	adds	r3, #72	; 0x48
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	3344      	adds	r3, #68	; 0x44
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4419      	add	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	3348      	adds	r3, #72	; 0x48
 800342a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d113      	bne.n	800345a <HAL_PCD_IRQHandler+0x31c>
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3350      	adds	r3, #80	; 0x50
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003452:	461a      	mov	r2, r3
 8003454:	2101      	movs	r1, #1
 8003456:	f002 fe81 	bl	800615c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f004 fbe4 	bl	8007c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	461a      	mov	r2, r3
 800347e:	2308      	movs	r3, #8
 8003480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	2310      	movs	r3, #16
 800349c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	461a      	mov	r2, r3
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d0:	461a      	mov	r2, r3
 80034d2:	2302      	movs	r3, #2
 80034d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fc03 	bl	8003cee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f47f af49 	bne.w	800338e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f002 fd66 	bl	8005fd2 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800350c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003510:	d122      	bne.n	8003558 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800352c:	2b01      	cmp	r3, #1
 800352e:	d108      	bne.n	8003542 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003538:	2100      	movs	r1, #0
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fe0e 	bl	800415c <HAL_PCDEx_LPM_Callback>
 8003540:	e002      	b.n	8003548 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f004 fbea 	bl	8007d1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fd38 	bl	8005fd2 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356c:	d112      	bne.n	8003594 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f004 fba6 	bl	8007cd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003592:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f002 fd1a 	bl	8005fd2 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	f040 80c7 	bne.w	800373a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2110      	movs	r1, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fdb4 	bl	8005134 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d0:	e056      	b.n	8003680 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	461a      	mov	r2, r3
 80035e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003604:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	0151      	lsls	r1, r2, #5
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	440a      	add	r2, r1
 800361c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003624:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	461a      	mov	r2, r3
 8003634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003638:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	440a      	add	r2, r1
 8003650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003678:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	3301      	adds	r3, #1
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003686:	429a      	cmp	r2, r3
 8003688:	d3a3      	bcc.n	80035d2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800369c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b6:	f043 030b 	orr.w	r3, r3, #11
 80036ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036cc:	f043 030b 	orr.w	r3, r3, #11
 80036d0:	6453      	str	r3, [r2, #68]	; 0x44
 80036d2:	e015      	b.n	8003700 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fa:	f043 030b 	orr.w	r3, r3, #11
 80036fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003712:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003724:	461a      	mov	r2, r3
 8003726:	f002 fd19 	bl	800615c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 fc47 	bl	8005fd2 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374e:	d124      	bne.n	800379a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fcdd 	bl	8006114 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fd45 	bl	80051ee <USB_GetDevSpeed>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681c      	ldr	r4, [r3, #0]
 8003770:	f001 f962 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8003774:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4620      	mov	r0, r4
 8003780:	f001 fa64 	bl	8004c4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f004 fa7a 	bl	8007c7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003798:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f002 fc17 	bl	8005fd2 <USB_ReadInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d10a      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f004 fa57 	bl	8007c62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f002 0208 	and.w	r2, r2, #8
 80037c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 fc02 	bl	8005fd2 <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d8:	d10f      	bne.n	80037fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f004 fab9 	bl	8007d5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fbe7 	bl	8005fd2 <USB_ReadInterrupts>
 8003804:	4603      	mov	r3, r0
 8003806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800380e:	d10f      	bne.n	8003830 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f004 fa8c 	bl	8007d38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800382e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fbcc 	bl	8005fd2 <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d10a      	bne.n	800385c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 fa9a 	bl	8007d80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800385a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f002 fbb6 	bl	8005fd2 <USB_ReadInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d115      	bne.n	800389c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f004 fa8a 	bl	8007d9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	e000      	b.n	800389c <HAL_PCD_IRQHandler+0x75e>
      return;
 800389a:	bf00      	nop
    }
  }
}
 800389c:	3734      	adds	r7, #52	; 0x34
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd90      	pop	{r4, r7, pc}

080038a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_PCD_SetAddress+0x1a>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e013      	b.n	80038e4 <HAL_PCD_SetAddress+0x42>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 fb14 	bl	8005f02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	70fb      	strb	r3, [r7, #3]
 80038fe:	460b      	mov	r3, r1
 8003900:	803b      	strh	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800390a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390e:	2b00      	cmp	r3, #0
 8003910:	da0f      	bge.n	8003932 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	3338      	adds	r3, #56	; 0x38
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	3304      	adds	r3, #4
 8003928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	705a      	strb	r2, [r3, #1]
 8003930:	e00f      	b.n	8003952 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800395e:	883a      	ldrh	r2, [r7, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	78ba      	ldrb	r2, [r7, #2]
 8003968:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800397c:	78bb      	ldrb	r3, [r7, #2]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d102      	bne.n	8003988 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_PCD_EP_Open+0xaa>
 8003992:	2302      	movs	r3, #2
 8003994:	e00e      	b.n	80039b4 <HAL_PCD_EP_Open+0xc8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fc47 	bl	8005238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039b2:	7afb      	ldrb	r3, [r7, #11]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da0f      	bge.n	80039f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	e00f      	b.n	8003a10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_PCD_EP_Close+0x6e>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e00e      	b.n	8003a48 <HAL_PCD_EP_Close+0x8c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fc85 	bl	8005348 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	f001 ff60 	bl	8005988 <USB_EP0StartXfer>
 8003ac8:	e008      	b.n	8003adc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	f001 fd12 	bl	8005500 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	460b      	mov	r3, r1
 8003af4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3338      	adds	r3, #56	; 0x38
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	f001 ff16 	bl	8005988 <USB_EP0StartXfer>
 8003b5c:	e008      	b.n	8003b70 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	f001 fcc8 	bl	8005500 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 020f 	and.w	r2, r3, #15
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d901      	bls.n	8003b98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e050      	b.n	8003c3a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da0f      	bge.n	8003bc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	3338      	adds	r3, #56	; 0x38
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	705a      	strb	r2, [r3, #1]
 8003bbe:	e00d      	b.n	8003bdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_PCD_EP_SetStall+0x82>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e01e      	b.n	8003c3a <HAL_PCD_EP_SetStall+0xc0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 f8a5 	bl	8005d5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	b2d9      	uxtb	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f002 fa96 	bl	800615c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d901      	bls.n	8003c60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e042      	b.n	8003ce6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da0f      	bge.n	8003c88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3338      	adds	r3, #56	; 0x38
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	705a      	strb	r2, [r3, #1]
 8003c86:	e00f      	b.n	8003ca8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PCD_EP_ClrStall+0x86>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e00e      	b.n	8003ce6 <HAL_PCD_EP_ClrStall+0xa4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 f8ad 	bl	8005e36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08a      	sub	sp, #40	; 0x28
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	3338      	adds	r3, #56	; 0x38
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	3304      	adds	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d901      	bls.n	8003d26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06c      	b.n	8003e00 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d902      	bls.n	8003d42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3303      	adds	r3, #3
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d4a:	e02b      	b.n	8003da4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d902      	bls.n	8003d68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68d9      	ldr	r1, [r3, #12]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	6978      	ldr	r0, [r7, #20]
 8003d88:	f001 ff51 	bl	8005c2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	441a      	add	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d809      	bhi.n	8003dce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d203      	bcs.n	8003dce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1be      	bne.n	8003d4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d811      	bhi.n	8003dfe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2201      	movs	r2, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	6939      	ldr	r1, [r7, #16]
 8003df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	333c      	adds	r3, #60	; 0x3c
 8003e20:	3304      	adds	r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f040 80a0 	bne.w	8003f80 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a72      	ldr	r2, [pc, #456]	; (8004018 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f240 80dd 	bls.w	800400e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80d7 	beq.w	800400e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	6093      	str	r3, [r2, #8]
 8003e74:	e0cb      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2320      	movs	r3, #32
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	e0bc      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f040 80b7 	bne.w	800400e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a5d      	ldr	r2, [pc, #372]	; (8004018 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d90f      	bls.n	8003ec8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec4:	6093      	str	r3, [r2, #8]
 8003ec6:	e0a2      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eda:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	0159      	lsls	r1, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003eee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f02:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f16:	6819      	ldr	r1, [r3, #0]
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4403      	add	r3, r0
 8003f26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4419      	add	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4403      	add	r3, r0
 8003f3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f40:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d114      	bne.n	8003f72 <PCD_EP_OutXfrComplete_int+0x16a>
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	f002 f8f5 	bl	800615c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f003 fe3d 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
 8003f7e:	e046      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a26      	ldr	r2, [pc, #152]	; (800401c <PCD_EP_OutXfrComplete_int+0x214>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d124      	bne.n	8003fd2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa4:	6093      	str	r3, [r2, #8]
 8003fa6:	e032      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f003 fe14 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
 8003fd0:	e01d      	b.n	800400e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d114      	bne.n	8004002 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f002 f8ad 	bl	800615c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f003 fdf5 	bl	8007bf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	4f54300a 	.word	0x4f54300a
 800401c:	4f54310a 	.word	0x4f54310a

08004020 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	333c      	adds	r3, #60	; 0x3c
 8004038:	3304      	adds	r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d90e      	bls.n	8004074 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004072:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f003 fdad 	bl	8007bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d90c      	bls.n	800409c <PCD_EP_OutSetupPacket_int+0x7c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004094:	461a      	mov	r2, r3
 8004096:	2101      	movs	r1, #1
 8004098:	f002 f860 	bl	800615c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	4f54300a 	.word	0x4f54300a

080040ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
 80040b8:	4613      	mov	r3, r2
 80040ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040ca:	883b      	ldrh	r3, [r7, #0]
 80040cc:	0419      	lsls	r1, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
 80040d8:	e028      	b.n	800412c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e00d      	b.n	800410a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	3340      	adds	r3, #64	; 0x40
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	3301      	adds	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	3b01      	subs	r3, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	d3ec      	bcc.n	80040ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004114:	883b      	ldrh	r3, [r7, #0]
 8004116:	0418      	lsls	r0, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	3b01      	subs	r3, #1
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4302      	orrs	r2, r0
 8004124:	3340      	adds	r3, #64	; 0x40
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e267      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e242      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x74>
 80041da:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x98>
 80041f2:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6f      	ldr	r2, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6c      	ldr	r2, [pc, #432]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd fa30 	bl	8001690 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fa2c 	bl	8001690 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e207      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fa1c 	bl	8001690 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd fa18 	bl	8001690 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1f3      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d063      	beq.n	8004352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1c7      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4937      	ldr	r1, [pc, #220]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e03a      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_OscConfig+0x244>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd f9d1 	bl	8001690 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fd f9cd 	bl	8001690 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1a8      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4925      	ldr	r1, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x244>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd f9b0 	bl	8001690 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004334:	f7fd f9ac 	bl	8001690 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e187      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCC_OscConfig+0x248>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd f990 	bl	8001690 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004374:	f7fd f98c 	bl	8001690 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e167      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x200>
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_OscConfig+0x248>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fd f979 	bl	8001690 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	e00e      	b.n	80043c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fd f975 	bl	8001690 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d907      	bls.n	80043c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e150      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	42470000 	.word	0x42470000
 80043bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ea      	bne.n	80043a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8097 	beq.w	8004508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b81      	ldr	r3, [pc, #516]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b74      	ldr	r3, [pc, #464]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a73      	ldr	r2, [pc, #460]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fd f935 	bl	8001690 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fd f931 	bl	8001690 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e10c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x2ea>
 8004450:	4b64      	ldr	r3, [pc, #400]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a63      	ldr	r2, [pc, #396]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x30c>
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 8004480:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	4a54      	ldr	r2, [pc, #336]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd f8f6 	bl	8001690 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fd f8f2 	bl	8001690 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0cb      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	4b49      	ldr	r3, [pc, #292]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ee      	beq.n	80044a8 <HAL_RCC_OscConfig+0x334>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044cc:	f7fd f8e0 	bl	8001690 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd f8dc 	bl	8001690 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0b5      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4a38      	ldr	r2, [pc, #224]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a1 	beq.w	8004654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d05c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d141      	bne.n	80045aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd f8b0 	bl	8001690 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd f8ac 	bl	8001690 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e087      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	491b      	ldr	r1, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fd f885 	bl	8001690 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd f881 	bl	8001690 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e05c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x416>
 80045a8:	e054      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd f86e 	bl	8001690 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd f86a 	bl	8001690 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e045      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x444>
 80045d6:	e03d      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e038      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4ec>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d028      	beq.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d121      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d11a      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0cc      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b68      	ldr	r3, [pc, #416]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d90c      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0b8      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b8:	4b59      	ldr	r3, [pc, #356]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a58      	ldr	r2, [pc, #352]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a52      	ldr	r2, [pc, #328]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	494d      	ldr	r1, [pc, #308]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d044      	beq.n	8004784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d119      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e07f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d003      	beq.n	8004722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	2b03      	cmp	r3, #3
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004732:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e067      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4934      	ldr	r1, [pc, #208]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004754:	f7fc ff9c 	bl	8001690 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fc ff98 	bl	8001690 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 020c 	and.w	r2, r3, #12
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d1eb      	bne.n	800475c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20c      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e032      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4916      	ldr	r1, [pc, #88]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490e      	ldr	r1, [pc, #56]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ea:	f000 f821 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490a      	ldr	r1, [pc, #40]	; (8004824 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fefc 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023c00 	.word	0x40023c00
 8004820:	40023800 	.word	0x40023800
 8004824:	08009fe0 	.word	0x08009fe0
 8004828:	20000050 	.word	0x20000050
 800482c:	20000054 	.word	0x20000054

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b094      	sub	sp, #80	; 0x50
 8004836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	647b      	str	r3, [r7, #68]	; 0x44
 800483c:	2300      	movs	r3, #0
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	2300      	movs	r3, #0
 8004842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004848:	4b79      	ldr	r3, [pc, #484]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d00d      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x40>
 8004854:	2b08      	cmp	r3, #8
 8004856:	f200 80e1 	bhi.w	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x3a>
 8004862:	e0db      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004868:	e0db      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486a:	4b72      	ldr	r3, [pc, #456]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800486e:	e0d8      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004870:	4b6f      	ldr	r3, [pc, #444]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487a:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d063      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b6a      	ldr	r3, [pc, #424]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	6139      	str	r1, [r7, #16]
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4651      	mov	r1, sl
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4651      	mov	r1, sl
 80048e4:	ebb2 0801 	subs.w	r8, r2, r1
 80048e8:	4659      	mov	r1, fp
 80048ea:	eb63 0901 	sbc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	462b      	mov	r3, r5
 8004910:	eb49 0303 	adc.w	r3, r9, r3
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004922:	4629      	mov	r1, r5
 8004924:	028b      	lsls	r3, r1, #10
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800492c:	4621      	mov	r1, r4
 800492e:	028a      	lsls	r2, r1, #10
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
 800493a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800493c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004940:	f7fb fc96 	bl	8000270 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	e058      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	2200      	movs	r2, #0
 8004956:	4618      	mov	r0, r3
 8004958:	4611      	mov	r1, r2
 800495a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	0159      	lsls	r1, r3, #5
 8004976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800497a:	0150      	lsls	r0, r2, #5
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4641      	mov	r1, r8
 8004982:	ebb2 0a01 	subs.w	sl, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb63 0b01 	sbc.w	fp, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800499c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049a0:	ebb2 040a 	subs.w	r4, r2, sl
 80049a4:	eb63 050b 	sbc.w	r5, r3, fp
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	00eb      	lsls	r3, r5, #3
 80049b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	4614      	mov	r4, r2
 80049ba:	461d      	mov	r5, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	18e3      	adds	r3, r4, r3
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb45 0303 	adc.w	r3, r5, r3
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d6:	4629      	mov	r1, r5
 80049d8:	028b      	lsls	r3, r1, #10
 80049da:	4621      	mov	r1, r4
 80049dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e0:	4621      	mov	r1, r4
 80049e2:	028a      	lsls	r2, r1, #10
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	61fa      	str	r2, [r7, #28]
 80049f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f4:	f7fb fc3c 	bl	8000270 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4613      	mov	r3, r2
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3750      	adds	r7, #80	; 0x50
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00f42400 	.word	0x00f42400

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000050 	.word	0x20000050

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	08009ff0 	.word	0x08009ff0

08004a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e07b      	b.n	8004b82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d009      	beq.n	8004ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
 8004aa2:	e005      	b.n	8004ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fc fc8c 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	ea42 0103 	orr.w	r1, r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0104 	and.w	r1, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0210 	and.w	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	f107 001c 	add.w	r0, r7, #28
 8004b98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d122      	bne.n	8004be8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 fb1b 	bl	8006218 <USB_CoreReset>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e01a      	b.n	8004c1e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fb0f 	bl	8006218 <USB_CoreReset>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c10:	e005      	b.n	8004c1e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10b      	bne.n	8004c3c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f043 0206 	orr.w	r2, r3, #6
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c48:	b004      	add	sp, #16
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d165      	bne.n	8004d2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4a41      	ldr	r2, [pc, #260]	; (8004d68 <USB_SetTurnaroundTime+0x11c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d906      	bls.n	8004c76 <USB_SetTurnaroundTime+0x2a>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <USB_SetTurnaroundTime+0x120>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d202      	bcs.n	8004c76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c70:	230f      	movs	r3, #15
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e062      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <USB_SetTurnaroundTime+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d306      	bcc.n	8004c8c <USB_SetTurnaroundTime+0x40>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a3b      	ldr	r2, [pc, #236]	; (8004d70 <USB_SetTurnaroundTime+0x124>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d202      	bcs.n	8004c8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c86:	230e      	movs	r3, #14
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e057      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4a38      	ldr	r2, [pc, #224]	; (8004d70 <USB_SetTurnaroundTime+0x124>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d306      	bcc.n	8004ca2 <USB_SetTurnaroundTime+0x56>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <USB_SetTurnaroundTime+0x128>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d202      	bcs.n	8004ca2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c9c:	230d      	movs	r3, #13
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e04c      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <USB_SetTurnaroundTime+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d306      	bcc.n	8004cb8 <USB_SetTurnaroundTime+0x6c>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <USB_SetTurnaroundTime+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d802      	bhi.n	8004cb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e041      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4a2f      	ldr	r2, [pc, #188]	; (8004d78 <USB_SetTurnaroundTime+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d906      	bls.n	8004cce <USB_SetTurnaroundTime+0x82>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a2e      	ldr	r2, [pc, #184]	; (8004d7c <USB_SetTurnaroundTime+0x130>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d802      	bhi.n	8004cce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004cc8:	230b      	movs	r3, #11
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e036      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <USB_SetTurnaroundTime+0x130>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d906      	bls.n	8004ce4 <USB_SetTurnaroundTime+0x98>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <USB_SetTurnaroundTime+0x134>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d802      	bhi.n	8004ce4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cde:	230a      	movs	r3, #10
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e02b      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <USB_SetTurnaroundTime+0x134>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d906      	bls.n	8004cfa <USB_SetTurnaroundTime+0xae>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <USB_SetTurnaroundTime+0x138>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d202      	bcs.n	8004cfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cf4:	2309      	movs	r3, #9
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e020      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <USB_SetTurnaroundTime+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d306      	bcc.n	8004d10 <USB_SetTurnaroundTime+0xc4>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <USB_SetTurnaroundTime+0x13c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d802      	bhi.n	8004d10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e015      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <USB_SetTurnaroundTime+0x13c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d906      	bls.n	8004d26 <USB_SetTurnaroundTime+0xda>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <USB_SetTurnaroundTime+0x140>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d202      	bcs.n	8004d26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d20:	2307      	movs	r3, #7
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e00a      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d26:	2306      	movs	r3, #6
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e007      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d32:	2309      	movs	r3, #9
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e001      	b.n	8004d3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d38:	2309      	movs	r3, #9
 8004d3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	00d8acbf 	.word	0x00d8acbf
 8004d6c:	00e4e1c0 	.word	0x00e4e1c0
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	01067380 	.word	0x01067380
 8004d78:	011a499f 	.word	0x011a499f
 8004d7c:	01312cff 	.word	0x01312cff
 8004d80:	014ca43f 	.word	0x014ca43f
 8004d84:	016e3600 	.word	0x016e3600
 8004d88:	01a6ab1f 	.word	0x01a6ab1f
 8004d8c:	01e84800 	.word	0x01e84800

08004d90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d115      	bne.n	8004e22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e02:	2001      	movs	r0, #1
 8004e04:	f7fc fc50 	bl	80016a8 <HAL_Delay>
      ms++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 f972 	bl	80060f8 <USB_GetMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d01e      	beq.n	8004e58 <USB_SetCurrentMode+0x84>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b31      	cmp	r3, #49	; 0x31
 8004e1e:	d9f0      	bls.n	8004e02 <USB_SetCurrentMode+0x2e>
 8004e20:	e01a      	b.n	8004e58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d115      	bne.n	8004e54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e34:	2001      	movs	r0, #1
 8004e36:	f7fc fc37 	bl	80016a8 <HAL_Delay>
      ms++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 f959 	bl	80060f8 <USB_GetMode>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <USB_SetCurrentMode+0x84>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b31      	cmp	r3, #49	; 0x31
 8004e50:	d9f0      	bls.n	8004e34 <USB_SetCurrentMode+0x60>
 8004e52:	e001      	b.n	8004e58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e005      	b.n	8004e64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b32      	cmp	r3, #50	; 0x32
 8004e5c:	d101      	bne.n	8004e62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e009      	b.n	8004ea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3340      	adds	r3, #64	; 0x40
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b0e      	cmp	r3, #14
 8004ea4:	d9f2      	bls.n	8004e8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11c      	bne.n	8004ee6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ee4:	e00b      	b.n	8004efe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f04:	461a      	mov	r2, r3
 8004f06:	2300      	movs	r3, #0
 8004f08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	4619      	mov	r1, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	461a      	mov	r2, r3
 8004f1a:	680b      	ldr	r3, [r1, #0]
 8004f1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10c      	bne.n	8004f3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f945 	bl	80051bc <USB_SetDevSpeed>
 8004f32:	e008      	b.n	8004f46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f34:	2101      	movs	r1, #1
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f940 	bl	80051bc <USB_SetDevSpeed>
 8004f3c:	e003      	b.n	8004f46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f3e:	2103      	movs	r1, #3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f93b 	bl	80051bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f46:	2110      	movs	r1, #16
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8f3 	bl	8005134 <USB_FlushTxFifo>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f90f 	bl	800517c <USB_FlushRxFifo>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e043      	b.n	800501a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa8:	d118      	bne.n	8004fdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e013      	b.n	8004fee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e008      	b.n	8004fee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3301      	adds	r3, #1
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3b7      	bcc.n	8004f92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e043      	b.n	80050b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800503a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503e:	d118      	bne.n	8005072 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	461a      	mov	r2, r3
 8005054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e013      	b.n	8005084 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e008      	b.n	8005084 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3b7      	bcc.n	8005028 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f043 0210 	orr.w	r2, r3, #16
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <USB_DevInit+0x2c4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f043 0208 	orr.w	r2, r3, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800512c:	b004      	add	sp, #16
 800512e:	4770      	bx	lr
 8005130:	803c3800 	.word	0x803c3800

08005134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <USB_FlushTxFifo+0x44>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e006      	b.n	800516c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d0f1      	beq.n	800514e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00030d40 	.word	0x00030d40

0800517c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2210      	movs	r2, #16
 800518c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <USB_FlushRxFifo+0x3c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e006      	b.n	80051ac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d0f1      	beq.n	800518e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	00030d40 	.word	0x00030d40

080051bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0306 	and.w	r3, r3, #6
 8005206:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]
 8005212:	e00a      	b.n	800522a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d002      	beq.n	8005220 <USB_GetDevSpeed+0x32>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d102      	bne.n	8005226 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005220:	2302      	movs	r3, #2
 8005222:	75fb      	strb	r3, [r7, #23]
 8005224:	e001      	b.n	800522a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005226:	230f      	movs	r3, #15
 8005228:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800522a:	7dfb      	ldrb	r3, [r7, #23]
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d13a      	bne.n	80052ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005272:	4313      	orrs	r3, r2
 8005274:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d155      	bne.n	8005338 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	78db      	ldrb	r3, [r3, #3]
 80052a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	059b      	lsls	r3, r3, #22
 80052ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052b0:	4313      	orrs	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e036      	b.n	8005338 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11a      	bne.n	8005338 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800531e:	430b      	orrs	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d161      	bne.n	8005428 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537a:	d11f      	bne.n	80053bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800539a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053dc:	4013      	ands	r3, r2
 80053de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	2101      	movs	r1, #1
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005400:	4013      	ands	r3, r2
 8005402:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0159      	lsls	r1, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	440b      	add	r3, r1
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	4619      	mov	r1, r3
 8005420:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <USB_DeactivateEndpoint+0x1b0>)
 8005422:	4013      	ands	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
 8005426:	e060      	b.n	80054ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d11f      	bne.n	8005480 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800545e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800547e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	43db      	mvns	r3, r3
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	43db      	mvns	r3, r3
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4013      	ands	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	440b      	add	r3, r1
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	4619      	mov	r1, r3
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <USB_DeactivateEndpoint+0x1b4>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	ec337800 	.word	0xec337800
 80054fc:	eff37800 	.word	0xeff37800

08005500 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 815c 	bne.w	80057da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d132      	bne.n	8005590 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800554c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800556c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	0cdb      	lsrs	r3, r3, #19
 800558a:	04db      	lsls	r3, r3, #19
 800558c:	6113      	str	r3, [r2, #16]
 800558e:	e074      	b.n	800567a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	0cdb      	lsrs	r3, r3, #19
 80055ac:	04db      	lsls	r3, r3, #19
 80055ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	440b      	add	r3, r1
 80055ec:	1e59      	subs	r1, r3, #1
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055f8:	4b9d      	ldr	r3, [pc, #628]	; (8005870 <USB_EPStartXfer+0x370>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	0148      	lsls	r0, r1, #5
 8005600:	69f9      	ldr	r1, [r7, #28]
 8005602:	4401      	add	r1, r0
 8005604:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005608:	4313      	orrs	r3, r2
 800560a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005622:	69b9      	ldr	r1, [r7, #24]
 8005624:	0148      	lsls	r0, r1, #5
 8005626:	69f9      	ldr	r1, [r7, #28]
 8005628:	4401      	add	r1, r0
 800562a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	78db      	ldrb	r3, [r3, #3]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d11f      	bne.n	800567a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005658:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005678:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d14b      	bne.n	8005718 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d128      	bne.n	80056f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d110      	bne.n	80056d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	e00f      	b.n	80056f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e12f      	b.n	8005978 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005736:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d015      	beq.n	800576c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8117 	beq.w	8005978 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	2101      	movs	r1, #1
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005766:	4313      	orrs	r3, r2
 8005768:	634b      	str	r3, [r1, #52]	; 0x34
 800576a:	e105      	b.n	8005978 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d110      	bne.n	800579e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	e00f      	b.n	80057be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	68d9      	ldr	r1, [r3, #12]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	b298      	uxth	r0, r3
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fa2b 	bl	8005c2e <USB_WritePacket>
 80057d8:	e0ce      	b.n	8005978 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f4:	0cdb      	lsrs	r3, r3, #19
 80057f6:	04db      	lsls	r3, r3, #19
 80057f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005818:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800581c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d126      	bne.n	8005874 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	0148      	lsls	r0, r1, #5
 8005840:	69f9      	ldr	r1, [r7, #28]
 8005842:	4401      	add	r1, r0
 8005844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005848:	4313      	orrs	r3, r2
 800584a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586a:	6113      	str	r3, [r2, #16]
 800586c:	e036      	b.n	80058dc <USB_EPStartXfer+0x3dc>
 800586e:	bf00      	nop
 8005870:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4413      	add	r3, r2
 800587e:	1e5a      	subs	r2, r3, #1
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	04d9      	lsls	r1, r3, #19
 800589c:	4b39      	ldr	r3, [pc, #228]	; (8005984 <USB_EPStartXfer+0x484>)
 800589e:	400b      	ands	r3, r1
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	0148      	lsls	r0, r1, #5
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	4401      	add	r1, r0
 80058a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058ac:	4313      	orrs	r3, r2
 80058ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	8af9      	ldrh	r1, [r7, #22]
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	0148      	lsls	r0, r1, #5
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	4401      	add	r1, r0
 80058d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058d8:	4313      	orrs	r3, r2
 80058da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d10d      	bne.n	80058fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	460a      	mov	r2, r1
 80058fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d128      	bne.n	8005958 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d110      	bne.n	8005938 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e00f      	b.n	8005958 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005956:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	1ff80000 	.word	0x1ff80000

08005988 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f040 80cd 	bne.w	8005b44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d132      	bne.n	8005a18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	04db      	lsls	r3, r3, #19
 8005a14:	6113      	str	r3, [r2, #16]
 8005a16:	e04e      	b.n	8005ab6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	0cdb      	lsrs	r3, r3, #19
 8005a34:	04db      	lsls	r3, r3, #19
 8005a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d903      	bls.n	8005a70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11e      	bne.n	8005afa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e092      	b.n	8005c20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d07e      	beq.n	8005c20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	634b      	str	r3, [r1, #52]	; 0x34
 8005b42:	e06d      	b.n	8005c20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5e:	0cdb      	lsrs	r3, r3, #19
 8005b60:	04db      	lsls	r3, r3, #19
 8005b62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	0148      	lsls	r0, r1, #5
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	4401      	add	r1, r0
 8005bd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10d      	bne.n	8005c00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	68d9      	ldr	r1, [r3, #12]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b089      	sub	sp, #36	; 0x24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	4611      	mov	r1, r2
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	71fb      	strb	r3, [r7, #7]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d123      	bne.n	8005c9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c54:	88bb      	ldrh	r3, [r7, #4]
 8005c56:	3303      	adds	r3, #3
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e018      	b.n	8005c94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	031a      	lsls	r2, r3, #12
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6e:	461a      	mov	r2, r3
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3301      	adds	r3, #1
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d3e2      	bcc.n	8005c62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3724      	adds	r7, #36	; 0x24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b08b      	sub	sp, #44	; 0x2c
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	623b      	str	r3, [r7, #32]
 8005cd4:	e014      	b.n	8005d00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	3301      	adds	r3, #1
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	623b      	str	r3, [r7, #32]
 8005d00:	6a3a      	ldr	r2, [r7, #32]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3e6      	bcc.n	8005cd6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d08:	8bfb      	ldrh	r3, [r7, #30]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01e      	beq.n	8005d4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f107 0310 	add.w	r3, r7, #16
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	701a      	strb	r2, [r3, #0]
      i++;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	3301      	adds	r3, #1
 8005d38:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d40:	8bfb      	ldrh	r3, [r7, #30]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d46:	8bfb      	ldrh	r3, [r7, #30]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ea      	bne.n	8005d22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	372c      	adds	r7, #44	; 0x2c
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d12c      	bne.n	8005dd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	db12      	blt.n	8005dae <USB_EPSetStall+0x54>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00f      	beq.n	8005dae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e02b      	b.n	8005e28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db12      	blt.n	8005e08 <USB_EPSetStall+0xae>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d128      	bne.n	8005ea4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d003      	beq.n	8005e82 <USB_EPClearStall+0x4c>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	78db      	ldrb	r3, [r3, #3]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d138      	bne.n	8005ef4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e027      	b.n	8005ef4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d003      	beq.n	8005ed4 <USB_EPClearStall+0x9e>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	78db      	ldrb	r3, [r3, #3]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d10f      	bne.n	8005ef4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f68:	f023 0303 	bic.w	r3, r3, #3
 8005f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7c:	f023 0302 	bic.w	r3, r3, #2
 8005f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	0c1b      	lsrs	r3, r3, #16
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	b29b      	uxth	r3, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800608e:	68bb      	ldr	r3, [r7, #8]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
 80060cc:	01db      	lsls	r3, r3, #7
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4013      	ands	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060ea:	68bb      	ldr	r3, [r7, #8]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0301 	and.w	r3, r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	460b      	mov	r3, r1
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	333c      	adds	r3, #60	; 0x3c
 8006172:	3304      	adds	r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <USB_EP0_OutStart+0xb8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d90a      	bls.n	8006196 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006190:	d101      	bne.n	8006196 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e037      	b.n	8006206 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 0318 	orr.w	r3, r3, #24
 80061c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10f      	bne.n	8006204 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	4f54300a 	.word	0x4f54300a

08006218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	4a13      	ldr	r2, [pc, #76]	; (8006278 <USB_CoreReset+0x60>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d901      	bls.n	8006234 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e01a      	b.n	800626a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	daf3      	bge.n	8006224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	4a09      	ldr	r2, [pc, #36]	; (8006278 <USB_CoreReset+0x60>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e006      	b.n	800626a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d0f1      	beq.n	800624c <USB_CoreReset+0x34>

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	00030d40 	.word	0x00030d40

0800627c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006288:	2010      	movs	r0, #16
 800628a:	f001 ff0d 	bl	80080a8 <USBD_static_malloc>
 800628e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800629e:	2302      	movs	r3, #2
 80062a0:	e01b      	b.n	80062da <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7c1b      	ldrb	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2207      	movs	r2, #7
 80062b6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80062b8:	e002      	b.n	80062c0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	220a      	movs	r2, #10
 80062be:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80062c0:	2304      	movs	r3, #4
 80062c2:	2203      	movs	r2, #3
 80062c4:	2181      	movs	r1, #129	; 0x81
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fddd 	bl	8007e86 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80062ee:	2181      	movs	r1, #129	; 0x81
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fdee 	bl	8007ed2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fed6 	bl	80080c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e0e8      	b.n	8006522 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006358:	2b00      	cmp	r3, #0
 800635a:	d046      	beq.n	80063ea <USBD_HID_Setup+0xbe>
 800635c:	2b20      	cmp	r3, #32
 800635e:	f040 80d8 	bne.w	8006512 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	3b02      	subs	r3, #2
 8006368:	2b09      	cmp	r3, #9
 800636a:	d836      	bhi.n	80063da <USBD_HID_Setup+0xae>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USBD_HID_Setup+0x48>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063cb 	.word	0x080063cb
 8006378:	080063ab 	.word	0x080063ab
 800637c:	080063db 	.word	0x080063db
 8006380:	080063db 	.word	0x080063db
 8006384:	080063db 	.word	0x080063db
 8006388:	080063db 	.word	0x080063db
 800638c:	080063db 	.word	0x080063db
 8006390:	080063db 	.word	0x080063db
 8006394:	080063b9 	.word	0x080063b9
 8006398:	0800639d 	.word	0x0800639d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	601a      	str	r2, [r3, #0]
          break;
 80063a8:	e01e      	b.n	80063e8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fa22 	bl	80077fa <USBD_CtlSendData>
          break;
 80063b6:	e017      	b.n	80063e8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	885b      	ldrh	r3, [r3, #2]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	605a      	str	r2, [r3, #4]
          break;
 80063c8:	e00e      	b.n	80063e8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3304      	adds	r3, #4
 80063ce:	2201      	movs	r2, #1
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fa11 	bl	80077fa <USBD_CtlSendData>
          break;
 80063d8:	e006      	b.n	80063e8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f99b 	bl	8007718 <USBD_CtlError>
          ret = USBD_FAIL;
 80063e2:	2303      	movs	r3, #3
 80063e4:	75fb      	strb	r3, [r7, #23]
          break;
 80063e6:	bf00      	nop
      }
      break;
 80063e8:	e09a      	b.n	8006520 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b0b      	cmp	r3, #11
 80063f0:	f200 8086 	bhi.w	8006500 <USBD_HID_Setup+0x1d4>
 80063f4:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <USBD_HID_Setup+0xd0>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800650f 	.word	0x0800650f
 8006404:	08006501 	.word	0x08006501
 8006408:	08006501 	.word	0x08006501
 800640c:	08006501 	.word	0x08006501
 8006410:	08006501 	.word	0x08006501
 8006414:	08006457 	.word	0x08006457
 8006418:	08006501 	.word	0x08006501
 800641c:	08006501 	.word	0x08006501
 8006420:	08006501 	.word	0x08006501
 8006424:	080064af 	.word	0x080064af
 8006428:	080064d9 	.word	0x080064d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b03      	cmp	r3, #3
 8006436:	d107      	bne.n	8006448 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006438:	f107 030a 	add.w	r3, r7, #10
 800643c:	2202      	movs	r2, #2
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f9da 	bl	80077fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006446:	e063      	b.n	8006510 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f964 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	75fb      	strb	r3, [r7, #23]
          break;
 8006454:	e05c      	b.n	8006510 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b22      	cmp	r3, #34	; 0x22
 8006460:	d108      	bne.n	8006474 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	2b3f      	cmp	r3, #63	; 0x3f
 8006468:	bf28      	it	cs
 800646a:	233f      	movcs	r3, #63	; 0x3f
 800646c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800646e:	4b2f      	ldr	r3, [pc, #188]	; (800652c <USBD_HID_Setup+0x200>)
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e015      	b.n	80064a0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	885b      	ldrh	r3, [r3, #2]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b21      	cmp	r3, #33	; 0x21
 800647e:	d108      	bne.n	8006492 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006480:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <USBD_HID_Setup+0x204>)
 8006482:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	88db      	ldrh	r3, [r3, #6]
 8006488:	2b09      	cmp	r3, #9
 800648a:	bf28      	it	cs
 800648c:	2309      	movcs	r3, #9
 800648e:	82bb      	strh	r3, [r7, #20]
 8006490:	e006      	b.n	80064a0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f93f 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 800649a:	2303      	movs	r3, #3
 800649c:	75fb      	strb	r3, [r7, #23]
            break;
 800649e:	e037      	b.n	8006510 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80064a0:	8abb      	ldrh	r3, [r7, #20]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6939      	ldr	r1, [r7, #16]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f9a7 	bl	80077fa <USBD_CtlSendData>
          break;
 80064ac:	e030      	b.n	8006510 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d107      	bne.n	80064ca <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3308      	adds	r3, #8
 80064be:	2201      	movs	r2, #1
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f999 	bl	80077fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064c8:	e022      	b.n	8006510 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f923 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 80064d2:	2303      	movs	r3, #3
 80064d4:	75fb      	strb	r3, [r7, #23]
          break;
 80064d6:	e01b      	b.n	8006510 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d106      	bne.n	80064f2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	885b      	ldrh	r3, [r3, #2]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064f0:	e00e      	b.n	8006510 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 f90f 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 80064fa:	2303      	movs	r3, #3
 80064fc:	75fb      	strb	r3, [r7, #23]
          break;
 80064fe:	e007      	b.n	8006510 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f908 	bl	8007718 <USBD_CtlError>
          ret = USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	75fb      	strb	r3, [r7, #23]
          break;
 800650c:	e000      	b.n	8006510 <USBD_HID_Setup+0x1e4>
          break;
 800650e:	bf00      	nop
      }
      break;
 8006510:	e006      	b.n	8006520 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f8ff 	bl	8007718 <USBD_CtlError>
      ret = USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000118 	.word	0x20000118
 8006530:	20000100 	.word	0x20000100

08006534 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006548:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e013      	b.n	800657c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d10c      	bne.n	800657a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	7b1b      	ldrb	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2201      	movs	r2, #1
 800656c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	2181      	movs	r1, #129	; 0x81
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fd54 	bl	8008022 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2222      	movs	r2, #34	; 0x22
 8006590:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006592:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20000094 	.word	0x20000094

080065a4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2222      	movs	r2, #34	; 0x22
 80065b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80065b2:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	200000b8 	.word	0x200000b8

080065c4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2222      	movs	r2, #34	; 0x22
 80065d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80065d2:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	200000dc 	.word	0x200000dc

080065e4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f6:	2200      	movs	r2, #0
 80065f8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	220a      	movs	r2, #10
 8006614:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	2000010c 	.word	0x2000010c

08006628 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	e01f      	b.n	8006680 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	79fa      	ldrb	r2, [r7, #7]
 8006672:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f001 fb9f 	bl	8007db8 <USBD_LL_Init>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	e016      	b.n	80066ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f107 020e 	add.w	r2, r7, #14
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fbb6 	bl	8007e50 <USBD_LL_Start>
 80066e4:	4603      	mov	r3, r0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006710:	2303      	movs	r3, #3
 8006712:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4611      	mov	r1, r2
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	4611      	mov	r1, r2
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
  }

  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 ff90 	bl	80076a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d01a      	beq.n	80067de <USBD_LL_SetupStage+0x72>
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d822      	bhi.n	80067f2 <USBD_LL_SetupStage+0x86>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <USBD_LL_SetupStage+0x4a>
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d00a      	beq.n	80067ca <USBD_LL_SetupStage+0x5e>
 80067b4:	e01d      	b.n	80067f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa62 	bl	8006c88 <USBD_StdDevReq>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
      break;
 80067c8:	e020      	b.n	800680c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fac6 	bl	8006d64 <USBD_StdItfReq>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e016      	b.n	800680c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb05 	bl	8006df6 <USBD_StdEPReq>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e00c      	b.n	800680c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fb85 	bl	8007f10 <USBD_LL_StallEP>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	bf00      	nop
  }

  return ret;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b086      	sub	sp, #24
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	460b      	mov	r3, r1
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d138      	bne.n	800689c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006830:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006838:	2b03      	cmp	r3, #3
 800683a:	d14a      	bne.n	80068d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d913      	bls.n	8006870 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	1ad2      	subs	r2, r2, r3
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	4293      	cmp	r3, r2
 8006860:	bf28      	it	cs
 8006862:	4613      	movcs	r3, r2
 8006864:	461a      	mov	r2, r3
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fff2 	bl	8007852 <USBD_CtlContinueRx>
 800686e:	e030      	b.n	80068d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b03      	cmp	r3, #3
 800687a:	d10b      	bne.n	8006894 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 ffed 	bl	8007874 <USBD_CtlSendStatus>
 800689a:	e01a      	b.n	80068d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d114      	bne.n	80068d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	7afa      	ldrb	r2, [r7, #11]
 80068be:	4611      	mov	r1, r2
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	4798      	blx	r3
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	e000      	b.n	80068d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	460b      	mov	r3, r1
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d16b      	bne.n	80069c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3314      	adds	r3, #20
 80068f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d156      	bne.n	80069ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	429a      	cmp	r2, r3
 800690a:	d914      	bls.n	8006936 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	461a      	mov	r2, r3
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 ff84 	bl	8007830 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006928:	2300      	movs	r3, #0
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fb98 	bl	8008064 <USBD_LL_PrepareReceive>
 8006934:	e03b      	b.n	80069ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	d11c      	bne.n	800697c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800694a:	429a      	cmp	r2, r3
 800694c:	d316      	bcc.n	800697c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006958:	429a      	cmp	r2, r3
 800695a:	d20f      	bcs.n	800697c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 ff65 	bl	8007830 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 fb75 	bl	8008064 <USBD_LL_PrepareReceive>
 800697a:	e018      	b.n	80069ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b03      	cmp	r3, #3
 8006986:	d10b      	bne.n	80069a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069a0:	2180      	movs	r1, #128	; 0x80
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fab4 	bl	8007f10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 ff76 	bl	800789a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d122      	bne.n	80069fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7ff fe98 	bl	80066ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069c6:	e01a      	b.n	80069fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d114      	bne.n	80069fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	4611      	mov	r1, r2
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	4798      	blx	r3
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	e000      	b.n	8006a00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e02f      	b.n	8006a9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00f      	beq.n	8006a66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6852      	ldr	r2, [r2, #4]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	4611      	mov	r1, r2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fa0a 	bl	8007e86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2240      	movs	r2, #64	; 0x40
 8006a7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	2200      	movs	r2, #0
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 f9fc 	bl	8007e86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2204      	movs	r2, #4
 8006ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d106      	bne.n	8006b12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e012      	b.n	8006b5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d10b      	bne.n	8006b5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e014      	b.n	8006ba8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d10d      	bne.n	8006ba6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e014      	b.n	8006bf4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d10d      	bne.n	8006bf2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	4611      	mov	r1, r2
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6852      	ldr	r2, [r2, #4]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
  }

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c68:	8a3b      	ldrh	r3, [r7, #16]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	b21a      	sxth	r2, r3
 8006c6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b21b      	sxth	r3, r3
 8006c76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c78:	89fb      	ldrh	r3, [r7, #14]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d005      	beq.n	8006cae <USBD_StdDevReq+0x26>
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d853      	bhi.n	8006d4e <USBD_StdDevReq+0xc6>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <USBD_StdDevReq+0x3a>
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d14f      	bne.n	8006d4e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc0:	e04a      	b.n	8006d58 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d83b      	bhi.n	8006d42 <USBD_StdDevReq+0xba>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <USBD_StdDevReq+0x48>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006d43 	.word	0x08006d43
 8006cdc:	08006d2f 	.word	0x08006d2f
 8006ce0:	08006d43 	.word	0x08006d43
 8006ce4:	08006d03 	.word	0x08006d03
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d43 	.word	0x08006d43
 8006cf0:	08006d1b 	.word	0x08006d1b
 8006cf4:	08006d0d 	.word	0x08006d0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9de 	bl	80070bc <USBD_GetDescriptor>
          break;
 8006d00:	e024      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb43 	bl	8007390 <USBD_SetAddress>
          break;
 8006d0a:	e01f      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb82 	bl	8007418 <USBD_SetConfig>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
          break;
 8006d18:	e018      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc21 	bl	8007564 <USBD_GetConfig>
          break;
 8006d22:	e013      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fc52 	bl	80075d0 <USBD_GetStatus>
          break;
 8006d2c:	e00e      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fc81 	bl	8007638 <USBD_SetFeature>
          break;
 8006d36:	e009      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc90 	bl	8007660 <USBD_ClrFeature>
          break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fce7 	bl	8007718 <USBD_CtlError>
          break;
 8006d4a:	bf00      	nop
      }
      break;
 8006d4c:	e004      	b.n	8006d58 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fce1 	bl	8007718 <USBD_CtlError>
      break;
 8006d56:	bf00      	nop
  }

  return ret;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop

08006d64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d005      	beq.n	8006d8a <USBD_StdItfReq+0x26>
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d82f      	bhi.n	8006de2 <USBD_StdItfReq+0x7e>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USBD_StdItfReq+0x26>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d12b      	bne.n	8006de2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d81d      	bhi.n	8006dd4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	889b      	ldrh	r3, [r3, #4]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d813      	bhi.n	8006dca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d110      	bne.n	8006dde <USBD_StdItfReq+0x7a>
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd56 	bl	8007874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dc8:	e009      	b.n	8006dde <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fca3 	bl	8007718 <USBD_CtlError>
          break;
 8006dd2:	e004      	b.n	8006dde <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fc9e 	bl	8007718 <USBD_CtlError>
          break;
 8006ddc:	e000      	b.n	8006de0 <USBD_StdItfReq+0x7c>
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e004      	b.n	8006dec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc97 	bl	8007718 <USBD_CtlError>
      break;
 8006dea:	bf00      	nop
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	889b      	ldrh	r3, [r3, #4]
 8006e08:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d007      	beq.n	8006e26 <USBD_StdEPReq+0x30>
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	f200 8145 	bhi.w	80070a6 <USBD_StdEPReq+0x2b0>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00c      	beq.n	8006e3a <USBD_StdEPReq+0x44>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	f040 8140 	bne.w	80070a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	e13a      	b.n	80070b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d007      	beq.n	8006e52 <USBD_StdEPReq+0x5c>
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f300 8129 	bgt.w	800709a <USBD_StdEPReq+0x2a4>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d07f      	beq.n	8006f4c <USBD_StdEPReq+0x156>
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d03c      	beq.n	8006eca <USBD_StdEPReq+0xd4>
 8006e50:	e123      	b.n	800709a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d002      	beq.n	8006e64 <USBD_StdEPReq+0x6e>
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d016      	beq.n	8006e90 <USBD_StdEPReq+0x9a>
 8006e62:	e02c      	b.n	8006ebe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <USBD_StdEPReq+0x90>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d00a      	beq.n	8006e86 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f84b 	bl	8007f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f847 	bl	8007f10 <USBD_LL_StallEP>
 8006e82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e84:	e020      	b.n	8006ec8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc45 	bl	8007718 <USBD_CtlError>
              break;
 8006e8e:	e01b      	b.n	8006ec8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10e      	bne.n	8006eb6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <USBD_StdEPReq+0xc0>
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b80      	cmp	r3, #128	; 0x80
 8006ea2:	d008      	beq.n	8006eb6 <USBD_StdEPReq+0xc0>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	88db      	ldrh	r3, [r3, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f82d 	bl	8007f10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fcdc 	bl	8007874 <USBD_CtlSendStatus>

              break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc29 	bl	8007718 <USBD_CtlError>
              break;
 8006ec6:	bf00      	nop
          }
          break;
 8006ec8:	e0ec      	b.n	80070a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d002      	beq.n	8006edc <USBD_StdEPReq+0xe6>
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d016      	beq.n	8006f08 <USBD_StdEPReq+0x112>
 8006eda:	e030      	b.n	8006f3e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <USBD_StdEPReq+0x108>
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b80      	cmp	r3, #128	; 0x80
 8006ee6:	d00a      	beq.n	8006efe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 f80f 	bl	8007f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f80b 	bl	8007f10 <USBD_LL_StallEP>
 8006efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006efc:	e025      	b.n	8006f4a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc09 	bl	8007718 <USBD_CtlError>
              break;
 8006f06:	e020      	b.n	8006f4a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11b      	bne.n	8006f48 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f815 	bl	8007f4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fca5 	bl	8007874 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006f3c:	e004      	b.n	8006f48 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fbe9 	bl	8007718 <USBD_CtlError>
              break;
 8006f46:	e000      	b.n	8006f4a <USBD_StdEPReq+0x154>
              break;
 8006f48:	bf00      	nop
          }
          break;
 8006f4a:	e0ab      	b.n	80070a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d002      	beq.n	8006f5e <USBD_StdEPReq+0x168>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d032      	beq.n	8006fc2 <USBD_StdEPReq+0x1cc>
 8006f5c:	e097      	b.n	800708e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <USBD_StdEPReq+0x17e>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d004      	beq.n	8006f74 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fbd3 	bl	8007718 <USBD_CtlError>
                break;
 8006f72:	e091      	b.n	8007098 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da0b      	bge.n	8006f94 <USBD_StdEPReq+0x19e>
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	3310      	adds	r3, #16
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	e00b      	b.n	8006fac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3304      	adds	r3, #4
 8006fac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fc1d 	bl	80077fa <USBD_CtlSendData>
              break;
 8006fc0:	e06a      	b.n	8007098 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	da11      	bge.n	8006fee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	3324      	adds	r3, #36	; 0x24
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d117      	bne.n	8007014 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb96 	bl	8007718 <USBD_CtlError>
                  break;
 8006fec:	e054      	b.n	8007098 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	f003 020f 	and.w	r2, r3, #15
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d104      	bne.n	8007014 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb83 	bl	8007718 <USBD_CtlError>
                  break;
 8007012:	e041      	b.n	8007098 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	da0b      	bge.n	8007034 <USBD_StdEPReq+0x23e>
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	3310      	adds	r3, #16
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	3304      	adds	r3, #4
 8007032:	e00b      	b.n	800704c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	3304      	adds	r3, #4
 800704c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <USBD_StdEPReq+0x264>
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	2b80      	cmp	r3, #128	; 0x80
 8007058:	d103      	bne.n	8007062 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e00e      	b.n	8007080 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 ff90 	bl	8007f8c <USBD_LL_IsStallEP>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e002      	b.n	8007080 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2202      	movs	r2, #2
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fbb7 	bl	80077fa <USBD_CtlSendData>
              break;
 800708c:	e004      	b.n	8007098 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb41 	bl	8007718 <USBD_CtlError>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e004      	b.n	80070a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb3b 	bl	8007718 <USBD_CtlError>
          break;
 80070a2:	bf00      	nop
      }
      break;
 80070a4:	e004      	b.n	80070b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fb35 	bl	8007718 <USBD_CtlError>
      break;
 80070ae:	bf00      	nop
  }

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	2b06      	cmp	r3, #6
 80070de:	f200 8128 	bhi.w	8007332 <USBD_GetDescriptor+0x276>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USBD_GetDescriptor+0x2c>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	0800715d 	.word	0x0800715d
 80070f4:	08007333 	.word	0x08007333
 80070f8:	08007333 	.word	0x08007333
 80070fc:	080072d3 	.word	0x080072d3
 8007100:	080072ff 	.word	0x080072ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
      break;
 800711a:	e112      	b.n	8007342 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7c1b      	ldrb	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	f107 0208 	add.w	r2, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	2202      	movs	r2, #2
 800713c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800713e:	e100      	b.n	8007342 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	f107 0208 	add.w	r2, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	2202      	movs	r2, #2
 8007158:	701a      	strb	r2, [r3, #0]
      break;
 800715a:	e0f2      	b.n	8007342 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	885b      	ldrh	r3, [r3, #2]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b05      	cmp	r3, #5
 8007164:	f200 80ac 	bhi.w	80072c0 <USBD_GetDescriptor+0x204>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <USBD_GetDescriptor+0xb4>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	08007189 	.word	0x08007189
 8007174:	080071bd 	.word	0x080071bd
 8007178:	080071f1 	.word	0x080071f1
 800717c:	08007225 	.word	0x08007225
 8007180:	08007259 	.word	0x08007259
 8007184:	0800728d 	.word	0x0800728d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071aa:	e091      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fab2 	bl	8007718 <USBD_CtlError>
            err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ba:	e089      	b.n	80072d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7c12      	ldrb	r2, [r2, #16]
 80071d4:	f107 0108 	add.w	r1, r7, #8
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071de:	e077      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa98 	bl	8007718 <USBD_CtlError>
            err++;
 80071e8:	7afb      	ldrb	r3, [r7, #11]
 80071ea:	3301      	adds	r3, #1
 80071ec:	72fb      	strb	r3, [r7, #11]
          break;
 80071ee:	e06f      	b.n	80072d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007212:	e05d      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa7e 	bl	8007718 <USBD_CtlError>
            err++;
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	3301      	adds	r3, #1
 8007220:	72fb      	strb	r3, [r7, #11]
          break;
 8007222:	e055      	b.n	80072d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7c12      	ldrb	r2, [r2, #16]
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007246:	e043      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa64 	bl	8007718 <USBD_CtlError>
            err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
          break;
 8007256:	e03b      	b.n	80072d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	7c12      	ldrb	r2, [r2, #16]
 8007270:	f107 0108 	add.w	r1, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800727a:	e029      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa4a 	bl	8007718 <USBD_CtlError>
            err++;
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	3301      	adds	r3, #1
 8007288:	72fb      	strb	r3, [r7, #11]
          break;
 800728a:	e021      	b.n	80072d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ae:	e00f      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa30 	bl	8007718 <USBD_CtlError>
            err++;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	3301      	adds	r3, #1
 80072bc:	72fb      	strb	r3, [r7, #11]
          break;
 80072be:	e007      	b.n	80072d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa28 	bl	8007718 <USBD_CtlError>
          err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e037      	b.n	8007342 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7c1b      	ldrb	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	f107 0208 	add.w	r2, r7, #8
 80072e6:	4610      	mov	r0, r2
 80072e8:	4798      	blx	r3
 80072ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072ec:	e029      	b.n	8007342 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fa11 	bl	8007718 <USBD_CtlError>
        err++;
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	3301      	adds	r3, #1
 80072fa:	72fb      	strb	r3, [r7, #11]
      break;
 80072fc:	e021      	b.n	8007342 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7c1b      	ldrb	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10d      	bne.n	8007322 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f107 0208 	add.w	r2, r7, #8
 8007312:	4610      	mov	r0, r2
 8007314:	4798      	blx	r3
 8007316:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	2207      	movs	r2, #7
 800731e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007320:	e00f      	b.n	8007342 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9f7 	bl	8007718 <USBD_CtlError>
        err++;
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	3301      	adds	r3, #1
 800732e:	72fb      	strb	r3, [r7, #11]
      break;
 8007330:	e007      	b.n	8007342 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9ef 	bl	8007718 <USBD_CtlError>
      err++;
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	3301      	adds	r3, #1
 800733e:	72fb      	strb	r3, [r7, #11]
      break;
 8007340:	bf00      	nop
  }

  if (err != 0U)
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11e      	bne.n	8007386 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d016      	beq.n	800737e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007350:	893b      	ldrh	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	88da      	ldrh	r2, [r3, #6]
 800735a:	893b      	ldrh	r3, [r7, #8]
 800735c:	4293      	cmp	r3, r2
 800735e:	bf28      	it	cs
 8007360:	4613      	movcs	r3, r2
 8007362:	b29b      	uxth	r3, r3
 8007364:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007366:	893b      	ldrh	r3, [r7, #8]
 8007368:	461a      	mov	r2, r3
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa44 	bl	80077fa <USBD_CtlSendData>
 8007372:	e009      	b.n	8007388 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9ce 	bl	8007718 <USBD_CtlError>
 800737c:	e004      	b.n	8007388 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa78 	bl	8007874 <USBD_CtlSendStatus>
 8007384:	e000      	b.n	8007388 <USBD_GetDescriptor+0x2cc>
    return;
 8007386:	bf00      	nop
  }
}
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop

08007390 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	889b      	ldrh	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d131      	bne.n	8007406 <USBD_SetAddress+0x76>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d12d      	bne.n	8007406 <USBD_SetAddress+0x76>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	885b      	ldrh	r3, [r3, #2]
 80073ae:	2b7f      	cmp	r3, #127	; 0x7f
 80073b0:	d829      	bhi.n	8007406 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	885b      	ldrh	r3, [r3, #2]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d104      	bne.n	80073d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f9a3 	bl	8007718 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d2:	e01d      	b.n	8007410 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fdff 	bl	8007fe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa44 	bl	8007874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	e009      	b.n	8007410 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007404:	e004      	b.n	8007410 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f985 	bl	8007718 <USBD_CtlError>
  }
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	4b4c      	ldr	r3, [pc, #304]	; (8007560 <USBD_SetConfig+0x148>)
 800742e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007430:	4b4b      	ldr	r3, [pc, #300]	; (8007560 <USBD_SetConfig+0x148>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d905      	bls.n	8007444 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f96c 	bl	8007718 <USBD_CtlError>
    return USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	e088      	b.n	8007556 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d002      	beq.n	8007456 <USBD_SetConfig+0x3e>
 8007450:	2b03      	cmp	r3, #3
 8007452:	d025      	beq.n	80074a0 <USBD_SetConfig+0x88>
 8007454:	e071      	b.n	800753a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007456:	4b42      	ldr	r3, [pc, #264]	; (8007560 <USBD_SetConfig+0x148>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01c      	beq.n	8007498 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800745e:	4b40      	ldr	r3, [pc, #256]	; (8007560 <USBD_SetConfig+0x148>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007468:	4b3d      	ldr	r3, [pc, #244]	; (8007560 <USBD_SetConfig+0x148>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff f948 	bl	8006704 <USBD_SetClassConfig>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f949 	bl	8007718 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007486:	e065      	b.n	8007554 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9f3 	bl	8007874 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2203      	movs	r2, #3
 8007492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007496:	e05d      	b.n	8007554 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9eb 	bl	8007874 <USBD_CtlSendStatus>
      break;
 800749e:	e059      	b.n	8007554 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074a0:	4b2f      	ldr	r3, [pc, #188]	; (8007560 <USBD_SetConfig+0x148>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d112      	bne.n	80074ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074b0:	4b2b      	ldr	r3, [pc, #172]	; (8007560 <USBD_SetConfig+0x148>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074ba:	4b29      	ldr	r3, [pc, #164]	; (8007560 <USBD_SetConfig+0x148>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff f93b 	bl	800673c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9d4 	bl	8007874 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074cc:	e042      	b.n	8007554 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80074ce:	4b24      	ldr	r3, [pc, #144]	; (8007560 <USBD_SetConfig+0x148>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d02a      	beq.n	8007532 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff f929 	bl	800673c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074ea:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <USBD_SetConfig+0x148>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074f4:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <USBD_SetConfig+0x148>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff f902 	bl	8006704 <USBD_SetClassConfig>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00f      	beq.n	800752a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f903 	bl	8007718 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f90e 	bl	800673c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007528:	e014      	b.n	8007554 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9a2 	bl	8007874 <USBD_CtlSendStatus>
      break;
 8007530:	e010      	b.n	8007554 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f99e 	bl	8007874 <USBD_CtlSendStatus>
      break;
 8007538:	e00c      	b.n	8007554 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f8eb 	bl	8007718 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <USBD_SetConfig+0x148>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff f8f7 	bl	800673c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
      break;
 8007552:	bf00      	nop
  }

  return ret;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200007a4 	.word	0x200007a4

08007564 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	88db      	ldrh	r3, [r3, #6]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d004      	beq.n	8007580 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f8cd 	bl	8007718 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800757e:	e023      	b.n	80075c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	dc02      	bgt.n	8007592 <USBD_GetConfig+0x2e>
 800758c:	2b00      	cmp	r3, #0
 800758e:	dc03      	bgt.n	8007598 <USBD_GetConfig+0x34>
 8007590:	e015      	b.n	80075be <USBD_GetConfig+0x5a>
 8007592:	2b03      	cmp	r3, #3
 8007594:	d00b      	beq.n	80075ae <USBD_GetConfig+0x4a>
 8007596:	e012      	b.n	80075be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3308      	adds	r3, #8
 80075a2:	2201      	movs	r2, #1
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f927 	bl	80077fa <USBD_CtlSendData>
        break;
 80075ac:	e00c      	b.n	80075c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	2201      	movs	r2, #1
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f91f 	bl	80077fa <USBD_CtlSendData>
        break;
 80075bc:	e004      	b.n	80075c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8a9 	bl	8007718 <USBD_CtlError>
        break;
 80075c6:	bf00      	nop
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d81e      	bhi.n	8007626 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	88db      	ldrh	r3, [r3, #6]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d004      	beq.n	80075fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f890 	bl	8007718 <USBD_CtlError>
        break;
 80075f8:	e01a      	b.n	8007630 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f043 0202 	orr.w	r2, r3, #2
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	330c      	adds	r3, #12
 800761a:	2202      	movs	r2, #2
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8eb 	bl	80077fa <USBD_CtlSendData>
      break;
 8007624:	e004      	b.n	8007630 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f875 	bl	8007718 <USBD_CtlError>
      break;
 800762e:	bf00      	nop
  }
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	885b      	ldrh	r3, [r3, #2]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d106      	bne.n	8007658 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f90e 	bl	8007874 <USBD_CtlSendStatus>
  }
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	2b02      	cmp	r3, #2
 8007676:	d80b      	bhi.n	8007690 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	885b      	ldrh	r3, [r3, #2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10c      	bne.n	800769a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8f3 	bl	8007874 <USBD_CtlSendStatus>
      }
      break;
 800768e:	e004      	b.n	800769a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f840 	bl	8007718 <USBD_CtlError>
      break;
 8007698:	e000      	b.n	800769c <USBD_ClrFeature+0x3c>
      break;
 800769a:	bf00      	nop
  }
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fabb 	bl	8006c4a <SWAPBYTE>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff faae 	bl	8006c4a <SWAPBYTE>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff faa1 	bl	8006c4a <SWAPBYTE>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	80da      	strh	r2, [r3, #6]
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007722:	2180      	movs	r1, #128	; 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbf3 	bl	8007f10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fbef 	bl	8007f10 <USBD_LL_StallEP>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d036      	beq.n	80077be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007754:	6938      	ldr	r0, [r7, #16]
 8007756:	f000 f836 	bl	80077c6 <USBD_GetLen>
 800775a:	4603      	mov	r3, r0
 800775c:	3301      	adds	r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	701a      	strb	r2, [r3, #0]
  idx++;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	3301      	adds	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	4413      	add	r3, r2
 8007780:	2203      	movs	r2, #3
 8007782:	701a      	strb	r2, [r3, #0]
  idx++;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	3301      	adds	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800778a:	e013      	b.n	80077b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4413      	add	r3, r2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	3301      	adds	r3, #1
 800779c:	613b      	str	r3, [r7, #16]
    idx++;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	3301      	adds	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	3301      	adds	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e7      	bne.n	800778c <USBD_GetString+0x52>
 80077bc:	e000      	b.n	80077c0 <USBD_GetString+0x86>
    return;
 80077be:	bf00      	nop
  }
}
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077d6:	e005      	b.n	80077e4 <USBD_GetLen+0x1e>
  {
    len++;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	3301      	adds	r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	3301      	adds	r3, #1
 80077e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f5      	bne.n	80077d8 <USBD_GetLen+0x12>
  }

  return len;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2202      	movs	r2, #2
 800780a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	2100      	movs	r1, #0
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fbfe 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	2100      	movs	r1, #0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fbed 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	2100      	movs	r1, #0
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fbfd 	bl	8008064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007884:	2300      	movs	r3, #0
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fbc9 	bl	8008022 <USBD_LL_Transmit>

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2205      	movs	r2, #5
 80078a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078aa:	2300      	movs	r3, #0
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fbd7 	bl	8008064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078c4:	2200      	movs	r2, #0
 80078c6:	490e      	ldr	r1, [pc, #56]	; (8007900 <MX_USB_DEVICE_Init+0x40>)
 80078c8:	480e      	ldr	r0, [pc, #56]	; (8007904 <MX_USB_DEVICE_Init+0x44>)
 80078ca:	f7fe fead 	bl	8006628 <USBD_Init>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078d4:	f7f9 fa16 	bl	8000d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80078d8:	490b      	ldr	r1, [pc, #44]	; (8007908 <MX_USB_DEVICE_Init+0x48>)
 80078da:	480a      	ldr	r0, [pc, #40]	; (8007904 <MX_USB_DEVICE_Init+0x44>)
 80078dc:	f7fe fed4 	bl	8006688 <USBD_RegisterClass>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078e6:	f7f9 fa0d 	bl	8000d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078ea:	4806      	ldr	r0, [pc, #24]	; (8007904 <MX_USB_DEVICE_Init+0x44>)
 80078ec:	f7fe fef3 	bl	80066d6 <USBD_Start>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80078f6:	f7f9 fa05 	bl	8000d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000158 	.word	0x20000158
 8007904:	200007a8 	.word	0x200007a8
 8007908:	2000005c 	.word	0x2000005c

0800790c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2212      	movs	r2, #18
 800791c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800791e:	4b03      	ldr	r3, [pc, #12]	; (800792c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000174 	.word	0x20000174

08007930 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2204      	movs	r2, #4
 8007940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007942:	4b03      	ldr	r3, [pc, #12]	; (8007950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000188 	.word	0x20000188

08007954 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	4907      	ldr	r1, [pc, #28]	; (8007988 <USBD_FS_ProductStrDescriptor+0x34>)
 800796a:	4808      	ldr	r0, [pc, #32]	; (800798c <USBD_FS_ProductStrDescriptor+0x38>)
 800796c:	f7ff fee5 	bl	800773a <USBD_GetString>
 8007970:	e004      	b.n	800797c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4904      	ldr	r1, [pc, #16]	; (8007988 <USBD_FS_ProductStrDescriptor+0x34>)
 8007976:	4805      	ldr	r0, [pc, #20]	; (800798c <USBD_FS_ProductStrDescriptor+0x38>)
 8007978:	f7ff fedf 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000a78 	.word	0x20000a78
 800798c:	08008adc 	.word	0x08008adc

08007990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	4904      	ldr	r1, [pc, #16]	; (80079b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079a0:	4804      	ldr	r0, [pc, #16]	; (80079b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079a2:	f7ff feca 	bl	800773a <USBD_GetString>
  return USBD_StrDesc;
 80079a6:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20000a78 	.word	0x20000a78
 80079b4:	08008aec 	.word	0x08008aec

080079b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	221a      	movs	r2, #26
 80079c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079ca:	f000 f843 	bl	8007a54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079ce:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000018c 	.word	0x2000018c

080079dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4907      	ldr	r1, [pc, #28]	; (8007a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079f2:	4808      	ldr	r0, [pc, #32]	; (8007a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079f4:	f7ff fea1 	bl	800773a <USBD_GetString>
 80079f8:	e004      	b.n	8007a04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4904      	ldr	r1, [pc, #16]	; (8007a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079fe:	4805      	ldr	r0, [pc, #20]	; (8007a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a00:	f7ff fe9b 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000a78 	.word	0x20000a78
 8007a14:	08008afc 	.word	0x08008afc

08007a18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d105      	bne.n	8007a36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	4907      	ldr	r1, [pc, #28]	; (8007a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a2e:	4808      	ldr	r0, [pc, #32]	; (8007a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a30:	f7ff fe83 	bl	800773a <USBD_GetString>
 8007a34:	e004      	b.n	8007a40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4904      	ldr	r1, [pc, #16]	; (8007a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a3c:	f7ff fe7d 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a40:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000a78 	.word	0x20000a78
 8007a50:	08008b08 	.word	0x08008b08

08007a54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <Get_SerialNum+0x44>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <Get_SerialNum+0x48>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <Get_SerialNum+0x4c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <Get_SerialNum+0x50>)
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f814 	bl	8007aac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a84:	2204      	movs	r2, #4
 8007a86:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <Get_SerialNum+0x54>)
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f000 f80f 	bl	8007aac <IntToUnicode>
  }
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	1fff7a10 	.word	0x1fff7a10
 8007a9c:	1fff7a14 	.word	0x1fff7a14
 8007aa0:	1fff7a18 	.word	0x1fff7a18
 8007aa4:	2000018e 	.word	0x2000018e
 8007aa8:	2000019e 	.word	0x2000019e

08007aac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
 8007ac2:	e027      	b.n	8007b14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	0f1b      	lsrs	r3, r3, #28
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d80b      	bhi.n	8007ae4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	440b      	add	r3, r1
 8007adc:	3230      	adds	r2, #48	; 0x30
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e00a      	b.n	8007afa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	0f1b      	lsrs	r3, r3, #28
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	4619      	mov	r1, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	440b      	add	r3, r1
 8007af4:	3237      	adds	r2, #55	; 0x37
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	3301      	adds	r3, #1
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	3301      	adds	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
 8007b14:	7dfa      	ldrb	r2, [r7, #23]
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d3d3      	bcc.n	8007ac4 <IntToUnicode+0x18>
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b34:	f107 0314 	add.w	r3, r7, #20
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
 8007b40:	60da      	str	r2, [r3, #12]
 8007b42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b4c:	d13a      	bne.n	8007bc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b70:	2302      	movs	r3, #2
 8007b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b7c:	230a      	movs	r3, #10
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	4619      	mov	r1, r3
 8007b86:	4812      	ldr	r0, [pc, #72]	; (8007bd0 <HAL_PCD_MspInit+0xa4>)
 8007b88:	f7f9 fec4 	bl	8001914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b90:	4a0e      	ldr	r2, [pc, #56]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	6353      	str	r3, [r2, #52]	; 0x34
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ba6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ba8:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <HAL_PCD_MspInit+0xa0>)
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2043      	movs	r0, #67	; 0x43
 8007bba:	f7f9 fe74 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bbe:	2043      	movs	r0, #67	; 0x43
 8007bc0:	f7f9 fe8d 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bc4:	bf00      	nop
 8007bc6:	3728      	adds	r7, #40	; 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	40020000 	.word	0x40020000

08007bd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fdbe 	bl	800676c <USBD_LL_SetupStage>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fe fdf8 	bl	8006816 <USBD_LL_DataOutStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3348      	adds	r3, #72	; 0x48
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f7fe fe41 	bl	80068dc <USBD_LL_DataInStage>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe ff55 	bl	8006b20 <USBD_LL_SOF>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c86:	2301      	movs	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	e008      	b.n	8007caa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d102      	bne.n	8007ca6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e001      	b.n	8007caa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ca6:	f7f9 f82d 	bl	8000d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fef5 	bl	8006aa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fea1 	bl	8006a08 <USBD_LL_Reset>
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fef0 	bl	8006ac4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <HAL_PCD_SuspendCallback+0x48>)
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	4a03      	ldr	r2, [pc, #12]	; (8007d18 <HAL_PCD_SuspendCallback+0x48>)
 8007d0a:	f043 0306 	orr.w	r3, r3, #6
 8007d0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fee0 	bl	8006af0 <USBD_LL_Resume>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe ff2e 	bl	8006bb0 <USBD_LL_IsoOUTIncomplete>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fef6 	bl	8006b64 <USBD_LL_IsoINIncomplete>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe ff34 	bl	8006bfc <USBD_LL_DevConnected>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe ff31 	bl	8006c12 <USBD_LL_DevDisconnected>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d13c      	bne.n	8007e42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dc8:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <USBD_LL_Init+0x94>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <USBD_LL_Init+0x94>)
 8007dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <USBD_LL_Init+0x94>)
 8007dda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007dde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <USBD_LL_Init+0x94>)
 8007de2:	2204      	movs	r2, #4
 8007de4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007de6:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <USBD_LL_Init+0x94>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <USBD_LL_Init+0x94>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <USBD_LL_Init+0x94>)
 8007df4:	2202      	movs	r2, #2
 8007df6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007df8:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <USBD_LL_Init+0x94>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e04:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e16:	480d      	ldr	r0, [pc, #52]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e18:	f7fb f841 	bl	8002e9e <HAL_PCD_Init>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e22:	f7f8 ff6f 	bl	8000d04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e26:	2180      	movs	r1, #128	; 0x80
 8007e28:	4808      	ldr	r0, [pc, #32]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e2a:	f7fc f986 	bl	800413a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e2e:	2240      	movs	r2, #64	; 0x40
 8007e30:	2100      	movs	r1, #0
 8007e32:	4806      	ldr	r0, [pc, #24]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e34:	f7fc f93a 	bl	80040ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e38:	2280      	movs	r2, #128	; 0x80
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	4803      	ldr	r0, [pc, #12]	; (8007e4c <USBD_LL_Init+0x94>)
 8007e3e:	f7fc f935 	bl	80040ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000c78 	.word	0x20000c78

08007e50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fb f936 	bl	80030d8 <HAL_PCD_Start>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f930 	bl	80080d8 <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	4608      	mov	r0, r1
 8007e90:	4611      	mov	r1, r2
 8007e92:	461a      	mov	r2, r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	70fb      	strb	r3, [r7, #3]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70bb      	strb	r3, [r7, #2]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007eae:	78bb      	ldrb	r3, [r7, #2]
 8007eb0:	883a      	ldrh	r2, [r7, #0]
 8007eb2:	78f9      	ldrb	r1, [r7, #3]
 8007eb4:	f7fb fd1a 	bl	80038ec <HAL_PCD_EP_Open>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f90a 	bl	80080d8 <USBD_Get_USB_Status>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fb fd63 	bl	80039bc <HAL_PCD_EP_Close>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f8eb 	bl	80080d8 <USBD_Get_USB_Status>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fb fe23 	bl	8003b7a <HAL_PCD_EP_SetStall>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f8cc 	bl	80080d8 <USBD_Get_USB_Status>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fb fe68 	bl	8003c42 <HAL_PCD_EP_ClrStall>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f8ad 	bl	80080d8 <USBD_Get_USB_Status>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da0b      	bge.n	8007fc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	333e      	adds	r3, #62	; 0x3e
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	e00b      	b.n	8007fd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fb fc4d 	bl	80038a2 <HAL_PCD_SetAddress>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f862 	bl	80080d8 <USBD_Get_USB_Status>
 8008014:	4603      	mov	r3, r0
 8008016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008018:	7bbb      	ldrb	r3, [r7, #14]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	460b      	mov	r3, r1
 8008030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008040:	7af9      	ldrb	r1, [r7, #11]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f7fb fd4e 	bl	8003ae6 <HAL_PCD_EP_Transmit>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f841 	bl	80080d8 <USBD_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800805a:	7dbb      	ldrb	r3, [r7, #22]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	607a      	str	r2, [r7, #4]
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	460b      	mov	r3, r1
 8008072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008082:	7af9      	ldrb	r1, [r7, #11]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	f7fb fce2 	bl	8003a50 <HAL_PCD_EP_Receive>
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f820 	bl	80080d8 <USBD_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800809c:	7dbb      	ldrb	r3, [r7, #22]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080b0:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <USBD_static_malloc+0x18>)
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20001080 	.word	0x20001080

080080c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d817      	bhi.n	800811c <USBD_Get_USB_Status+0x44>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <USBD_Get_USB_Status+0x1c>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	0800810b 	.word	0x0800810b
 80080fc:	08008111 	.word	0x08008111
 8008100:	08008117 	.word	0x08008117
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	e00b      	b.n	8008122 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
    break;
 800810e:	e008      	b.n	8008122 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
    break;
 8008114:	e005      	b.n	8008122 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
    break;
 800811a:	e002      	b.n	8008122 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	73fb      	strb	r3, [r7, #15]
    break;
 8008120:	bf00      	nop
  }
  return usb_status;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <__errno>:
 8008130:	4b01      	ldr	r3, [pc, #4]	; (8008138 <__errno+0x8>)
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	200001a8 	.word	0x200001a8

0800813c <__libc_init_array>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4d0d      	ldr	r5, [pc, #52]	; (8008174 <__libc_init_array+0x38>)
 8008140:	4c0d      	ldr	r4, [pc, #52]	; (8008178 <__libc_init_array+0x3c>)
 8008142:	1b64      	subs	r4, r4, r5
 8008144:	10a4      	asrs	r4, r4, #2
 8008146:	2600      	movs	r6, #0
 8008148:	42a6      	cmp	r6, r4
 800814a:	d109      	bne.n	8008160 <__libc_init_array+0x24>
 800814c:	4d0b      	ldr	r5, [pc, #44]	; (800817c <__libc_init_array+0x40>)
 800814e:	4c0c      	ldr	r4, [pc, #48]	; (8008180 <__libc_init_array+0x44>)
 8008150:	f000 fc8e 	bl	8008a70 <_init>
 8008154:	1b64      	subs	r4, r4, r5
 8008156:	10a4      	asrs	r4, r4, #2
 8008158:	2600      	movs	r6, #0
 800815a:	42a6      	cmp	r6, r4
 800815c:	d105      	bne.n	800816a <__libc_init_array+0x2e>
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	f855 3b04 	ldr.w	r3, [r5], #4
 8008164:	4798      	blx	r3
 8008166:	3601      	adds	r6, #1
 8008168:	e7ee      	b.n	8008148 <__libc_init_array+0xc>
 800816a:	f855 3b04 	ldr.w	r3, [r5], #4
 800816e:	4798      	blx	r3
 8008170:	3601      	adds	r6, #1
 8008172:	e7f2      	b.n	800815a <__libc_init_array+0x1e>
 8008174:	0800a034 	.word	0x0800a034
 8008178:	0800a034 	.word	0x0800a034
 800817c:	0800a034 	.word	0x0800a034
 8008180:	0800a038 	.word	0x0800a038

08008184 <memset>:
 8008184:	4402      	add	r2, r0
 8008186:	4603      	mov	r3, r0
 8008188:	4293      	cmp	r3, r2
 800818a:	d100      	bne.n	800818e <memset+0xa>
 800818c:	4770      	bx	lr
 800818e:	f803 1b01 	strb.w	r1, [r3], #1
 8008192:	e7f9      	b.n	8008188 <memset+0x4>

08008194 <siprintf>:
 8008194:	b40e      	push	{r1, r2, r3}
 8008196:	b500      	push	{lr}
 8008198:	b09c      	sub	sp, #112	; 0x70
 800819a:	ab1d      	add	r3, sp, #116	; 0x74
 800819c:	9002      	str	r0, [sp, #8]
 800819e:	9006      	str	r0, [sp, #24]
 80081a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081a4:	4809      	ldr	r0, [pc, #36]	; (80081cc <siprintf+0x38>)
 80081a6:	9107      	str	r1, [sp, #28]
 80081a8:	9104      	str	r1, [sp, #16]
 80081aa:	4909      	ldr	r1, [pc, #36]	; (80081d0 <siprintf+0x3c>)
 80081ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b0:	9105      	str	r1, [sp, #20]
 80081b2:	6800      	ldr	r0, [r0, #0]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	a902      	add	r1, sp, #8
 80081b8:	f000 f868 	bl	800828c <_svfiprintf_r>
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	b01c      	add	sp, #112	; 0x70
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b003      	add	sp, #12
 80081ca:	4770      	bx	lr
 80081cc:	200001a8 	.word	0x200001a8
 80081d0:	ffff0208 	.word	0xffff0208

080081d4 <__ssputs_r>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	688e      	ldr	r6, [r1, #8]
 80081da:	429e      	cmp	r6, r3
 80081dc:	4682      	mov	sl, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4690      	mov	r8, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	d838      	bhi.n	8008258 <__ssputs_r+0x84>
 80081e6:	898a      	ldrh	r2, [r1, #12]
 80081e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ec:	d032      	beq.n	8008254 <__ssputs_r+0x80>
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	6909      	ldr	r1, [r1, #16]
 80081f2:	eba5 0901 	sub.w	r9, r5, r1
 80081f6:	6965      	ldr	r5, [r4, #20]
 80081f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008200:	3301      	adds	r3, #1
 8008202:	444b      	add	r3, r9
 8008204:	106d      	asrs	r5, r5, #1
 8008206:	429d      	cmp	r5, r3
 8008208:	bf38      	it	cc
 800820a:	461d      	movcc	r5, r3
 800820c:	0553      	lsls	r3, r2, #21
 800820e:	d531      	bpl.n	8008274 <__ssputs_r+0xa0>
 8008210:	4629      	mov	r1, r5
 8008212:	f000 fb63 	bl	80088dc <_malloc_r>
 8008216:	4606      	mov	r6, r0
 8008218:	b950      	cbnz	r0, 8008230 <__ssputs_r+0x5c>
 800821a:	230c      	movs	r3, #12
 800821c:	f8ca 3000 	str.w	r3, [sl]
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	6921      	ldr	r1, [r4, #16]
 8008232:	464a      	mov	r2, r9
 8008234:	f000 fabe 	bl	80087b4 <memcpy>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800823e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	6126      	str	r6, [r4, #16]
 8008246:	6165      	str	r5, [r4, #20]
 8008248:	444e      	add	r6, r9
 800824a:	eba5 0509 	sub.w	r5, r5, r9
 800824e:	6026      	str	r6, [r4, #0]
 8008250:	60a5      	str	r5, [r4, #8]
 8008252:	463e      	mov	r6, r7
 8008254:	42be      	cmp	r6, r7
 8008256:	d900      	bls.n	800825a <__ssputs_r+0x86>
 8008258:	463e      	mov	r6, r7
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	4632      	mov	r2, r6
 800825e:	4641      	mov	r1, r8
 8008260:	f000 fab6 	bl	80087d0 <memmove>
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	1b9b      	subs	r3, r3, r6
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4433      	add	r3, r6
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	2000      	movs	r0, #0
 8008272:	e7db      	b.n	800822c <__ssputs_r+0x58>
 8008274:	462a      	mov	r2, r5
 8008276:	f000 fba5 	bl	80089c4 <_realloc_r>
 800827a:	4606      	mov	r6, r0
 800827c:	2800      	cmp	r0, #0
 800827e:	d1e1      	bne.n	8008244 <__ssputs_r+0x70>
 8008280:	6921      	ldr	r1, [r4, #16]
 8008282:	4650      	mov	r0, sl
 8008284:	f000 fabe 	bl	8008804 <_free_r>
 8008288:	e7c7      	b.n	800821a <__ssputs_r+0x46>
	...

0800828c <_svfiprintf_r>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4698      	mov	r8, r3
 8008292:	898b      	ldrh	r3, [r1, #12]
 8008294:	061b      	lsls	r3, r3, #24
 8008296:	b09d      	sub	sp, #116	; 0x74
 8008298:	4607      	mov	r7, r0
 800829a:	460d      	mov	r5, r1
 800829c:	4614      	mov	r4, r2
 800829e:	d50e      	bpl.n	80082be <_svfiprintf_r+0x32>
 80082a0:	690b      	ldr	r3, [r1, #16]
 80082a2:	b963      	cbnz	r3, 80082be <_svfiprintf_r+0x32>
 80082a4:	2140      	movs	r1, #64	; 0x40
 80082a6:	f000 fb19 	bl	80088dc <_malloc_r>
 80082aa:	6028      	str	r0, [r5, #0]
 80082ac:	6128      	str	r0, [r5, #16]
 80082ae:	b920      	cbnz	r0, 80082ba <_svfiprintf_r+0x2e>
 80082b0:	230c      	movs	r3, #12
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e0d1      	b.n	800845e <_svfiprintf_r+0x1d2>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	616b      	str	r3, [r5, #20]
 80082be:	2300      	movs	r3, #0
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	2320      	movs	r3, #32
 80082c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082cc:	2330      	movs	r3, #48	; 0x30
 80082ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008478 <_svfiprintf_r+0x1ec>
 80082d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d6:	f04f 0901 	mov.w	r9, #1
 80082da:	4623      	mov	r3, r4
 80082dc:	469a      	mov	sl, r3
 80082de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e2:	b10a      	cbz	r2, 80082e8 <_svfiprintf_r+0x5c>
 80082e4:	2a25      	cmp	r2, #37	; 0x25
 80082e6:	d1f9      	bne.n	80082dc <_svfiprintf_r+0x50>
 80082e8:	ebba 0b04 	subs.w	fp, sl, r4
 80082ec:	d00b      	beq.n	8008306 <_svfiprintf_r+0x7a>
 80082ee:	465b      	mov	r3, fp
 80082f0:	4622      	mov	r2, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	4638      	mov	r0, r7
 80082f6:	f7ff ff6d 	bl	80081d4 <__ssputs_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	f000 80aa 	beq.w	8008454 <_svfiprintf_r+0x1c8>
 8008300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008302:	445a      	add	r2, fp
 8008304:	9209      	str	r2, [sp, #36]	; 0x24
 8008306:	f89a 3000 	ldrb.w	r3, [sl]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80a2 	beq.w	8008454 <_svfiprintf_r+0x1c8>
 8008310:	2300      	movs	r3, #0
 8008312:	f04f 32ff 	mov.w	r2, #4294967295
 8008316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831a:	f10a 0a01 	add.w	sl, sl, #1
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008326:	931a      	str	r3, [sp, #104]	; 0x68
 8008328:	4654      	mov	r4, sl
 800832a:	2205      	movs	r2, #5
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	4851      	ldr	r0, [pc, #324]	; (8008478 <_svfiprintf_r+0x1ec>)
 8008332:	f7f7 ff4d 	bl	80001d0 <memchr>
 8008336:	9a04      	ldr	r2, [sp, #16]
 8008338:	b9d8      	cbnz	r0, 8008372 <_svfiprintf_r+0xe6>
 800833a:	06d0      	lsls	r0, r2, #27
 800833c:	bf44      	itt	mi
 800833e:	2320      	movmi	r3, #32
 8008340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008344:	0711      	lsls	r1, r2, #28
 8008346:	bf44      	itt	mi
 8008348:	232b      	movmi	r3, #43	; 0x2b
 800834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834e:	f89a 3000 	ldrb.w	r3, [sl]
 8008352:	2b2a      	cmp	r3, #42	; 0x2a
 8008354:	d015      	beq.n	8008382 <_svfiprintf_r+0xf6>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	4654      	mov	r4, sl
 800835a:	2000      	movs	r0, #0
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4621      	mov	r1, r4
 8008362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008366:	3b30      	subs	r3, #48	; 0x30
 8008368:	2b09      	cmp	r3, #9
 800836a:	d94e      	bls.n	800840a <_svfiprintf_r+0x17e>
 800836c:	b1b0      	cbz	r0, 800839c <_svfiprintf_r+0x110>
 800836e:	9207      	str	r2, [sp, #28]
 8008370:	e014      	b.n	800839c <_svfiprintf_r+0x110>
 8008372:	eba0 0308 	sub.w	r3, r0, r8
 8008376:	fa09 f303 	lsl.w	r3, r9, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	46a2      	mov	sl, r4
 8008380:	e7d2      	b.n	8008328 <_svfiprintf_r+0x9c>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	1d19      	adds	r1, r3, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	9103      	str	r1, [sp, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfbb      	ittet	lt
 800838e:	425b      	neglt	r3, r3
 8008390:	f042 0202 	orrlt.w	r2, r2, #2
 8008394:	9307      	strge	r3, [sp, #28]
 8008396:	9307      	strlt	r3, [sp, #28]
 8008398:	bfb8      	it	lt
 800839a:	9204      	strlt	r2, [sp, #16]
 800839c:	7823      	ldrb	r3, [r4, #0]
 800839e:	2b2e      	cmp	r3, #46	; 0x2e
 80083a0:	d10c      	bne.n	80083bc <_svfiprintf_r+0x130>
 80083a2:	7863      	ldrb	r3, [r4, #1]
 80083a4:	2b2a      	cmp	r3, #42	; 0x2a
 80083a6:	d135      	bne.n	8008414 <_svfiprintf_r+0x188>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfb8      	it	lt
 80083b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b8:	3402      	adds	r4, #2
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008488 <_svfiprintf_r+0x1fc>
 80083c0:	7821      	ldrb	r1, [r4, #0]
 80083c2:	2203      	movs	r2, #3
 80083c4:	4650      	mov	r0, sl
 80083c6:	f7f7 ff03 	bl	80001d0 <memchr>
 80083ca:	b140      	cbz	r0, 80083de <_svfiprintf_r+0x152>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	eba0 000a 	sub.w	r0, r0, sl
 80083d2:	fa03 f000 	lsl.w	r0, r3, r0
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	4303      	orrs	r3, r0
 80083da:	3401      	adds	r4, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e2:	4826      	ldr	r0, [pc, #152]	; (800847c <_svfiprintf_r+0x1f0>)
 80083e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e8:	2206      	movs	r2, #6
 80083ea:	f7f7 fef1 	bl	80001d0 <memchr>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d038      	beq.n	8008464 <_svfiprintf_r+0x1d8>
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <_svfiprintf_r+0x1f4>)
 80083f4:	bb1b      	cbnz	r3, 800843e <_svfiprintf_r+0x1b2>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	3307      	adds	r3, #7
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	3308      	adds	r3, #8
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	4433      	add	r3, r6
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	e767      	b.n	80082da <_svfiprintf_r+0x4e>
 800840a:	fb0c 3202 	mla	r2, ip, r2, r3
 800840e:	460c      	mov	r4, r1
 8008410:	2001      	movs	r0, #1
 8008412:	e7a5      	b.n	8008360 <_svfiprintf_r+0xd4>
 8008414:	2300      	movs	r3, #0
 8008416:	3401      	adds	r4, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	4619      	mov	r1, r3
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	4620      	mov	r0, r4
 8008422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008426:	3a30      	subs	r2, #48	; 0x30
 8008428:	2a09      	cmp	r2, #9
 800842a:	d903      	bls.n	8008434 <_svfiprintf_r+0x1a8>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0c5      	beq.n	80083bc <_svfiprintf_r+0x130>
 8008430:	9105      	str	r1, [sp, #20]
 8008432:	e7c3      	b.n	80083bc <_svfiprintf_r+0x130>
 8008434:	fb0c 2101 	mla	r1, ip, r1, r2
 8008438:	4604      	mov	r4, r0
 800843a:	2301      	movs	r3, #1
 800843c:	e7f0      	b.n	8008420 <_svfiprintf_r+0x194>
 800843e:	ab03      	add	r3, sp, #12
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	462a      	mov	r2, r5
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_svfiprintf_r+0x1f8>)
 8008446:	a904      	add	r1, sp, #16
 8008448:	4638      	mov	r0, r7
 800844a:	f3af 8000 	nop.w
 800844e:	1c42      	adds	r2, r0, #1
 8008450:	4606      	mov	r6, r0
 8008452:	d1d6      	bne.n	8008402 <_svfiprintf_r+0x176>
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	065b      	lsls	r3, r3, #25
 8008458:	f53f af2c 	bmi.w	80082b4 <_svfiprintf_r+0x28>
 800845c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845e:	b01d      	add	sp, #116	; 0x74
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <_svfiprintf_r+0x1f8>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4638      	mov	r0, r7
 8008470:	f000 f87a 	bl	8008568 <_printf_i>
 8008474:	e7eb      	b.n	800844e <_svfiprintf_r+0x1c2>
 8008476:	bf00      	nop
 8008478:	08009ff8 	.word	0x08009ff8
 800847c:	0800a002 	.word	0x0800a002
 8008480:	00000000 	.word	0x00000000
 8008484:	080081d5 	.word	0x080081d5
 8008488:	08009ffe 	.word	0x08009ffe

0800848c <_printf_common>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	4616      	mov	r6, r2
 8008492:	4699      	mov	r9, r3
 8008494:	688a      	ldr	r2, [r1, #8]
 8008496:	690b      	ldr	r3, [r1, #16]
 8008498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800849c:	4293      	cmp	r3, r2
 800849e:	bfb8      	it	lt
 80084a0:	4613      	movlt	r3, r2
 80084a2:	6033      	str	r3, [r6, #0]
 80084a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a8:	4607      	mov	r7, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b10a      	cbz	r2, 80084b2 <_printf_common+0x26>
 80084ae:	3301      	adds	r3, #1
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	0699      	lsls	r1, r3, #26
 80084b6:	bf42      	ittt	mi
 80084b8:	6833      	ldrmi	r3, [r6, #0]
 80084ba:	3302      	addmi	r3, #2
 80084bc:	6033      	strmi	r3, [r6, #0]
 80084be:	6825      	ldr	r5, [r4, #0]
 80084c0:	f015 0506 	ands.w	r5, r5, #6
 80084c4:	d106      	bne.n	80084d4 <_printf_common+0x48>
 80084c6:	f104 0a19 	add.w	sl, r4, #25
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	6832      	ldr	r2, [r6, #0]
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	dc26      	bgt.n	8008522 <_printf_common+0x96>
 80084d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d8:	1e13      	subs	r3, r2, #0
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	bf18      	it	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	0692      	lsls	r2, r2, #26
 80084e2:	d42b      	bmi.n	800853c <_printf_common+0xb0>
 80084e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e8:	4649      	mov	r1, r9
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d01e      	beq.n	8008530 <_printf_common+0xa4>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	68e5      	ldr	r5, [r4, #12]
 80084f6:	6832      	ldr	r2, [r6, #0]
 80084f8:	f003 0306 	and.w	r3, r3, #6
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	bf08      	it	eq
 8008500:	1aad      	subeq	r5, r5, r2
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	bf0c      	ite	eq
 8008508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800850c:	2500      	movne	r5, #0
 800850e:	4293      	cmp	r3, r2
 8008510:	bfc4      	itt	gt
 8008512:	1a9b      	subgt	r3, r3, r2
 8008514:	18ed      	addgt	r5, r5, r3
 8008516:	2600      	movs	r6, #0
 8008518:	341a      	adds	r4, #26
 800851a:	42b5      	cmp	r5, r6
 800851c:	d11a      	bne.n	8008554 <_printf_common+0xc8>
 800851e:	2000      	movs	r0, #0
 8008520:	e008      	b.n	8008534 <_printf_common+0xa8>
 8008522:	2301      	movs	r3, #1
 8008524:	4652      	mov	r2, sl
 8008526:	4649      	mov	r1, r9
 8008528:	4638      	mov	r0, r7
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d103      	bne.n	8008538 <_printf_common+0xac>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008538:	3501      	adds	r5, #1
 800853a:	e7c6      	b.n	80084ca <_printf_common+0x3e>
 800853c:	18e1      	adds	r1, r4, r3
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	2030      	movs	r0, #48	; 0x30
 8008542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008546:	4422      	add	r2, r4
 8008548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800854c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008550:	3302      	adds	r3, #2
 8008552:	e7c7      	b.n	80084e4 <_printf_common+0x58>
 8008554:	2301      	movs	r3, #1
 8008556:	4622      	mov	r2, r4
 8008558:	4649      	mov	r1, r9
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d0e6      	beq.n	8008530 <_printf_common+0xa4>
 8008562:	3601      	adds	r6, #1
 8008564:	e7d9      	b.n	800851a <_printf_common+0x8e>
	...

08008568 <_printf_i>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	7e0f      	ldrb	r7, [r1, #24]
 800856e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008570:	2f78      	cmp	r7, #120	; 0x78
 8008572:	4691      	mov	r9, r2
 8008574:	4680      	mov	r8, r0
 8008576:	460c      	mov	r4, r1
 8008578:	469a      	mov	sl, r3
 800857a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800857e:	d807      	bhi.n	8008590 <_printf_i+0x28>
 8008580:	2f62      	cmp	r7, #98	; 0x62
 8008582:	d80a      	bhi.n	800859a <_printf_i+0x32>
 8008584:	2f00      	cmp	r7, #0
 8008586:	f000 80d8 	beq.w	800873a <_printf_i+0x1d2>
 800858a:	2f58      	cmp	r7, #88	; 0x58
 800858c:	f000 80a3 	beq.w	80086d6 <_printf_i+0x16e>
 8008590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008598:	e03a      	b.n	8008610 <_printf_i+0xa8>
 800859a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859e:	2b15      	cmp	r3, #21
 80085a0:	d8f6      	bhi.n	8008590 <_printf_i+0x28>
 80085a2:	a101      	add	r1, pc, #4	; (adr r1, 80085a8 <_printf_i+0x40>)
 80085a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008615 	.word	0x08008615
 80085b0:	08008591 	.word	0x08008591
 80085b4:	08008591 	.word	0x08008591
 80085b8:	08008591 	.word	0x08008591
 80085bc:	08008591 	.word	0x08008591
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008591 	.word	0x08008591
 80085c8:	08008591 	.word	0x08008591
 80085cc:	08008591 	.word	0x08008591
 80085d0:	08008591 	.word	0x08008591
 80085d4:	08008721 	.word	0x08008721
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008703 	.word	0x08008703
 80085e0:	08008591 	.word	0x08008591
 80085e4:	08008591 	.word	0x08008591
 80085e8:	08008743 	.word	0x08008743
 80085ec:	08008591 	.word	0x08008591
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008591 	.word	0x08008591
 80085f8:	08008591 	.word	0x08008591
 80085fc:	0800870b 	.word	0x0800870b
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	1d1a      	adds	r2, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	602a      	str	r2, [r5, #0]
 8008608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800860c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008610:	2301      	movs	r3, #1
 8008612:	e0a3      	b.n	800875c <_printf_i+0x1f4>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	0606      	lsls	r6, r0, #24
 800861a:	f101 0304 	add.w	r3, r1, #4
 800861e:	d50a      	bpl.n	8008636 <_printf_i+0xce>
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	2e00      	cmp	r6, #0
 8008626:	da03      	bge.n	8008630 <_printf_i+0xc8>
 8008628:	232d      	movs	r3, #45	; 0x2d
 800862a:	4276      	negs	r6, r6
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	485e      	ldr	r0, [pc, #376]	; (80087ac <_printf_i+0x244>)
 8008632:	230a      	movs	r3, #10
 8008634:	e019      	b.n	800866a <_printf_i+0x102>
 8008636:	680e      	ldr	r6, [r1, #0]
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800863e:	bf18      	it	ne
 8008640:	b236      	sxthne	r6, r6
 8008642:	e7ef      	b.n	8008624 <_printf_i+0xbc>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	0601      	lsls	r1, r0, #24
 800864e:	d501      	bpl.n	8008654 <_printf_i+0xec>
 8008650:	681e      	ldr	r6, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0xf2>
 8008654:	0646      	lsls	r6, r0, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0xe8>
 8008658:	881e      	ldrh	r6, [r3, #0]
 800865a:	4854      	ldr	r0, [pc, #336]	; (80087ac <_printf_i+0x244>)
 800865c:	2f6f      	cmp	r7, #111	; 0x6f
 800865e:	bf0c      	ite	eq
 8008660:	2308      	moveq	r3, #8
 8008662:	230a      	movne	r3, #10
 8008664:	2100      	movs	r1, #0
 8008666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866a:	6865      	ldr	r5, [r4, #4]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	2d00      	cmp	r5, #0
 8008670:	bfa2      	ittt	ge
 8008672:	6821      	ldrge	r1, [r4, #0]
 8008674:	f021 0104 	bicge.w	r1, r1, #4
 8008678:	6021      	strge	r1, [r4, #0]
 800867a:	b90e      	cbnz	r6, 8008680 <_printf_i+0x118>
 800867c:	2d00      	cmp	r5, #0
 800867e:	d04d      	beq.n	800871c <_printf_i+0x1b4>
 8008680:	4615      	mov	r5, r2
 8008682:	fbb6 f1f3 	udiv	r1, r6, r3
 8008686:	fb03 6711 	mls	r7, r3, r1, r6
 800868a:	5dc7      	ldrb	r7, [r0, r7]
 800868c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008690:	4637      	mov	r7, r6
 8008692:	42bb      	cmp	r3, r7
 8008694:	460e      	mov	r6, r1
 8008696:	d9f4      	bls.n	8008682 <_printf_i+0x11a>
 8008698:	2b08      	cmp	r3, #8
 800869a:	d10b      	bne.n	80086b4 <_printf_i+0x14c>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	07de      	lsls	r6, r3, #31
 80086a0:	d508      	bpl.n	80086b4 <_printf_i+0x14c>
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4299      	cmp	r1, r3
 80086a8:	bfde      	ittt	le
 80086aa:	2330      	movle	r3, #48	; 0x30
 80086ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086b4:	1b52      	subs	r2, r2, r5
 80086b6:	6122      	str	r2, [r4, #16]
 80086b8:	f8cd a000 	str.w	sl, [sp]
 80086bc:	464b      	mov	r3, r9
 80086be:	aa03      	add	r2, sp, #12
 80086c0:	4621      	mov	r1, r4
 80086c2:	4640      	mov	r0, r8
 80086c4:	f7ff fee2 	bl	800848c <_printf_common>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d14c      	bne.n	8008766 <_printf_i+0x1fe>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	b004      	add	sp, #16
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	4835      	ldr	r0, [pc, #212]	; (80087ac <_printf_i+0x244>)
 80086d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086dc:	6829      	ldr	r1, [r5, #0]
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	061d      	lsls	r5, r3, #24
 80086e8:	d514      	bpl.n	8008714 <_printf_i+0x1ac>
 80086ea:	07df      	lsls	r7, r3, #31
 80086ec:	bf44      	itt	mi
 80086ee:	f043 0320 	orrmi.w	r3, r3, #32
 80086f2:	6023      	strmi	r3, [r4, #0]
 80086f4:	b91e      	cbnz	r6, 80086fe <_printf_i+0x196>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f023 0320 	bic.w	r3, r3, #32
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	2310      	movs	r3, #16
 8008700:	e7b0      	b.n	8008664 <_printf_i+0xfc>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f043 0320 	orr.w	r3, r3, #32
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2378      	movs	r3, #120	; 0x78
 800870c:	4828      	ldr	r0, [pc, #160]	; (80087b0 <_printf_i+0x248>)
 800870e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008712:	e7e3      	b.n	80086dc <_printf_i+0x174>
 8008714:	0659      	lsls	r1, r3, #25
 8008716:	bf48      	it	mi
 8008718:	b2b6      	uxthmi	r6, r6
 800871a:	e7e6      	b.n	80086ea <_printf_i+0x182>
 800871c:	4615      	mov	r5, r2
 800871e:	e7bb      	b.n	8008698 <_printf_i+0x130>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	6826      	ldr	r6, [r4, #0]
 8008724:	6961      	ldr	r1, [r4, #20]
 8008726:	1d18      	adds	r0, r3, #4
 8008728:	6028      	str	r0, [r5, #0]
 800872a:	0635      	lsls	r5, r6, #24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	d501      	bpl.n	8008734 <_printf_i+0x1cc>
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	e002      	b.n	800873a <_printf_i+0x1d2>
 8008734:	0670      	lsls	r0, r6, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0x1c8>
 8008738:	8019      	strh	r1, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	4615      	mov	r5, r2
 8008740:	e7ba      	b.n	80086b8 <_printf_i+0x150>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	1d1a      	adds	r2, r3, #4
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	681d      	ldr	r5, [r3, #0]
 800874a:	6862      	ldr	r2, [r4, #4]
 800874c:	2100      	movs	r1, #0
 800874e:	4628      	mov	r0, r5
 8008750:	f7f7 fd3e 	bl	80001d0 <memchr>
 8008754:	b108      	cbz	r0, 800875a <_printf_i+0x1f2>
 8008756:	1b40      	subs	r0, r0, r5
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	2300      	movs	r3, #0
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008764:	e7a8      	b.n	80086b8 <_printf_i+0x150>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	462a      	mov	r2, r5
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d0ab      	beq.n	80086cc <_printf_i+0x164>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	079b      	lsls	r3, r3, #30
 8008778:	d413      	bmi.n	80087a2 <_printf_i+0x23a>
 800877a:	68e0      	ldr	r0, [r4, #12]
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	4298      	cmp	r0, r3
 8008780:	bfb8      	it	lt
 8008782:	4618      	movlt	r0, r3
 8008784:	e7a4      	b.n	80086d0 <_printf_i+0x168>
 8008786:	2301      	movs	r3, #1
 8008788:	4632      	mov	r2, r6
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	47d0      	blx	sl
 8008790:	3001      	adds	r0, #1
 8008792:	d09b      	beq.n	80086cc <_printf_i+0x164>
 8008794:	3501      	adds	r5, #1
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	9903      	ldr	r1, [sp, #12]
 800879a:	1a5b      	subs	r3, r3, r1
 800879c:	42ab      	cmp	r3, r5
 800879e:	dcf2      	bgt.n	8008786 <_printf_i+0x21e>
 80087a0:	e7eb      	b.n	800877a <_printf_i+0x212>
 80087a2:	2500      	movs	r5, #0
 80087a4:	f104 0619 	add.w	r6, r4, #25
 80087a8:	e7f5      	b.n	8008796 <_printf_i+0x22e>
 80087aa:	bf00      	nop
 80087ac:	0800a009 	.word	0x0800a009
 80087b0:	0800a01a 	.word	0x0800a01a

080087b4 <memcpy>:
 80087b4:	440a      	add	r2, r1
 80087b6:	4291      	cmp	r1, r2
 80087b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087bc:	d100      	bne.n	80087c0 <memcpy+0xc>
 80087be:	4770      	bx	lr
 80087c0:	b510      	push	{r4, lr}
 80087c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ca:	4291      	cmp	r1, r2
 80087cc:	d1f9      	bne.n	80087c2 <memcpy+0xe>
 80087ce:	bd10      	pop	{r4, pc}

080087d0 <memmove>:
 80087d0:	4288      	cmp	r0, r1
 80087d2:	b510      	push	{r4, lr}
 80087d4:	eb01 0402 	add.w	r4, r1, r2
 80087d8:	d902      	bls.n	80087e0 <memmove+0x10>
 80087da:	4284      	cmp	r4, r0
 80087dc:	4623      	mov	r3, r4
 80087de:	d807      	bhi.n	80087f0 <memmove+0x20>
 80087e0:	1e43      	subs	r3, r0, #1
 80087e2:	42a1      	cmp	r1, r4
 80087e4:	d008      	beq.n	80087f8 <memmove+0x28>
 80087e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ee:	e7f8      	b.n	80087e2 <memmove+0x12>
 80087f0:	4402      	add	r2, r0
 80087f2:	4601      	mov	r1, r0
 80087f4:	428a      	cmp	r2, r1
 80087f6:	d100      	bne.n	80087fa <memmove+0x2a>
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008802:	e7f7      	b.n	80087f4 <memmove+0x24>

08008804 <_free_r>:
 8008804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008806:	2900      	cmp	r1, #0
 8008808:	d044      	beq.n	8008894 <_free_r+0x90>
 800880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f1a1 0404 	sub.w	r4, r1, #4
 8008816:	bfb8      	it	lt
 8008818:	18e4      	addlt	r4, r4, r3
 800881a:	f000 f913 	bl	8008a44 <__malloc_lock>
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <_free_r+0x94>)
 8008820:	9801      	ldr	r0, [sp, #4]
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	b933      	cbnz	r3, 8008834 <_free_r+0x30>
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	6014      	str	r4, [r2, #0]
 800882a:	b003      	add	sp, #12
 800882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008830:	f000 b90e 	b.w	8008a50 <__malloc_unlock>
 8008834:	42a3      	cmp	r3, r4
 8008836:	d908      	bls.n	800884a <_free_r+0x46>
 8008838:	6825      	ldr	r5, [r4, #0]
 800883a:	1961      	adds	r1, r4, r5
 800883c:	428b      	cmp	r3, r1
 800883e:	bf01      	itttt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	1949      	addeq	r1, r1, r5
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	e7ed      	b.n	8008826 <_free_r+0x22>
 800884a:	461a      	mov	r2, r3
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b10b      	cbz	r3, 8008854 <_free_r+0x50>
 8008850:	42a3      	cmp	r3, r4
 8008852:	d9fa      	bls.n	800884a <_free_r+0x46>
 8008854:	6811      	ldr	r1, [r2, #0]
 8008856:	1855      	adds	r5, r2, r1
 8008858:	42a5      	cmp	r5, r4
 800885a:	d10b      	bne.n	8008874 <_free_r+0x70>
 800885c:	6824      	ldr	r4, [r4, #0]
 800885e:	4421      	add	r1, r4
 8008860:	1854      	adds	r4, r2, r1
 8008862:	42a3      	cmp	r3, r4
 8008864:	6011      	str	r1, [r2, #0]
 8008866:	d1e0      	bne.n	800882a <_free_r+0x26>
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	4421      	add	r1, r4
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	e7da      	b.n	800882a <_free_r+0x26>
 8008874:	d902      	bls.n	800887c <_free_r+0x78>
 8008876:	230c      	movs	r3, #12
 8008878:	6003      	str	r3, [r0, #0]
 800887a:	e7d6      	b.n	800882a <_free_r+0x26>
 800887c:	6825      	ldr	r5, [r4, #0]
 800887e:	1961      	adds	r1, r4, r5
 8008880:	428b      	cmp	r3, r1
 8008882:	bf04      	itt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	bf04      	itt	eq
 800888c:	1949      	addeq	r1, r1, r5
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	6054      	str	r4, [r2, #4]
 8008892:	e7ca      	b.n	800882a <_free_r+0x26>
 8008894:	b003      	add	sp, #12
 8008896:	bd30      	pop	{r4, r5, pc}
 8008898:	20001094 	.word	0x20001094

0800889c <sbrk_aligned>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	4e0e      	ldr	r6, [pc, #56]	; (80088d8 <sbrk_aligned+0x3c>)
 80088a0:	460c      	mov	r4, r1
 80088a2:	6831      	ldr	r1, [r6, #0]
 80088a4:	4605      	mov	r5, r0
 80088a6:	b911      	cbnz	r1, 80088ae <sbrk_aligned+0x12>
 80088a8:	f000 f8bc 	bl	8008a24 <_sbrk_r>
 80088ac:	6030      	str	r0, [r6, #0]
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 f8b7 	bl	8008a24 <_sbrk_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d00a      	beq.n	80088d0 <sbrk_aligned+0x34>
 80088ba:	1cc4      	adds	r4, r0, #3
 80088bc:	f024 0403 	bic.w	r4, r4, #3
 80088c0:	42a0      	cmp	r0, r4
 80088c2:	d007      	beq.n	80088d4 <sbrk_aligned+0x38>
 80088c4:	1a21      	subs	r1, r4, r0
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 f8ac 	bl	8008a24 <_sbrk_r>
 80088cc:	3001      	adds	r0, #1
 80088ce:	d101      	bne.n	80088d4 <sbrk_aligned+0x38>
 80088d0:	f04f 34ff 	mov.w	r4, #4294967295
 80088d4:	4620      	mov	r0, r4
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	20001098 	.word	0x20001098

080088dc <_malloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	1ccd      	adds	r5, r1, #3
 80088e2:	f025 0503 	bic.w	r5, r5, #3
 80088e6:	3508      	adds	r5, #8
 80088e8:	2d0c      	cmp	r5, #12
 80088ea:	bf38      	it	cc
 80088ec:	250c      	movcc	r5, #12
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	4607      	mov	r7, r0
 80088f2:	db01      	blt.n	80088f8 <_malloc_r+0x1c>
 80088f4:	42a9      	cmp	r1, r5
 80088f6:	d905      	bls.n	8008904 <_malloc_r+0x28>
 80088f8:	230c      	movs	r3, #12
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	2600      	movs	r6, #0
 80088fe:	4630      	mov	r0, r6
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	4e2e      	ldr	r6, [pc, #184]	; (80089c0 <_malloc_r+0xe4>)
 8008906:	f000 f89d 	bl	8008a44 <__malloc_lock>
 800890a:	6833      	ldr	r3, [r6, #0]
 800890c:	461c      	mov	r4, r3
 800890e:	bb34      	cbnz	r4, 800895e <_malloc_r+0x82>
 8008910:	4629      	mov	r1, r5
 8008912:	4638      	mov	r0, r7
 8008914:	f7ff ffc2 	bl	800889c <sbrk_aligned>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	4604      	mov	r4, r0
 800891c:	d14d      	bne.n	80089ba <_malloc_r+0xde>
 800891e:	6834      	ldr	r4, [r6, #0]
 8008920:	4626      	mov	r6, r4
 8008922:	2e00      	cmp	r6, #0
 8008924:	d140      	bne.n	80089a8 <_malloc_r+0xcc>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	4631      	mov	r1, r6
 800892a:	4638      	mov	r0, r7
 800892c:	eb04 0803 	add.w	r8, r4, r3
 8008930:	f000 f878 	bl	8008a24 <_sbrk_r>
 8008934:	4580      	cmp	r8, r0
 8008936:	d13a      	bne.n	80089ae <_malloc_r+0xd2>
 8008938:	6821      	ldr	r1, [r4, #0]
 800893a:	3503      	adds	r5, #3
 800893c:	1a6d      	subs	r5, r5, r1
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	4629      	mov	r1, r5
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff ffa5 	bl	800889c <sbrk_aligned>
 8008952:	3001      	adds	r0, #1
 8008954:	d02b      	beq.n	80089ae <_malloc_r+0xd2>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	442b      	add	r3, r5
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	e00e      	b.n	800897c <_malloc_r+0xa0>
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	1b52      	subs	r2, r2, r5
 8008962:	d41e      	bmi.n	80089a2 <_malloc_r+0xc6>
 8008964:	2a0b      	cmp	r2, #11
 8008966:	d916      	bls.n	8008996 <_malloc_r+0xba>
 8008968:	1961      	adds	r1, r4, r5
 800896a:	42a3      	cmp	r3, r4
 800896c:	6025      	str	r5, [r4, #0]
 800896e:	bf18      	it	ne
 8008970:	6059      	strne	r1, [r3, #4]
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	bf08      	it	eq
 8008976:	6031      	streq	r1, [r6, #0]
 8008978:	5162      	str	r2, [r4, r5]
 800897a:	604b      	str	r3, [r1, #4]
 800897c:	4638      	mov	r0, r7
 800897e:	f104 060b 	add.w	r6, r4, #11
 8008982:	f000 f865 	bl	8008a50 <__malloc_unlock>
 8008986:	f026 0607 	bic.w	r6, r6, #7
 800898a:	1d23      	adds	r3, r4, #4
 800898c:	1af2      	subs	r2, r6, r3
 800898e:	d0b6      	beq.n	80088fe <_malloc_r+0x22>
 8008990:	1b9b      	subs	r3, r3, r6
 8008992:	50a3      	str	r3, [r4, r2]
 8008994:	e7b3      	b.n	80088fe <_malloc_r+0x22>
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	42a3      	cmp	r3, r4
 800899a:	bf0c      	ite	eq
 800899c:	6032      	streq	r2, [r6, #0]
 800899e:	605a      	strne	r2, [r3, #4]
 80089a0:	e7ec      	b.n	800897c <_malloc_r+0xa0>
 80089a2:	4623      	mov	r3, r4
 80089a4:	6864      	ldr	r4, [r4, #4]
 80089a6:	e7b2      	b.n	800890e <_malloc_r+0x32>
 80089a8:	4634      	mov	r4, r6
 80089aa:	6876      	ldr	r6, [r6, #4]
 80089ac:	e7b9      	b.n	8008922 <_malloc_r+0x46>
 80089ae:	230c      	movs	r3, #12
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4638      	mov	r0, r7
 80089b4:	f000 f84c 	bl	8008a50 <__malloc_unlock>
 80089b8:	e7a1      	b.n	80088fe <_malloc_r+0x22>
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	e7de      	b.n	800897c <_malloc_r+0xa0>
 80089be:	bf00      	nop
 80089c0:	20001094 	.word	0x20001094

080089c4 <_realloc_r>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	4680      	mov	r8, r0
 80089ca:	4614      	mov	r4, r2
 80089cc:	460e      	mov	r6, r1
 80089ce:	b921      	cbnz	r1, 80089da <_realloc_r+0x16>
 80089d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	4611      	mov	r1, r2
 80089d6:	f7ff bf81 	b.w	80088dc <_malloc_r>
 80089da:	b92a      	cbnz	r2, 80089e8 <_realloc_r+0x24>
 80089dc:	f7ff ff12 	bl	8008804 <_free_r>
 80089e0:	4625      	mov	r5, r4
 80089e2:	4628      	mov	r0, r5
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	f000 f838 	bl	8008a5c <_malloc_usable_size_r>
 80089ec:	4284      	cmp	r4, r0
 80089ee:	4607      	mov	r7, r0
 80089f0:	d802      	bhi.n	80089f8 <_realloc_r+0x34>
 80089f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089f6:	d812      	bhi.n	8008a1e <_realloc_r+0x5a>
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f7ff ff6e 	bl	80088dc <_malloc_r>
 8008a00:	4605      	mov	r5, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0ed      	beq.n	80089e2 <_realloc_r+0x1e>
 8008a06:	42bc      	cmp	r4, r7
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	bf28      	it	cs
 8008a0e:	463a      	movcs	r2, r7
 8008a10:	f7ff fed0 	bl	80087b4 <memcpy>
 8008a14:	4631      	mov	r1, r6
 8008a16:	4640      	mov	r0, r8
 8008a18:	f7ff fef4 	bl	8008804 <_free_r>
 8008a1c:	e7e1      	b.n	80089e2 <_realloc_r+0x1e>
 8008a1e:	4635      	mov	r5, r6
 8008a20:	e7df      	b.n	80089e2 <_realloc_r+0x1e>
	...

08008a24 <_sbrk_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d06      	ldr	r5, [pc, #24]	; (8008a40 <_sbrk_r+0x1c>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	f7f8 fd56 	bl	80014e0 <_sbrk>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_sbrk_r+0x1a>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_sbrk_r+0x1a>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	2000109c 	.word	0x2000109c

08008a44 <__malloc_lock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__malloc_lock+0x8>)
 8008a46:	f000 b811 	b.w	8008a6c <__retarget_lock_acquire_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	200010a0 	.word	0x200010a0

08008a50 <__malloc_unlock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__malloc_unlock+0x8>)
 8008a52:	f000 b80c 	b.w	8008a6e <__retarget_lock_release_recursive>
 8008a56:	bf00      	nop
 8008a58:	200010a0 	.word	0x200010a0

08008a5c <_malloc_usable_size_r>:
 8008a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a60:	1f18      	subs	r0, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfbc      	itt	lt
 8008a66:	580b      	ldrlt	r3, [r1, r0]
 8008a68:	18c0      	addlt	r0, r0, r3
 8008a6a:	4770      	bx	lr

08008a6c <__retarget_lock_acquire_recursive>:
 8008a6c:	4770      	bx	lr

08008a6e <__retarget_lock_release_recursive>:
 8008a6e:	4770      	bx	lr

08008a70 <_init>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr

08008a7c <_fini>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

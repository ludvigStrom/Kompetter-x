
kompetterx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b0  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a210  0800a210  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a218  0800a218  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800a220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000270  0800a490  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001120  0800a490  00021120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015402  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003462  00000000  00000000  000356a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00038b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00039bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002266e  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001689c  00000000  00000000  0005d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc48  00000000  00000000  00073a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013368a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  001336dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c48 	.word	0x08008c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008c48 	.word	0x08008c48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AS5600_ReadAngle>:
#include "angleSensor.h"

uint16_t AS5600_ReadAngle(I2C_HandleTypeDef *hi2c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    uint16_t angle;

    // Read the angle from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	220e      	movs	r2, #14
 800058e:	216c      	movs	r1, #108	; 0x6c
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f001 fed5 	bl	8002340 <HAL_I2C_Mem_Read>

    // Combine the two bytes to get the angle
    angle = (buffer[0] << 8) | buffer[1];
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21a      	sxth	r2, r3
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	81fb      	strh	r3, [r7, #14]

    return angle;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <AS5600_ReadStatus>:

uint8_t AS5600_ReadStatus(I2C_HandleTypeDef *hi2c)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
    uint8_t status;

    // Read the status from the AS5600 chip
    HAL_I2C_Mem_Read(hi2c, AS5600_ADDRESS<<1, 0x0B, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	f107 030f 	add.w	r3, r7, #15
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	220b      	movs	r2, #11
 80005ca:	216c      	movs	r1, #108	; 0x6c
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f001 feb7 	bl	8002340 <HAL_I2C_Mem_Read>

    return status;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <AS5600_IsMagnetPresent>:

uint8_t AS5600_IsMagnetPresent(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint8_t status = AS5600_ReadStatus(hi2c);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffe3 	bl	80005b0 <AS5600_ReadStatus>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]

    // Check if the magnet is too high or too low
    if((status & 0x08) || (status & 0x10)) {
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d104      	bne.n	8000602 <AS5600_IsMagnetPresent+0x26>
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	f003 0310 	and.w	r3, r3, #16
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <AS5600_IsMagnetPresent+0x2a>
        // Magnet is not present or not properly placed
        return 0; // returning 0 for false
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <AS5600_IsMagnetPresent+0x2c>
    } else {
        // Magnet is present and properly placed
        return 1; // returning 1 for true
 8000606:	2301      	movs	r3, #1
    }
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <keyboardScannerInit>:
uint8_t hid_report_prev[NUM_KEYS] = {0};
char last_key[3] = {0};
enum KeyState key_state[NUM_ROWS][NUM_COLS];

void keyboardScannerInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  // Initialize each state to IDLE
  for(int i = 0; i < NUM_ROWS; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e013      	b.n	8000644 <keyboardScannerInit+0x34>
    for(int j = 0; j < NUM_COLS; j++) {
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	e00a      	b.n	8000638 <keyboardScannerInit+0x28>
      key_state[i][j] = IDLE;
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <keyboardScannerInit+0x48>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	441a      	add	r2, r3
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	4413      	add	r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < NUM_COLS; j++) {
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b03      	cmp	r3, #3
 800063c:	ddf1      	ble.n	8000622 <keyboardScannerInit+0x12>
  for(int i = 0; i < NUM_ROWS; i++) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b03      	cmp	r3, #3
 8000648:	dde8      	ble.n	800061c <keyboardScannerInit+0xc>
    }
  }
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	200002f0 	.word	0x200002f0

0800065c <keyboardScan>:

void keyboardScan(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	//debug
	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000662:	2104      	movs	r1, #4
 8000664:	486a      	ldr	r0, [pc, #424]	; (8000810 <keyboardScan+0x1b4>)
 8000666:	f001 fc0e 	bl	8001e86 <HAL_GPIO_TogglePin>
	HAL_Delay(5);
 800066a:	2005      	movs	r0, #5
 800066c:	f001 f908 	bl	8001880 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000670:	2104      	movs	r1, #4
 8000672:	4867      	ldr	r0, [pc, #412]	; (8000810 <keyboardScan+0x1b4>)
 8000674:	f001 fc07 	bl	8001e86 <HAL_GPIO_TogglePin>
	HAL_Delay(5);
 8000678:	2005      	movs	r0, #5
 800067a:	f001 f901 	bl	8001880 <HAL_Delay>

	//Keyboard Scan!
	for(int i = 0; i < NUM_ROWS; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e0bc      	b.n	80007fe <keyboardScan+0x1a2>
		uint32_t current_tick = HAL_GetTick();
 8000684:	f001 f8f0 	bl	8001868 <HAL_GetTick>
 8000688:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 800068a:	4a62      	ldr	r2, [pc, #392]	; (8000814 <keyboardScan+0x1b8>)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000692:	4a61      	ldr	r2, [pc, #388]	; (8000818 <keyboardScan+0x1bc>)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f001 fbd9 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_Delay(1); // delay after setting row high
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f8ec 	bl	8001880 <HAL_Delay>

		for(int j = 0; j < NUM_COLS; j++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	e091      	b.n	80007d2 <keyboardScan+0x176>
			uint8_t is_pressed = HAL_GPIO_ReadPin(col_ports[j], col_pins[j]) == GPIO_PIN_SET;
 80006ae:	4a5b      	ldr	r2, [pc, #364]	; (800081c <keyboardScan+0x1c0>)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b6:	495a      	ldr	r1, [pc, #360]	; (8000820 <keyboardScan+0x1c4>)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006be:	4619      	mov	r1, r3
 80006c0:	4610      	mov	r0, r2
 80006c2:	f001 fbaf 	bl	8001e24 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	70fb      	strb	r3, [r7, #3]

			if (is_pressed && key_state[i][j] == IDLE) {
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d03d      	beq.n	8000756 <keyboardScan+0xfa>
 80006da:	4a52      	ldr	r2, [pc, #328]	; (8000824 <keyboardScan+0x1c8>)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	441a      	add	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d134      	bne.n	8000756 <keyboardScan+0xfa>
				// Key has been pressed from an idle state

				// Find a slot in the HID report
				for (int k = 0; k < NUM_KEYS; k++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e015      	b.n	800071e <keyboardScan+0xc2>
					if (hid_report[k] == 0) { // 0 indicates an empty slot
 80006f2:	4a4d      	ldr	r2, [pc, #308]	; (8000828 <keyboardScan+0x1cc>)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10c      	bne.n	8000718 <keyboardScan+0xbc>
						hid_report[k] = keycode_map[i][j]; // Add the key to the HID report
 80006fe:	4a4b      	ldr	r2, [pc, #300]	; (800082c <keyboardScan+0x1d0>)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	4413      	add	r3, r2
 800070a:	7819      	ldrb	r1, [r3, #0]
 800070c:	4a46      	ldr	r2, [pc, #280]	; (8000828 <keyboardScan+0x1cc>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	460a      	mov	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
						break;
 8000716:	e005      	b.n	8000724 <keyboardScan+0xc8>
				for (int k = 0; k < NUM_KEYS; k++) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	dde6      	ble.n	80006f2 <keyboardScan+0x96>
					}
				}
				key_state[i][j] = PRESSED;
 8000724:	4a3f      	ldr	r2, [pc, #252]	; (8000824 <keyboardScan+0x1c8>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	441a      	add	r2, r3
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4413      	add	r3, r2
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
				last_key_time[i][j] = current_tick;
 8000734:	493e      	ldr	r1, [pc, #248]	; (8000830 <keyboardScan+0x1d4>)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	009a      	lsls	r2, r3, #2
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4413      	add	r3, r2
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				sprintf(last_key, "%d%d", i+1, j+1);  // Save the last key pressed
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	3301      	adds	r3, #1
 800074c:	4939      	ldr	r1, [pc, #228]	; (8000834 <keyboardScan+0x1d8>)
 800074e:	483a      	ldr	r0, [pc, #232]	; (8000838 <keyboardScan+0x1dc>)
 8000750:	f007 fe0c 	bl	800836c <siprintf>
 8000754:	e03a      	b.n	80007cc <keyboardScan+0x170>

			} else if (!is_pressed && key_state[i][j] == PRESSED && current_tick - last_key_time[i][j] > DEBOUNCE_DELAY) {
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d137      	bne.n	80007cc <keyboardScan+0x170>
 800075c:	4a31      	ldr	r2, [pc, #196]	; (8000824 <keyboardScan+0x1c8>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	441a      	add	r2, r3
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d12e      	bne.n	80007cc <keyboardScan+0x170>
 800076e:	4930      	ldr	r1, [pc, #192]	; (8000830 <keyboardScan+0x1d4>)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	009a      	lsls	r2, r3, #2
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	4413      	add	r3, r2
 8000778:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d923      	bls.n	80007cc <keyboardScan+0x170>
				// Key has been released

				// Remove the key from the HID report
				for (int k = 0; k < NUM_KEYS; k++) {
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	e015      	b.n	80007b6 <keyboardScan+0x15a>
					if (hid_report[k] == keycode_map[i][j]) {
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <keyboardScan+0x1cc>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4413      	add	r3, r2
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	4926      	ldr	r1, [pc, #152]	; (800082c <keyboardScan+0x1d0>)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4419      	add	r1, r3
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	440b      	add	r3, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d105      	bne.n	80007b0 <keyboardScan+0x154>
						hid_report[k] = 0; // Remove the key
 80007a4:	4a20      	ldr	r2, [pc, #128]	; (8000828 <keyboardScan+0x1cc>)
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
						break;
 80007ae:	e005      	b.n	80007bc <keyboardScan+0x160>
				for (int k = 0; k < NUM_KEYS; k++) {
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	dde6      	ble.n	800078a <keyboardScan+0x12e>
					}
				}

				key_state[i][j] = IDLE;
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <keyboardScan+0x1c8>)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	441a      	add	r2, r3
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	4413      	add	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < NUM_COLS; j++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	f77f af6a 	ble.w	80006ae <keyboardScan+0x52>
			}
		}

		HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <keyboardScan+0x1b8>)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <keyboardScan+0x1bc>)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f001 fb31 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_Delay(1); // delay after setting row low
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 f844 	bl	8001880 <HAL_Delay>
	for(int i = 0; i < NUM_ROWS; i++) {
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3301      	adds	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b03      	cmp	r3, #3
 8000802:	f77f af3f 	ble.w	8000684 <keyboardScan+0x28>
	}
}
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020000 	.word	0x40020000
 8000814:	20000034 	.word	0x20000034
 8000818:	20000044 	.word	0x20000044
 800081c:	2000004c 	.word	0x2000004c
 8000820:	2000005c 	.word	0x2000005c
 8000824:	200002f0 	.word	0x200002f0
 8000828:	200002cc 	.word	0x200002cc
 800082c:	20000010 	.word	0x20000010
 8000830:	2000028c 	.word	0x2000028c
 8000834:	08008c60 	.word	0x08008c60
 8000838:	200002ec 	.word	0x200002ec

0800083c <encoderValueFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int32_t encoderValueFunction(int16_t currentValue, int16_t previousValue, int32_t accumulator) {
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	460b      	mov	r3, r1
 800084a:	80bb      	strh	r3, [r7, #4]
	int16_t difference = (int16_t)currentValue - (int16_t)previousValue;
 800084c:	88fa      	ldrh	r2, [r7, #6]
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	81fb      	strh	r3, [r7, #14]

	// Handle wraparound from 0 to 4095 and from 4095 to 0
	if (abs(difference) > 2048) {
 8000856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800085a:	2b00      	cmp	r3, #0
 800085c:	bfb8      	it	lt
 800085e:	425b      	neglt	r3, r3
 8000860:	b29b      	uxth	r3, r3
 8000862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000866:	d90e      	bls.n	8000886 <encoderValueFunction+0x4a>
		if (difference > 0) {
 8000868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dd05      	ble.n	800087c <encoderValueFunction+0x40>
			difference -= 4096;
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000876:	b29b      	uxth	r3, r3
 8000878:	81fb      	strh	r3, [r7, #14]
 800087a:	e004      	b.n	8000886 <encoderValueFunction+0x4a>
		} else {
			difference += 4096;
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000882:	b29b      	uxth	r3, r3
 8000884:	81fb      	strh	r3, [r7, #14]
		}
	}

	if (abs(difference) > 10) {
 8000886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088a:	2b00      	cmp	r3, #0
 800088c:	bfb8      	it	lt
 800088e:	425b      	neglt	r3, r3
 8000890:	b29b      	uxth	r3, r3
 8000892:	2b0a      	cmp	r3, #10
 8000894:	d904      	bls.n	80008a0 <encoderValueFunction+0x64>
		accumulator += difference;
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
	}

	// Exponential smoothing
	float alpha = ALPHA_SMOOTHING; // Smoothing factor, adjust as needed
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <encoderValueFunction+0xd4>)
 80008a2:	60bb      	str	r3, [r7, #8]
	smoothedAccumulator = alpha * accumulator + (1 - alpha) * smoothedAccumulator;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80008b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80008be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <encoderValueFunction+0xd8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008da:	ee17 2a90 	vmov	r2, s15
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <encoderValueFunction+0xd8>)
 80008e0:	601a      	str	r2, [r3, #0]

	// Limit smoothedAccumulator to the range -127 to 127
	smoothedAccumulator = max(-127, min(127, smoothedAccumulator));
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <encoderValueFunction+0xd8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80008ea:	db05      	blt.n	80008f8 <encoderValueFunction+0xbc>
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <encoderValueFunction+0xd8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b7f      	cmp	r3, #127	; 0x7f
 80008f2:	bfa8      	it	ge
 80008f4:	237f      	movge	r3, #127	; 0x7f
 80008f6:	e001      	b.n	80008fc <encoderValueFunction+0xc0>
 80008f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <encoderValueFunction+0xd8>)
 80008fe:	6013      	str	r3, [r2, #0]

	return smoothedAccumulator;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <encoderValueFunction+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	3e4ccccd 	.word	0x3e4ccccd
 8000914:	20000308 	.word	0x20000308

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 ff3d 	bl	800179c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f973 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 fa6d 	bl	8000e04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800092a:	f000 f9d9 	bl	8000ce0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800092e:	f000 fa05 	bl	8000d3c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000932:	f007 f8b1 	bl	8007a98 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000936:	f000 fa2f 	bl	8000d98 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 800093a:	2104      	movs	r1, #4
 800093c:	4899      	ldr	r0, [pc, #612]	; (8000ba4 <main+0x28c>)
 800093e:	f001 faa2 	bl	8001e86 <HAL_GPIO_TogglePin>

  HAL_Delay(50);
 8000942:	2032      	movs	r0, #50	; 0x32
 8000944:	f000 ff9c 	bl	8001880 <HAL_Delay>

  SSD1306_Init (); // initialize the display
 8000948:	f000 face 	bl	8000ee8 <SSD1306_Init>

  HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 ff97 	bl	8001880 <HAL_Delay>

  SSD1306_GotoXY (0,0);
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fc31 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts ("Kompetter-X", &Font_11x18, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	4992      	ldr	r1, [pc, #584]	; (8000ba8 <main+0x290>)
 800095e:	4893      	ldr	r0, [pc, #588]	; (8000bac <main+0x294>)
 8000960:	f000 fcc2 	bl	80012e8 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 8000964:	2114      	movs	r1, #20
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fc28 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts ("v.02", &Font_7x10, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	4990      	ldr	r1, [pc, #576]	; (8000bb0 <main+0x298>)
 8000970:	4890      	ldr	r0, [pc, #576]	; (8000bb4 <main+0x29c>)
 8000972:	f000 fcb9 	bl	80012e8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000976:	f000 fb7b 	bl	8001070 <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 800097a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800097e:	f000 ff7f 	bl	8001880 <HAL_Delay>

  SSD1306_Clear();
 8000982:	f000 fcd6 	bl	8001332 <SSD1306_Clear>
  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // Toggle state of LED
 8000986:	2104      	movs	r1, #4
 8000988:	4886      	ldr	r0, [pc, #536]	; (8000ba4 <main+0x28c>)
 800098a:	f001 fa7c 	bl	8001e86 <HAL_GPIO_TogglePin>
  SSD1306_GotoXY(0, 30);
 800098e:	211e      	movs	r1, #30
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fc13 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts("Key: ", &Font_7x10, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	4985      	ldr	r1, [pc, #532]	; (8000bb0 <main+0x298>)
 800099a:	4887      	ldr	r0, [pc, #540]	; (8000bb8 <main+0x2a0>)
 800099c:	f000 fca4 	bl	80012e8 <SSD1306_Puts>
  SSD1306_GotoXY(0, 40);
 80009a0:	2128      	movs	r1, #40	; 0x28
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fc0a 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	497f      	ldr	r1, [pc, #508]	; (8000ba8 <main+0x290>)
 80009ac:	4883      	ldr	r0, [pc, #524]	; (8000bbc <main+0x2a4>)
 80009ae:	f000 fc9b 	bl	80012e8 <SSD1306_Puts>

  SSD1306_GotoXY(40, 30);
 80009b2:	211e      	movs	r1, #30
 80009b4:	2028      	movs	r0, #40	; 0x28
 80009b6:	f000 fc01 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts("Magnet: ", &Font_7x10, 1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	497c      	ldr	r1, [pc, #496]	; (8000bb0 <main+0x298>)
 80009be:	4880      	ldr	r0, [pc, #512]	; (8000bc0 <main+0x2a8>)
 80009c0:	f000 fc92 	bl	80012e8 <SSD1306_Puts>
  SSD1306_GotoXY(40, 40);
 80009c4:	2128      	movs	r1, #40	; 0x28
 80009c6:	2028      	movs	r0, #40	; 0x28
 80009c8:	f000 fbf8 	bl	80011bc <SSD1306_GotoXY>
  SSD1306_Puts("--  ", &Font_11x18, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4976      	ldr	r1, [pc, #472]	; (8000ba8 <main+0x290>)
 80009d0:	487a      	ldr	r0, [pc, #488]	; (8000bbc <main+0x2a4>)
 80009d2:	f000 fc89 	bl	80012e8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80009d6:	f000 fb4b 	bl	8001070 <SSD1306_UpdateScreen>

  keyboardScannerInit();
 80009da:	f7ff fe19 	bl	8000610 <keyboardScannerInit>

  // Initialize lastEncoderVal with the initial encoder value
  lastEncoderVal = AS5600_ReadAngle(&hi2c2);
 80009de:	4879      	ldr	r0, [pc, #484]	; (8000bc4 <main+0x2ac>)
 80009e0:	f7ff fdc8 	bl	8000574 <AS5600_ReadAngle>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	4b77      	ldr	r3, [pc, #476]	; (8000bc8 <main+0x2b0>)
 80009ea:	801a      	strh	r2, [r3, #0]


    /* USER CODE BEGIN 3 */

	//ANGLE SENSOR
	uint16_t angle = AS5600_ReadAngle(&hi2c2);
 80009ec:	4875      	ldr	r0, [pc, #468]	; (8000bc4 <main+0x2ac>)
 80009ee:	f7ff fdc1 	bl	8000574 <AS5600_ReadAngle>
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
	uint8_t magnetPresent = AS5600_IsMagnetPresent(&hi2c2);
 80009f6:	4873      	ldr	r0, [pc, #460]	; (8000bc4 <main+0x2ac>)
 80009f8:	f7ff fdf0 	bl	80005dc <AS5600_IsMagnetPresent>
 80009fc:	4603      	mov	r3, r0
 80009fe:	717b      	strb	r3, [r7, #5]

	smoothedAccumulator = encoderValueFunction(angle, lastEncoderVal, encoderAccumulator);
 8000a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a04:	4a70      	ldr	r2, [pc, #448]	; (8000bc8 <main+0x2b0>)
 8000a06:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000a0a:	4a70      	ldr	r2, [pc, #448]	; (8000bcc <main+0x2b4>)
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff14 	bl	800083c <encoderValueFunction>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a6e      	ldr	r2, [pc, #440]	; (8000bd0 <main+0x2b8>)
 8000a18:	6013      	str	r3, [r2, #0]
	lastEncoderVal = angle; // Update lastEncoderVal after calling encoderValueFunction
 8000a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1e:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <main+0x2b0>)
 8000a20:	801a      	strh	r2, [r3, #0]

	uint8_t screenNotUpdated = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]

	//Handle magnet status
	if( magnetPresent == 1){
 8000a26:	797b      	ldrb	r3, [r7, #5]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d13e      	bne.n	8000aaa <main+0x192>

		SSD1306_GotoXY(40, 40);
 8000a2c:	2128      	movs	r1, #40	; 0x28
 8000a2e:	2028      	movs	r0, #40	; 0x28
 8000a30:	f000 fbc4 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts("ok!  ", &Font_11x18, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	495c      	ldr	r1, [pc, #368]	; (8000ba8 <main+0x290>)
 8000a38:	4866      	ldr	r0, [pc, #408]	; (8000bd4 <main+0x2bc>)
 8000a3a:	f000 fc55 	bl	80012e8 <SSD1306_Puts>

		//Convert the angle to a string
		char angle_str[5]; // Buffer to hold the string. Make sure it's large enough to hold all digits of the angle and the null-terminating character.

	    //Convert to a string with leading spaces
	    sprintf(angle_str, "%4u", angle);
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	463b      	mov	r3, r7
 8000a42:	4965      	ldr	r1, [pc, #404]	; (8000bd8 <main+0x2c0>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fc91 	bl	800836c <siprintf>

		// Display the angle on the OLED display
		SSD1306_GotoXY (0,0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fbb5 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts("Angle: ", &Font_7x10, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	4956      	ldr	r1, [pc, #344]	; (8000bb0 <main+0x298>)
 8000a56:	4861      	ldr	r0, [pc, #388]	; (8000bdc <main+0x2c4>)
 8000a58:	f000 fc46 	bl	80012e8 <SSD1306_Puts>
		SSD1306_GotoXY (0, 12);
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 fbac 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_11x18, 1);
 8000a64:	463b      	mov	r3, r7
 8000a66:	2201      	movs	r2, #1
 8000a68:	494f      	ldr	r1, [pc, #316]	; (8000ba8 <main+0x290>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fc3c 	bl	80012e8 <SSD1306_Puts>


		//ACCUMULATOR:
	    //Convert to a string with leading spaces
		sprintf(angle_str, "%5d", (int8_t)smoothedAccumulator);
 8000a70:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <main+0x2b8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4959      	ldr	r1, [pc, #356]	; (8000be0 <main+0x2c8>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f007 fc75 	bl	800836c <siprintf>

		//display accumulator
		SSD1306_GotoXY (80,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2050      	movs	r0, #80	; 0x50
 8000a86:	f000 fb99 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts("Acc: ", &Font_7x10, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4948      	ldr	r1, [pc, #288]	; (8000bb0 <main+0x298>)
 8000a8e:	4855      	ldr	r0, [pc, #340]	; (8000be4 <main+0x2cc>)
 8000a90:	f000 fc2a 	bl	80012e8 <SSD1306_Puts>
		SSD1306_GotoXY (60, 12);
 8000a94:	210c      	movs	r1, #12
 8000a96:	203c      	movs	r0, #60	; 0x3c
 8000a98:	f000 fb90 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts(angle_str, &Font_7x10, 1);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4943      	ldr	r1, [pc, #268]	; (8000bb0 <main+0x298>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fc20 	bl	80012e8 <SSD1306_Puts>
 8000aa8:	e008      	b.n	8000abc <main+0x1a4>

	} else {
		SSD1306_GotoXY(40, 40);
 8000aaa:	2128      	movs	r1, #40	; 0x28
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f000 fb85 	bl	80011bc <SSD1306_GotoXY>
		SSD1306_Puts("No :(", &Font_11x18, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	493c      	ldr	r1, [pc, #240]	; (8000ba8 <main+0x290>)
 8000ab6:	484c      	ldr	r0, [pc, #304]	; (8000be8 <main+0x2d0>)
 8000ab8:	f000 fc16 	bl	80012e8 <SSD1306_Puts>
	}

	keyboardScan();
 8000abc:	f7ff fdce 	bl	800065c <keyboardScan>

	// Check if the HID report has changed
	uint8_t report_changed = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
	for (int i = 0; i < NUM_KEYS; i++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00f      	b.n	8000aea <main+0x1d2>
	    if (hid_report[i] != hid_report_prev[i]) {
 8000aca:	4a48      	ldr	r2, [pc, #288]	; (8000bec <main+0x2d4>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4413      	add	r3, r2
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4947      	ldr	r1, [pc, #284]	; (8000bf0 <main+0x2d8>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	440b      	add	r3, r1
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d002      	beq.n	8000ae4 <main+0x1cc>
	        report_changed = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73bb      	strb	r3, [r7, #14]
	        break;
 8000ae2:	e005      	b.n	8000af0 <main+0x1d8>
	for (int i = 0; i < NUM_KEYS; i++) {
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	ddec      	ble.n	8000aca <main+0x1b2>
	    }
	}

	//Send Keyboard HID report over USB
	if (report_changed) {
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d031      	beq.n	8000b5a <main+0x242>
	    // Update the Keyboard HID report
	    keyboardhid.KEYCODE1 = hid_report[0];
 8000af6:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <main+0x2d4>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <main+0x2dc>)
 8000afc:	70da      	strb	r2, [r3, #3]
	    keyboardhid.KEYCODE2 = hid_report[1];
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <main+0x2d4>)
 8000b00:	785a      	ldrb	r2, [r3, #1]
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <main+0x2dc>)
 8000b04:	711a      	strb	r2, [r3, #4]
	    keyboardhid.KEYCODE3 = hid_report[2];
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <main+0x2d4>)
 8000b08:	789a      	ldrb	r2, [r3, #2]
 8000b0a:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <main+0x2dc>)
 8000b0c:	715a      	strb	r2, [r3, #5]
	    keyboardhid.KEYCODE4 = hid_report[3];
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <main+0x2d4>)
 8000b10:	78da      	ldrb	r2, [r3, #3]
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <main+0x2dc>)
 8000b14:	719a      	strb	r2, [r3, #6]
	    keyboardhid.KEYCODE5 = hid_report[4];
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <main+0x2d4>)
 8000b18:	791a      	ldrb	r2, [r3, #4]
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <main+0x2dc>)
 8000b1c:	71da      	strb	r2, [r3, #7]
	    keyboardhid.KEYCODE6 = hid_report[5];
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <main+0x2d4>)
 8000b20:	795a      	ldrb	r2, [r3, #5]
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <main+0x2dc>)
 8000b24:	721a      	strb	r2, [r3, #8]

	    // Send the Keyboard HID report
	    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b26:	2209      	movs	r2, #9
 8000b28:	4932      	ldr	r1, [pc, #200]	; (8000bf4 <main+0x2dc>)
 8000b2a:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <main+0x2e0>)
 8000b2c:	f005 fdee 	bl	800670c <USBD_HID_SendReport>

	    // Update the previous report state
	    memcpy(hid_report_prev, hid_report, NUM_KEYS);
 8000b30:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <main+0x2d8>)
 8000b32:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <main+0x2d4>)
 8000b34:	6814      	ldr	r4, [r2, #0]
 8000b36:	6850      	ldr	r0, [r2, #4]
 8000b38:	6891      	ldr	r1, [r2, #8]
 8000b3a:	68d2      	ldr	r2, [r2, #12]
 8000b3c:	601c      	str	r4, [r3, #0]
 8000b3e:	6058      	str	r0, [r3, #4]
 8000b40:	6099      	str	r1, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

	    // Update the OLED display
	    SSD1306_GotoXY(0, 40);
 8000b44:	2128      	movs	r1, #40	; 0x28
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 fb38 	bl	80011bc <SSD1306_GotoXY>
	    SSD1306_Puts(last_key, &Font_11x18, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4916      	ldr	r1, [pc, #88]	; (8000ba8 <main+0x290>)
 8000b50:	482a      	ldr	r0, [pc, #168]	; (8000bfc <main+0x2e4>)
 8000b52:	f000 fbc9 	bl	80012e8 <SSD1306_Puts>
	    screenNotUpdated = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
	}

	//Send Mouse HID report over USB
	if(smoothedAccumulator != 0){
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <main+0x2b8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d017      	beq.n	8000b92 <main+0x27a>
		// Update the Mouse HID report
		mousehid.WHEEL = (int8_t)smoothedAccumulator / 35;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <main+0x2b8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <main+0x2e8>)
 8000b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6e:	441a      	add	r2, r3
 8000b70:	1152      	asrs	r2, r2, #5
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b25a      	sxtb	r2, r3
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <main+0x2ec>)
 8000b7a:	711a      	strb	r2, [r3, #4]

		// Remember the last value of smoothedAccumulator for the next loop
		lastSmoothedAccumulator = smoothedAccumulator;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <main+0x2b8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <main+0x2f0>)
 8000b82:	6013      	str	r3, [r2, #0]

		// Send the Mouse HID report
		USBD_HID_SendReport(&hUsbDeviceFS, (int8_t*)&mousehid, sizeof(mousehid));
 8000b84:	2207      	movs	r2, #7
 8000b86:	491f      	ldr	r1, [pc, #124]	; (8000c04 <main+0x2ec>)
 8000b88:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <main+0x2e0>)
 8000b8a:	f005 fdbf 	bl	800670c <USBD_HID_SendReport>

		// Update the OLED display
		//SSD1306_UpdateScreen();
		screenNotUpdated = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
	}

	if(screenNotUpdated == 1){
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	f47f af29 	bne.w	80009ec <main+0xd4>
		  SSD1306_UpdateScreen();
 8000b9a:	f000 fa69 	bl	8001070 <SSD1306_UpdateScreen>
		  screenNotUpdated = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73fb      	strb	r3, [r7, #15]
  {
 8000ba2:	e723      	b.n	80009ec <main+0xd4>
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	08008c68 	.word	0x08008c68
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08008c74 	.word	0x08008c74
 8000bb8:	08008c7c 	.word	0x08008c7c
 8000bbc:	08008c84 	.word	0x08008c84
 8000bc0:	08008c8c 	.word	0x08008c8c
 8000bc4:	20000364 	.word	0x20000364
 8000bc8:	20000300 	.word	0x20000300
 8000bcc:	20000304 	.word	0x20000304
 8000bd0:	20000308 	.word	0x20000308
 8000bd4:	08008c98 	.word	0x08008c98
 8000bd8:	08008ca0 	.word	0x08008ca0
 8000bdc:	08008ca4 	.word	0x08008ca4
 8000be0:	08008cac 	.word	0x08008cac
 8000be4:	08008cb0 	.word	0x08008cb0
 8000be8:	08008cb8 	.word	0x08008cb8
 8000bec:	200002cc 	.word	0x200002cc
 8000bf0:	200002dc 	.word	0x200002dc
 8000bf4:	20000020 	.word	0x20000020
 8000bf8:	20000824 	.word	0x20000824
 8000bfc:	200002ec 	.word	0x200002ec
 8000c00:	ea0ea0eb 	.word	0xea0ea0eb
 8000c04:	2000002c 	.word	0x2000002c
 8000c08:	2000030c 	.word	0x2000030c

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	; 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2230      	movs	r2, #48	; 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 fb9e 	bl	800835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <SystemClock_Config+0xcc>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <SystemClock_Config+0xcc>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <SystemClock_Config+0xcc>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c80:	23a8      	movs	r3, #168	; 0xa8
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fb5b 	bl	800434c <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c9c:	f000 f91e 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fdbc 	bl	800483c <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cca:	f000 f907 	bl	8000edc <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f001 f8cd 	bl	8001ebc <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f8d8 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000310 	.word	0x20000310
 8000d34:	40005400 	.word	0x40005400
 8000d38:	00061a80 	.word	0x00061a80

08000d3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_I2C2_Init+0x54>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_I2C2_Init+0x58>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_I2C2_Init+0x50>)
 8000d7a:	f001 f89f 	bl	8001ebc <HAL_I2C_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d84:	f000 f8aa 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000364 	.word	0x20000364
 8000d90:	40005800 	.word	0x40005800
 8000d94:	000186a0 	.word	0x000186a0

08000d98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_SPI2_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dcc:	2208      	movs	r2, #8
 8000dce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000de4:	220a      	movs	r2, #10
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dea:	f003 ff31 	bl	8004c50 <HAL_SPI_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000df4:	f000 f872 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200003b8 	.word	0x200003b8
 8000e00:	40003800 	.word	0x40003800

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0xcc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	21f4      	movs	r1, #244	; 0xf4
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e90:	f000 ffe0 	bl	8001e54 <HAL_GPIO_WritePin>
                          |KEY_ROW_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY_COL_1_Pin KEY_COL_2_Pin KEY_COL_3_Pin KEY_COL_4_Pin */
  GPIO_InitStruct.Pin = KEY_COL_1_Pin|KEY_COL_2_Pin|KEY_COL_3_Pin|KEY_COL_4_Pin;
 8000e94:	230f      	movs	r3, #15
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0xd4>)
 8000ea8:	f000 fe20 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin KEY_ROW_1_Pin KEY_ROW_2_Pin KEY_ROW_3_Pin
                           KEY_ROW_4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|KEY_ROW_1_Pin|KEY_ROW_2_Pin|KEY_ROW_3_Pin
 8000eac:	23f4      	movs	r3, #244	; 0xf4
 8000eae:	617b      	str	r3, [r7, #20]
                          |KEY_ROW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000ec4:	f000 fe12 	bl	8001aec <HAL_GPIO_Init>

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020800 	.word	0x40020800

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000eee:	f000 fa29 	bl	8001344 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ef2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2178      	movs	r1, #120	; 0x78
 8000efa:	485b      	ldr	r0, [pc, #364]	; (8001068 <SSD1306_Init+0x180>)
 8000efc:	f001 fc46 	bl	800278c <HAL_I2C_IsDeviceReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e0a9      	b.n	800105e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f0a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f10:	e002      	b.n	8000f18 <SSD1306_Init+0x30>
		p--;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f9      	bne.n	8000f12 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f1e:	22ae      	movs	r2, #174	; 0xae
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fa8a 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fa85 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f32:	2210      	movs	r2, #16
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fa80 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f3c:	22b0      	movs	r2, #176	; 0xb0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 fa7b 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f46:	22c8      	movs	r2, #200	; 0xc8
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 fa76 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f000 fa71 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	; 0x78
 8000f60:	f000 fa6c 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f64:	2240      	movs	r2, #64	; 0x40
 8000f66:	2100      	movs	r1, #0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f000 fa67 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f6e:	2281      	movs	r2, #129	; 0x81
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fa62 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f78:	22ff      	movs	r2, #255	; 0xff
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2078      	movs	r0, #120	; 0x78
 8000f7e:	f000 fa5d 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f82:	22a1      	movs	r2, #161	; 0xa1
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	; 0x78
 8000f88:	f000 fa58 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f8c:	22a6      	movs	r2, #166	; 0xa6
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2078      	movs	r0, #120	; 0x78
 8000f92:	f000 fa53 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f96:	22a8      	movs	r2, #168	; 0xa8
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fa4e 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fa0:	223f      	movs	r2, #63	; 0x3f
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fa49 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000faa:	22a4      	movs	r2, #164	; 0xa4
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 fa44 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fb4:	22d3      	movs	r2, #211	; 0xd3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	; 0x78
 8000fba:	f000 fa3f 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	; 0x78
 8000fc4:	f000 fa3a 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fc8:	22d5      	movs	r2, #213	; 0xd5
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2078      	movs	r0, #120	; 0x78
 8000fce:	f000 fa35 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000fd2:	22f0      	movs	r2, #240	; 0xf0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	; 0x78
 8000fd8:	f000 fa30 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fdc:	22d9      	movs	r2, #217	; 0xd9
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	; 0x78
 8000fe2:	f000 fa2b 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000fe6:	2222      	movs	r2, #34	; 0x22
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f000 fa26 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ff0:	22da      	movs	r2, #218	; 0xda
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f000 fa21 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ffa:	2212      	movs	r2, #18
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa1c 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001004:	22db      	movs	r2, #219	; 0xdb
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa17 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800100e:	2220      	movs	r2, #32
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa12 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001018:	228d      	movs	r2, #141	; 0x8d
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa0d 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001022:	2214      	movs	r2, #20
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa08 	bl	800143c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800102c:	22af      	movs	r2, #175	; 0xaf
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 fa03 	bl	800143c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001036:	222e      	movs	r2, #46	; 0x2e
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 f9fe 	bl	800143c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f843 	bl	80010cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001046:	f000 f813 	bl	8001070 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <SSD1306_Init+0x184>)
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SSD1306_Init+0x184>)
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <SSD1306_Init+0x184>)
 8001058:	2201      	movs	r2, #1
 800105a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000310 	.word	0x20000310
 800106c:	20000810 	.word	0x20000810

08001070 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e01d      	b.n	80010b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	3b50      	subs	r3, #80	; 0x50
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	2078      	movs	r0, #120	; 0x78
 8001088:	f000 f9d8 	bl	800143c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2078      	movs	r0, #120	; 0x78
 8001092:	f000 f9d3 	bl	800143c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001096:	2210      	movs	r2, #16
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	; 0x78
 800109c:	f000 f9ce 	bl	800143c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <SSD1306_UpdateScreen+0x58>)
 80010a6:	441a      	add	r2, r3
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 f95f 	bl	8001370 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3301      	adds	r3, #1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d9de      	bls.n	800107c <SSD1306_UpdateScreen+0xc>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000410 	.word	0x20000410

080010cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SSD1306_Fill+0x14>
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <SSD1306_Fill+0x16>
 80010e0:	23ff      	movs	r3, #255	; 0xff
 80010e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e6:	4619      	mov	r1, r3
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <SSD1306_Fill+0x2c>)
 80010ea:	f007 f937 	bl	800835c <memset>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000410 	.word	0x20000410

080010fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	; 0x7f
 8001112:	d848      	bhi.n	80011a6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	d845      	bhi.n	80011a6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SSD1306_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <SSD1306_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000810 	.word	0x20000810
 80011b8:	20000410 	.word	0x20000410

080011bc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SSD1306_GotoXY+0x28>)
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <SSD1306_GotoXY+0x28>)
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	8053      	strh	r3, [r2, #2]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	20000810 	.word	0x20000810

080011e8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <SSD1306_Putc+0xfc>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
	if (
 8001204:	2b7f      	cmp	r3, #127	; 0x7f
 8001206:	dc07      	bgt.n	8001218 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <SSD1306_Putc+0xfc>)
 800120a:	885b      	ldrh	r3, [r3, #2]
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001214:	2b3f      	cmp	r3, #63	; 0x3f
 8001216:	dd01      	ble.n	800121c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e05e      	b.n	80012da <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e04b      	b.n	80012ba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b20      	subs	r3, #32
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	7849      	ldrb	r1, [r1, #1]
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4619      	mov	r1, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	440b      	add	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	e030      	b.n	80012a8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b298      	uxth	r0, r3
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001264:	885a      	ldrh	r2, [r3, #2]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff ff43 	bl	80010fc <SSD1306_DrawPixel>
 8001276:	e014      	b.n	80012a2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <SSD1306_Putc+0xfc>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b298      	uxth	r0, r3
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001286:	885a      	ldrh	r2, [r3, #2]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b299      	uxth	r1, r3
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	f7ff ff2d 	bl	80010fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	3301      	adds	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d3c8      	bcc.n	8001246 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	461a      	mov	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d3ad      	bcc.n	8001222 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <SSD1306_Putc+0xfc>)
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <SSD1306_Putc+0xfc>)
 80012d6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000810 	.word	0x20000810

080012e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012f6:	e012      	b.n	800131e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff71 	bl	80011e8 <SSD1306_Putc>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d002      	beq.n	8001318 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	e008      	b.n	800132a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e8      	bne.n	80012f8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fec8 	bl	80010cc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800133c:	f7ff fe98 	bl	8001070 <SSD1306_UpdateScreen>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <ssd1306_I2C_Init+0x28>)
 800134c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800134e:	e002      	b.n	8001356 <ssd1306_I2C_Init+0x12>
		p--;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0003d090 	.word	0x0003d090

08001370 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b0c7      	sub	sp, #284	; 0x11c
 8001374:	af02      	add	r7, sp, #8
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800137e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001382:	600a      	str	r2, [r1, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800138a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800138e:	4622      	mov	r2, r4
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001396:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800139a:	4602      	mov	r2, r0
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013a6:	460a      	mov	r2, r1
 80013a8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013b6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013c4:	e015      	b.n	80013f2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ce:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	441a      	add	r2, r3
 80013d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013da:	3301      	adds	r3, #1
 80013dc:	7811      	ldrb	r1, [r2, #0]
 80013de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013e2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013e6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013ec:	3301      	adds	r3, #1
 80013ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d8df      	bhi.n	80013c6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800140a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b299      	uxth	r1, r3
 8001412:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001416:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29b      	uxth	r3, r3
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	200a      	movs	r0, #10
 8001426:	9000      	str	r0, [sp, #0]
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <ssd1306_I2C_WriteMulti+0xc8>)
 800142a:	f000 fe8b 	bl	8002144 <HAL_I2C_Master_Transmit>
}
 800142e:	bf00      	nop
 8001430:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000310 	.word	0x20000310

0800143c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001452:	797b      	ldrb	r3, [r7, #5]
 8001454:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	b299      	uxth	r1, r3
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	230a      	movs	r3, #10
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2302      	movs	r3, #2
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <ssd1306_I2C_Write+0x38>)
 8001466:	f000 fe6d 	bl	8002144 <HAL_I2C_Master_Transmit>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000310 	.word	0x20000310

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_I2C_MspInit+0xe8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4825      	ldr	r0, [pc, #148]	; (80015b8 <HAL_I2C_MspInit+0xf0>)
 8001522:	f000 fae3 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001542:	e031      	b.n	80015a8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <HAL_I2C_MspInit+0xf4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800156a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800157c:	2304      	movs	r3, #4
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <HAL_I2C_MspInit+0xf0>)
 8001588:	f000 fab0 	bl	8001aec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 8001596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_I2C_MspInit+0xec>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40005800 	.word	0x40005800

080015c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_SPI_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_SPI_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_SPI_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800161a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162c:	2305      	movs	r3, #5
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_SPI_MspInit+0x8c>)
 8001638:	f000 fa58 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40003800 	.word	0x40003800
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f8d0 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <OTG_FS_IRQHandler+0x10>)
 80016aa:	f001 fe34 	bl	8003316 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000cf4 	.word	0x20000cf4

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f006 fe0e 	bl	8008308 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000818 	.word	0x20000818
 8001720:	20001120 	.word	0x20001120

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001772:	f7ff ffd7 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f006 fdcd 	bl	8008314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff f8cd 	bl	8000918 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 800178c:	0800a220 	.word	0x0800a220
  ldr r2, =_sbss
 8001790:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001794:	20001120 	.word	0x20001120

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f94f 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe52 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f967 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f92f 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000064 	.word	0x20000064
 8001838:	2000006c 	.word	0x2000006c
 800183c:	20000068 	.word	0x20000068

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000006c 	.word	0x2000006c
 8001864:	2000081c 	.word	0x2000081c

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000081c 	.word	0x2000081c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000006c 	.word	0x2000006c

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e16b      	b.n	8001de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 815a 	bne.w	8001dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80b4 	beq.w	8001dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a5f      	ldr	r2, [pc, #380]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x216>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x328>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x20a>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d56:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae90 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	041a      	lsls	r2, r3, #16
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e12b      	b.n	8002126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff faf0 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f20:	f002 fe82 	bl	8004c28 <HAL_RCC_GetPCLK1Freq>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a81      	ldr	r2, [pc, #516]	; (8002130 <HAL_I2C_Init+0x274>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d807      	bhi.n	8001f40 <HAL_I2C_Init+0x84>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a80      	ldr	r2, [pc, #512]	; (8002134 <HAL_I2C_Init+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e006      	b.n	8001f4e <HAL_I2C_Init+0x92>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a7d      	ldr	r2, [pc, #500]	; (8002138 <HAL_I2C_Init+0x27c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0e7      	b.n	8002126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_I2C_Init+0x280>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	; (8002130 <HAL_I2C_Init+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d802      	bhi.n	8001f90 <HAL_I2C_Init+0xd4>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	e009      	b.n	8001fa4 <HAL_I2C_Init+0xe8>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_I2C_Init+0x284>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	495c      	ldr	r1, [pc, #368]	; (8002130 <HAL_I2C_Init+0x274>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d819      	bhi.n	8001ff8 <HAL_I2C_Init+0x13c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e59      	subs	r1, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fd8:	400b      	ands	r3, r1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_I2C_Init+0x138>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e59      	subs	r1, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	e051      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e04f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Init+0x168>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_I2C_Init+0x18e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x196>
 800204e:	2301      	movs	r3, #1
 8002050:	e022      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <HAL_I2C_Init+0x1bc>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e58      	subs	r0, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	4313      	orrs	r3, r2
 800209e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	000186a0 	.word	0x000186a0
 8002134:	001e847f 	.word	0x001e847f
 8002138:	003d08ff 	.word	0x003d08ff
 800213c:	431bde83 	.word	0x431bde83
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fb86 	bl	8001868 <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	f040 80e0 	bne.w	800232c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	4970      	ldr	r1, [pc, #448]	; (8002338 <HAL_I2C_Master_Transmit+0x1f4>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fda0 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	e0d3      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x50>
 8002190:	2302      	movs	r3, #2
 8002192:	e0cc      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d007      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2221      	movs	r2, #33	; 0x21
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_I2C_Master_Transmit+0x1f8>)
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6a3a      	ldr	r2, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fbf0 	bl	80029e8 <I2C_MasterRequestWrite>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e08d      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002228:	e066      	b.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6a39      	ldr	r1, [r7, #32]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fe1a 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b04      	cmp	r3, #4
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d11b      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x188>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6a39      	ldr	r1, [r7, #32]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fe0a 	bl	8002eea <I2C_WaitOnBTFFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e01a      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d194      	bne.n	800222a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000

08002340 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fa85 	bl	8001868 <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	f040 8208 	bne.w	800277e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	497b      	ldr	r1, [pc, #492]	; (8002564 <HAL_I2C_Mem_Read+0x224>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fc9f 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	e1fb      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Read+0x56>
 8002392:	2302      	movs	r3, #2
 8002394:	e1f4      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d007      	beq.n	80023bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	; 0x22
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a5b      	ldr	r2, [pc, #364]	; (8002568 <HAL_I2C_Mem_Read+0x228>)
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fe:	88f8      	ldrh	r0, [r7, #6]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb6c 	bl	8002aec <I2C_RequestMemoryRead>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1b0      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e184      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11b      	bne.n	800248e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e164      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	2b02      	cmp	r3, #2
 8002494:	d11b      	bne.n	80024ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	e144      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024e4:	e138      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	f200 80f1 	bhi.w	80026d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d123      	bne.n	8002540 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fd35 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e139      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800253e:	e10b      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b02      	cmp	r3, #2
 8002546:	d14e      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	2200      	movs	r2, #0
 8002550:	4906      	ldr	r1, [pc, #24]	; (800256c <HAL_I2C_Mem_Read+0x22c>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fbb2 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e10e      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
 8002562:	bf00      	nop
 8002564:	00100002 	.word	0x00100002
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e4:	e0b8      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	4966      	ldr	r1, [pc, #408]	; (8002788 <HAL_I2C_Mem_Read+0x448>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb63 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0bf      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	494f      	ldr	r1, [pc, #316]	; (8002788 <HAL_I2C_Mem_Read+0x448>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fb35 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e091      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d0:	e042      	b.n	8002758 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc48 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e04c      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d118      	bne.n	8002758 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	f47f aec2 	bne.w	80024e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	00010004 	.word	0x00010004

0800278c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff f864 	bl	8001868 <HAL_GetTick>
 80027a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 8111 	bne.w	80029d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	4988      	ldr	r1, [pc, #544]	; (80029e0 <HAL_I2C_IsDeviceReady+0x254>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa7c 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e104      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x50>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0fd      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d007      	beq.n	8002802 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a70      	ldr	r2, [pc, #448]	; (80029e4 <HAL_I2C_IsDeviceReady+0x258>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa3a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285c:	d103      	bne.n	8002866 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0b6      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286a:	897b      	ldrh	r3, [r7, #10]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002878:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fff5 	bl	8001868 <HAL_GetTick>
 800287e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028ae:	e025      	b.n	80028fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7fe ffda 	bl	8001868 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <HAL_I2C_IsDeviceReady+0x13a>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22a0      	movs	r2, #160	; 0xa0
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2ba0      	cmp	r3, #160	; 0xa0
 8002906:	d005      	beq.n	8002914 <HAL_I2C_IsDeviceReady+0x188>
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_I2C_IsDeviceReady+0x188>
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0cd      	beq.n	80028b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d129      	bne.n	800297e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2319      	movs	r3, #25
 8002956:	2201      	movs	r2, #1
 8002958:	4921      	ldr	r1, [pc, #132]	; (80029e0 <HAL_I2C_IsDeviceReady+0x254>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f9ae 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e036      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e02c      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002996:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2319      	movs	r3, #25
 800299e:	2201      	movs	r2, #1
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <HAL_I2C_IsDeviceReady+0x254>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f98a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e012      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f4ff af32 	bcc.w	8002826 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000

080029e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d006      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e00b      	b.n	8002a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d107      	bne.n	8002a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f937 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a62:	d103      	bne.n	8002a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e035      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	e01b      	b.n	8002ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	11db      	asrs	r3, r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f063 030f 	orn	r3, r3, #15
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <I2C_MasterRequestWrite+0xfc>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f95d 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e010      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <I2C_MasterRequestWrite+0x100>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f94d 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	00010008 	.word	0x00010008
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f8c2 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d103      	bne.n	8002b56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0aa      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	4952      	ldr	r1, [pc, #328]	; (8002cb8 <I2C_RequestMemoryRead+0x1cc>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f8fa 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e097      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f964 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e076      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e021      	b.n	8002c18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	6a39      	ldr	r1, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f93e 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e050      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f923 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d107      	bne.n	8002c40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e035      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f82b 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7a:	d103      	bne.n	8002c84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e013      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	6a3a      	ldr	r2, [r7, #32]
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <I2C_RequestMemoryRead+0x1cc>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f863 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00010002 	.word	0x00010002

08002cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ccc:	e025      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d021      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fe fdc7 	bl	8001868 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e023      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10d      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	e00c      	b.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0b6      	beq.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d78:	e051      	b.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d123      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e046      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d021      	beq.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fd45 	bl	8001868 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e020      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10c      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e00b      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d18d      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e02d      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8ce 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fceb 	bl	8001868 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d1ca      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef6:	e02d      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f88d 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d021      	beq.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe fcaa 	bl	8001868 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d1ca      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f78:	e042      	b.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d119      	bne.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e029      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe fc54 	bl	8001868 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d1b5      	bne.n	8002f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d11b      	bne.n	8003068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003078:	b08f      	sub	sp, #60	; 0x3c
 800307a:	af0a      	add	r7, sp, #40	; 0x28
 800307c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e10f      	b.n	80032a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f004 fe2e 	bl	8007d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 ff5f 	bl	8004f8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	687e      	ldr	r6, [r7, #4]
 80030d4:	466d      	mov	r5, sp
 80030d6:	f106 0410 	add.w	r4, r6, #16
 80030da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ea:	1d33      	adds	r3, r6, #4
 80030ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ee:	6838      	ldr	r0, [r7, #0]
 80030f0:	f001 fe37 	bl	8004d62 <USB_CoreInit>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0d0      	b.n	80032a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f001 ff4d 	bl	8004fac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e04a      	b.n	80031ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333d      	adds	r3, #61	; 0x3d
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	333c      	adds	r3, #60	; 0x3c
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	b298      	uxth	r0, r3
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3342      	adds	r3, #66	; 0x42
 8003154:	4602      	mov	r2, r0
 8003156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	333f      	adds	r3, #63	; 0x3f
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	; 0x44
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3348      	adds	r3, #72	; 0x48
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3350      	adds	r3, #80	; 0x50
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	3301      	adds	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d3af      	bcc.n	8003118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e044      	b.n	8003248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	3301      	adds	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3b5      	bcc.n	80031be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	687e      	ldr	r6, [r7, #4]
 800325a:	466d      	mov	r5, sp
 800325c:	f106 0410 	add.w	r4, r6, #16
 8003260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800326c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003270:	1d33      	adds	r3, r6, #4
 8003272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003274:	6838      	ldr	r0, [r7, #0]
 8003276:	f001 fee5 	bl	8005044 <USB_DevInit>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e00d      	b.n	80032a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 ff61 	bl	8006168 <USB_DevDisconnect>

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_PCD_Start+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e020      	b.n	800330e <HAL_PCD_Start+0x5e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d109      	bne.n	80032f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d005      	beq.n	80032f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fe37 	bl	8004f68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 ff11 	bl	8006126 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003316:	b590      	push	{r4, r7, lr}
 8003318:	b08d      	sub	sp, #52	; 0x34
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f002 ffcf 	bl	80062d0 <USB_GetMode>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 839d 	bne.w	8003a74 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f002 ff33 	bl	80061aa <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8393 	beq.w	8003a72 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f002 ff2a 	bl	80061aa <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d107      	bne.n	8003370 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f002 0202 	and.w	r2, r2, #2
 800336e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f002 ff18 	bl	80061aa <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b10      	cmp	r3, #16
 8003382:	d161      	bne.n	8003448 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0210 	bic.w	r2, r2, #16
 8003392:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	0c5b      	lsrs	r3, r3, #17
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d124      	bne.n	800340a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d035      	beq.n	8003438 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6a38      	ldr	r0, [r7, #32]
 80033e0:	f002 fd4f 	bl	8005e82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f0:	441a      	add	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	441a      	add	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	619a      	str	r2, [r3, #24]
 8003408:	e016      	b.n	8003438 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	0c5b      	lsrs	r3, r3, #17
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	2b06      	cmp	r3, #6
 8003414:	d110      	bne.n	8003438 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800341c:	2208      	movs	r2, #8
 800341e:	4619      	mov	r1, r3
 8003420:	6a38      	ldr	r0, [r7, #32]
 8003422:	f002 fd2e 	bl	8005e82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	441a      	add	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0210 	orr.w	r2, r2, #16
 8003446:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f002 feac 	bl	80061aa <USB_ReadInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800345c:	d16e      	bne.n	800353c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f002 feb2 	bl	80061d0 <USB_ReadDevAllOutEpInterrupt>
 800346c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800346e:	e062      	b.n	8003536 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d057      	beq.n	800352a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f002 fed7 	bl	8006238 <USB_ReadDevOutEPInterrupt>
 800348a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fd98 	bl	8003fe0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fe92 	bl	80041f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	2320      	movs	r3, #32
 800350a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003522:	461a      	mov	r2, r3
 8003524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003528:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d199      	bne.n	8003470 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fe32 	bl	80061aa <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003550:	f040 80c0 	bne.w	80036d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f002 fe53 	bl	8006204 <USB_ReadDevAllInEpInterrupt>
 800355e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003564:	e0b2      	b.n	80036cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a7 	beq.w	80036c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f002 fe79 	bl	8006274 <USB_ReadDevInEPInterrupt>
 8003582:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d057      	beq.n	800363e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2201      	movs	r2, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ae:	4013      	ands	r3, r2
 80035b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2301      	movs	r3, #1
 80035c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d132      	bne.n	8003632 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3348      	adds	r3, #72	; 0x48
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4403      	add	r3, r0
 80035ec:	3344      	adds	r3, #68	; 0x44
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4419      	add	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4403      	add	r3, r0
 8003600:	3348      	adds	r3, #72	; 0x48
 8003602:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_PCD_IRQHandler+0x31c>
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3350      	adds	r3, #80	; 0x50
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800362a:	461a      	mov	r2, r3
 800362c:	2101      	movs	r1, #1
 800362e:	f002 fe81 	bl	8006334 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f004 fbe4 	bl	8007e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	461a      	mov	r2, r3
 8003656:	2308      	movs	r3, #8
 8003658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368c:	461a      	mov	r2, r3
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	461a      	mov	r2, r3
 80036aa:	2302      	movs	r3, #2
 80036ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fc03 	bl	8003ec6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	3301      	adds	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f47f af49 	bne.w	8003566 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fd66 	bl	80061aa <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e8:	d122      	bne.n	8003730 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003704:	2b01      	cmp	r3, #1
 8003706:	d108      	bne.n	800371a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003710:	2100      	movs	r1, #0
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fe0e 	bl	8004334 <HAL_PCDEx_LPM_Callback>
 8003718:	e002      	b.n	8003720 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f004 fbea 	bl	8007ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800372e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fd38 	bl	80061aa <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003744:	d112      	bne.n	800376c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f004 fba6 	bl	8007ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800376a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fd1a 	bl	80061aa <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	f040 80c7 	bne.w	8003912 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2110      	movs	r1, #16
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fdb4 	bl	800530c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a8:	e056      	b.n	8003858 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	461a      	mov	r2, r3
 80037b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037dc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003810:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003830:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003850:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	3301      	adds	r3, #1
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	429a      	cmp	r2, r3
 8003860:	d3a3      	bcc.n	80037aa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003870:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003874:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388e:	f043 030b 	orr.w	r3, r3, #11
 8003892:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a4:	f043 030b 	orr.w	r3, r3, #11
 80038a8:	6453      	str	r3, [r2, #68]	; 0x44
 80038aa:	e015      	b.n	80038d8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d2:	f043 030b 	orr.w	r3, r3, #11
 80038d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038fc:	461a      	mov	r2, r3
 80038fe:	f002 fd19 	bl	8006334 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f002 fc47 	bl	80061aa <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003926:	d124      	bne.n	8003972 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fcdd 	bl	80062ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fd45 	bl	80053c6 <USB_GetDevSpeed>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	f001 f962 	bl	8004c10 <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4620      	mov	r0, r4
 8003958:	f001 fa64 	bl	8004e24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f004 fa7a 	bl	8007e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003970:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 fc17 	bl	80061aa <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d10a      	bne.n	800399c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f004 fa57 	bl	8007e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f002 0208 	and.w	r2, r2, #8
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 fc02 	bl	80061aa <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b0:	d10f      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f004 fab9 	bl	8007f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 fbe7 	bl	80061aa <USB_ReadInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e6:	d10f      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f004 fa8c 	bl	8007f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 fbcc 	bl	80061aa <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d10a      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f004 fa9a 	bl	8007f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f002 fbb6 	bl	80061aa <USB_ReadInterrupts>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d115      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f004 fa8a 	bl	8007f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	e000      	b.n	8003a74 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a72:	bf00      	nop
    }
  }
}
 8003a74:	3734      	adds	r7, #52	; 0x34
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}

08003a7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_SetAddress+0x1a>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e013      	b.n	8003abc <HAL_PCD_SetAddress+0x42>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f002 fb14 	bl	80060da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	70fb      	strb	r3, [r7, #3]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	803b      	strh	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da0f      	bge.n	8003b0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3338      	adds	r3, #56	; 0x38
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	3304      	adds	r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	705a      	strb	r2, [r3, #1]
 8003b08:	e00f      	b.n	8003b2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b36:	883a      	ldrh	r2, [r7, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	78ba      	ldrb	r2, [r7, #2]
 8003b40:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b54:	78bb      	ldrb	r3, [r7, #2]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d102      	bne.n	8003b60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_EP_Open+0xaa>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e00e      	b.n	8003b8c <HAL_PCD_EP_Open+0xc8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fc47 	bl	8005410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	da0f      	bge.n	8003bc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	3338      	adds	r3, #56	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	705a      	strb	r2, [r3, #1]
 8003bc6:	e00f      	b.n	8003be8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_EP_Close+0x6e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e00e      	b.n	8003c20 <HAL_PCD_EP_Close+0x8c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fc85 	bl	8005520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	f003 020f 	and.w	r2, r3, #15
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c84:	7afb      	ldrb	r3, [r7, #11]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6979      	ldr	r1, [r7, #20]
 8003c9c:	f001 ff60 	bl	8005b60 <USB_EP0StartXfer>
 8003ca0:	e008      	b.n	8003cb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	f001 fd12 	bl	80056d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3338      	adds	r3, #56	; 0x38
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	f001 ff16 	bl	8005b60 <USB_EP0StartXfer>
 8003d34:	e008      	b.n	8003d48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	f001 fcc8 	bl	80056d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d901      	bls.n	8003d70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e050      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da0f      	bge.n	8003d98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3338      	adds	r3, #56	; 0x38
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	705a      	strb	r2, [r3, #1]
 8003d96:	e00d      	b.n	8003db4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_PCD_EP_SetStall+0x82>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e01e      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xc0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 f8a5 	bl	8005f32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	b2d9      	uxtb	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e02:	461a      	mov	r2, r3
 8003e04:	f002 fa96 	bl	8006334 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e042      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3338      	adds	r3, #56	; 0x38
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00f      	b.n	8003e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_ClrStall+0x86>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 f8ad 	bl	800600e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	3338      	adds	r3, #56	; 0x38
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d901      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06c      	b.n	8003fd8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d902      	bls.n	8003f1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f22:	e02b      	b.n	8003f7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3303      	adds	r3, #3
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f001 ff51 	bl	8005e06 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	441a      	add	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d809      	bhi.n	8003fa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d203      	bcs.n	8003fa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1be      	bne.n	8003f24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d811      	bhi.n	8003fd6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2201      	movs	r2, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	6939      	ldr	r1, [r7, #16]
 8003fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	333c      	adds	r3, #60	; 0x3c
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 80a0 	bne.w	8004158 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a72      	ldr	r2, [pc, #456]	; (80041f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f240 80dd 	bls.w	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80d7 	beq.w	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	461a      	mov	r2, r3
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	6093      	str	r3, [r2, #8]
 800404c:	e0cb      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	2320      	movs	r3, #32
 8004068:	6093      	str	r3, [r2, #8]
 800406a:	e0bc      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 80b7 	bne.w	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d90f      	bls.n	80040a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409c:	6093      	str	r3, [r2, #8]
 800409e:	e0a2      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	0159      	lsls	r1, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4419      	add	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4403      	add	r3, r0
 8004114:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004118:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d114      	bne.n	800414a <PCD_EP_OutXfrComplete_int+0x16a>
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004142:	461a      	mov	r2, r3
 8004144:	2101      	movs	r1, #1
 8004146:	f002 f8f5 	bl	8006334 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f003 fe3d 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
 8004156:	e046      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d124      	bne.n	80041aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	461a      	mov	r2, r3
 8004178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417c:	6093      	str	r3, [r2, #8]
 800417e:	e032      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	461a      	mov	r2, r3
 8004198:	2320      	movs	r3, #32
 800419a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f003 fe14 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
 80041a8:	e01d      	b.n	80041e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d114      	bne.n	80041da <PCD_EP_OutXfrComplete_int+0x1fa>
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d2:	461a      	mov	r2, r3
 80041d4:	2100      	movs	r1, #0
 80041d6:	f002 f8ad 	bl	8006334 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f003 fdf5 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	4f54300a 	.word	0x4f54300a
 80041f4:	4f54310a 	.word	0x4f54310a

080041f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	333c      	adds	r3, #60	; 0x3c
 8004210:	3304      	adds	r3, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <PCD_EP_OutSetupPacket_int+0x88>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d90e      	bls.n	800424c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f003 fdad 	bl	8007dac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <PCD_EP_OutSetupPacket_int+0x88>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d90c      	bls.n	8004274 <PCD_EP_OutSetupPacket_int+0x7c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d108      	bne.n	8004274 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800426c:	461a      	mov	r2, r3
 800426e:	2101      	movs	r1, #1
 8004270:	f002 f860 	bl	8006334 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	4f54300a 	.word	0x4f54300a

08004284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
 8004290:	4613      	mov	r3, r2
 8004292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042a2:	883b      	ldrh	r3, [r7, #0]
 80042a4:	0419      	lsls	r1, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	e028      	b.n	8004304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e00d      	b.n	80042e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	3340      	adds	r3, #64	; 0x40
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4413      	add	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	3301      	adds	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3ec      	bcc.n	80042c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042ec:	883b      	ldrh	r3, [r7, #0]
 80042ee:	0418      	lsls	r0, r3, #16
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4302      	orrs	r2, r0
 80042fc:	3340      	adds	r3, #64	; 0x40
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e267      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d075      	beq.n	8004456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00c      	beq.n	8004390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b85      	ldr	r3, [pc, #532]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	2b08      	cmp	r3, #8
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x108>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d157      	bne.n	8004454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e242      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x74>
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6f      	ldr	r2, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b6d      	ldr	r3, [pc, #436]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6c      	ldr	r2, [pc, #432]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043e4:	4b69      	ldr	r3, [pc, #420]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a68      	ldr	r2, [pc, #416]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fd fa30 	bl	8001868 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd fa2c 	bl	8001868 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e207      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xc0>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fa1c 	bl	8001868 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fa18 	bl	8001868 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1f3      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	4b51      	ldr	r3, [pc, #324]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0xe8>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d063      	beq.n	800452a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	2b08      	cmp	r3, #8
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_OscConfig+0x240>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1c7      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	e03a      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x244>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd f9d1 	bl	8001868 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd f9cd 	bl	8001868 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1a8      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4925      	ldr	r1, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x244>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd f9b0 	bl	8001868 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd f9ac 	bl	8001868 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e187      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d036      	beq.n	80045a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_RCC_OscConfig+0x248>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd f990 	bl	8001868 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd f98c 	bl	8001868 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e167      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x200>
 800456a:	e01b      	b.n	80045a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x248>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd f979 	bl	8001868 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e00e      	b.n	8004598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd f975 	bl	8001868 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d907      	bls.n	8004598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e150      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 800458c:	40023800 	.word	0x40023800
 8004590:	42470000 	.word	0x42470000
 8004594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b88      	ldr	r3, [pc, #544]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8097 	beq.w	80046e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	4a7c      	ldr	r2, [pc, #496]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	; 0x40
 80045d2:	4b7a      	ldr	r3, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b74      	ldr	r3, [pc, #464]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a73      	ldr	r2, [pc, #460]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f935 	bl	8001868 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd f931 	bl	8001868 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e10c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x2ea>
 8004628:	4b64      	ldr	r3, [pc, #400]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
 8004634:	e01c      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x30c>
 800463e:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a5e      	ldr	r2, [pc, #376]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	4b5c      	ldr	r3, [pc, #368]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5b      	ldr	r2, [pc, #364]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004658:	4b58      	ldr	r3, [pc, #352]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a57      	ldr	r2, [pc, #348]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	4b55      	ldr	r3, [pc, #340]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a54      	ldr	r2, [pc, #336]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0304 	bic.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd f8f6 	bl	8001868 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fd f8f2 	bl	8001868 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0cb      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ee      	beq.n	8004680 <HAL_RCC_OscConfig+0x334>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fd f8e0 	bl	8001868 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fd f8dc 	bl	8001868 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0b5      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	4a38      	ldr	r2, [pc, #224]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a1 	beq.w	800482c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d05c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d141      	bne.n	8004782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd f8b0 	bl	8001868 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd f8ac 	bl	8001868 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e087      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	491b      	ldr	r1, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fd f885 	bl	8001868 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7fd f881 	bl	8001868 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e05c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x416>
 8004780:	e054      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fd f86e 	bl	8001868 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd f86a 	bl	8001868 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e045      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x444>
 80047ae:	e03d      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e038      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000
 80047c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x4ec>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d028      	beq.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d121      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11a      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004800:	4293      	cmp	r3, r2
 8004802:	d111      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d107      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0cc      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90c      	bls.n	8004878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b63      	ldr	r3, [pc, #396]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0b8      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004890:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a58      	ldr	r2, [pc, #352]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800489a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a8:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	494d      	ldr	r1, [pc, #308]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d044      	beq.n	800495c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d119      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e067      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4934      	ldr	r1, [pc, #208]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800492c:	f7fc ff9c 	bl	8001868 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fc ff98 	bl	8001868 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e04f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d20c      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e032      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4916      	ldr	r1, [pc, #88]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	490e      	ldr	r1, [pc, #56]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049c2:	f000 f821 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	490a      	ldr	r1, [pc, #40]	; (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	5ccb      	ldrb	r3, [r1, r3]
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc fefc 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023c00 	.word	0x40023c00
 80049f8:	40023800 	.word	0x40023800
 80049fc:	0800a1c4 	.word	0x0800a1c4
 8004a00:	20000064 	.word	0x20000064
 8004a04:	20000068 	.word	0x20000068

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b094      	sub	sp, #80	; 0x50
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	2300      	movs	r3, #0
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	2300      	movs	r3, #0
 8004a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d00d      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x40>
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	f200 80e1 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3a:	e0db      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a40:	e0db      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a42:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a46:	e0d8      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a48:	4b6f      	ldr	r3, [pc, #444]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a52:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d063      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	2200      	movs	r2, #0
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	0159      	lsls	r1, r3, #5
 8004a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8c:	0150      	lsls	r0, r2, #5
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4621      	mov	r1, r4
 8004a94:	1a51      	subs	r1, r2, r1
 8004a96:	6139      	str	r1, [r7, #16]
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aac:	4659      	mov	r1, fp
 8004aae:	018b      	lsls	r3, r1, #6
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	018a      	lsls	r2, r1, #6
 8004aba:	4651      	mov	r1, sl
 8004abc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	eb18 0303 	adds.w	r3, r8, r3
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	eb49 0303 	adc.w	r3, r9, r3
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004afa:	4629      	mov	r1, r5
 8004afc:	028b      	lsls	r3, r1, #10
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b04:	4621      	mov	r1, r4
 8004b06:	028a      	lsls	r2, r1, #10
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0e:	2200      	movs	r2, #0
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b18:	f7fb fbaa 	bl	8000270 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	e058      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4611      	mov	r1, r2
 8004b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b52:	0150      	lsls	r0, r2, #5
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b78:	ebb2 040a 	subs.w	r4, r2, sl
 8004b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	00eb      	lsls	r3, r5, #3
 8004b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	4614      	mov	r4, r2
 8004b92:	461d      	mov	r5, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	18e3      	adds	r3, r4, r3
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	028b      	lsls	r3, r1, #10
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb8:	4621      	mov	r1, r4
 8004bba:	028a      	lsls	r2, r1, #10
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bcc:	f7fb fb50 	bl	8000270 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3750      	adds	r7, #80	; 0x50
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400

08004c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000064 	.word	0x20000064

08004c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c2c:	f7ff fff0 	bl	8004c10 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	0a9b      	lsrs	r3, r3, #10
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	0800a1d4 	.word	0x0800a1d4

08004c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e07b      	b.n	8004d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c72:	d009      	beq.n	8004c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	61da      	str	r2, [r3, #28]
 8004c7a:	e005      	b.n	8004c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fc8c 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	ea42 0103 	orr.w	r1, r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0104 	and.w	r1, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0210 	and.w	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d62:	b084      	sub	sp, #16
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	f107 001c 	add.w	r0, r7, #28
 8004d70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d122      	bne.n	8004dc0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fb1b 	bl	80063f0 <USB_CoreReset>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	e01a      	b.n	8004df6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 fb0f 	bl	80063f0 <USB_CoreReset>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
 8004de8:	e005      	b.n	8004df6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10b      	bne.n	8004e14 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f043 0206 	orr.w	r2, r3, #6
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e20:	b004      	add	sp, #16
 8004e22:	4770      	bx	lr

08004e24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d165      	bne.n	8004f04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a41      	ldr	r2, [pc, #260]	; (8004f40 <USB_SetTurnaroundTime+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d906      	bls.n	8004e4e <USB_SetTurnaroundTime+0x2a>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <USB_SetTurnaroundTime+0x120>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d202      	bcs.n	8004e4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e48:	230f      	movs	r3, #15
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e062      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a3c      	ldr	r2, [pc, #240]	; (8004f44 <USB_SetTurnaroundTime+0x120>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d306      	bcc.n	8004e64 <USB_SetTurnaroundTime+0x40>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a3b      	ldr	r2, [pc, #236]	; (8004f48 <USB_SetTurnaroundTime+0x124>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d202      	bcs.n	8004e64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e5e:	230e      	movs	r3, #14
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e057      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <USB_SetTurnaroundTime+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d306      	bcc.n	8004e7a <USB_SetTurnaroundTime+0x56>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	; (8004f4c <USB_SetTurnaroundTime+0x128>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d202      	bcs.n	8004e7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e74:	230d      	movs	r3, #13
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e04c      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <USB_SetTurnaroundTime+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d306      	bcc.n	8004e90 <USB_SetTurnaroundTime+0x6c>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a32      	ldr	r2, [pc, #200]	; (8004f50 <USB_SetTurnaroundTime+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e041      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a2f      	ldr	r2, [pc, #188]	; (8004f50 <USB_SetTurnaroundTime+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d906      	bls.n	8004ea6 <USB_SetTurnaroundTime+0x82>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a2e      	ldr	r2, [pc, #184]	; (8004f54 <USB_SetTurnaroundTime+0x130>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d802      	bhi.n	8004ea6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ea0:	230b      	movs	r3, #11
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e036      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <USB_SetTurnaroundTime+0x130>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d906      	bls.n	8004ebc <USB_SetTurnaroundTime+0x98>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a29      	ldr	r2, [pc, #164]	; (8004f58 <USB_SetTurnaroundTime+0x134>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e02b      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <USB_SetTurnaroundTime+0x134>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d906      	bls.n	8004ed2 <USB_SetTurnaroundTime+0xae>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <USB_SetTurnaroundTime+0x138>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d202      	bcs.n	8004ed2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ecc:	2309      	movs	r3, #9
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e020      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <USB_SetTurnaroundTime+0x138>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d306      	bcc.n	8004ee8 <USB_SetTurnaroundTime+0xc4>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <USB_SetTurnaroundTime+0x13c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e015      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <USB_SetTurnaroundTime+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d906      	bls.n	8004efe <USB_SetTurnaroundTime+0xda>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <USB_SetTurnaroundTime+0x140>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d202      	bcs.n	8004efe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef8:	2307      	movs	r3, #7
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e00a      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004efe:	2306      	movs	r3, #6
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e007      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f0a:	2309      	movs	r3, #9
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e001      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f10:	2309      	movs	r3, #9
 8004f12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	00d8acbf 	.word	0x00d8acbf
 8004f44:	00e4e1c0 	.word	0x00e4e1c0
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	01067380 	.word	0x01067380
 8004f50:	011a499f 	.word	0x011a499f
 8004f54:	01312cff 	.word	0x01312cff
 8004f58:	014ca43f 	.word	0x014ca43f
 8004f5c:	016e3600 	.word	0x016e3600
 8004f60:	01a6ab1f 	.word	0x01a6ab1f
 8004f64:	01e84800 	.word	0x01e84800

08004f68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d115      	bne.n	8004ffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f7fc fc50 	bl	8001880 <HAL_Delay>
      ms++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 f972 	bl	80062d0 <USB_GetMode>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d01e      	beq.n	8005030 <USB_SetCurrentMode+0x84>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b31      	cmp	r3, #49	; 0x31
 8004ff6:	d9f0      	bls.n	8004fda <USB_SetCurrentMode+0x2e>
 8004ff8:	e01a      	b.n	8005030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d115      	bne.n	800502c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800500c:	2001      	movs	r0, #1
 800500e:	f7fc fc37 	bl	8001880 <HAL_Delay>
      ms++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 f959 	bl	80062d0 <USB_GetMode>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <USB_SetCurrentMode+0x84>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b31      	cmp	r3, #49	; 0x31
 8005028:	d9f0      	bls.n	800500c <USB_SetCurrentMode+0x60>
 800502a:	e001      	b.n	8005030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e005      	b.n	800503c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b32      	cmp	r3, #50	; 0x32
 8005034:	d101      	bne.n	800503a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005044:	b084      	sub	sp, #16
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e009      	b.n	8005078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3340      	adds	r3, #64	; 0x40
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	2200      	movs	r2, #0
 8005070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0e      	cmp	r3, #14
 800507c:	d9f2      	bls.n	8005064 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11c      	bne.n	80050be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
 80050bc:	e00b      	b.n	80050d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	4619      	mov	r1, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	461a      	mov	r2, r3
 80050f2:	680b      	ldr	r3, [r1, #0]
 80050f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10c      	bne.n	8005116 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f945 	bl	8005394 <USB_SetDevSpeed>
 800510a:	e008      	b.n	800511e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800510c:	2101      	movs	r1, #1
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f940 	bl	8005394 <USB_SetDevSpeed>
 8005114:	e003      	b.n	800511e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005116:	2103      	movs	r1, #3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f93b 	bl	8005394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800511e:	2110      	movs	r1, #16
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8f3 	bl	800530c <USB_FlushTxFifo>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f90f 	bl	8005354 <USB_FlushRxFifo>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005146:	461a      	mov	r2, r3
 8005148:	2300      	movs	r3, #0
 800514a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	461a      	mov	r2, r3
 8005154:	2300      	movs	r3, #0
 8005156:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	e043      	b.n	80051f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005180:	d118      	bne.n	80051b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e013      	b.n	80051c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	461a      	mov	r2, r3
 80051ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e008      	b.n	80051c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	461a      	mov	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	461a      	mov	r2, r3
 80051e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3301      	adds	r3, #1
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3b7      	bcc.n	800516a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e043      	b.n	8005288 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005216:	d118      	bne.n	800524a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e013      	b.n	800525c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	e008      	b.n	800525c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	2300      	movs	r3, #0
 800526c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005280:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	429a      	cmp	r2, r3
 800528e:	d3b7      	bcc.n	8005200 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f043 0210 	orr.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <USB_DevInit+0x2c4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	803c3800 	.word	0x803c3800

0800530c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	019b      	lsls	r3, r3, #6
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <USB_FlushTxFifo+0x44>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e006      	b.n	8005344 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	d0f1      	beq.n	8005326 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2210      	movs	r2, #16
 8005364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushRxFifo+0x3c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d0f1      	beq.n	8005366 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0306 	and.w	r3, r3, #6
 80053de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
 80053ea:	e00a      	b.n	8005402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d002      	beq.n	80053f8 <USB_GetDevSpeed+0x32>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d102      	bne.n	80053fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053f8:	2302      	movs	r3, #2
 80053fa:	75fb      	strb	r3, [r7, #23]
 80053fc:	e001      	b.n	8005402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053fe:	230f      	movs	r3, #15
 8005400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
}
 8005404:	4618      	mov	r0, r3
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d13a      	bne.n	80054a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	b29b      	uxth	r3, r3
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544a:	4313      	orrs	r3, r2
 800544c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d155      	bne.n	8005510 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	059b      	lsls	r3, r3, #22
 8005486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005488:	4313      	orrs	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e036      	b.n	8005510 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	2101      	movs	r1, #1
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11a      	bne.n	8005510 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	78db      	ldrb	r3, [r3, #3]
 80054f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054f6:	430b      	orrs	r3, r1
 80054f8:	4313      	orrs	r3, r2
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d161      	bne.n	8005600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005552:	d11f      	bne.n	8005594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4013      	ands	r3, r2
 80055b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d8:	4013      	ands	r3, r2
 80055da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0159      	lsls	r1, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	440b      	add	r3, r1
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	4619      	mov	r1, r3
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <USB_DeactivateEndpoint+0x1b0>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]
 80055fe:	e060      	b.n	80056c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005616:	d11f      	bne.n	8005658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	43db      	mvns	r3, r3
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005678:	4013      	ands	r3, r2
 800567a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	2101      	movs	r1, #1
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	43db      	mvns	r3, r3
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800569c:	4013      	ands	r3, r2
 800569e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	0159      	lsls	r1, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	4619      	mov	r1, r3
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <USB_DeactivateEndpoint+0x1b4>)
 80056be:	4013      	ands	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	ec337800 	.word	0xec337800
 80056d4:	eff37800 	.word	0xeff37800

080056d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f040 815c 	bne.w	80059b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d132      	bne.n	8005768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005720:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	0cdb      	lsrs	r3, r3, #19
 8005762:	04db      	lsls	r3, r3, #19
 8005764:	6113      	str	r3, [r2, #16]
 8005766:	e074      	b.n	8005852 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005782:	0cdb      	lsrs	r3, r3, #19
 8005784:	04db      	lsls	r3, r3, #19
 8005786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	440b      	add	r3, r1
 80057c4:	1e59      	subs	r1, r3, #1
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057d0:	4b9d      	ldr	r3, [pc, #628]	; (8005a48 <USB_EPStartXfer+0x370>)
 80057d2:	400b      	ands	r3, r1
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	0148      	lsls	r0, r1, #5
 80057d8:	69f9      	ldr	r1, [r7, #28]
 80057da:	4401      	add	r1, r0
 80057dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057e0:	4313      	orrs	r3, r2
 80057e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	0148      	lsls	r0, r1, #5
 80057fe:	69f9      	ldr	r1, [r7, #28]
 8005800:	4401      	add	r1, r0
 8005802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11f      	bne.n	8005852 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005830:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005850:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d14b      	bne.n	80058f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	78db      	ldrb	r3, [r3, #3]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d128      	bne.n	80058ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d110      	bne.n	80058ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e00f      	b.n	80058ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e12f      	b.n	8005b50 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800590e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	78db      	ldrb	r3, [r3, #3]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d015      	beq.n	8005944 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8117 	beq.w	8005b50 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	2101      	movs	r1, #1
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	69f9      	ldr	r1, [r7, #28]
 800593a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593e:	4313      	orrs	r3, r2
 8005940:	634b      	str	r3, [r1, #52]	; 0x34
 8005942:	e105      	b.n	8005b50 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d110      	bne.n	8005976 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e00f      	b.n	8005996 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68d9      	ldr	r1, [r3, #12]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	b298      	uxth	r0, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	4603      	mov	r3, r0
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa2b 	bl	8005e06 <USB_WritePacket>
 80059b0:	e0ce      	b.n	8005b50 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059cc:	0cdb      	lsrs	r3, r3, #19
 80059ce:	04db      	lsls	r3, r3, #19
 80059d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d126      	bne.n	8005a4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	0148      	lsls	r0, r1, #5
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	4401      	add	r1, r0
 8005a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a42:	6113      	str	r3, [r2, #16]
 8005a44:	e036      	b.n	8005ab4 <USB_EPStartXfer+0x3dc>
 8005a46:	bf00      	nop
 8005a48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	04d9      	lsls	r1, r3, #19
 8005a74:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <USB_EPStartXfer+0x484>)
 8005a76:	400b      	ands	r3, r1
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	0148      	lsls	r0, r1, #5
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	4401      	add	r1, r0
 8005a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	8af9      	ldrh	r1, [r7, #22]
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	0148      	lsls	r0, r1, #5
 8005aa8:	69f9      	ldr	r1, [r7, #28]
 8005aaa:	4401      	add	r1, r0
 8005aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d10d      	bne.n	8005ad6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68d9      	ldr	r1, [r3, #12]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	78db      	ldrb	r3, [r3, #3]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d128      	bne.n	8005b30 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d110      	bne.n	8005b10 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e00f      	b.n	8005b30 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	1ff80000 	.word	0x1ff80000

08005b60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 80cd 	bne.w	8005d1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d132      	bne.n	8005bf0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	0cdb      	lsrs	r3, r3, #19
 8005bea:	04db      	lsls	r3, r3, #19
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	e04e      	b.n	8005c8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	0cdb      	lsrs	r3, r3, #19
 8005c0c:	04db      	lsls	r3, r3, #19
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7e:	6939      	ldr	r1, [r7, #16]
 8005c80:	0148      	lsls	r0, r1, #5
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	4401      	add	r1, r0
 8005c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d11e      	bne.n	8005cd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e092      	b.n	8005df8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d07e      	beq.n	8005df8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d16:	4313      	orrs	r3, r2
 8005d18:	634b      	str	r3, [r1, #52]	; 0x34
 8005d1a:	e06d      	b.n	8005df8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d36:	0cdb      	lsrs	r3, r3, #19
 8005d38:	04db      	lsls	r3, r3, #19
 8005d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005da6:	6939      	ldr	r1, [r7, #16]
 8005da8:	0148      	lsls	r0, r1, #5
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	4401      	add	r1, r0
 8005dae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005db2:	4313      	orrs	r3, r2
 8005db4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10d      	bne.n	8005dd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	68d9      	ldr	r1, [r3, #12]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b089      	sub	sp, #36	; 0x24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	4611      	mov	r1, r2
 8005e12:	461a      	mov	r2, r3
 8005e14:	460b      	mov	r3, r1
 8005e16:	71fb      	strb	r3, [r7, #7]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d123      	bne.n	8005e74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e2c:	88bb      	ldrh	r3, [r7, #4]
 8005e2e:	3303      	adds	r3, #3
 8005e30:	089b      	lsrs	r3, r3, #2
 8005e32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	e018      	b.n	8005e6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	031a      	lsls	r2, r3, #12
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e46:	461a      	mov	r2, r3
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3301      	adds	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3301      	adds	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3e2      	bcc.n	8005e3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3724      	adds	r7, #36	; 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b08b      	sub	sp, #44	; 0x2c
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	e014      	b.n	8005ed8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	3301      	adds	r3, #1
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	3301      	adds	r3, #1
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	623b      	str	r3, [r7, #32]
 8005ed8:	6a3a      	ldr	r2, [r7, #32]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3e6      	bcc.n	8005eae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01e      	beq.n	8005f24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	701a      	strb	r2, [r3, #0]
      i++;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	3301      	adds	r3, #1
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f18:	8bfb      	ldrh	r3, [r7, #30]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f1e:	8bfb      	ldrh	r3, [r7, #30]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ea      	bne.n	8005efa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	372c      	adds	r7, #44	; 0x2c
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d12c      	bne.n	8005fa8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db12      	blt.n	8005f86 <USB_EPSetStall+0x54>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00f      	beq.n	8005f86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e02b      	b.n	8006000 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db12      	blt.n	8005fe0 <USB_EPSetStall+0xae>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00f      	beq.n	8005fe0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ffe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d128      	bne.n	800607c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d003      	beq.n	800605a <USB_EPClearStall+0x4c>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	78db      	ldrb	r3, [r3, #3]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d138      	bne.n	80060cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e027      	b.n	80060cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800609a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <USB_EPClearStall+0x9e>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	78db      	ldrb	r3, [r3, #3]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d10f      	bne.n	80060cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006140:	f023 0303 	bic.w	r3, r3, #3
 8006144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f043 0302 	orr.w	r3, r3, #2
 800619a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4013      	ands	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061c2:	68fb      	ldr	r3, [r7, #12]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	0c1b      	lsrs	r3, r3, #16
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	4013      	ands	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	b29b      	uxth	r3, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	4013      	ands	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006266:	68bb      	ldr	r3, [r7, #8]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	01db      	lsls	r3, r3, #7
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4013      	ands	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062c2:	68bb      	ldr	r3, [r7, #8]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0301 	and.w	r3, r3, #1
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006322:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	460b      	mov	r3, r1
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	333c      	adds	r3, #60	; 0x3c
 800634a:	3304      	adds	r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4a26      	ldr	r2, [pc, #152]	; (80063ec <USB_EP0_OutStart+0xb8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d90a      	bls.n	800636e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006368:	d101      	bne.n	800636e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e037      	b.n	80063de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800638c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639c:	f043 0318 	orr.w	r3, r3, #24
 80063a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063b6:	7afb      	ldrb	r3, [r7, #11]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10f      	bne.n	80063dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	4f54300a 	.word	0x4f54300a

080063f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <USB_CoreReset+0x60>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e01a      	b.n	8006442 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	daf3      	bge.n	80063fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f043 0201 	orr.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	4a09      	ldr	r2, [pc, #36]	; (8006450 <USB_CoreReset+0x60>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e006      	b.n	8006442 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d0f1      	beq.n	8006424 <USB_CoreReset+0x34>

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	00030d40 	.word	0x00030d40

08006454 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006460:	2010      	movs	r0, #16
 8006462:	f001 ff0d 	bl	8008280 <USBD_static_malloc>
 8006466:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006476:	2302      	movs	r3, #2
 8006478:	e01b      	b.n	80064b2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	7c1b      	ldrb	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2207      	movs	r2, #7
 800648e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006490:	e002      	b.n	8006498 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220a      	movs	r2, #10
 8006496:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006498:	2304      	movs	r3, #4
 800649a:	2203      	movs	r2, #3
 800649c:	2181      	movs	r1, #129	; 0x81
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fddd 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80064c6:	2181      	movs	r1, #129	; 0x81
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fdee 	bl	80080aa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fed6 	bl	800829c <USBD_static_free>
    pdev->pClassData = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006514:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	e0e8      	b.n	80066fa <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006530:	2b00      	cmp	r3, #0
 8006532:	d046      	beq.n	80065c2 <USBD_HID_Setup+0xbe>
 8006534:	2b20      	cmp	r3, #32
 8006536:	f040 80d8 	bne.w	80066ea <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	3b02      	subs	r3, #2
 8006540:	2b09      	cmp	r3, #9
 8006542:	d836      	bhi.n	80065b2 <USBD_HID_Setup+0xae>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <USBD_HID_Setup+0x48>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	080065a3 	.word	0x080065a3
 8006550:	08006583 	.word	0x08006583
 8006554:	080065b3 	.word	0x080065b3
 8006558:	080065b3 	.word	0x080065b3
 800655c:	080065b3 	.word	0x080065b3
 8006560:	080065b3 	.word	0x080065b3
 8006564:	080065b3 	.word	0x080065b3
 8006568:	080065b3 	.word	0x080065b3
 800656c:	08006591 	.word	0x08006591
 8006570:	08006575 	.word	0x08006575
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]
          break;
 8006580:	e01e      	b.n	80065c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fa22 	bl	80079d2 <USBD_CtlSendData>
          break;
 800658e:	e017      	b.n	80065c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	b29b      	uxth	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	605a      	str	r2, [r3, #4]
          break;
 80065a0:	e00e      	b.n	80065c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	2201      	movs	r2, #1
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fa11 	bl	80079d2 <USBD_CtlSendData>
          break;
 80065b0:	e006      	b.n	80065c0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f99b 	bl	80078f0 <USBD_CtlError>
          ret = USBD_FAIL;
 80065ba:	2303      	movs	r3, #3
 80065bc:	75fb      	strb	r3, [r7, #23]
          break;
 80065be:	bf00      	nop
      }
      break;
 80065c0:	e09a      	b.n	80066f8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b0b      	cmp	r3, #11
 80065c8:	f200 8086 	bhi.w	80066d8 <USBD_HID_Setup+0x1d4>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <USBD_HID_Setup+0xd0>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006605 	.word	0x08006605
 80065d8:	080066e7 	.word	0x080066e7
 80065dc:	080066d9 	.word	0x080066d9
 80065e0:	080066d9 	.word	0x080066d9
 80065e4:	080066d9 	.word	0x080066d9
 80065e8:	080066d9 	.word	0x080066d9
 80065ec:	0800662f 	.word	0x0800662f
 80065f0:	080066d9 	.word	0x080066d9
 80065f4:	080066d9 	.word	0x080066d9
 80065f8:	080066d9 	.word	0x080066d9
 80065fc:	08006687 	.word	0x08006687
 8006600:	080066b1 	.word	0x080066b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d107      	bne.n	8006620 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006610:	f107 030a 	add.w	r3, r7, #10
 8006614:	2202      	movs	r2, #2
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f9da 	bl	80079d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800661e:	e063      	b.n	80066e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f964 	bl	80078f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	75fb      	strb	r3, [r7, #23]
          break;
 800662c:	e05c      	b.n	80066e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	885b      	ldrh	r3, [r3, #2]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b22      	cmp	r3, #34	; 0x22
 8006638:	d108      	bne.n	800664c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	88db      	ldrh	r3, [r3, #6]
 800663e:	2b8d      	cmp	r3, #141	; 0x8d
 8006640:	bf28      	it	cs
 8006642:	238d      	movcs	r3, #141	; 0x8d
 8006644:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006646:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <USBD_HID_Setup+0x200>)
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	e015      	b.n	8006678 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b21      	cmp	r3, #33	; 0x21
 8006656:	d108      	bne.n	800666a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006658:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <USBD_HID_Setup+0x204>)
 800665a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	88db      	ldrh	r3, [r3, #6]
 8006660:	2b09      	cmp	r3, #9
 8006662:	bf28      	it	cs
 8006664:	2309      	movcs	r3, #9
 8006666:	82bb      	strh	r3, [r7, #20]
 8006668:	e006      	b.n	8006678 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f93f 	bl	80078f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	75fb      	strb	r3, [r7, #23]
            break;
 8006676:	e037      	b.n	80066e8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006678:	8abb      	ldrh	r3, [r7, #20]
 800667a:	461a      	mov	r2, r3
 800667c:	6939      	ldr	r1, [r7, #16]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f9a7 	bl	80079d2 <USBD_CtlSendData>
          break;
 8006684:	e030      	b.n	80066e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d107      	bne.n	80066a2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3308      	adds	r3, #8
 8006696:	2201      	movs	r2, #1
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 f999 	bl	80079d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066a0:	e022      	b.n	80066e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f923 	bl	80078f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	75fb      	strb	r3, [r7, #23]
          break;
 80066ae:	e01b      	b.n	80066e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d106      	bne.n	80066ca <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066c8:	e00e      	b.n	80066e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f90f 	bl	80078f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80066d2:	2303      	movs	r3, #3
 80066d4:	75fb      	strb	r3, [r7, #23]
          break;
 80066d6:	e007      	b.n	80066e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f908 	bl	80078f0 <USBD_CtlError>
          ret = USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	75fb      	strb	r3, [r7, #23]
          break;
 80066e4:	e000      	b.n	80066e8 <USBD_HID_Setup+0x1e4>
          break;
 80066e6:	bf00      	nop
      }
      break;
 80066e8:	e006      	b.n	80066f8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 f8ff 	bl	80078f0 <USBD_CtlError>
      ret = USBD_FAIL;
 80066f2:	2303      	movs	r3, #3
 80066f4:	75fb      	strb	r3, [r7, #23]
      break;
 80066f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	2000012c 	.word	0x2000012c
 8006708:	20000114 	.word	0x20000114

0800670c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006720:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006728:	2303      	movs	r3, #3
 800672a:	e013      	b.n	8006754 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b03      	cmp	r3, #3
 8006736:	d10c      	bne.n	8006752 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d108      	bne.n	8006752 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2201      	movs	r2, #1
 8006744:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	2181      	movs	r1, #129	; 0x81
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 fd54 	bl	80081fa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2222      	movs	r2, #34	; 0x22
 8006768:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	200000a8 	.word	0x200000a8

0800677c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2222      	movs	r2, #34	; 0x22
 8006788:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800678a:	4b03      	ldr	r3, [pc, #12]	; (8006798 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	200000cc 	.word	0x200000cc

0800679c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2222      	movs	r2, #34	; 0x22
 80067a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	200000f0 	.word	0x200000f0

080067bc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ce:	2200      	movs	r2, #0
 80067d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	220a      	movs	r2, #10
 80067ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80067ee:	4b03      	ldr	r3, [pc, #12]	; (80067fc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000120 	.word	0x20000120

08006800 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	e01f      	b.n	8006858 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	79fa      	ldrb	r2, [r7, #7]
 800684a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 fb9f 	bl	8007f90 <USBD_LL_Init>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006856:	7dfb      	ldrb	r3, [r7, #23]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	e016      	b.n	80068a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	f107 020e 	add.w	r2, r7, #14
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
 800689c:	4602      	mov	r2, r0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fbb6 	bl	8008028 <USBD_LL_Start>
 80068bc:	4603      	mov	r3, r0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	4611      	mov	r1, r2
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800690a:	7bfb      	ldrb	r3, [r7, #15]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	4611      	mov	r1, r2
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
  }

  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 ff90 	bl	800787c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2b02      	cmp	r3, #2
 800697e:	d01a      	beq.n	80069b6 <USBD_LL_SetupStage+0x72>
 8006980:	2b02      	cmp	r3, #2
 8006982:	d822      	bhi.n	80069ca <USBD_LL_SetupStage+0x86>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <USBD_LL_SetupStage+0x4a>
 8006988:	2b01      	cmp	r3, #1
 800698a:	d00a      	beq.n	80069a2 <USBD_LL_SetupStage+0x5e>
 800698c:	e01d      	b.n	80069ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa62 	bl	8006e60 <USBD_StdDevReq>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
      break;
 80069a0:	e020      	b.n	80069e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fac6 	bl	8006f3c <USBD_StdItfReq>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e016      	b.n	80069e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb05 	bl	8006fce <USBD_StdEPReq>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
      break;
 80069c8:	e00c      	b.n	80069e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fb85 	bl	80080e8 <USBD_LL_StallEP>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
      break;
 80069e2:	bf00      	nop
  }

  return ret;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	460b      	mov	r3, r1
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d138      	bne.n	8006a74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d14a      	bne.n	8006aaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d913      	bls.n	8006a48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	1ad2      	subs	r2, r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4293      	cmp	r3, r2
 8006a38:	bf28      	it	cs
 8006a3a:	4613      	movcs	r3, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fff2 	bl	8007a2a <USBD_CtlContinueRx>
 8006a46:	e030      	b.n	8006aaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d10b      	bne.n	8006a6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 ffed 	bl	8007a4c <USBD_CtlSendStatus>
 8006a72:	e01a      	b.n	8006aaa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d114      	bne.n	8006aaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	7afa      	ldrb	r2, [r7, #11]
 8006a96:	4611      	mov	r1, r2
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	4798      	blx	r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	e000      	b.n	8006aac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	460b      	mov	r3, r1
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d16b      	bne.n	8006ba0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3314      	adds	r3, #20
 8006acc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d156      	bne.n	8006b86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d914      	bls.n	8006b0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	1ad2      	subs	r2, r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 ff84 	bl	8007a08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b00:	2300      	movs	r3, #0
 8006b02:	2200      	movs	r2, #0
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 fb98 	bl	800823c <USBD_LL_PrepareReceive>
 8006b0c:	e03b      	b.n	8006b86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d11c      	bne.n	8006b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d316      	bcc.n	8006b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d20f      	bcs.n	8006b54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 ff65 	bl	8007a08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b46:	2300      	movs	r3, #0
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f001 fb75 	bl	800823c <USBD_LL_PrepareReceive>
 8006b52:	e018      	b.n	8006b86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d10b      	bne.n	8006b78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b78:	2180      	movs	r1, #128	; 0x80
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 fab4 	bl	80080e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 ff76 	bl	8007a72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d122      	bne.n	8006bd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fe98 	bl	80068c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b9e:	e01a      	b.n	8006bd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d114      	bne.n	8006bd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	7afa      	ldrb	r2, [r7, #11]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	4798      	blx	r3
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	e000      	b.n	8006bd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e02f      	b.n	8006c74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00f      	beq.n	8006c3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6852      	ldr	r2, [r2, #4]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	4611      	mov	r1, r2
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	2200      	movs	r2, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fa0a 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f9fc 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d106      	bne.n	8006cea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e012      	b.n	8006d34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d10b      	bne.n	8006d32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e014      	b.n	8006d80 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d10d      	bne.n	8006d7e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e014      	b.n	8006dcc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d10d      	bne.n	8006dca <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6852      	ldr	r2, [r2, #4]
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	4611      	mov	r1, r2
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
  }

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b087      	sub	sp, #28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e40:	8a3b      	ldrh	r3, [r7, #16]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	b21a      	sxth	r2, r3
 8006e46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	b21b      	sxth	r3, r3
 8006e4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e50:	89fb      	ldrh	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d005      	beq.n	8006e86 <USBD_StdDevReq+0x26>
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d853      	bhi.n	8006f26 <USBD_StdDevReq+0xc6>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <USBD_StdDevReq+0x3a>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d14f      	bne.n	8006f26 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e04a      	b.n	8006f30 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	d83b      	bhi.n	8006f1a <USBD_StdDevReq+0xba>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <USBD_StdDevReq+0x48>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006efd 	.word	0x08006efd
 8006eac:	08006f11 	.word	0x08006f11
 8006eb0:	08006f1b 	.word	0x08006f1b
 8006eb4:	08006f07 	.word	0x08006f07
 8006eb8:	08006f1b 	.word	0x08006f1b
 8006ebc:	08006edb 	.word	0x08006edb
 8006ec0:	08006ed1 	.word	0x08006ed1
 8006ec4:	08006f1b 	.word	0x08006f1b
 8006ec8:	08006ef3 	.word	0x08006ef3
 8006ecc:	08006ee5 	.word	0x08006ee5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9de 	bl	8007294 <USBD_GetDescriptor>
          break;
 8006ed8:	e024      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb43 	bl	8007568 <USBD_SetAddress>
          break;
 8006ee2:	e01f      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb82 	bl	80075f0 <USBD_SetConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
          break;
 8006ef0:	e018      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc21 	bl	800773c <USBD_GetConfig>
          break;
 8006efa:	e013      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc52 	bl	80077a8 <USBD_GetStatus>
          break;
 8006f04:	e00e      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc81 	bl	8007810 <USBD_SetFeature>
          break;
 8006f0e:	e009      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc90 	bl	8007838 <USBD_ClrFeature>
          break;
 8006f18:	e004      	b.n	8006f24 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fce7 	bl	80078f0 <USBD_CtlError>
          break;
 8006f22:	bf00      	nop
      }
      break;
 8006f24:	e004      	b.n	8006f30 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fce1 	bl	80078f0 <USBD_CtlError>
      break;
 8006f2e:	bf00      	nop
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d005      	beq.n	8006f62 <USBD_StdItfReq+0x26>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d82f      	bhi.n	8006fba <USBD_StdItfReq+0x7e>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <USBD_StdItfReq+0x26>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d12b      	bne.n	8006fba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d81d      	bhi.n	8006fac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	889b      	ldrh	r3, [r3, #4]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d813      	bhi.n	8006fa2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	88db      	ldrh	r3, [r3, #6]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d110      	bne.n	8006fb6 <USBD_StdItfReq+0x7a>
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10d      	bne.n	8006fb6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fd56 	bl	8007a4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fa0:	e009      	b.n	8006fb6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fca3 	bl	80078f0 <USBD_CtlError>
          break;
 8006faa:	e004      	b.n	8006fb6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fc9e 	bl	80078f0 <USBD_CtlError>
          break;
 8006fb4:	e000      	b.n	8006fb8 <USBD_StdItfReq+0x7c>
          break;
 8006fb6:	bf00      	nop
      }
      break;
 8006fb8:	e004      	b.n	8006fc4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fc97 	bl	80078f0 <USBD_CtlError>
      break;
 8006fc2:	bf00      	nop
  }

  return ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	889b      	ldrh	r3, [r3, #4]
 8006fe0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d007      	beq.n	8006ffe <USBD_StdEPReq+0x30>
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	f200 8145 	bhi.w	800727e <USBD_StdEPReq+0x2b0>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00c      	beq.n	8007012 <USBD_StdEPReq+0x44>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	f040 8140 	bne.w	800727e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e13a      	b.n	8007288 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b03      	cmp	r3, #3
 8007018:	d007      	beq.n	800702a <USBD_StdEPReq+0x5c>
 800701a:	2b03      	cmp	r3, #3
 800701c:	f300 8129 	bgt.w	8007272 <USBD_StdEPReq+0x2a4>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d07f      	beq.n	8007124 <USBD_StdEPReq+0x156>
 8007024:	2b01      	cmp	r3, #1
 8007026:	d03c      	beq.n	80070a2 <USBD_StdEPReq+0xd4>
 8007028:	e123      	b.n	8007272 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d002      	beq.n	800703c <USBD_StdEPReq+0x6e>
 8007036:	2b03      	cmp	r3, #3
 8007038:	d016      	beq.n	8007068 <USBD_StdEPReq+0x9a>
 800703a:	e02c      	b.n	8007096 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <USBD_StdEPReq+0x90>
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d00a      	beq.n	800705e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 f84b 	bl	80080e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f847 	bl	80080e8 <USBD_LL_StallEP>
 800705a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800705c:	e020      	b.n	80070a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc45 	bl	80078f0 <USBD_CtlError>
              break;
 8007066:	e01b      	b.n	80070a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10e      	bne.n	800708e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <USBD_StdEPReq+0xc0>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d008      	beq.n	800708e <USBD_StdEPReq+0xc0>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	88db      	ldrh	r3, [r3, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f82d 	bl	80080e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fcdc 	bl	8007a4c <USBD_CtlSendStatus>

              break;
 8007094:	e004      	b.n	80070a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc29 	bl	80078f0 <USBD_CtlError>
              break;
 800709e:	bf00      	nop
          }
          break;
 80070a0:	e0ec      	b.n	800727c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d002      	beq.n	80070b4 <USBD_StdEPReq+0xe6>
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d016      	beq.n	80070e0 <USBD_StdEPReq+0x112>
 80070b2:	e030      	b.n	8007116 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00d      	beq.n	80070d6 <USBD_StdEPReq+0x108>
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b80      	cmp	r3, #128	; 0x80
 80070be:	d00a      	beq.n	80070d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f80f 	bl	80080e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ca:	2180      	movs	r1, #128	; 0x80
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f80b 	bl	80080e8 <USBD_LL_StallEP>
 80070d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070d4:	e025      	b.n	8007122 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fc09 	bl	80078f0 <USBD_CtlError>
              break;
 80070de:	e020      	b.n	8007122 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	885b      	ldrh	r3, [r3, #2]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11b      	bne.n	8007120 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f815 	bl	8008126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fca5 	bl	8007a4c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007114:	e004      	b.n	8007120 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fbe9 	bl	80078f0 <USBD_CtlError>
              break;
 800711e:	e000      	b.n	8007122 <USBD_StdEPReq+0x154>
              break;
 8007120:	bf00      	nop
          }
          break;
 8007122:	e0ab      	b.n	800727c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d002      	beq.n	8007136 <USBD_StdEPReq+0x168>
 8007130:	2b03      	cmp	r3, #3
 8007132:	d032      	beq.n	800719a <USBD_StdEPReq+0x1cc>
 8007134:	e097      	b.n	8007266 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <USBD_StdEPReq+0x17e>
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b80      	cmp	r3, #128	; 0x80
 8007140:	d004      	beq.n	800714c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fbd3 	bl	80078f0 <USBD_CtlError>
                break;
 800714a:	e091      	b.n	8007270 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800714c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da0b      	bge.n	800716c <USBD_StdEPReq+0x19e>
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	3310      	adds	r3, #16
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	3304      	adds	r3, #4
 800716a:	e00b      	b.n	8007184 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2202      	movs	r2, #2
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fc1d 	bl	80079d2 <USBD_CtlSendData>
              break;
 8007198:	e06a      	b.n	8007270 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800719a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da11      	bge.n	80071c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d117      	bne.n	80071ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb96 	bl	80078f0 <USBD_CtlError>
                  break;
 80071c4:	e054      	b.n	8007270 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	f003 020f 	and.w	r2, r3, #15
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb83 	bl	80078f0 <USBD_CtlError>
                  break;
 80071ea:	e041      	b.n	8007270 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da0b      	bge.n	800720c <USBD_StdEPReq+0x23e>
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	3310      	adds	r3, #16
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	3304      	adds	r3, #4
 800720a:	e00b      	b.n	8007224 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	3304      	adds	r3, #4
 8007224:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <USBD_StdEPReq+0x264>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d103      	bne.n	800723a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e00e      	b.n	8007258 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 ff90 	bl	8008164 <USBD_LL_IsStallEP>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e002      	b.n	8007258 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2202      	movs	r2, #2
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fbb7 	bl	80079d2 <USBD_CtlSendData>
              break;
 8007264:	e004      	b.n	8007270 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fb41 	bl	80078f0 <USBD_CtlError>
              break;
 800726e:	bf00      	nop
          }
          break;
 8007270:	e004      	b.n	800727c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb3b 	bl	80078f0 <USBD_CtlError>
          break;
 800727a:	bf00      	nop
      }
      break;
 800727c:	e004      	b.n	8007288 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fb35 	bl	80078f0 <USBD_CtlError>
      break;
 8007286:	bf00      	nop
  }

  return ret;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2b06      	cmp	r3, #6
 80072b6:	f200 8128 	bhi.w	800750a <USBD_GetDescriptor+0x276>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_GetDescriptor+0x2c>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072f5 	.word	0x080072f5
 80072c8:	08007335 	.word	0x08007335
 80072cc:	0800750b 	.word	0x0800750b
 80072d0:	0800750b 	.word	0x0800750b
 80072d4:	080074ab 	.word	0x080074ab
 80072d8:	080074d7 	.word	0x080074d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
      break;
 80072f2:	e112      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7c1b      	ldrb	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f107 0208 	add.w	r2, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	2202      	movs	r2, #2
 8007314:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007316:	e100      	b.n	800751a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f107 0208 	add.w	r2, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
      break;
 8007332:	e0f2      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b05      	cmp	r3, #5
 800733c:	f200 80ac 	bhi.w	8007498 <USBD_GetDescriptor+0x204>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBD_GetDescriptor+0xb4>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007361 	.word	0x08007361
 800734c:	08007395 	.word	0x08007395
 8007350:	080073c9 	.word	0x080073c9
 8007354:	080073fd 	.word	0x080073fd
 8007358:	08007431 	.word	0x08007431
 800735c:	08007465 	.word	0x08007465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	7c12      	ldrb	r2, [r2, #16]
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
 8007380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007382:	e091      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fab2 	bl	80078f0 <USBD_CtlError>
            err++;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	3301      	adds	r3, #1
 8007390:	72fb      	strb	r3, [r7, #11]
          break;
 8007392:	e089      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	7c12      	ldrb	r2, [r2, #16]
 80073ac:	f107 0108 	add.w	r1, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b6:	e077      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa98 	bl	80078f0 <USBD_CtlError>
            err++;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3301      	adds	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]
          break;
 80073c6:	e06f      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	7c12      	ldrb	r2, [r2, #16]
 80073e0:	f107 0108 	add.w	r1, r7, #8
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ea:	e05d      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa7e 	bl	80078f0 <USBD_CtlError>
            err++;
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	3301      	adds	r3, #1
 80073f8:	72fb      	strb	r3, [r7, #11]
          break;
 80073fa:	e055      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7c12      	ldrb	r2, [r2, #16]
 8007414:	f107 0108 	add.w	r1, r7, #8
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741e:	e043      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa64 	bl	80078f0 <USBD_CtlError>
            err++;
 8007428:	7afb      	ldrb	r3, [r7, #11]
 800742a:	3301      	adds	r3, #1
 800742c:	72fb      	strb	r3, [r7, #11]
          break;
 800742e:	e03b      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7c12      	ldrb	r2, [r2, #16]
 8007448:	f107 0108 	add.w	r1, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007452:	e029      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa4a 	bl	80078f0 <USBD_CtlError>
            err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
          break;
 8007462:	e021      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7c12      	ldrb	r2, [r2, #16]
 800747c:	f107 0108 	add.w	r1, r7, #8
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007486:	e00f      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa30 	bl	80078f0 <USBD_CtlError>
            err++;
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	3301      	adds	r3, #1
 8007494:	72fb      	strb	r3, [r7, #11]
          break;
 8007496:	e007      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa28 	bl	80078f0 <USBD_CtlError>
          err++;
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	3301      	adds	r3, #1
 80074a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80074a6:	bf00      	nop
      }
      break;
 80074a8:	e037      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7c1b      	ldrb	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ba:	f107 0208 	add.w	r2, r7, #8
 80074be:	4610      	mov	r0, r2
 80074c0:	4798      	blx	r3
 80074c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074c4:	e029      	b.n	800751a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa11 	bl	80078f0 <USBD_CtlError>
        err++;
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	3301      	adds	r3, #1
 80074d2:	72fb      	strb	r3, [r7, #11]
      break;
 80074d4:	e021      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7c1b      	ldrb	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10d      	bne.n	80074fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f107 0208 	add.w	r2, r7, #8
 80074ea:	4610      	mov	r0, r2
 80074ec:	4798      	blx	r3
 80074ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	2207      	movs	r2, #7
 80074f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f8:	e00f      	b.n	800751a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9f7 	bl	80078f0 <USBD_CtlError>
        err++;
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	3301      	adds	r3, #1
 8007506:	72fb      	strb	r3, [r7, #11]
      break;
 8007508:	e007      	b.n	800751a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9ef 	bl	80078f0 <USBD_CtlError>
      err++;
 8007512:	7afb      	ldrb	r3, [r7, #11]
 8007514:	3301      	adds	r3, #1
 8007516:	72fb      	strb	r3, [r7, #11]
      break;
 8007518:	bf00      	nop
  }

  if (err != 0U)
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11e      	bne.n	800755e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	88db      	ldrh	r3, [r3, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d016      	beq.n	8007556 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007528:	893b      	ldrh	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00e      	beq.n	800754c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88da      	ldrh	r2, [r3, #6]
 8007532:	893b      	ldrh	r3, [r7, #8]
 8007534:	4293      	cmp	r3, r2
 8007536:	bf28      	it	cs
 8007538:	4613      	movcs	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800753e:	893b      	ldrh	r3, [r7, #8]
 8007540:	461a      	mov	r2, r3
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fa44 	bl	80079d2 <USBD_CtlSendData>
 800754a:	e009      	b.n	8007560 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9ce 	bl	80078f0 <USBD_CtlError>
 8007554:	e004      	b.n	8007560 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa78 	bl	8007a4c <USBD_CtlSendStatus>
 800755c:	e000      	b.n	8007560 <USBD_GetDescriptor+0x2cc>
    return;
 800755e:	bf00      	nop
  }
}
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	889b      	ldrh	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d131      	bne.n	80075de <USBD_SetAddress+0x76>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d12d      	bne.n	80075de <USBD_SetAddress+0x76>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	2b7f      	cmp	r3, #127	; 0x7f
 8007588:	d829      	bhi.n	80075de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d104      	bne.n	80075ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9a3 	bl	80078f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075aa:	e01d      	b.n	80075e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7bfa      	ldrb	r2, [r7, #15]
 80075b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fdff 	bl	80081bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa44 	bl	8007a4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	e009      	b.n	80075e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075dc:	e004      	b.n	80075e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f985 	bl	80078f0 <USBD_CtlError>
  }
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b4c      	ldr	r3, [pc, #304]	; (8007738 <USBD_SetConfig+0x148>)
 8007606:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007608:	4b4b      	ldr	r3, [pc, #300]	; (8007738 <USBD_SetConfig+0x148>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d905      	bls.n	800761c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f96c 	bl	80078f0 <USBD_CtlError>
    return USBD_FAIL;
 8007618:	2303      	movs	r3, #3
 800761a:	e088      	b.n	800772e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d002      	beq.n	800762e <USBD_SetConfig+0x3e>
 8007628:	2b03      	cmp	r3, #3
 800762a:	d025      	beq.n	8007678 <USBD_SetConfig+0x88>
 800762c:	e071      	b.n	8007712 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800762e:	4b42      	ldr	r3, [pc, #264]	; (8007738 <USBD_SetConfig+0x148>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01c      	beq.n	8007670 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007636:	4b40      	ldr	r3, [pc, #256]	; (8007738 <USBD_SetConfig+0x148>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007640:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <USBD_SetConfig+0x148>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff f948 	bl	80068dc <USBD_SetClassConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f949 	bl	80078f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800765e:	e065      	b.n	800772c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9f3 	bl	8007a4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2203      	movs	r2, #3
 800766a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800766e:	e05d      	b.n	800772c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9eb 	bl	8007a4c <USBD_CtlSendStatus>
      break;
 8007676:	e059      	b.n	800772c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007678:	4b2f      	ldr	r3, [pc, #188]	; (8007738 <USBD_SetConfig+0x148>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d112      	bne.n	80076a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007688:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <USBD_SetConfig+0x148>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007692:	4b29      	ldr	r3, [pc, #164]	; (8007738 <USBD_SetConfig+0x148>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff f93b 	bl	8006914 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9d4 	bl	8007a4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076a4:	e042      	b.n	800772c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <USBD_SetConfig+0x148>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d02a      	beq.n	800770a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff f929 	bl	8006914 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076c2:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <USBD_SetConfig+0x148>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <USBD_SetConfig+0x148>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff f902 	bl	80068dc <USBD_SetClassConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00f      	beq.n	8007702 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f903 	bl	80078f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f90e 	bl	8006914 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007700:	e014      	b.n	800772c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9a2 	bl	8007a4c <USBD_CtlSendStatus>
      break;
 8007708:	e010      	b.n	800772c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f99e 	bl	8007a4c <USBD_CtlSendStatus>
      break;
 8007710:	e00c      	b.n	800772c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f8eb 	bl	80078f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <USBD_SetConfig+0x148>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff f8f7 	bl	8006914 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007726:	2303      	movs	r3, #3
 8007728:	73fb      	strb	r3, [r7, #15]
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000820 	.word	0x20000820

0800773c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	88db      	ldrh	r3, [r3, #6]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d004      	beq.n	8007758 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f8cd 	bl	80078f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007756:	e023      	b.n	80077a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	dc02      	bgt.n	800776a <USBD_GetConfig+0x2e>
 8007764:	2b00      	cmp	r3, #0
 8007766:	dc03      	bgt.n	8007770 <USBD_GetConfig+0x34>
 8007768:	e015      	b.n	8007796 <USBD_GetConfig+0x5a>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d00b      	beq.n	8007786 <USBD_GetConfig+0x4a>
 800776e:	e012      	b.n	8007796 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3308      	adds	r3, #8
 800777a:	2201      	movs	r2, #1
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f927 	bl	80079d2 <USBD_CtlSendData>
        break;
 8007784:	e00c      	b.n	80077a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3304      	adds	r3, #4
 800778a:	2201      	movs	r2, #1
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f91f 	bl	80079d2 <USBD_CtlSendData>
        break;
 8007794:	e004      	b.n	80077a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8a9 	bl	80078f0 <USBD_CtlError>
        break;
 800779e:	bf00      	nop
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d81e      	bhi.n	80077fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	88db      	ldrh	r3, [r3, #6]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d004      	beq.n	80077d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f890 	bl	80078f0 <USBD_CtlError>
        break;
 80077d0:	e01a      	b.n	8007808 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f043 0202 	orr.w	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	330c      	adds	r3, #12
 80077f2:	2202      	movs	r2, #2
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8eb 	bl	80079d2 <USBD_CtlSendData>
      break;
 80077fc:	e004      	b.n	8007808 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f875 	bl	80078f0 <USBD_CtlError>
      break;
 8007806:	bf00      	nop
  }
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	885b      	ldrh	r3, [r3, #2]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d106      	bne.n	8007830 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f90e 	bl	8007a4c <USBD_CtlSendStatus>
  }
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	2b02      	cmp	r3, #2
 800784e:	d80b      	bhi.n	8007868 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	885b      	ldrh	r3, [r3, #2]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10c      	bne.n	8007872 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f8f3 	bl	8007a4c <USBD_CtlSendStatus>
      }
      break;
 8007866:	e004      	b.n	8007872 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f840 	bl	80078f0 <USBD_CtlError>
      break;
 8007870:	e000      	b.n	8007874 <USBD_ClrFeature+0x3c>
      break;
 8007872:	bf00      	nop
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff fabb 	bl	8006e22 <SWAPBYTE>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff faae 	bl	8006e22 <SWAPBYTE>
 80078c6:	4603      	mov	r3, r0
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff faa1 	bl	8006e22 <SWAPBYTE>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	80da      	strh	r2, [r3, #6]
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078fa:	2180      	movs	r1, #128	; 0x80
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbf3 	bl	80080e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007902:	2100      	movs	r1, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fbef 	bl	80080e8 <USBD_LL_StallEP>
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d036      	beq.n	8007996 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800792c:	6938      	ldr	r0, [r7, #16]
 800792e:	f000 f836 	bl	800799e <USBD_GetLen>
 8007932:	4603      	mov	r3, r0
 8007934:	3301      	adds	r3, #1
 8007936:	b29b      	uxth	r3, r3
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	4413      	add	r3, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	701a      	strb	r2, [r3, #0]
  idx++;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	3301      	adds	r3, #1
 8007950:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	4413      	add	r3, r2
 8007958:	2203      	movs	r2, #3
 800795a:	701a      	strb	r2, [r3, #0]
  idx++;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	3301      	adds	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007962:	e013      	b.n	800798c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4413      	add	r3, r2
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3301      	adds	r3, #1
 8007974:	613b      	str	r3, [r7, #16]
    idx++;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	3301      	adds	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
    idx++;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	3301      	adds	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e7      	bne.n	8007964 <USBD_GetString+0x52>
 8007994:	e000      	b.n	8007998 <USBD_GetString+0x86>
    return;
 8007996:	bf00      	nop
  }
}
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079ae:	e005      	b.n	80079bc <USBD_GetLen+0x1e>
  {
    len++;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	3301      	adds	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f5      	bne.n	80079b0 <USBD_GetLen+0x12>
  }

  return len;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	2100      	movs	r1, #0
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fbfe 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fbed 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fbfd 	bl	800823c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2204      	movs	r2, #4
 8007a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fbc9 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a82:	2300      	movs	r3, #0
 8007a84:	2200      	movs	r2, #0
 8007a86:	2100      	movs	r1, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fbd7 	bl	800823c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	490e      	ldr	r1, [pc, #56]	; (8007ad8 <MX_USB_DEVICE_Init+0x40>)
 8007aa0:	480e      	ldr	r0, [pc, #56]	; (8007adc <MX_USB_DEVICE_Init+0x44>)
 8007aa2:	f7fe fead 	bl	8006800 <USBD_Init>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007aac:	f7f9 fa16 	bl	8000edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007ab0:	490b      	ldr	r1, [pc, #44]	; (8007ae0 <MX_USB_DEVICE_Init+0x48>)
 8007ab2:	480a      	ldr	r0, [pc, #40]	; (8007adc <MX_USB_DEVICE_Init+0x44>)
 8007ab4:	f7fe fed4 	bl	8006860 <USBD_RegisterClass>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007abe:	f7f9 fa0d 	bl	8000edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ac2:	4806      	ldr	r0, [pc, #24]	; (8007adc <MX_USB_DEVICE_Init+0x44>)
 8007ac4:	f7fe fef3 	bl	80068ae <USBD_Start>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007ace:	f7f9 fa05 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200001bc 	.word	0x200001bc
 8007adc:	20000824 	.word	0x20000824
 8007ae0:	20000070 	.word	0x20000070

08007ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2212      	movs	r2, #18
 8007af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	200001d8 	.word	0x200001d8

08007b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2204      	movs	r2, #4
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	200001ec 	.word	0x200001ec

08007b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4907      	ldr	r1, [pc, #28]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b42:	4808      	ldr	r0, [pc, #32]	; (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b44:	f7ff fee5 	bl	8007912 <USBD_GetString>
 8007b48:	e004      	b.n	8007b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4904      	ldr	r1, [pc, #16]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4e:	4805      	ldr	r0, [pc, #20]	; (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b50:	f7ff fedf 	bl	8007912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000af4 	.word	0x20000af4
 8007b64:	08008cc0 	.word	0x08008cc0

08007b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4904      	ldr	r1, [pc, #16]	; (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b78:	4804      	ldr	r0, [pc, #16]	; (8007b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b7a:	f7ff feca 	bl	8007912 <USBD_GetString>
  return USBD_StrDesc;
 8007b7e:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000af4 	.word	0x20000af4
 8007b8c:	08008cd0 	.word	0x08008cd0

08007b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	221a      	movs	r2, #26
 8007ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ba2:	f000 f843 	bl	8007c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ba6:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200001f0 	.word	0x200001f0

08007bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4907      	ldr	r1, [pc, #28]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bca:	4808      	ldr	r0, [pc, #32]	; (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bcc:	f7ff fea1 	bl	8007912 <USBD_GetString>
 8007bd0:	e004      	b.n	8007bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4904      	ldr	r1, [pc, #16]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd6:	4805      	ldr	r0, [pc, #20]	; (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd8:	f7ff fe9b 	bl	8007912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000af4 	.word	0x20000af4
 8007bec:	08008ce0 	.word	0x08008ce0

08007bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c08:	f7ff fe83 	bl	8007912 <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c14:	f7ff fe7d 	bl	8007912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000af4 	.word	0x20000af4
 8007c28:	08008cec 	.word	0x08008cec

08007c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c32:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <Get_SerialNum+0x44>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <Get_SerialNum+0x48>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <Get_SerialNum+0x4c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c52:	2208      	movs	r2, #8
 8007c54:	4909      	ldr	r1, [pc, #36]	; (8007c7c <Get_SerialNum+0x50>)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f814 	bl	8007c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	4908      	ldr	r1, [pc, #32]	; (8007c80 <Get_SerialNum+0x54>)
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f000 f80f 	bl	8007c84 <IntToUnicode>
  }
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	1fff7a10 	.word	0x1fff7a10
 8007c74:	1fff7a14 	.word	0x1fff7a14
 8007c78:	1fff7a18 	.word	0x1fff7a18
 8007c7c:	200001f2 	.word	0x200001f2
 8007c80:	20000202 	.word	0x20000202

08007c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
 8007c9a:	e027      	b.n	8007cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	0f1b      	lsrs	r3, r3, #28
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d80b      	bhi.n	8007cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0f1b      	lsrs	r3, r3, #28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3230      	adds	r2, #48	; 0x30
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e00a      	b.n	8007cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0f1b      	lsrs	r3, r3, #28
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	440b      	add	r3, r1
 8007ccc:	3237      	adds	r2, #55	; 0x37
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	3301      	adds	r3, #1
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
 8007cec:	7dfa      	ldrb	r2, [r7, #23]
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3d3      	bcc.n	8007c9c <IntToUnicode+0x18>
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08a      	sub	sp, #40	; 0x28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	605a      	str	r2, [r3, #4]
 8007d16:	609a      	str	r2, [r3, #8]
 8007d18:	60da      	str	r2, [r3, #12]
 8007d1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d24:	d13a      	bne.n	8007d9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	6313      	str	r3, [r2, #48]	; 0x30
 8007d36:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d50:	2303      	movs	r3, #3
 8007d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d54:	230a      	movs	r3, #10
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4812      	ldr	r0, [pc, #72]	; (8007da8 <HAL_PCD_MspInit+0xa4>)
 8007d60:	f7f9 fec4 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d64:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	4a0e      	ldr	r2, [pc, #56]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6e:	6353      	str	r3, [r2, #52]	; 0x34
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d78:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8007d80:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	2043      	movs	r0, #67	; 0x43
 8007d92:	f7f9 fe74 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d96:	2043      	movs	r0, #67	; 0x43
 8007d98:	f7f9 fe8d 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3728      	adds	r7, #40	; 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40023800 	.word	0x40023800
 8007da8:	40020000 	.word	0x40020000

08007dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fdbe 	bl	8006944 <USBD_LL_SetupStage>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe fdf8 	bl	80069ee <USBD_LL_DataOutStage>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	440b      	add	r3, r1
 8007e26:	3348      	adds	r3, #72	; 0x48
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7fe fe41 	bl	8006ab4 <USBD_LL_DataInStage>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe ff55 	bl	8006cf8 <USBD_LL_SOF>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e008      	b.n	8007e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d102      	bne.n	8007e7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
 8007e7c:	e001      	b.n	8007e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e7e:	f7f9 f82d 	bl	8000edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e88:	7bfa      	ldrb	r2, [r7, #15]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fef5 	bl	8006c7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe fea1 	bl	8006be0 <USBD_LL_Reset>
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fef0 	bl	8006c9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6812      	ldr	r2, [r2, #0]
 8007eca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007edc:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <HAL_PCD_SuspendCallback+0x48>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	4a03      	ldr	r2, [pc, #12]	; (8007ef0 <HAL_PCD_SuspendCallback+0x48>)
 8007ee2:	f043 0306 	orr.w	r3, r3, #6
 8007ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	e000ed00 	.word	0xe000ed00

08007ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fee0 	bl	8006cc8 <USBD_LL_Resume>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe ff2e 	bl	8006d88 <USBD_LL_IsoOUTIncomplete>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fef6 	bl	8006d3c <USBD_LL_IsoINIncomplete>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe ff34 	bl	8006dd4 <USBD_LL_DevConnected>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe ff31 	bl	8006dea <USBD_LL_DevDisconnected>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d13c      	bne.n	800801a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fa0:	4a20      	ldr	r2, [pc, #128]	; (8008024 <USBD_LL_Init+0x94>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <USBD_LL_Init+0x94>)
 8007fac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <USBD_LL_Init+0x94>)
 8007fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fb8:	4b1a      	ldr	r3, [pc, #104]	; (8008024 <USBD_LL_Init+0x94>)
 8007fba:	2204      	movs	r2, #4
 8007fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fbe:	4b19      	ldr	r3, [pc, #100]	; (8008024 <USBD_LL_Init+0x94>)
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fc4:	4b17      	ldr	r3, [pc, #92]	; (8008024 <USBD_LL_Init+0x94>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fca:	4b16      	ldr	r3, [pc, #88]	; (8008024 <USBD_LL_Init+0x94>)
 8007fcc:	2202      	movs	r2, #2
 8007fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fd0:	4b14      	ldr	r3, [pc, #80]	; (8008024 <USBD_LL_Init+0x94>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <USBD_LL_Init+0x94>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fdc:	4b11      	ldr	r3, [pc, #68]	; (8008024 <USBD_LL_Init+0x94>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <USBD_LL_Init+0x94>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fe8:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <USBD_LL_Init+0x94>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fee:	480d      	ldr	r0, [pc, #52]	; (8008024 <USBD_LL_Init+0x94>)
 8007ff0:	f7fb f841 	bl	8003076 <HAL_PCD_Init>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ffa:	f7f8 ff6f 	bl	8000edc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ffe:	2180      	movs	r1, #128	; 0x80
 8008000:	4808      	ldr	r0, [pc, #32]	; (8008024 <USBD_LL_Init+0x94>)
 8008002:	f7fc f986 	bl	8004312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	2100      	movs	r1, #0
 800800a:	4806      	ldr	r0, [pc, #24]	; (8008024 <USBD_LL_Init+0x94>)
 800800c:	f7fc f93a 	bl	8004284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008010:	2280      	movs	r2, #128	; 0x80
 8008012:	2101      	movs	r1, #1
 8008014:	4803      	ldr	r0, [pc, #12]	; (8008024 <USBD_LL_Init+0x94>)
 8008016:	f7fc f935 	bl	8004284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000cf4 	.word	0x20000cf4

08008028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800803e:	4618      	mov	r0, r3
 8008040:	f7fb f936 	bl	80032b0 <HAL_PCD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f930 	bl	80082b0 <USBD_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008054:	7bbb      	ldrb	r3, [r7, #14]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	4608      	mov	r0, r1
 8008068:	4611      	mov	r1, r2
 800806a:	461a      	mov	r2, r3
 800806c:	4603      	mov	r3, r0
 800806e:	70fb      	strb	r3, [r7, #3]
 8008070:	460b      	mov	r3, r1
 8008072:	70bb      	strb	r3, [r7, #2]
 8008074:	4613      	mov	r3, r2
 8008076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008086:	78bb      	ldrb	r3, [r7, #2]
 8008088:	883a      	ldrh	r2, [r7, #0]
 800808a:	78f9      	ldrb	r1, [r7, #3]
 800808c:	f7fb fd1a 	bl	8003ac4 <HAL_PCD_EP_Open>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f90a 	bl	80082b0 <USBD_Get_USB_Status>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fb fd63 	bl	8003b94 <HAL_PCD_EP_Close>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f8eb 	bl	80082b0 <USBD_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7fb fe23 	bl	8003d52 <HAL_PCD_EP_SetStall>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f8cc 	bl	80082b0 <USBD_Get_USB_Status>
 8008118:	4603      	mov	r3, r0
 800811a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811c:	7bbb      	ldrb	r3, [r7, #14]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f7fb fe68 	bl	8003e1a <HAL_PCD_EP_ClrStall>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f8ad 	bl	80082b0 <USBD_Get_USB_Status>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815a:	7bbb      	ldrb	r3, [r7, #14]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da0b      	bge.n	8008198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	333e      	adds	r3, #62	; 0x3e
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	e00b      	b.n	80081b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fb fc4d 	bl	8003a7a <HAL_PCD_SetAddress>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f862 	bl	80082b0 <USBD_Get_USB_Status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b086      	sub	sp, #24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	460b      	mov	r3, r1
 8008208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008218:	7af9      	ldrb	r1, [r7, #11]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	f7fb fd4e 	bl	8003cbe <HAL_PCD_EP_Transmit>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f841 	bl	80082b0 <USBD_Get_USB_Status>
 800822e:	4603      	mov	r3, r0
 8008230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008232:	7dbb      	ldrb	r3, [r7, #22]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	607a      	str	r2, [r7, #4]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	460b      	mov	r3, r1
 800824a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800825a:	7af9      	ldrb	r1, [r7, #11]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	f7fb fce2 	bl	8003c28 <HAL_PCD_EP_Receive>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f820 	bl	80082b0 <USBD_Get_USB_Status>
 8008270:	4603      	mov	r3, r0
 8008272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008274:	7dbb      	ldrb	r3, [r7, #22]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <USBD_static_malloc+0x18>)
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	200010fc 	.word	0x200010fc

0800829c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d817      	bhi.n	80082f4 <USBD_Get_USB_Status+0x44>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <USBD_Get_USB_Status+0x1c>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082e3 	.word	0x080082e3
 80082d4:	080082e9 	.word	0x080082e9
 80082d8:	080082ef 	.word	0x080082ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	e00b      	b.n	80082fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082e2:	2303      	movs	r3, #3
 80082e4:	73fb      	strb	r3, [r7, #15]
    break;
 80082e6:	e008      	b.n	80082fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082e8:	2301      	movs	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e005      	b.n	80082fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e002      	b.n	80082fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	bf00      	nop
  }
  return usb_status;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <__errno>:
 8008308:	4b01      	ldr	r3, [pc, #4]	; (8008310 <__errno+0x8>)
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	2000020c 	.word	0x2000020c

08008314 <__libc_init_array>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4d0d      	ldr	r5, [pc, #52]	; (800834c <__libc_init_array+0x38>)
 8008318:	4c0d      	ldr	r4, [pc, #52]	; (8008350 <__libc_init_array+0x3c>)
 800831a:	1b64      	subs	r4, r4, r5
 800831c:	10a4      	asrs	r4, r4, #2
 800831e:	2600      	movs	r6, #0
 8008320:	42a6      	cmp	r6, r4
 8008322:	d109      	bne.n	8008338 <__libc_init_array+0x24>
 8008324:	4d0b      	ldr	r5, [pc, #44]	; (8008354 <__libc_init_array+0x40>)
 8008326:	4c0c      	ldr	r4, [pc, #48]	; (8008358 <__libc_init_array+0x44>)
 8008328:	f000 fc8e 	bl	8008c48 <_init>
 800832c:	1b64      	subs	r4, r4, r5
 800832e:	10a4      	asrs	r4, r4, #2
 8008330:	2600      	movs	r6, #0
 8008332:	42a6      	cmp	r6, r4
 8008334:	d105      	bne.n	8008342 <__libc_init_array+0x2e>
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	f855 3b04 	ldr.w	r3, [r5], #4
 800833c:	4798      	blx	r3
 800833e:	3601      	adds	r6, #1
 8008340:	e7ee      	b.n	8008320 <__libc_init_array+0xc>
 8008342:	f855 3b04 	ldr.w	r3, [r5], #4
 8008346:	4798      	blx	r3
 8008348:	3601      	adds	r6, #1
 800834a:	e7f2      	b.n	8008332 <__libc_init_array+0x1e>
 800834c:	0800a218 	.word	0x0800a218
 8008350:	0800a218 	.word	0x0800a218
 8008354:	0800a218 	.word	0x0800a218
 8008358:	0800a21c 	.word	0x0800a21c

0800835c <memset>:
 800835c:	4402      	add	r2, r0
 800835e:	4603      	mov	r3, r0
 8008360:	4293      	cmp	r3, r2
 8008362:	d100      	bne.n	8008366 <memset+0xa>
 8008364:	4770      	bx	lr
 8008366:	f803 1b01 	strb.w	r1, [r3], #1
 800836a:	e7f9      	b.n	8008360 <memset+0x4>

0800836c <siprintf>:
 800836c:	b40e      	push	{r1, r2, r3}
 800836e:	b500      	push	{lr}
 8008370:	b09c      	sub	sp, #112	; 0x70
 8008372:	ab1d      	add	r3, sp, #116	; 0x74
 8008374:	9002      	str	r0, [sp, #8]
 8008376:	9006      	str	r0, [sp, #24]
 8008378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800837c:	4809      	ldr	r0, [pc, #36]	; (80083a4 <siprintf+0x38>)
 800837e:	9107      	str	r1, [sp, #28]
 8008380:	9104      	str	r1, [sp, #16]
 8008382:	4909      	ldr	r1, [pc, #36]	; (80083a8 <siprintf+0x3c>)
 8008384:	f853 2b04 	ldr.w	r2, [r3], #4
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	a902      	add	r1, sp, #8
 8008390:	f000 f868 	bl	8008464 <_svfiprintf_r>
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	b01c      	add	sp, #112	; 0x70
 800839c:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a0:	b003      	add	sp, #12
 80083a2:	4770      	bx	lr
 80083a4:	2000020c 	.word	0x2000020c
 80083a8:	ffff0208 	.word	0xffff0208

080083ac <__ssputs_r>:
 80083ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	688e      	ldr	r6, [r1, #8]
 80083b2:	429e      	cmp	r6, r3
 80083b4:	4682      	mov	sl, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	4690      	mov	r8, r2
 80083ba:	461f      	mov	r7, r3
 80083bc:	d838      	bhi.n	8008430 <__ssputs_r+0x84>
 80083be:	898a      	ldrh	r2, [r1, #12]
 80083c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083c4:	d032      	beq.n	800842c <__ssputs_r+0x80>
 80083c6:	6825      	ldr	r5, [r4, #0]
 80083c8:	6909      	ldr	r1, [r1, #16]
 80083ca:	eba5 0901 	sub.w	r9, r5, r1
 80083ce:	6965      	ldr	r5, [r4, #20]
 80083d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d8:	3301      	adds	r3, #1
 80083da:	444b      	add	r3, r9
 80083dc:	106d      	asrs	r5, r5, #1
 80083de:	429d      	cmp	r5, r3
 80083e0:	bf38      	it	cc
 80083e2:	461d      	movcc	r5, r3
 80083e4:	0553      	lsls	r3, r2, #21
 80083e6:	d531      	bpl.n	800844c <__ssputs_r+0xa0>
 80083e8:	4629      	mov	r1, r5
 80083ea:	f000 fb63 	bl	8008ab4 <_malloc_r>
 80083ee:	4606      	mov	r6, r0
 80083f0:	b950      	cbnz	r0, 8008408 <__ssputs_r+0x5c>
 80083f2:	230c      	movs	r3, #12
 80083f4:	f8ca 3000 	str.w	r3, [sl]
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	6921      	ldr	r1, [r4, #16]
 800840a:	464a      	mov	r2, r9
 800840c:	f000 fabe 	bl	800898c <memcpy>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	6126      	str	r6, [r4, #16]
 800841e:	6165      	str	r5, [r4, #20]
 8008420:	444e      	add	r6, r9
 8008422:	eba5 0509 	sub.w	r5, r5, r9
 8008426:	6026      	str	r6, [r4, #0]
 8008428:	60a5      	str	r5, [r4, #8]
 800842a:	463e      	mov	r6, r7
 800842c:	42be      	cmp	r6, r7
 800842e:	d900      	bls.n	8008432 <__ssputs_r+0x86>
 8008430:	463e      	mov	r6, r7
 8008432:	6820      	ldr	r0, [r4, #0]
 8008434:	4632      	mov	r2, r6
 8008436:	4641      	mov	r1, r8
 8008438:	f000 fab6 	bl	80089a8 <memmove>
 800843c:	68a3      	ldr	r3, [r4, #8]
 800843e:	1b9b      	subs	r3, r3, r6
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	4433      	add	r3, r6
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	2000      	movs	r0, #0
 800844a:	e7db      	b.n	8008404 <__ssputs_r+0x58>
 800844c:	462a      	mov	r2, r5
 800844e:	f000 fba5 	bl	8008b9c <_realloc_r>
 8008452:	4606      	mov	r6, r0
 8008454:	2800      	cmp	r0, #0
 8008456:	d1e1      	bne.n	800841c <__ssputs_r+0x70>
 8008458:	6921      	ldr	r1, [r4, #16]
 800845a:	4650      	mov	r0, sl
 800845c:	f000 fabe 	bl	80089dc <_free_r>
 8008460:	e7c7      	b.n	80083f2 <__ssputs_r+0x46>
	...

08008464 <_svfiprintf_r>:
 8008464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008468:	4698      	mov	r8, r3
 800846a:	898b      	ldrh	r3, [r1, #12]
 800846c:	061b      	lsls	r3, r3, #24
 800846e:	b09d      	sub	sp, #116	; 0x74
 8008470:	4607      	mov	r7, r0
 8008472:	460d      	mov	r5, r1
 8008474:	4614      	mov	r4, r2
 8008476:	d50e      	bpl.n	8008496 <_svfiprintf_r+0x32>
 8008478:	690b      	ldr	r3, [r1, #16]
 800847a:	b963      	cbnz	r3, 8008496 <_svfiprintf_r+0x32>
 800847c:	2140      	movs	r1, #64	; 0x40
 800847e:	f000 fb19 	bl	8008ab4 <_malloc_r>
 8008482:	6028      	str	r0, [r5, #0]
 8008484:	6128      	str	r0, [r5, #16]
 8008486:	b920      	cbnz	r0, 8008492 <_svfiprintf_r+0x2e>
 8008488:	230c      	movs	r3, #12
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	e0d1      	b.n	8008636 <_svfiprintf_r+0x1d2>
 8008492:	2340      	movs	r3, #64	; 0x40
 8008494:	616b      	str	r3, [r5, #20]
 8008496:	2300      	movs	r3, #0
 8008498:	9309      	str	r3, [sp, #36]	; 0x24
 800849a:	2320      	movs	r3, #32
 800849c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a4:	2330      	movs	r3, #48	; 0x30
 80084a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008650 <_svfiprintf_r+0x1ec>
 80084aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ae:	f04f 0901 	mov.w	r9, #1
 80084b2:	4623      	mov	r3, r4
 80084b4:	469a      	mov	sl, r3
 80084b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ba:	b10a      	cbz	r2, 80084c0 <_svfiprintf_r+0x5c>
 80084bc:	2a25      	cmp	r2, #37	; 0x25
 80084be:	d1f9      	bne.n	80084b4 <_svfiprintf_r+0x50>
 80084c0:	ebba 0b04 	subs.w	fp, sl, r4
 80084c4:	d00b      	beq.n	80084de <_svfiprintf_r+0x7a>
 80084c6:	465b      	mov	r3, fp
 80084c8:	4622      	mov	r2, r4
 80084ca:	4629      	mov	r1, r5
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff ff6d 	bl	80083ac <__ssputs_r>
 80084d2:	3001      	adds	r0, #1
 80084d4:	f000 80aa 	beq.w	800862c <_svfiprintf_r+0x1c8>
 80084d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084da:	445a      	add	r2, fp
 80084dc:	9209      	str	r2, [sp, #36]	; 0x24
 80084de:	f89a 3000 	ldrb.w	r3, [sl]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80a2 	beq.w	800862c <_svfiprintf_r+0x1c8>
 80084e8:	2300      	movs	r3, #0
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f2:	f10a 0a01 	add.w	sl, sl, #1
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	9307      	str	r3, [sp, #28]
 80084fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008500:	4654      	mov	r4, sl
 8008502:	2205      	movs	r2, #5
 8008504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008508:	4851      	ldr	r0, [pc, #324]	; (8008650 <_svfiprintf_r+0x1ec>)
 800850a:	f7f7 fe61 	bl	80001d0 <memchr>
 800850e:	9a04      	ldr	r2, [sp, #16]
 8008510:	b9d8      	cbnz	r0, 800854a <_svfiprintf_r+0xe6>
 8008512:	06d0      	lsls	r0, r2, #27
 8008514:	bf44      	itt	mi
 8008516:	2320      	movmi	r3, #32
 8008518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800851c:	0711      	lsls	r1, r2, #28
 800851e:	bf44      	itt	mi
 8008520:	232b      	movmi	r3, #43	; 0x2b
 8008522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008526:	f89a 3000 	ldrb.w	r3, [sl]
 800852a:	2b2a      	cmp	r3, #42	; 0x2a
 800852c:	d015      	beq.n	800855a <_svfiprintf_r+0xf6>
 800852e:	9a07      	ldr	r2, [sp, #28]
 8008530:	4654      	mov	r4, sl
 8008532:	2000      	movs	r0, #0
 8008534:	f04f 0c0a 	mov.w	ip, #10
 8008538:	4621      	mov	r1, r4
 800853a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800853e:	3b30      	subs	r3, #48	; 0x30
 8008540:	2b09      	cmp	r3, #9
 8008542:	d94e      	bls.n	80085e2 <_svfiprintf_r+0x17e>
 8008544:	b1b0      	cbz	r0, 8008574 <_svfiprintf_r+0x110>
 8008546:	9207      	str	r2, [sp, #28]
 8008548:	e014      	b.n	8008574 <_svfiprintf_r+0x110>
 800854a:	eba0 0308 	sub.w	r3, r0, r8
 800854e:	fa09 f303 	lsl.w	r3, r9, r3
 8008552:	4313      	orrs	r3, r2
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	46a2      	mov	sl, r4
 8008558:	e7d2      	b.n	8008500 <_svfiprintf_r+0x9c>
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	1d19      	adds	r1, r3, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	9103      	str	r1, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfbb      	ittet	lt
 8008566:	425b      	neglt	r3, r3
 8008568:	f042 0202 	orrlt.w	r2, r2, #2
 800856c:	9307      	strge	r3, [sp, #28]
 800856e:	9307      	strlt	r3, [sp, #28]
 8008570:	bfb8      	it	lt
 8008572:	9204      	strlt	r2, [sp, #16]
 8008574:	7823      	ldrb	r3, [r4, #0]
 8008576:	2b2e      	cmp	r3, #46	; 0x2e
 8008578:	d10c      	bne.n	8008594 <_svfiprintf_r+0x130>
 800857a:	7863      	ldrb	r3, [r4, #1]
 800857c:	2b2a      	cmp	r3, #42	; 0x2a
 800857e:	d135      	bne.n	80085ec <_svfiprintf_r+0x188>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	9203      	str	r2, [sp, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	bfb8      	it	lt
 800858c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008590:	3402      	adds	r4, #2
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008660 <_svfiprintf_r+0x1fc>
 8008598:	7821      	ldrb	r1, [r4, #0]
 800859a:	2203      	movs	r2, #3
 800859c:	4650      	mov	r0, sl
 800859e:	f7f7 fe17 	bl	80001d0 <memchr>
 80085a2:	b140      	cbz	r0, 80085b6 <_svfiprintf_r+0x152>
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	eba0 000a 	sub.w	r0, r0, sl
 80085aa:	fa03 f000 	lsl.w	r0, r3, r0
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	4303      	orrs	r3, r0
 80085b2:	3401      	adds	r4, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ba:	4826      	ldr	r0, [pc, #152]	; (8008654 <_svfiprintf_r+0x1f0>)
 80085bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c0:	2206      	movs	r2, #6
 80085c2:	f7f7 fe05 	bl	80001d0 <memchr>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d038      	beq.n	800863c <_svfiprintf_r+0x1d8>
 80085ca:	4b23      	ldr	r3, [pc, #140]	; (8008658 <_svfiprintf_r+0x1f4>)
 80085cc:	bb1b      	cbnz	r3, 8008616 <_svfiprintf_r+0x1b2>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	3307      	adds	r3, #7
 80085d2:	f023 0307 	bic.w	r3, r3, #7
 80085d6:	3308      	adds	r3, #8
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085dc:	4433      	add	r3, r6
 80085de:	9309      	str	r3, [sp, #36]	; 0x24
 80085e0:	e767      	b.n	80084b2 <_svfiprintf_r+0x4e>
 80085e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e6:	460c      	mov	r4, r1
 80085e8:	2001      	movs	r0, #1
 80085ea:	e7a5      	b.n	8008538 <_svfiprintf_r+0xd4>
 80085ec:	2300      	movs	r3, #0
 80085ee:	3401      	adds	r4, #1
 80085f0:	9305      	str	r3, [sp, #20]
 80085f2:	4619      	mov	r1, r3
 80085f4:	f04f 0c0a 	mov.w	ip, #10
 80085f8:	4620      	mov	r0, r4
 80085fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085fe:	3a30      	subs	r2, #48	; 0x30
 8008600:	2a09      	cmp	r2, #9
 8008602:	d903      	bls.n	800860c <_svfiprintf_r+0x1a8>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0c5      	beq.n	8008594 <_svfiprintf_r+0x130>
 8008608:	9105      	str	r1, [sp, #20]
 800860a:	e7c3      	b.n	8008594 <_svfiprintf_r+0x130>
 800860c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008610:	4604      	mov	r4, r0
 8008612:	2301      	movs	r3, #1
 8008614:	e7f0      	b.n	80085f8 <_svfiprintf_r+0x194>
 8008616:	ab03      	add	r3, sp, #12
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	462a      	mov	r2, r5
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <_svfiprintf_r+0x1f8>)
 800861e:	a904      	add	r1, sp, #16
 8008620:	4638      	mov	r0, r7
 8008622:	f3af 8000 	nop.w
 8008626:	1c42      	adds	r2, r0, #1
 8008628:	4606      	mov	r6, r0
 800862a:	d1d6      	bne.n	80085da <_svfiprintf_r+0x176>
 800862c:	89ab      	ldrh	r3, [r5, #12]
 800862e:	065b      	lsls	r3, r3, #25
 8008630:	f53f af2c 	bmi.w	800848c <_svfiprintf_r+0x28>
 8008634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008636:	b01d      	add	sp, #116	; 0x74
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	ab03      	add	r3, sp, #12
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	462a      	mov	r2, r5
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <_svfiprintf_r+0x1f8>)
 8008644:	a904      	add	r1, sp, #16
 8008646:	4638      	mov	r0, r7
 8008648:	f000 f87a 	bl	8008740 <_printf_i>
 800864c:	e7eb      	b.n	8008626 <_svfiprintf_r+0x1c2>
 800864e:	bf00      	nop
 8008650:	0800a1dc 	.word	0x0800a1dc
 8008654:	0800a1e6 	.word	0x0800a1e6
 8008658:	00000000 	.word	0x00000000
 800865c:	080083ad 	.word	0x080083ad
 8008660:	0800a1e2 	.word	0x0800a1e2

08008664 <_printf_common>:
 8008664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	4616      	mov	r6, r2
 800866a:	4699      	mov	r9, r3
 800866c:	688a      	ldr	r2, [r1, #8]
 800866e:	690b      	ldr	r3, [r1, #16]
 8008670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008674:	4293      	cmp	r3, r2
 8008676:	bfb8      	it	lt
 8008678:	4613      	movlt	r3, r2
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008680:	4607      	mov	r7, r0
 8008682:	460c      	mov	r4, r1
 8008684:	b10a      	cbz	r2, 800868a <_printf_common+0x26>
 8008686:	3301      	adds	r3, #1
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	0699      	lsls	r1, r3, #26
 800868e:	bf42      	ittt	mi
 8008690:	6833      	ldrmi	r3, [r6, #0]
 8008692:	3302      	addmi	r3, #2
 8008694:	6033      	strmi	r3, [r6, #0]
 8008696:	6825      	ldr	r5, [r4, #0]
 8008698:	f015 0506 	ands.w	r5, r5, #6
 800869c:	d106      	bne.n	80086ac <_printf_common+0x48>
 800869e:	f104 0a19 	add.w	sl, r4, #25
 80086a2:	68e3      	ldr	r3, [r4, #12]
 80086a4:	6832      	ldr	r2, [r6, #0]
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	dc26      	bgt.n	80086fa <_printf_common+0x96>
 80086ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b0:	1e13      	subs	r3, r2, #0
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	bf18      	it	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	0692      	lsls	r2, r2, #26
 80086ba:	d42b      	bmi.n	8008714 <_printf_common+0xb0>
 80086bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c0:	4649      	mov	r1, r9
 80086c2:	4638      	mov	r0, r7
 80086c4:	47c0      	blx	r8
 80086c6:	3001      	adds	r0, #1
 80086c8:	d01e      	beq.n	8008708 <_printf_common+0xa4>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	68e5      	ldr	r5, [r4, #12]
 80086ce:	6832      	ldr	r2, [r6, #0]
 80086d0:	f003 0306 	and.w	r3, r3, #6
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	bf08      	it	eq
 80086d8:	1aad      	subeq	r5, r5, r2
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	6922      	ldr	r2, [r4, #16]
 80086de:	bf0c      	ite	eq
 80086e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e4:	2500      	movne	r5, #0
 80086e6:	4293      	cmp	r3, r2
 80086e8:	bfc4      	itt	gt
 80086ea:	1a9b      	subgt	r3, r3, r2
 80086ec:	18ed      	addgt	r5, r5, r3
 80086ee:	2600      	movs	r6, #0
 80086f0:	341a      	adds	r4, #26
 80086f2:	42b5      	cmp	r5, r6
 80086f4:	d11a      	bne.n	800872c <_printf_common+0xc8>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e008      	b.n	800870c <_printf_common+0xa8>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4652      	mov	r2, sl
 80086fe:	4649      	mov	r1, r9
 8008700:	4638      	mov	r0, r7
 8008702:	47c0      	blx	r8
 8008704:	3001      	adds	r0, #1
 8008706:	d103      	bne.n	8008710 <_printf_common+0xac>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	3501      	adds	r5, #1
 8008712:	e7c6      	b.n	80086a2 <_printf_common+0x3e>
 8008714:	18e1      	adds	r1, r4, r3
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	2030      	movs	r0, #48	; 0x30
 800871a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871e:	4422      	add	r2, r4
 8008720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008728:	3302      	adds	r3, #2
 800872a:	e7c7      	b.n	80086bc <_printf_common+0x58>
 800872c:	2301      	movs	r3, #1
 800872e:	4622      	mov	r2, r4
 8008730:	4649      	mov	r1, r9
 8008732:	4638      	mov	r0, r7
 8008734:	47c0      	blx	r8
 8008736:	3001      	adds	r0, #1
 8008738:	d0e6      	beq.n	8008708 <_printf_common+0xa4>
 800873a:	3601      	adds	r6, #1
 800873c:	e7d9      	b.n	80086f2 <_printf_common+0x8e>
	...

08008740 <_printf_i>:
 8008740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	7e0f      	ldrb	r7, [r1, #24]
 8008746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008748:	2f78      	cmp	r7, #120	; 0x78
 800874a:	4691      	mov	r9, r2
 800874c:	4680      	mov	r8, r0
 800874e:	460c      	mov	r4, r1
 8008750:	469a      	mov	sl, r3
 8008752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008756:	d807      	bhi.n	8008768 <_printf_i+0x28>
 8008758:	2f62      	cmp	r7, #98	; 0x62
 800875a:	d80a      	bhi.n	8008772 <_printf_i+0x32>
 800875c:	2f00      	cmp	r7, #0
 800875e:	f000 80d8 	beq.w	8008912 <_printf_i+0x1d2>
 8008762:	2f58      	cmp	r7, #88	; 0x58
 8008764:	f000 80a3 	beq.w	80088ae <_printf_i+0x16e>
 8008768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800876c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008770:	e03a      	b.n	80087e8 <_printf_i+0xa8>
 8008772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008776:	2b15      	cmp	r3, #21
 8008778:	d8f6      	bhi.n	8008768 <_printf_i+0x28>
 800877a:	a101      	add	r1, pc, #4	; (adr r1, 8008780 <_printf_i+0x40>)
 800877c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087ed 	.word	0x080087ed
 8008788:	08008769 	.word	0x08008769
 800878c:	08008769 	.word	0x08008769
 8008790:	08008769 	.word	0x08008769
 8008794:	08008769 	.word	0x08008769
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008769 	.word	0x08008769
 80087a0:	08008769 	.word	0x08008769
 80087a4:	08008769 	.word	0x08008769
 80087a8:	08008769 	.word	0x08008769
 80087ac:	080088f9 	.word	0x080088f9
 80087b0:	0800881d 	.word	0x0800881d
 80087b4:	080088db 	.word	0x080088db
 80087b8:	08008769 	.word	0x08008769
 80087bc:	08008769 	.word	0x08008769
 80087c0:	0800891b 	.word	0x0800891b
 80087c4:	08008769 	.word	0x08008769
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	08008769 	.word	0x08008769
 80087d0:	08008769 	.word	0x08008769
 80087d4:	080088e3 	.word	0x080088e3
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	602a      	str	r2, [r5, #0]
 80087e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0a3      	b.n	8008934 <_printf_i+0x1f4>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	6829      	ldr	r1, [r5, #0]
 80087f0:	0606      	lsls	r6, r0, #24
 80087f2:	f101 0304 	add.w	r3, r1, #4
 80087f6:	d50a      	bpl.n	800880e <_printf_i+0xce>
 80087f8:	680e      	ldr	r6, [r1, #0]
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	da03      	bge.n	8008808 <_printf_i+0xc8>
 8008800:	232d      	movs	r3, #45	; 0x2d
 8008802:	4276      	negs	r6, r6
 8008804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008808:	485e      	ldr	r0, [pc, #376]	; (8008984 <_printf_i+0x244>)
 800880a:	230a      	movs	r3, #10
 800880c:	e019      	b.n	8008842 <_printf_i+0x102>
 800880e:	680e      	ldr	r6, [r1, #0]
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008816:	bf18      	it	ne
 8008818:	b236      	sxthne	r6, r6
 800881a:	e7ef      	b.n	80087fc <_printf_i+0xbc>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	6029      	str	r1, [r5, #0]
 8008824:	0601      	lsls	r1, r0, #24
 8008826:	d501      	bpl.n	800882c <_printf_i+0xec>
 8008828:	681e      	ldr	r6, [r3, #0]
 800882a:	e002      	b.n	8008832 <_printf_i+0xf2>
 800882c:	0646      	lsls	r6, r0, #25
 800882e:	d5fb      	bpl.n	8008828 <_printf_i+0xe8>
 8008830:	881e      	ldrh	r6, [r3, #0]
 8008832:	4854      	ldr	r0, [pc, #336]	; (8008984 <_printf_i+0x244>)
 8008834:	2f6f      	cmp	r7, #111	; 0x6f
 8008836:	bf0c      	ite	eq
 8008838:	2308      	moveq	r3, #8
 800883a:	230a      	movne	r3, #10
 800883c:	2100      	movs	r1, #0
 800883e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008842:	6865      	ldr	r5, [r4, #4]
 8008844:	60a5      	str	r5, [r4, #8]
 8008846:	2d00      	cmp	r5, #0
 8008848:	bfa2      	ittt	ge
 800884a:	6821      	ldrge	r1, [r4, #0]
 800884c:	f021 0104 	bicge.w	r1, r1, #4
 8008850:	6021      	strge	r1, [r4, #0]
 8008852:	b90e      	cbnz	r6, 8008858 <_printf_i+0x118>
 8008854:	2d00      	cmp	r5, #0
 8008856:	d04d      	beq.n	80088f4 <_printf_i+0x1b4>
 8008858:	4615      	mov	r5, r2
 800885a:	fbb6 f1f3 	udiv	r1, r6, r3
 800885e:	fb03 6711 	mls	r7, r3, r1, r6
 8008862:	5dc7      	ldrb	r7, [r0, r7]
 8008864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008868:	4637      	mov	r7, r6
 800886a:	42bb      	cmp	r3, r7
 800886c:	460e      	mov	r6, r1
 800886e:	d9f4      	bls.n	800885a <_printf_i+0x11a>
 8008870:	2b08      	cmp	r3, #8
 8008872:	d10b      	bne.n	800888c <_printf_i+0x14c>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	07de      	lsls	r6, r3, #31
 8008878:	d508      	bpl.n	800888c <_printf_i+0x14c>
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	6861      	ldr	r1, [r4, #4]
 800887e:	4299      	cmp	r1, r3
 8008880:	bfde      	ittt	le
 8008882:	2330      	movle	r3, #48	; 0x30
 8008884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800888c:	1b52      	subs	r2, r2, r5
 800888e:	6122      	str	r2, [r4, #16]
 8008890:	f8cd a000 	str.w	sl, [sp]
 8008894:	464b      	mov	r3, r9
 8008896:	aa03      	add	r2, sp, #12
 8008898:	4621      	mov	r1, r4
 800889a:	4640      	mov	r0, r8
 800889c:	f7ff fee2 	bl	8008664 <_printf_common>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d14c      	bne.n	800893e <_printf_i+0x1fe>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b004      	add	sp, #16
 80088aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ae:	4835      	ldr	r0, [pc, #212]	; (8008984 <_printf_i+0x244>)
 80088b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088b4:	6829      	ldr	r1, [r5, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088bc:	6029      	str	r1, [r5, #0]
 80088be:	061d      	lsls	r5, r3, #24
 80088c0:	d514      	bpl.n	80088ec <_printf_i+0x1ac>
 80088c2:	07df      	lsls	r7, r3, #31
 80088c4:	bf44      	itt	mi
 80088c6:	f043 0320 	orrmi.w	r3, r3, #32
 80088ca:	6023      	strmi	r3, [r4, #0]
 80088cc:	b91e      	cbnz	r6, 80088d6 <_printf_i+0x196>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	f023 0320 	bic.w	r3, r3, #32
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	2310      	movs	r3, #16
 80088d8:	e7b0      	b.n	800883c <_printf_i+0xfc>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f043 0320 	orr.w	r3, r3, #32
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2378      	movs	r3, #120	; 0x78
 80088e4:	4828      	ldr	r0, [pc, #160]	; (8008988 <_printf_i+0x248>)
 80088e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ea:	e7e3      	b.n	80088b4 <_printf_i+0x174>
 80088ec:	0659      	lsls	r1, r3, #25
 80088ee:	bf48      	it	mi
 80088f0:	b2b6      	uxthmi	r6, r6
 80088f2:	e7e6      	b.n	80088c2 <_printf_i+0x182>
 80088f4:	4615      	mov	r5, r2
 80088f6:	e7bb      	b.n	8008870 <_printf_i+0x130>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	6826      	ldr	r6, [r4, #0]
 80088fc:	6961      	ldr	r1, [r4, #20]
 80088fe:	1d18      	adds	r0, r3, #4
 8008900:	6028      	str	r0, [r5, #0]
 8008902:	0635      	lsls	r5, r6, #24
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	d501      	bpl.n	800890c <_printf_i+0x1cc>
 8008908:	6019      	str	r1, [r3, #0]
 800890a:	e002      	b.n	8008912 <_printf_i+0x1d2>
 800890c:	0670      	lsls	r0, r6, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0x1c8>
 8008910:	8019      	strh	r1, [r3, #0]
 8008912:	2300      	movs	r3, #0
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	4615      	mov	r5, r2
 8008918:	e7ba      	b.n	8008890 <_printf_i+0x150>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	602a      	str	r2, [r5, #0]
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	6862      	ldr	r2, [r4, #4]
 8008924:	2100      	movs	r1, #0
 8008926:	4628      	mov	r0, r5
 8008928:	f7f7 fc52 	bl	80001d0 <memchr>
 800892c:	b108      	cbz	r0, 8008932 <_printf_i+0x1f2>
 800892e:	1b40      	subs	r0, r0, r5
 8008930:	6060      	str	r0, [r4, #4]
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	2300      	movs	r3, #0
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	e7a8      	b.n	8008890 <_printf_i+0x150>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	462a      	mov	r2, r5
 8008942:	4649      	mov	r1, r9
 8008944:	4640      	mov	r0, r8
 8008946:	47d0      	blx	sl
 8008948:	3001      	adds	r0, #1
 800894a:	d0ab      	beq.n	80088a4 <_printf_i+0x164>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	079b      	lsls	r3, r3, #30
 8008950:	d413      	bmi.n	800897a <_printf_i+0x23a>
 8008952:	68e0      	ldr	r0, [r4, #12]
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	4298      	cmp	r0, r3
 8008958:	bfb8      	it	lt
 800895a:	4618      	movlt	r0, r3
 800895c:	e7a4      	b.n	80088a8 <_printf_i+0x168>
 800895e:	2301      	movs	r3, #1
 8008960:	4632      	mov	r2, r6
 8008962:	4649      	mov	r1, r9
 8008964:	4640      	mov	r0, r8
 8008966:	47d0      	blx	sl
 8008968:	3001      	adds	r0, #1
 800896a:	d09b      	beq.n	80088a4 <_printf_i+0x164>
 800896c:	3501      	adds	r5, #1
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	9903      	ldr	r1, [sp, #12]
 8008972:	1a5b      	subs	r3, r3, r1
 8008974:	42ab      	cmp	r3, r5
 8008976:	dcf2      	bgt.n	800895e <_printf_i+0x21e>
 8008978:	e7eb      	b.n	8008952 <_printf_i+0x212>
 800897a:	2500      	movs	r5, #0
 800897c:	f104 0619 	add.w	r6, r4, #25
 8008980:	e7f5      	b.n	800896e <_printf_i+0x22e>
 8008982:	bf00      	nop
 8008984:	0800a1ed 	.word	0x0800a1ed
 8008988:	0800a1fe 	.word	0x0800a1fe

0800898c <memcpy>:
 800898c:	440a      	add	r2, r1
 800898e:	4291      	cmp	r1, r2
 8008990:	f100 33ff 	add.w	r3, r0, #4294967295
 8008994:	d100      	bne.n	8008998 <memcpy+0xc>
 8008996:	4770      	bx	lr
 8008998:	b510      	push	{r4, lr}
 800899a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a2:	4291      	cmp	r1, r2
 80089a4:	d1f9      	bne.n	800899a <memcpy+0xe>
 80089a6:	bd10      	pop	{r4, pc}

080089a8 <memmove>:
 80089a8:	4288      	cmp	r0, r1
 80089aa:	b510      	push	{r4, lr}
 80089ac:	eb01 0402 	add.w	r4, r1, r2
 80089b0:	d902      	bls.n	80089b8 <memmove+0x10>
 80089b2:	4284      	cmp	r4, r0
 80089b4:	4623      	mov	r3, r4
 80089b6:	d807      	bhi.n	80089c8 <memmove+0x20>
 80089b8:	1e43      	subs	r3, r0, #1
 80089ba:	42a1      	cmp	r1, r4
 80089bc:	d008      	beq.n	80089d0 <memmove+0x28>
 80089be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c6:	e7f8      	b.n	80089ba <memmove+0x12>
 80089c8:	4402      	add	r2, r0
 80089ca:	4601      	mov	r1, r0
 80089cc:	428a      	cmp	r2, r1
 80089ce:	d100      	bne.n	80089d2 <memmove+0x2a>
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089da:	e7f7      	b.n	80089cc <memmove+0x24>

080089dc <_free_r>:
 80089dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089de:	2900      	cmp	r1, #0
 80089e0:	d044      	beq.n	8008a6c <_free_r+0x90>
 80089e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e6:	9001      	str	r0, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f1a1 0404 	sub.w	r4, r1, #4
 80089ee:	bfb8      	it	lt
 80089f0:	18e4      	addlt	r4, r4, r3
 80089f2:	f000 f913 	bl	8008c1c <__malloc_lock>
 80089f6:	4a1e      	ldr	r2, [pc, #120]	; (8008a70 <_free_r+0x94>)
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	b933      	cbnz	r3, 8008a0c <_free_r+0x30>
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	6014      	str	r4, [r2, #0]
 8008a02:	b003      	add	sp, #12
 8008a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a08:	f000 b90e 	b.w	8008c28 <__malloc_unlock>
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d908      	bls.n	8008a22 <_free_r+0x46>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf01      	itttt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	1949      	addeq	r1, r1, r5
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	e7ed      	b.n	80089fe <_free_r+0x22>
 8008a22:	461a      	mov	r2, r3
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	b10b      	cbz	r3, 8008a2c <_free_r+0x50>
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d9fa      	bls.n	8008a22 <_free_r+0x46>
 8008a2c:	6811      	ldr	r1, [r2, #0]
 8008a2e:	1855      	adds	r5, r2, r1
 8008a30:	42a5      	cmp	r5, r4
 8008a32:	d10b      	bne.n	8008a4c <_free_r+0x70>
 8008a34:	6824      	ldr	r4, [r4, #0]
 8008a36:	4421      	add	r1, r4
 8008a38:	1854      	adds	r4, r2, r1
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	d1e0      	bne.n	8008a02 <_free_r+0x26>
 8008a40:	681c      	ldr	r4, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	6053      	str	r3, [r2, #4]
 8008a46:	4421      	add	r1, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	e7da      	b.n	8008a02 <_free_r+0x26>
 8008a4c:	d902      	bls.n	8008a54 <_free_r+0x78>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	e7d6      	b.n	8008a02 <_free_r+0x26>
 8008a54:	6825      	ldr	r5, [r4, #0]
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf04      	itt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	bf04      	itt	eq
 8008a64:	1949      	addeq	r1, r1, r5
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	6054      	str	r4, [r2, #4]
 8008a6a:	e7ca      	b.n	8008a02 <_free_r+0x26>
 8008a6c:	b003      	add	sp, #12
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	20001110 	.word	0x20001110

08008a74 <sbrk_aligned>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4e0e      	ldr	r6, [pc, #56]	; (8008ab0 <sbrk_aligned+0x3c>)
 8008a78:	460c      	mov	r4, r1
 8008a7a:	6831      	ldr	r1, [r6, #0]
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b911      	cbnz	r1, 8008a86 <sbrk_aligned+0x12>
 8008a80:	f000 f8bc 	bl	8008bfc <_sbrk_r>
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f8b7 	bl	8008bfc <_sbrk_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d00a      	beq.n	8008aa8 <sbrk_aligned+0x34>
 8008a92:	1cc4      	adds	r4, r0, #3
 8008a94:	f024 0403 	bic.w	r4, r4, #3
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d007      	beq.n	8008aac <sbrk_aligned+0x38>
 8008a9c:	1a21      	subs	r1, r4, r0
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 f8ac 	bl	8008bfc <_sbrk_r>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d101      	bne.n	8008aac <sbrk_aligned+0x38>
 8008aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	20001114 	.word	0x20001114

08008ab4 <_malloc_r>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	1ccd      	adds	r5, r1, #3
 8008aba:	f025 0503 	bic.w	r5, r5, #3
 8008abe:	3508      	adds	r5, #8
 8008ac0:	2d0c      	cmp	r5, #12
 8008ac2:	bf38      	it	cc
 8008ac4:	250c      	movcc	r5, #12
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	4607      	mov	r7, r0
 8008aca:	db01      	blt.n	8008ad0 <_malloc_r+0x1c>
 8008acc:	42a9      	cmp	r1, r5
 8008ace:	d905      	bls.n	8008adc <_malloc_r+0x28>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	4e2e      	ldr	r6, [pc, #184]	; (8008b98 <_malloc_r+0xe4>)
 8008ade:	f000 f89d 	bl	8008c1c <__malloc_lock>
 8008ae2:	6833      	ldr	r3, [r6, #0]
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	bb34      	cbnz	r4, 8008b36 <_malloc_r+0x82>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4638      	mov	r0, r7
 8008aec:	f7ff ffc2 	bl	8008a74 <sbrk_aligned>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	4604      	mov	r4, r0
 8008af4:	d14d      	bne.n	8008b92 <_malloc_r+0xde>
 8008af6:	6834      	ldr	r4, [r6, #0]
 8008af8:	4626      	mov	r6, r4
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d140      	bne.n	8008b80 <_malloc_r+0xcc>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4638      	mov	r0, r7
 8008b04:	eb04 0803 	add.w	r8, r4, r3
 8008b08:	f000 f878 	bl	8008bfc <_sbrk_r>
 8008b0c:	4580      	cmp	r8, r0
 8008b0e:	d13a      	bne.n	8008b86 <_malloc_r+0xd2>
 8008b10:	6821      	ldr	r1, [r4, #0]
 8008b12:	3503      	adds	r5, #3
 8008b14:	1a6d      	subs	r5, r5, r1
 8008b16:	f025 0503 	bic.w	r5, r5, #3
 8008b1a:	3508      	adds	r5, #8
 8008b1c:	2d0c      	cmp	r5, #12
 8008b1e:	bf38      	it	cc
 8008b20:	250c      	movcc	r5, #12
 8008b22:	4629      	mov	r1, r5
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff ffa5 	bl	8008a74 <sbrk_aligned>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d02b      	beq.n	8008b86 <_malloc_r+0xd2>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	442b      	add	r3, r5
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	e00e      	b.n	8008b54 <_malloc_r+0xa0>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	1b52      	subs	r2, r2, r5
 8008b3a:	d41e      	bmi.n	8008b7a <_malloc_r+0xc6>
 8008b3c:	2a0b      	cmp	r2, #11
 8008b3e:	d916      	bls.n	8008b6e <_malloc_r+0xba>
 8008b40:	1961      	adds	r1, r4, r5
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	bf18      	it	ne
 8008b48:	6059      	strne	r1, [r3, #4]
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	bf08      	it	eq
 8008b4e:	6031      	streq	r1, [r6, #0]
 8008b50:	5162      	str	r2, [r4, r5]
 8008b52:	604b      	str	r3, [r1, #4]
 8008b54:	4638      	mov	r0, r7
 8008b56:	f104 060b 	add.w	r6, r4, #11
 8008b5a:	f000 f865 	bl	8008c28 <__malloc_unlock>
 8008b5e:	f026 0607 	bic.w	r6, r6, #7
 8008b62:	1d23      	adds	r3, r4, #4
 8008b64:	1af2      	subs	r2, r6, r3
 8008b66:	d0b6      	beq.n	8008ad6 <_malloc_r+0x22>
 8008b68:	1b9b      	subs	r3, r3, r6
 8008b6a:	50a3      	str	r3, [r4, r2]
 8008b6c:	e7b3      	b.n	8008ad6 <_malloc_r+0x22>
 8008b6e:	6862      	ldr	r2, [r4, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	bf0c      	ite	eq
 8008b74:	6032      	streq	r2, [r6, #0]
 8008b76:	605a      	strne	r2, [r3, #4]
 8008b78:	e7ec      	b.n	8008b54 <_malloc_r+0xa0>
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	6864      	ldr	r4, [r4, #4]
 8008b7e:	e7b2      	b.n	8008ae6 <_malloc_r+0x32>
 8008b80:	4634      	mov	r4, r6
 8008b82:	6876      	ldr	r6, [r6, #4]
 8008b84:	e7b9      	b.n	8008afa <_malloc_r+0x46>
 8008b86:	230c      	movs	r3, #12
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f000 f84c 	bl	8008c28 <__malloc_unlock>
 8008b90:	e7a1      	b.n	8008ad6 <_malloc_r+0x22>
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	e7de      	b.n	8008b54 <_malloc_r+0xa0>
 8008b96:	bf00      	nop
 8008b98:	20001110 	.word	0x20001110

08008b9c <_realloc_r>:
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	b921      	cbnz	r1, 8008bb2 <_realloc_r+0x16>
 8008ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bac:	4611      	mov	r1, r2
 8008bae:	f7ff bf81 	b.w	8008ab4 <_malloc_r>
 8008bb2:	b92a      	cbnz	r2, 8008bc0 <_realloc_r+0x24>
 8008bb4:	f7ff ff12 	bl	80089dc <_free_r>
 8008bb8:	4625      	mov	r5, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	f000 f838 	bl	8008c34 <_malloc_usable_size_r>
 8008bc4:	4284      	cmp	r4, r0
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	d802      	bhi.n	8008bd0 <_realloc_r+0x34>
 8008bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bce:	d812      	bhi.n	8008bf6 <_realloc_r+0x5a>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f7ff ff6e 	bl	8008ab4 <_malloc_r>
 8008bd8:	4605      	mov	r5, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0ed      	beq.n	8008bba <_realloc_r+0x1e>
 8008bde:	42bc      	cmp	r4, r7
 8008be0:	4622      	mov	r2, r4
 8008be2:	4631      	mov	r1, r6
 8008be4:	bf28      	it	cs
 8008be6:	463a      	movcs	r2, r7
 8008be8:	f7ff fed0 	bl	800898c <memcpy>
 8008bec:	4631      	mov	r1, r6
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f7ff fef4 	bl	80089dc <_free_r>
 8008bf4:	e7e1      	b.n	8008bba <_realloc_r+0x1e>
 8008bf6:	4635      	mov	r5, r6
 8008bf8:	e7df      	b.n	8008bba <_realloc_r+0x1e>
	...

08008bfc <_sbrk_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d06      	ldr	r5, [pc, #24]	; (8008c18 <_sbrk_r+0x1c>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	602b      	str	r3, [r5, #0]
 8008c08:	f7f8 fd56 	bl	80016b8 <_sbrk>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_sbrk_r+0x1a>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_sbrk_r+0x1a>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20001118 	.word	0x20001118

08008c1c <__malloc_lock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__malloc_lock+0x8>)
 8008c1e:	f000 b811 	b.w	8008c44 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	2000111c 	.word	0x2000111c

08008c28 <__malloc_unlock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_unlock+0x8>)
 8008c2a:	f000 b80c 	b.w	8008c46 <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	2000111c 	.word	0x2000111c

08008c34 <_malloc_usable_size_r>:
 8008c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c38:	1f18      	subs	r0, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfbc      	itt	lt
 8008c3e:	580b      	ldrlt	r3, [r1, r0]
 8008c40:	18c0      	addlt	r0, r0, r3
 8008c42:	4770      	bx	lr

08008c44 <__retarget_lock_acquire_recursive>:
 8008c44:	4770      	bx	lr

08008c46 <__retarget_lock_release_recursive>:
 8008c46:	4770      	bx	lr

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
